{"total":77,"pageSize":10,"pageCount":8,"data":[{"title":"No PostCSS Config found in ...报错解决","slug":"No PostCSS Config found in报错解决","date":"2019-08-09T09:10:14.000Z","updated":"2021-04-19T06:44:39.037Z","comments":true,"path":"api/articles/No PostCSS Config found in报错解决.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png","content":"<p>【<strong>前情提要</strong>】日前本人将本地项目上传GitHub之后，然后再clone到本地，运行时报错：Error: No PostCSS Config found in…</p>\n<hr>\n<p>项目在本地打包运行的时候不报错，上传到 GitHub 之后，再 clone 到本地，执行安装依赖命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install</span><br></pre></td></tr></table></figure>\n<p>安装完依赖之后再执行编译命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>这个时候居然报错了，纳尼？以为是Github代码的问题，就重新操作两遍，依然还是报错。于是开始搜索解决办法，在项目根目录新建postcss.config.js文件，并对postcss进行配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123; </span><br><span class=\"line\">  plugins: &#123; </span><br><span class=\"line\">    &#39;autoprefixer&#39;: &#123;browsers: &#39;last 5 version&#39;&#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后测试，果然好了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>项目在本地运行时本来不报错的，但是为什么上传到 GitHub 之后，再 clone 下来，再运行就得单独写一个 postcss.config.js 的文件并配置一下呢？</p>\n<p>在npm上查到的postcss配置在webpack.config.js，postcss.config.js是针对webpack3.0做的特殊处理</p>\n<p>【小贴士】如果在国内执行npm install很慢的话，可以安装cnpm命令，使用淘宝镜像，速度贼快。cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm即可。但是cnpm 的仓库只是 npm 仓库的一个拷贝，它不承担 publish 工作，所以你用 cnpm publish 命令会执行失败的，另外不仅是 publish 会执行失败，其它的需要注册用户(npm adduser)、或者修改 package 状态等命令都无法用 cnpm。</p>\n<hr>\n<p><a href=\"http://npm.taobao.org/\">淘宝 NPM 镜像</a>：这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"node","path":"api/categories/node.json"}],"tags":[{"name":"node","path":"api/tags/node.json"},{"name":"github","path":"api/tags/github.json"}]},{"title":"Spring Boot Admin 的使用本地版","slug":"SpringBoot-Admin的使用本地版","date":"2019-08-09T09:07:34.000Z","updated":"2021-04-19T07:47:19.522Z","comments":true,"path":"api/articles/SpringBoot-Admin的使用本地版.json","excerpt":null,"keywords":"南国薏米","cover":"https://eelve.com/upload/2019/8/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png","content":"<p>【<strong>前情提要</strong>】Spring Boot Actuator 提供了对单个 Spring Boot 应用的监控，信息包含应用状态、内存、线程、堆栈等，比较全面的监控了 Spring Boot 应用的整个生命周期。但是这样监控也有一些问题：第一，所有的监控都需要调用固定的接口来查看，如果全面查看应用状态需要调用很多接口，并且接口返回的 JSON 信息不方便运营人员理解；第二，如果 Spring Boot 应用集群非常大，每个应用都需要调用不同的接口来查看监控信息，操作非常繁琐低效。在这样的背景下，就诞生了另外一个开源软件：<strong>Spring Boot Admin</strong>。</p>\n<hr>\n<h1 id=\"壹、什么是Spring-Boot-Admin\"><a href=\"#壹、什么是Spring-Boot-Admin\" class=\"headerlink\" title=\"壹、什么是Spring Boot Admin\"></a>壹、什么是Spring Boot Admin</h1><p>Spring Boot Admin 是一个管理和监控 Spring Boot 应用程序的开源软件，每个应用都认为是一个客户端，通过 HTTP 或者使用 Eureka 注册到 admin server 中进行展示，Spring Boot Admin UI 部分使用 Vue.js 将数据展示在前端。</p>\n<p>Spring Boot Admin 是一个针对 Spring Boot 的 Actuator 接口进行 UI 美化封装的监控工具，它可以在列表中浏览所有被监控 spring-boot 项目的基本信息、详细的 Health 信息、内存信息、JVM 信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改 logger 的 level。</p>\n<p>值得注意的是 Spring Boot Admin 并不是 Spring Boot 官方出品的开源软件，但是其软件质量和使用广泛度都非常的高，并且 Spring Boot Admin 会及时随着 Spring Boot 的更新而更新，当 Spring Boot 推出 2.X 版本时 Spring Boot Admin 也及时进行了更新。</p>\n<p>Spring Boot Admin 2.x 不仅是跟着支持了 Spring Boot 2.x，还在 1.x 的基础上进行了大量的更新和优化:</p>\n<pre><code>重新规划了项目依赖包，让项目中更方便的集成 Spring Boot Admin\n1.x 前端使用了 Angular.js，2.x 使用 Vue 对界面进行了重写，界面美观度提升幅度非常高\n提供了支持 Spring Cloud 的组件\n其他更新，具体参考：Changes with 2.x\n</code></pre>\n<p>Spring Boot Admin 分为服务端和客户端，服务端其实就是一个监控后台用来汇总展示所有的监控信息，客户端就是我们的应用，使用时需要先启动服务端，在启动客户端的时候打开 Actuator 的接口，并指向服务端的地址，这样服务端会定时读取相关信息以达到监控的目的。</p>\n<hr>\n<p>接下来演示如何使用 Spring Boot Admin 对 Spring Boot 应用进行监控。</p>\n<h1 id=\"贰、监控单体应用\"><a href=\"#贰、监控单体应用\" class=\"headerlink\" title=\"贰、监控单体应用\"></a>贰、监控单体应用</h1><p>先给大家展示如何使用 Spring Boot Admin 监控单个 Spring Boot 应用。</p>\n<h2 id=\"Admin-Server-端\"><a href=\"#Admin-Server-端\" class=\"headerlink\" title=\"Admin Server 端\"></a>Admin Server 端</h2><h3 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>2.x 下只需要添加此一个包即可，其他组件会自动依赖添加。</strong></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>server.port=8000</p>\n<p>服务端设置端口为：8000。</p>\n<h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminServerApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>完成上面三步之后，启动服务端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 可以看到以下界面：<br><img src=\"https://eelve.com/upload/2019/8/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png\" alt=\"监控页面\"><br>因为刚启动没有应用，因此显示：No applications registered.，同时根据上图也可以看出 applications 页面会展示项目的应用数、实例数和状态三个信息。</p>\n<p>接下来我们构建一个客户端，并注册到服务端。</p>\n<h2 id=\"Admin-Client-端\"><a href=\"#Admin-Client-端\" class=\"headerlink\" title=\"Admin Client 端\"></a>Admin Client 端</h2><h2 id=\"项目依赖-1\"><a href=\"#项目依赖-1\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>添加 spring-boot-starter-web 是为了使应用处于启动状态，spring-boot-admin-starter-client 会自动添加 Actuator 相关依赖。</strong></p>\n<h3 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8001</span></span><br><span class=\"line\"><span class=\"meta\">spring.application.name</span>=<span class=\"string\">Admin Client</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.client.url</span>=<span class=\"string\">http://localhost:8000  </span></span><br><span class=\"line\"><span class=\"meta\">management.endpoints.web.exposure.include</span>=<span class=\"string\">*</span></span><br></pre></td></tr></table></figure>\n<pre><code>spring.boot.admin.client.url 配置 Admin Server 的地址\nmanagement.endpoints.web.exposure.include=* 打开客户端 Actuator 的监控\n</code></pre>\n<h3 id=\"启动类-1\"><a href=\"#启动类-1\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminClientApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminClientApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，启动 Client 端，Admin 服务端会自动检查到客户端的变化，并展示其应用：<br><img src=\"https://eelve.com/upload/2019/8/82-1b588fee05794b2d94a2f578ba805fbb.png\" alt=\"结果\"><br>页面会展示被监控的服务列表，点击项目名称会进入此应用的详细监控信息：<br><img src=\"https://eelve.com/upload/2019/8/83-d685df514a0e44b1bd45e5b6bd1a9e64.png\" alt=\"详情\"><br>通过上图可以看出，Spring Boot Admin 以图形化的形式展示了应用的各项信息，这些信息大多都来自于 <strong>Spring Boot Actuator</strong> 提供的接口。利用图形化的形式很容易看到应用的各项参数变化，甚至有些页面还可以进行一些操作，比如改变打印日志的级别等。</p>\n<h3 id=\"点击-journal-页面可以看到应用状态变化的历史过程：\"><a href=\"#点击-journal-页面可以看到应用状态变化的历史过程：\" class=\"headerlink\" title=\"点击 journal 页面可以看到应用状态变化的历史过程：\"></a>点击 journal 页面可以看到应用状态变化的历史过程：</h3><p><img src=\"https://eelve.com/upload/2019/8/84-fa96d9eee75d47d599f55e27533664e4.png\" alt=\"journal\"></p>\n<h3 id=\"点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\"><a href=\"#点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\" class=\"headerlink\" title=\"点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。\"></a>点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。</h3><p><img src=\"https://eelve.com/upload/2019/8/85-c42df15785a14110b7532b20afee8ca1.png\" alt=\"wallboard \"></p>\n<h1 id=\"叁、监控微服务\"><a href=\"#叁、监控微服务\" class=\"headerlink\" title=\"叁、监控微服务\"></a>叁、监控微服务</h1><p>如果我们使用的是单个 Spring Boot 应用，就需要在每一个被监控的应用中配置 Admin Server 的地址信息；如果应用都注册在 Eureka 中就不需要再对每个应用进行配置，Spring Boot Admin 会自动从注册中心抓取应用的相关信息。</p>\n<p>如果使用了 Spring Cloud 的服务发现功能，就不需要再单独添加 Admin Client 客户端，仅仅需要 Spring Boot Server，其他内容会自动进行配置。</p>\n<p>接下来以 Eureka 作为服务发现的示例来进行演示，实际上也可以使用 Consul 或者 Zookeeper。</p>\n<p>（1）服务端和客户端添加 spring-cloud-starter-eureka 到包依赖中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）启动类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityPermitAllConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            http.authorizeRequests().anyRequest().permitAll()  </span><br><span class=\"line\">                .and().csrf().disable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用类 <strong>SecurityPermitAllConfig</strong> 关闭了安全验证。</p>\n<p>（3）在客户端中配置服务发现的地址</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span>   </span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">leaseRenewalIntervalInSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">health-check-url-path:</span> <span class=\"string\">/actuator/health</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">startup:</span> <span class=\"string\">$&#123;random.int&#125;</span>    <span class=\"comment\">#needed to trigger info and endpoint update after restart</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">registryFetchIntervalSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">serviceUrl:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&quot;*&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">ALWAYS</span></span><br></pre></td></tr></table></figure>\n<p><strong>Spring Cloud</strong> 提供了示例代码可以参考这里：<a href=\"https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka/\">spring-boot-admin-sample-eureka</a>。</p>\n<p>重启启动服务端和客户端之后，访问服务端的相关地址就可以看到监控页面了。</p>\n<h1 id=\"肆、安全控制\"><a href=\"#肆、安全控制\" class=\"headerlink\" title=\"肆、安全控制\"></a>肆、安全控制</h1><p><strong>Spring Boot Admin</strong> 后台有很多的敏感信息和操作，如果公司不做权限控制可能会影响到公司系统的安全性。Spring Boot Admin 也考虑到了这个因素，可以利用前面的 Spring Security 做安全访问控制，在 spring-boot-admin-server 上进行改造。</p>\n<p>（1）添加 Spring Boot Security 依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）添加安全访问控制</p>\n<p>和前面的 Security 配置一样，给项目添加访问控制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecuritySecureConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String adminContextPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecuritySecureConfig</span><span class=\"params\">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class=\"keyword\">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class=\"line\">        successHandler.setTargetUrlParameter(<span class=\"string\">&quot;redirectTo&quot;</span>);</span><br><span class=\"line\">        successHandler.setDefaultTargetUrl(adminContextPath + <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() </span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).permitAll()</span><br><span class=\"line\">            .anyRequest().authenticated() </span><br><span class=\"line\">            .and()</span><br><span class=\"line\">        .formLogin().loginPage(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).successHandler(successHandler).and() </span><br><span class=\"line\">        .logout().logoutUrl(adminContextPath + <span class=\"string\">&quot;/logout&quot;</span>).and()</span><br><span class=\"line\">        .httpBasic().and() </span><br><span class=\"line\">        .csrf()</span><br><span class=\"line\">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class=\"line\">            .ignoringAntMatchers(</span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/instances&quot;</span>,   </span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/actuator/**&quot;</span>  </span><br><span class=\"line\">            );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() 所有静态内容不做安全验证</span><br><span class=\"line\">    anyRequest().authenticated() 其他请求均需要验证</span><br><span class=\"line\">    formLogin() 配置登录</span><br><span class=\"line\">    logout() 配置登出</span><br><span class=\"line\">    httpBasic() 支持 HTTP，引导 Spring Boot Admin 客户端注册</span><br><span class=\"line\">    csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 打开跨站点请求保护 Cookies</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/instances&quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/instances&quot;</span>，方便 Admin 客户端注册</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/actuator/** &quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/actuator/**&quot;</span>，可以让 Admin 监控到 Actuator 的相关接口</span><br></pre></td></tr></table></figure>\n<p>然后可以给 security 设置一个用户名和密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重启 Admin Server 端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 就会发现需要一个登录的用户名和密码了。<br><img src=\"https://eelve.com/upload/2019/8/86-dc4b6d05194a4c9786383189c6378f26.png\" alt=\"Admin Server\"><br>使用刚才设置的用户名和密码登录之后，发现注册到 Server 端的服务数成为 0 了，这是客户端统一也需要配置帐户名和密码信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重新启动，在服务端就又可以查看监控到的应用了。</p>\n<h1 id=\"伍、其他方式\"><a href=\"#伍、其他方式\" class=\"headerlink\" title=\"伍、其他方式\"></a>伍、其他方式</h1><p>如果 Actuator 的端口被使用 HTTP 认证保护，那么 Spring Boot Admin Server 访问的时候需要凭证信息，这时候可以使用 metadata 的方式对账户和密码进行配置。</p>\n<h2 id=\"直接使用客户端注册的方式：\"><a href=\"#直接使用客户端注册的方式：\" class=\"headerlink\" title=\"直接使用客户端注册的方式：\"></a>直接使用客户端注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.boot.admin.client:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8080</span></span><br><span class=\"line\">    <span class=\"attr\">instance:</span></span><br><span class=\"line\">      <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Eureka-进行注册的方式：\"><a href=\"#使用-Eureka-进行注册的方式：\" class=\"headerlink\" title=\"使用 Eureka 进行注册的方式：\"></a>使用 Eureka 进行注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Eureka 中的 metadataMap 是专门用来存放一些自定义的数据，当注册中心或者其他服务需要此服务的某些配置时可以在 metadataMap 里取。实际上，每个 instance 都有各自的 metadataMap，map 中存放着需要用到的属性。例如，上面配置中的 eureka.instance.metadata-map.user.name，当这个服务成功注册到 Eureka 上，Spring Boot Admin 就会拿到这个 instance，进而拿到 metadataMap 里的属性，然后放入请求头，向此服务发送请求，访问此服务的 Actuator 开放的端点。</p>\n<h1 id=\"陆、邮件告警\"><a href=\"#陆、邮件告警\" class=\"headerlink\" title=\"陆、邮件告警\"></a>陆、邮件告警</h1><p>Spring Boot Admin 将微服务中所有应用信息在后台进行了展示，非常方便我们对微服务整体的监控和治理。但是我们的运营人员也不可能一天 24 小时盯着监控后台，因此如果服务有异常的时候，有对应的邮件告警就太好了，其实 Spring Boot Admin 也给出了支持。</p>\n<p>我们对上面的示例项目 spring-boot-admin-server 进行改造。</p>\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"增加了邮件发送的-starter-包。\"><a href=\"#增加了邮件发送的-starter-包。\" class=\"headerlink\" title=\"增加了邮件发送的 starter 包。\"></a>增加了邮件发送的 starter 包。</h2><h3 id=\"配置文件-2\"><a href=\"#配置文件-2\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mail.host</span>=<span class=\"string\">smtp.qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.username</span>=<span class=\"string\">xxx@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.password</span>=<span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.auth</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.required</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.from</span>=<span class=\"string\">yyyy@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.to</span>=<span class=\"string\">zzz@qq.com</span></span><br></pre></td></tr></table></figure>\n<p><strong>在配置文件中添加邮件发送相关信息：邮件的发送者、接受者、协议、移动授权码等</strong>。</p>\n<p>配置完成后，重新启动项目 spring-boot-admin-server，这样 Admin Server 就具备了邮件告警的功能，默认情况下 Admin Server 对 Eureka 中的服务上下线都进行了监控，当服务上下线的时候我们就会收到相应的告警邮件。</p>\n<p>当然这只是最基本的邮件监控，在实际的使用过程中，需要根据情况对邮件告警内容进行自定义，比如监控堆内存的使用情况，当到达一定比例的时候进行告警等。</p>\n<p>【写在后面的话】Spring Boot Admin 解决了我们对大规模 Spring Boot 应用监控的需求，Spring Boot Admin 充分利用了 Actuator 开放的相关接口，采用优秀的图形界面将这些信息进行了展示，方便我们更加直观的查看集群中应用的状态。Spring Boot Admin 不仅可以监控单个 Spring Boot 应用，也可以结合 Spring Cloud 监控注册到服务中心的所有应用状态，再结合报警系统的使用就可以随时感知到应用的状态变化。在实际工作中 Spring Boot Admin 是我们在后期运营中频繁用到的一个组件，应该作为重点关注。</p>\n<hr>\n<p>最后是一个用http方式监听的demo：<a href=\"https://github.com/eelve/springbootadmin\">Spring Boot Admin使用http连接server端</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"hide","path":"api/categories/hide.json"}],"tags":[{"name":"hide","path":"api/tags/hide.json"}]},{"title":"Spring Boot Admin 的使用","slug":"SpringBoot-Admin的使用","date":"2019-08-09T09:07:34.000Z","updated":"2021-04-19T06:44:39.287Z","comments":true,"path":"api/articles/SpringBoot-Admin的使用.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png","content":"<p>【<strong>前情提要</strong>】Spring Boot Actuator 提供了对单个 Spring Boot 应用的监控，信息包含应用状态、内存、线程、堆栈等，比较全面的监控了 Spring Boot 应用的整个生命周期。但是这样监控也有一些问题：第一，所有的监控都需要调用固定的接口来查看，如果全面查看应用状态需要调用很多接口，并且接口返回的 JSON 信息不方便运营人员理解；第二，如果 Spring Boot 应用集群非常大，每个应用都需要调用不同的接口来查看监控信息，操作非常繁琐低效。在这样的背景下，就诞生了另外一个开源软件：<strong>Spring Boot Admin</strong>。</p>\n<hr>\n<h1 id=\"壹、什么是Spring-Boot-Admin\"><a href=\"#壹、什么是Spring-Boot-Admin\" class=\"headerlink\" title=\"壹、什么是Spring Boot Admin\"></a>壹、什么是Spring Boot Admin</h1><p>Spring Boot Admin 是一个管理和监控 Spring Boot 应用程序的开源软件，每个应用都认为是一个客户端，通过 HTTP 或者使用 Eureka 注册到 admin server 中进行展示，Spring Boot Admin UI 部分使用 Vue.js 将数据展示在前端。</p>\n<p>Spring Boot Admin 是一个针对 Spring Boot 的 Actuator 接口进行 UI 美化封装的监控工具，它可以在列表中浏览所有被监控 spring-boot 项目的基本信息、详细的 Health 信息、内存信息、JVM 信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改 logger 的 level。</p>\n<p>值得注意的是 Spring Boot Admin 并不是 Spring Boot 官方出品的开源软件，但是其软件质量和使用广泛度都非常的高，并且 Spring Boot Admin 会及时随着 Spring Boot 的更新而更新，当 Spring Boot 推出 2.X 版本时 Spring Boot Admin 也及时进行了更新。</p>\n<p>Spring Boot Admin 2.x 不仅是跟着支持了 Spring Boot 2.x，还在 1.x 的基础上进行了大量的更新和优化:</p>\n<pre><code>重新规划了项目依赖包，让项目中更方便的集成 Spring Boot Admin\n1.x 前端使用了 Angular.js，2.x 使用 Vue 对界面进行了重写，界面美观度提升幅度非常高\n提供了支持 Spring Cloud 的组件\n其他更新，具体参考：Changes with 2.x\n</code></pre>\n<p>Spring Boot Admin 分为服务端和客户端，服务端其实就是一个监控后台用来汇总展示所有的监控信息，客户端就是我们的应用，使用时需要先启动服务端，在启动客户端的时候打开 Actuator 的接口，并指向服务端的地址，这样服务端会定时读取相关信息以达到监控的目的。</p>\n<hr>\n<p>接下来演示如何使用 Spring Boot Admin 对 Spring Boot 应用进行监控。</p>\n<h1 id=\"贰、监控单体应用\"><a href=\"#贰、监控单体应用\" class=\"headerlink\" title=\"贰、监控单体应用\"></a>贰、监控单体应用</h1><p>先给大家展示如何使用 Spring Boot Admin 监控单个 Spring Boot 应用。</p>\n<h2 id=\"Admin-Server-端\"><a href=\"#Admin-Server-端\" class=\"headerlink\" title=\"Admin Server 端\"></a>Admin Server 端</h2><h3 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>2.x 下只需要添加此一个包即可，其他组件会自动依赖添加。</strong></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>server.port=8000</p>\n<p>服务端设置端口为：8000。</p>\n<h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminServerApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>完成上面三步之后，启动服务端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 可以看到以下界面：<br><img src=\"https://image.eelve.com/eblog/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png\" alt=\"监控页面\"><br>因为刚启动没有应用，因此显示：No applications registered.，同时根据上图也可以看出 applications 页面会展示项目的应用数、实例数和状态三个信息。</p>\n<p>接下来我们构建一个客户端，并注册到服务端。</p>\n<h2 id=\"Admin-Client-端\"><a href=\"#Admin-Client-端\" class=\"headerlink\" title=\"Admin Client 端\"></a>Admin Client 端</h2><h2 id=\"项目依赖-1\"><a href=\"#项目依赖-1\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>添加 spring-boot-starter-web 是为了使应用处于启动状态，spring-boot-admin-starter-client 会自动添加 Actuator 相关依赖。</strong></p>\n<h3 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8001</span></span><br><span class=\"line\"><span class=\"meta\">spring.application.name</span>=<span class=\"string\">Admin Client</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.client.url</span>=<span class=\"string\">http://localhost:8000  </span></span><br><span class=\"line\"><span class=\"meta\">management.endpoints.web.exposure.include</span>=<span class=\"string\">*</span></span><br></pre></td></tr></table></figure>\n<pre><code>spring.boot.admin.client.url 配置 Admin Server 的地址\nmanagement.endpoints.web.exposure.include=* 打开客户端 Actuator 的监控\n</code></pre>\n<h3 id=\"启动类-1\"><a href=\"#启动类-1\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminClientApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminClientApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，启动 Client 端，Admin 服务端会自动检查到客户端的变化，并展示其应用：<br><img src=\"https://image.eelve.com/eblog/82-1b588fee05794b2d94a2f578ba805fbb.png\" alt=\"结果\"><br>页面会展示被监控的服务列表，点击项目名称会进入此应用的详细监控信息：<br><img src=\"https://image.eelve.com/eblog/83-d685df514a0e44b1bd45e5b6bd1a9e64.png\" alt=\"详情\"><br>通过上图可以看出，Spring Boot Admin 以图形化的形式展示了应用的各项信息，这些信息大多都来自于 <strong>Spring Boot Actuator</strong> 提供的接口。利用图形化的形式很容易看到应用的各项参数变化，甚至有些页面还可以进行一些操作，比如改变打印日志的级别等。</p>\n<h3 id=\"点击-journal-页面可以看到应用状态变化的历史过程：\"><a href=\"#点击-journal-页面可以看到应用状态变化的历史过程：\" class=\"headerlink\" title=\"点击 journal 页面可以看到应用状态变化的历史过程：\"></a>点击 journal 页面可以看到应用状态变化的历史过程：</h3><p><img src=\"https://image.eelve.com/eblog/84-fa96d9eee75d47d599f55e27533664e4.png\" alt=\"journal\"></p>\n<h3 id=\"点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\"><a href=\"#点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\" class=\"headerlink\" title=\"点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。\"></a>点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。</h3><p><img src=\"https://image.eelve.com/eblog/85-c42df15785a14110b7532b20afee8ca1.png\" alt=\"wallboard \"></p>\n<h1 id=\"叁、监控微服务\"><a href=\"#叁、监控微服务\" class=\"headerlink\" title=\"叁、监控微服务\"></a>叁、监控微服务</h1><p>如果我们使用的是单个 Spring Boot 应用，就需要在每一个被监控的应用中配置 Admin Server 的地址信息；如果应用都注册在 Eureka 中就不需要再对每个应用进行配置，Spring Boot Admin 会自动从注册中心抓取应用的相关信息。</p>\n<p>如果使用了 Spring Cloud 的服务发现功能，就不需要再单独添加 Admin Client 客户端，仅仅需要 Spring Boot Server，其他内容会自动进行配置。</p>\n<p>接下来以 Eureka 作为服务发现的示例来进行演示，实际上也可以使用 Consul 或者 Zookeeper。</p>\n<p>（1）服务端和客户端添加 spring-cloud-starter-eureka 到包依赖中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）启动类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityPermitAllConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            http.authorizeRequests().anyRequest().permitAll()  </span><br><span class=\"line\">                .and().csrf().disable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用类 <strong>SecurityPermitAllConfig</strong> 关闭了安全验证。</p>\n<p>（3）在客户端中配置服务发现的地址</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span>   </span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">leaseRenewalIntervalInSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">health-check-url-path:</span> <span class=\"string\">/actuator/health</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">startup:</span> <span class=\"string\">$&#123;random.int&#125;</span>    <span class=\"comment\">#needed to trigger info and endpoint update after restart</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">registryFetchIntervalSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">serviceUrl:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&quot;*&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">ALWAYS</span></span><br></pre></td></tr></table></figure>\n<p><strong>Spring Cloud</strong> 提供了示例代码可以参考这里：<a href=\"https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka/\">spring-boot-admin-sample-eureka</a>。</p>\n<p>重启启动服务端和客户端之后，访问服务端的相关地址就可以看到监控页面了。</p>\n<h1 id=\"肆、安全控制\"><a href=\"#肆、安全控制\" class=\"headerlink\" title=\"肆、安全控制\"></a>肆、安全控制</h1><p><strong>Spring Boot Admin</strong> 后台有很多的敏感信息和操作，如果公司不做权限控制可能会影响到公司系统的安全性。Spring Boot Admin 也考虑到了这个因素，可以利用前面的 Spring Security 做安全访问控制，在 spring-boot-admin-server 上进行改造。</p>\n<p>（1）添加 Spring Boot Security 依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）添加安全访问控制</p>\n<p>和前面的 Security 配置一样，给项目添加访问控制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecuritySecureConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String adminContextPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecuritySecureConfig</span><span class=\"params\">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class=\"keyword\">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class=\"line\">        successHandler.setTargetUrlParameter(<span class=\"string\">&quot;redirectTo&quot;</span>);</span><br><span class=\"line\">        successHandler.setDefaultTargetUrl(adminContextPath + <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() </span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).permitAll()</span><br><span class=\"line\">            .anyRequest().authenticated() </span><br><span class=\"line\">            .and()</span><br><span class=\"line\">        .formLogin().loginPage(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).successHandler(successHandler).and() </span><br><span class=\"line\">        .logout().logoutUrl(adminContextPath + <span class=\"string\">&quot;/logout&quot;</span>).and()</span><br><span class=\"line\">        .httpBasic().and() </span><br><span class=\"line\">        .csrf()</span><br><span class=\"line\">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class=\"line\">            .ignoringAntMatchers(</span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/instances&quot;</span>,   </span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/actuator/**&quot;</span>  </span><br><span class=\"line\">            );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() 所有静态内容不做安全验证</span><br><span class=\"line\">    anyRequest().authenticated() 其他请求均需要验证</span><br><span class=\"line\">    formLogin() 配置登录</span><br><span class=\"line\">    logout() 配置登出</span><br><span class=\"line\">    httpBasic() 支持 HTTP，引导 Spring Boot Admin 客户端注册</span><br><span class=\"line\">    csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 打开跨站点请求保护 Cookies</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/instances&quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/instances&quot;</span>，方便 Admin 客户端注册</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/actuator/** &quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/actuator/**&quot;</span>，可以让 Admin 监控到 Actuator 的相关接口</span><br></pre></td></tr></table></figure>\n<p>然后可以给 security 设置一个用户名和密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重启 Admin Server 端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 就会发现需要一个登录的用户名和密码了。<br><img src=\"https://image.eelve.com/eblog/86-dc4b6d05194a4c9786383189c6378f26.png\" alt=\"Admin Server\"><br>使用刚才设置的用户名和密码登录之后，发现注册到 Server 端的服务数成为 0 了，这是客户端统一也需要配置帐户名和密码信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重新启动，在服务端就又可以查看监控到的应用了。</p>\n<h1 id=\"伍、其他方式\"><a href=\"#伍、其他方式\" class=\"headerlink\" title=\"伍、其他方式\"></a>伍、其他方式</h1><p>如果 Actuator 的端口被使用 HTTP 认证保护，那么 Spring Boot Admin Server 访问的时候需要凭证信息，这时候可以使用 metadata 的方式对账户和密码进行配置。</p>\n<h2 id=\"直接使用客户端注册的方式：\"><a href=\"#直接使用客户端注册的方式：\" class=\"headerlink\" title=\"直接使用客户端注册的方式：\"></a>直接使用客户端注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.boot.admin.client:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8080</span></span><br><span class=\"line\">    <span class=\"attr\">instance:</span></span><br><span class=\"line\">      <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Eureka-进行注册的方式：\"><a href=\"#使用-Eureka-进行注册的方式：\" class=\"headerlink\" title=\"使用 Eureka 进行注册的方式：\"></a>使用 Eureka 进行注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Eureka 中的 metadataMap 是专门用来存放一些自定义的数据，当注册中心或者其他服务需要此服务的某些配置时可以在 metadataMap 里取。实际上，每个 instance 都有各自的 metadataMap，map 中存放着需要用到的属性。例如，上面配置中的 eureka.instance.metadata-map.user.name，当这个服务成功注册到 Eureka 上，Spring Boot Admin 就会拿到这个 instance，进而拿到 metadataMap 里的属性，然后放入请求头，向此服务发送请求，访问此服务的 Actuator 开放的端点。</p>\n<h1 id=\"陆、邮件告警\"><a href=\"#陆、邮件告警\" class=\"headerlink\" title=\"陆、邮件告警\"></a>陆、邮件告警</h1><p>Spring Boot Admin 将微服务中所有应用信息在后台进行了展示，非常方便我们对微服务整体的监控和治理。但是我们的运营人员也不可能一天 24 小时盯着监控后台，因此如果服务有异常的时候，有对应的邮件告警就太好了，其实 Spring Boot Admin 也给出了支持。</p>\n<p>我们对上面的示例项目 spring-boot-admin-server 进行改造。</p>\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"增加了邮件发送的-starter-包。\"><a href=\"#增加了邮件发送的-starter-包。\" class=\"headerlink\" title=\"增加了邮件发送的 starter 包。\"></a>增加了邮件发送的 starter 包。</h2><h3 id=\"配置文件-2\"><a href=\"#配置文件-2\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mail.host</span>=<span class=\"string\">smtp.qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.username</span>=<span class=\"string\">xxx@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.password</span>=<span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.auth</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.required</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.from</span>=<span class=\"string\">yyyy@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.to</span>=<span class=\"string\">zzz@qq.com</span></span><br></pre></td></tr></table></figure>\n<p><strong>在配置文件中添加邮件发送相关信息：邮件的发送者、接受者、协议、移动授权码等</strong>。</p>\n<p>配置完成后，重新启动项目 spring-boot-admin-server，这样 Admin Server 就具备了邮件告警的功能，默认情况下 Admin Server 对 Eureka 中的服务上下线都进行了监控，当服务上下线的时候我们就会收到相应的告警邮件。</p>\n<p>当然这只是最基本的邮件监控，在实际的使用过程中，需要根据情况对邮件告警内容进行自定义，比如监控堆内存的使用情况，当到达一定比例的时候进行告警等。</p>\n<p>【写在后面的话】Spring Boot Admin 解决了我们对大规模 Spring Boot 应用监控的需求，Spring Boot Admin 充分利用了 Actuator 开放的相关接口，采用优秀的图形界面将这些信息进行了展示，方便我们更加直观的查看集群中应用的状态。Spring Boot Admin 不仅可以监控单个 Spring Boot 应用，也可以结合 Spring Cloud 监控注册到服务中心的所有应用状态，再结合报警系统的使用就可以随时感知到应用的状态变化。在实际工作中 Spring Boot Admin 是我们在后期运营中频繁用到的一个组件，应该作为重点关注。</p>\n<hr>\n<p>最后是一个用http方式监听的demo：<a href=\"https://github.com/eelve/springbootadmin\">Spring Boot Admin使用http连接server端</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"springboot-admin","path":"api/tags/springboot-admin.json"}]},{"title":"spring-boot-starter-quartz集群实践","slug":"spring-boot-starter-quartz集群实践","date":"2019-08-09T09:06:12.000Z","updated":"2021-04-19T06:44:39.180Z","comments":true,"path":"api/articles/spring-boot-starter-quartz集群实践.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/1-a8a710a578ad47a8afc8ace72f3cbd7c.png","content":"<p>【<strong>前情提要</strong>】由于项目需要，需要一个定时任务集群，故此有了这个spring-boot-starter-quartz集群的实践。springboot的版本为：2.1.6.RELEASE；quartz的版本为：2.3.1.假如这里一共有两个定时任务的节点，它们的代码完全一样。</p>\n<hr>\n<h1 id=\"壹-jar包依赖\"><a href=\"#壹-jar包依赖\" class=\"headerlink\" title=\"壹.jar包依赖\"></a>壹.jar包依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>这里选择将定时任务的数据入库，避免数据直接存在内存中，因应用重启造成的数据丢失和做集群控制。</p>\n<h1 id=\"贰、项目配置\"><a href=\"#贰、项目配置\" class=\"headerlink\" title=\"贰、项目配置\"></a>贰、项目配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">servlet:</span></span><br><span class=\"line\">      <span class=\"attr\">context-path:</span> <span class=\"string\">/lovin</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/training?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">quartz:</span></span><br><span class=\"line\">    <span class=\"attr\">job-store-type:</span> <span class=\"string\">jdbc</span> <span class=\"comment\">#数据库方式</span></span><br><span class=\"line\">    <span class=\"attr\">jdbc:</span></span><br><span class=\"line\">      <span class=\"attr\">initialize-schema:</span> <span class=\"string\">never</span> <span class=\"comment\">#不初始化表结构</span></span><br><span class=\"line\">    <span class=\"attr\">properties:</span></span><br><span class=\"line\">      <span class=\"attr\">org:</span></span><br><span class=\"line\">        <span class=\"attr\">quartz:</span></span><br><span class=\"line\">          <span class=\"attr\">scheduler:</span></span><br><span class=\"line\">            <span class=\"attr\">instanceId:</span> <span class=\"string\">AUTO</span> <span class=\"comment\">#默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span></span><br><span class=\"line\">            <span class=\"comment\">#instanceName: clusteredScheduler #quartzScheduler</span></span><br><span class=\"line\">          <span class=\"attr\">jobStore:</span></span><br><span class=\"line\">            <span class=\"attr\">class:</span> <span class=\"string\">org.quartz.impl.jdbcjobstore.JobStoreTX</span> <span class=\"comment\">#持久化配置</span></span><br><span class=\"line\">            <span class=\"attr\">driverDelegateClass:</span> <span class=\"string\">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span> <span class=\"comment\">#我们仅为数据库制作了特定于数据库的代理</span></span><br><span class=\"line\">            <span class=\"attr\">useProperties:</span> <span class=\"literal\">false</span> <span class=\"comment\">#以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。</span></span><br><span class=\"line\">            <span class=\"attr\">tablePrefix:</span> <span class=\"string\">qrtz_</span>  <span class=\"comment\">#数据库表前缀</span></span><br><span class=\"line\">            <span class=\"attr\">misfireThreshold:</span> <span class=\"number\">60000</span> <span class=\"comment\">#在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。</span></span><br><span class=\"line\">            <span class=\"attr\">clusterCheckinInterval:</span> <span class=\"number\">5000</span> <span class=\"comment\">#设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span></span><br><span class=\"line\">            <span class=\"attr\">isClustered:</span> <span class=\"literal\">true</span> <span class=\"comment\">#打开群集功能</span></span><br><span class=\"line\">          <span class=\"attr\">threadPool:</span> <span class=\"comment\">#连接池</span></span><br><span class=\"line\">            <span class=\"attr\">class:</span> <span class=\"string\">org.quartz.simpl.SimpleThreadPool</span></span><br><span class=\"line\">            <span class=\"attr\">threadCount:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">threadPriority:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"attr\">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><strong>这里需要注意的是两个节点的端口号应该不一致，避免冲突</strong></p>\n<h1 id=\"叁、实现一个Job\"><a href=\"#叁、实现一个Job\" class=\"headerlink\" title=\"叁、实现一个Job\"></a>叁、实现一个Job</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Job</span> <span class=\"keyword\">extends</span> <span class=\"title\">QuartzJobBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">executeInternal</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">        JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class=\"line\">        <span class=\"comment\">// 业务逻辑 ...</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;------springbootquartzonejob执行&quot;</span>+jobDataMap.get(<span class=\"string\">&quot;name&quot;</span>).toString()+<span class=\"string\">&quot;###############&quot;</span>+jobExecutionContext.getTrigger());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其中的日志输出是为了便于观察任务执行情况</strong></p>\n<h1 id=\"肆、封装定时任务操作\"><a href=\"#肆、封装定时任务操作\" class=\"headerlink\" title=\"肆、封装定时任务操作\"></a>肆、封装定时任务操作</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuartzService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scheduler scheduler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startScheduler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            scheduler.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobClass</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务实现类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间表达式 (这是每隔多少秒为一次任务)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTimes</span></span><br><span class=\"line\"><span class=\"comment\">     *            运行的次数 （&lt;0:表示不限次数）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobData</span></span><br><span class=\"line\"><span class=\"comment\">     *            参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addJob</span><span class=\"params\">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, <span class=\"keyword\">int</span> jobTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">int</span> jobTimes, Map jobData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 任务名称和组构成任务key</span></span><br><span class=\"line\">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            <span class=\"comment\">// 设置job参数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jobData!= <span class=\"keyword\">null</span> &amp;&amp; jobData.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 使用simpleTrigger规则</span></span><br><span class=\"line\">            Trigger trigger = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jobTimes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                        .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class=\"number\">1</span>).withIntervalInSeconds(jobTime))</span><br><span class=\"line\">                        .startNow().build();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                trigger = TriggerBuilder</span><br><span class=\"line\">                        .newTrigger().withIdentity(jobName, jobGroupName).withSchedule(SimpleScheduleBuilder</span><br><span class=\"line\">                                .repeatSecondlyForever(<span class=\"number\">1</span>).withIntervalInSeconds(jobTime).withRepeatCount(jobTimes))</span><br><span class=\"line\">                        .startNow().build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobClass</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务实现类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称(建议唯一)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间表达式 （如：0/5 * * * * ? ）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobData</span></span><br><span class=\"line\"><span class=\"comment\">     *            参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addJob</span><span class=\"params\">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, String jobTime, Map jobData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建jobDetail实例，绑定Job实现类</span></span><br><span class=\"line\">            <span class=\"comment\">// 指明job的名称，所在组的名称，以及绑定job类</span></span><br><span class=\"line\">            <span class=\"comment\">// 任务名称和组构成任务key</span></span><br><span class=\"line\">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            <span class=\"comment\">// 设置job参数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jobData!= <span class=\"keyword\">null</span> &amp;&amp; jobData.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 定义调度触发规则</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用cornTrigger规则</span></span><br><span class=\"line\">            <span class=\"comment\">// 触发器key</span></span><br><span class=\"line\">            Trigger trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .startAt(DateBuilder.futureDate(<span class=\"number\">1</span>, IntervalUnit.SECOND))</span><br><span class=\"line\">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).startNow().build();</span><br><span class=\"line\">            <span class=\"comment\">// 把作业和触发器注册到任务调度中</span></span><br><span class=\"line\">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改 一个job的 时间表达式</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateJob</span><span class=\"params\">(String jobName, String jobGroupName, String jobTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class=\"line\">            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class=\"line\">            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class=\"line\">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).build();</span><br><span class=\"line\">            <span class=\"comment\">// 重启触发器</span></span><br><span class=\"line\">            scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除任务一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            scheduler.deleteJob(<span class=\"keyword\">new</span> JobKey(jobName, jobGroupName));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.pauseJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 恢复一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resumeJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.resumeJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 立即执行一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runAJobNow</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.triggerJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有计划中的任务列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllJob() &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            GroupMatcher&lt;JobKey&gt; matcher = GroupMatcher.anyJobGroup();</span><br><span class=\"line\">            Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(matcher);</span><br><span class=\"line\">            jobList = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (JobKey jobKey : jobKeys) &#123;</span><br><span class=\"line\">                List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Trigger trigger : triggers) &#123;</span><br><span class=\"line\">                    Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;description&quot;</span>, <span class=\"string\">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class=\"line\">                    Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (trigger <span class=\"keyword\">instanceof</span> CronTrigger) &#123;</span><br><span class=\"line\">                        CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class=\"line\">                        String cronExpression = cronTrigger.getCronExpression();</span><br><span class=\"line\">                        map.put(<span class=\"string\">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    jobList.add(map);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jobList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有正在运行的job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryRunJob() &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;JobExecutionContext&gt; executingJobs = scheduler.getCurrentlyExecutingJobs();</span><br><span class=\"line\">            jobList = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;(executingJobs.size());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (JobExecutionContext executingJob : executingJobs) &#123;</span><br><span class=\"line\">                Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">                JobDetail jobDetail = executingJob.getJobDetail();</span><br><span class=\"line\">                JobKey jobKey = jobDetail.getKey();</span><br><span class=\"line\">                Trigger trigger = executingJob.getTrigger();</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;description&quot;</span>, <span class=\"string\">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class=\"line\">                Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (trigger <span class=\"keyword\">instanceof</span> CronTrigger) &#123;</span><br><span class=\"line\">                    CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class=\"line\">                    String cronExpression = cronTrigger.getCronExpression();</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                jobList.add(map);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jobList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"陆、初始化任务\"><a href=\"#陆、初始化任务\" class=\"headerlink\" title=\"陆、初始化任务\"></a>陆、初始化任务</h1><p>这里不准备给用户用web界面来配置定时任务，故此采用<strong>CommandLineRunner</strong>来子啊应用初始化的时候来初始化任务。只需要实现CommandLineRunner的run()方法即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job&quot;</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;0 * * * * ?&quot;</span>, map);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job2&quot;</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job2&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;10 * * * * ?&quot;</span>, map);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job3&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job3&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>, <span class=\"string\">&quot;15 * * * * ?&quot;</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"柒、测试验证\"><a href=\"#柒、测试验证\" class=\"headerlink\" title=\"柒、测试验证\"></a>柒、测试验证</h1><p>分别夏侯启动两个应用，然后观察任务执行，以及在运行过程中杀死某个服务，来观察定时任务的执行。<br><img src=\"https://image.eelve.com/eblog/1-a8a710a578ad47a8afc8ace72f3cbd7c.png\" alt=\"SpringbootquartzoneApplication\"><br><img src=\"https://image.eelve.com/eblog/2-db731d38c3ed4b4b8123482c9b3ef28d.png\" alt=\"SpringbootquartztwoApplication\"></p>\n<p>【<strong>写在后面的话</strong>】下面给出的是所需要脚本的连接地址：<a href=\"http://www.quartz-scheduler.org/downloads/\">脚本下载地址</a>，另外这边又一个自己实现的<a href=\"https://github.com/eelve/springbootquartzs.git\">demo</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"quartz","path":"api/tags/quartz.json"}]},{"title":"spring-boot-starter-quartz集群实践本地版","slug":"spring-boot-starter-quartz集群实践本地版","date":"2019-08-09T09:06:12.000Z","updated":"2021-04-19T07:47:19.526Z","comments":true,"path":"api/articles/spring-boot-starter-quartz集群实践本地版.json","excerpt":null,"keywords":"南国薏米","cover":"https://eelve.com/upload/2019/8/1-a8a710a578ad47a8afc8ace72f3cbd7c.png","content":"<p>【<strong>前情提要</strong>】由于项目需要，需要一个定时任务集群，故此有了这个spring-boot-starter-quartz集群的实践。springboot的版本为：2.1.6.RELEASE；quartz的版本为：2.3.1.假如这里一共有两个定时任务的节点，它们的代码完全一样。</p>\n<hr>\n<h1 id=\"壹-jar包依赖\"><a href=\"#壹-jar包依赖\" class=\"headerlink\" title=\"壹.jar包依赖\"></a>壹.jar包依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>这里选择将定时任务的数据入库，避免数据直接存在内存中，因应用重启造成的数据丢失和做集群控制。</p>\n<h1 id=\"贰、项目配置\"><a href=\"#贰、项目配置\" class=\"headerlink\" title=\"贰、项目配置\"></a>贰、项目配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">servlet:</span></span><br><span class=\"line\">      <span class=\"attr\">context-path:</span> <span class=\"string\">/lovin</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/training?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">quartz:</span></span><br><span class=\"line\">    <span class=\"attr\">job-store-type:</span> <span class=\"string\">jdbc</span> <span class=\"comment\">#数据库方式</span></span><br><span class=\"line\">    <span class=\"attr\">jdbc:</span></span><br><span class=\"line\">      <span class=\"attr\">initialize-schema:</span> <span class=\"string\">never</span> <span class=\"comment\">#不初始化表结构</span></span><br><span class=\"line\">    <span class=\"attr\">properties:</span></span><br><span class=\"line\">      <span class=\"attr\">org:</span></span><br><span class=\"line\">        <span class=\"attr\">quartz:</span></span><br><span class=\"line\">          <span class=\"attr\">scheduler:</span></span><br><span class=\"line\">            <span class=\"attr\">instanceId:</span> <span class=\"string\">AUTO</span> <span class=\"comment\">#默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span></span><br><span class=\"line\">            <span class=\"comment\">#instanceName: clusteredScheduler #quartzScheduler</span></span><br><span class=\"line\">          <span class=\"attr\">jobStore:</span></span><br><span class=\"line\">            <span class=\"attr\">class:</span> <span class=\"string\">org.quartz.impl.jdbcjobstore.JobStoreTX</span> <span class=\"comment\">#持久化配置</span></span><br><span class=\"line\">            <span class=\"attr\">driverDelegateClass:</span> <span class=\"string\">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span> <span class=\"comment\">#我们仅为数据库制作了特定于数据库的代理</span></span><br><span class=\"line\">            <span class=\"attr\">useProperties:</span> <span class=\"literal\">false</span> <span class=\"comment\">#以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。</span></span><br><span class=\"line\">            <span class=\"attr\">tablePrefix:</span> <span class=\"string\">qrtz_</span>  <span class=\"comment\">#数据库表前缀</span></span><br><span class=\"line\">            <span class=\"attr\">misfireThreshold:</span> <span class=\"number\">60000</span> <span class=\"comment\">#在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。</span></span><br><span class=\"line\">            <span class=\"attr\">clusterCheckinInterval:</span> <span class=\"number\">5000</span> <span class=\"comment\">#设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span></span><br><span class=\"line\">            <span class=\"attr\">isClustered:</span> <span class=\"literal\">true</span> <span class=\"comment\">#打开群集功能</span></span><br><span class=\"line\">          <span class=\"attr\">threadPool:</span> <span class=\"comment\">#连接池</span></span><br><span class=\"line\">            <span class=\"attr\">class:</span> <span class=\"string\">org.quartz.simpl.SimpleThreadPool</span></span><br><span class=\"line\">            <span class=\"attr\">threadCount:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">threadPriority:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"attr\">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><strong>这里需要注意的是两个节点的端口号应该不一致，避免冲突</strong></p>\n<h1 id=\"叁、实现一个Job\"><a href=\"#叁、实现一个Job\" class=\"headerlink\" title=\"叁、实现一个Job\"></a>叁、实现一个Job</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Job</span> <span class=\"keyword\">extends</span> <span class=\"title\">QuartzJobBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">executeInternal</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">        JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class=\"line\">        <span class=\"comment\">// 业务逻辑 ...</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;------springbootquartzonejob执行&quot;</span>+jobDataMap.get(<span class=\"string\">&quot;name&quot;</span>).toString()+<span class=\"string\">&quot;###############&quot;</span>+jobExecutionContext.getTrigger());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其中的日志输出是为了便于观察任务执行情况</strong></p>\n<h1 id=\"肆、封装定时任务操作\"><a href=\"#肆、封装定时任务操作\" class=\"headerlink\" title=\"肆、封装定时任务操作\"></a>肆、封装定时任务操作</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuartzService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scheduler scheduler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startScheduler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            scheduler.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobClass</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务实现类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间表达式 (这是每隔多少秒为一次任务)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTimes</span></span><br><span class=\"line\"><span class=\"comment\">     *            运行的次数 （&lt;0:表示不限次数）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobData</span></span><br><span class=\"line\"><span class=\"comment\">     *            参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addJob</span><span class=\"params\">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, <span class=\"keyword\">int</span> jobTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">int</span> jobTimes, Map jobData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 任务名称和组构成任务key</span></span><br><span class=\"line\">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            <span class=\"comment\">// 设置job参数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jobData!= <span class=\"keyword\">null</span> &amp;&amp; jobData.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 使用simpleTrigger规则</span></span><br><span class=\"line\">            Trigger trigger = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jobTimes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                        .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class=\"number\">1</span>).withIntervalInSeconds(jobTime))</span><br><span class=\"line\">                        .startNow().build();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                trigger = TriggerBuilder</span><br><span class=\"line\">                        .newTrigger().withIdentity(jobName, jobGroupName).withSchedule(SimpleScheduleBuilder</span><br><span class=\"line\">                                .repeatSecondlyForever(<span class=\"number\">1</span>).withIntervalInSeconds(jobTime).withRepeatCount(jobTimes))</span><br><span class=\"line\">                        .startNow().build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobClass</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务实现类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称(建议唯一)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间表达式 （如：0/5 * * * * ? ）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobData</span></span><br><span class=\"line\"><span class=\"comment\">     *            参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addJob</span><span class=\"params\">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, String jobTime, Map jobData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建jobDetail实例，绑定Job实现类</span></span><br><span class=\"line\">            <span class=\"comment\">// 指明job的名称，所在组的名称，以及绑定job类</span></span><br><span class=\"line\">            <span class=\"comment\">// 任务名称和组构成任务key</span></span><br><span class=\"line\">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            <span class=\"comment\">// 设置job参数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jobData!= <span class=\"keyword\">null</span> &amp;&amp; jobData.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 定义调度触发规则</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用cornTrigger规则</span></span><br><span class=\"line\">            <span class=\"comment\">// 触发器key</span></span><br><span class=\"line\">            Trigger trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .startAt(DateBuilder.futureDate(<span class=\"number\">1</span>, IntervalUnit.SECOND))</span><br><span class=\"line\">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).startNow().build();</span><br><span class=\"line\">            <span class=\"comment\">// 把作业和触发器注册到任务调度中</span></span><br><span class=\"line\">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改 一个job的 时间表达式</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateJob</span><span class=\"params\">(String jobName, String jobGroupName, String jobTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class=\"line\">            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class=\"line\">            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class=\"line\">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).build();</span><br><span class=\"line\">            <span class=\"comment\">// 重启触发器</span></span><br><span class=\"line\">            scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除任务一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            scheduler.deleteJob(<span class=\"keyword\">new</span> JobKey(jobName, jobGroupName));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.pauseJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 恢复一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resumeJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.resumeJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 立即执行一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runAJobNow</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.triggerJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有计划中的任务列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllJob() &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            GroupMatcher&lt;JobKey&gt; matcher = GroupMatcher.anyJobGroup();</span><br><span class=\"line\">            Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(matcher);</span><br><span class=\"line\">            jobList = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (JobKey jobKey : jobKeys) &#123;</span><br><span class=\"line\">                List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Trigger trigger : triggers) &#123;</span><br><span class=\"line\">                    Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;description&quot;</span>, <span class=\"string\">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class=\"line\">                    Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (trigger <span class=\"keyword\">instanceof</span> CronTrigger) &#123;</span><br><span class=\"line\">                        CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class=\"line\">                        String cronExpression = cronTrigger.getCronExpression();</span><br><span class=\"line\">                        map.put(<span class=\"string\">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    jobList.add(map);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jobList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有正在运行的job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryRunJob() &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;JobExecutionContext&gt; executingJobs = scheduler.getCurrentlyExecutingJobs();</span><br><span class=\"line\">            jobList = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;(executingJobs.size());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (JobExecutionContext executingJob : executingJobs) &#123;</span><br><span class=\"line\">                Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">                JobDetail jobDetail = executingJob.getJobDetail();</span><br><span class=\"line\">                JobKey jobKey = jobDetail.getKey();</span><br><span class=\"line\">                Trigger trigger = executingJob.getTrigger();</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;description&quot;</span>, <span class=\"string\">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class=\"line\">                Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (trigger <span class=\"keyword\">instanceof</span> CronTrigger) &#123;</span><br><span class=\"line\">                    CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class=\"line\">                    String cronExpression = cronTrigger.getCronExpression();</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                jobList.add(map);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jobList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"陆、初始化任务\"><a href=\"#陆、初始化任务\" class=\"headerlink\" title=\"陆、初始化任务\"></a>陆、初始化任务</h1><p>这里不准备给用户用web界面来配置定时任务，故此采用<strong>CommandLineRunner</strong>来子啊应用初始化的时候来初始化任务。只需要实现CommandLineRunner的run()方法即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job&quot;</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;0 * * * * ?&quot;</span>, map);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job2&quot;</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job2&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;10 * * * * ?&quot;</span>, map);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job3&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job3&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>, <span class=\"string\">&quot;15 * * * * ?&quot;</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"柒、测试验证\"><a href=\"#柒、测试验证\" class=\"headerlink\" title=\"柒、测试验证\"></a>柒、测试验证</h1><p>分别夏侯启动两个应用，然后观察任务执行，以及在运行过程中杀死某个服务，来观察定时任务的执行。<br><img src=\"https://eelve.com/upload/2019/8/1-a8a710a578ad47a8afc8ace72f3cbd7c.png\" alt=\"SpringbootquartzoneApplication\"><br><img src=\"https://eelve.com/upload/2019/8/2-db731d38c3ed4b4b8123482c9b3ef28d.png\" alt=\"SpringbootquartztwoApplication\"></p>\n<p>【<strong>写在后面的话</strong>】下面给出的是所需要脚本的连接地址：<a href=\"http://www.quartz-scheduler.org/downloads/\">脚本下载地址</a>，另外这边又一个自己实现的<a href=\"https://github.com/eelve/springbootquartzs.git\">demo</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"hide","path":"api/categories/hide.json"}],"tags":[{"name":"hide","path":"api/tags/hide.json"}]},{"title":"Java 8 Stream实践","slug":"Java 8 Stream实践","date":"2019-06-29T06:54:24.000Z","updated":"2021-04-19T06:44:39.275Z","comments":true,"path":"api/articles/Java 8 Stream实践.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/streamDataSource-df15382b03b24526955b1b14636316dd.png","content":"<p>【<strong>前面的话</strong>】Java中的Stream于1.8版本析出，平时项目中也有用到，今天就系统的来实践一下。下面借用重庆力帆队伍中我个人比较喜欢的球员来操作一波，队员的年龄为了便于展示某些api做了调整，请不要太认真哦。</p>\n<hr>\n<h1 id=\"壹-Stream理解\"><a href=\"#壹-Stream理解\" class=\"headerlink\" title=\"壹. Stream理解\"></a>壹. Stream理解</h1><p>在java中我们称Stream为『<strong>流</strong>』，我们经常会用流去对集合进行一些流水线的操作。stream就像工厂一样，只需要把集合、命令还有一些参数灌输到流水线中去，就可以加工成得出想要的结果。这样的流水线能大大简洁代码，减少操作。给我个人的感觉类似JavaScript中的链式函数。</p>\n<h1 id=\"贰-Stream流程\"><a href=\"#贰-Stream流程\" class=\"headerlink\" title=\"贰. Stream流程\"></a>贰. Stream流程</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原集合 —&gt; 流 —&gt; 各种操作(过滤、分组、统计) —&gt; 终端操作</span><br></pre></td></tr></table></figure>\n<p>Stream流的操作流程一般都是这样的，先将集合转为流，然后经过各种操作，比如过滤、筛选、分组、计算。最后的终端操作，就是转化成我们想要的数据，这个数据的形式一般还是集合，有时也会按照需求输出count计数。下文会一一举例。</p>\n<h1 id=\"叁-API实践\"><a href=\"#叁-API实践\" class=\"headerlink\" title=\"叁. API实践\"></a>叁. API实践</h1><p>首先，定义一个用户对象，包含姓名、年龄、id三个成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.training.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> User</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TDO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhao.zhilue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2019/6/28 15:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(exclude=&#123;&quot;id&quot;,&quot;name&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span>  <span class=\"title\">Comparable</span>&lt;<span class=\"title\">User</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Link name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;name&quot;, columnDefinition = &quot;varchar(255) not null&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;age&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(User o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age.compareTo(o.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在数据库中插入测试数据，见下图：</p>\n<p><img src=\"https://image.eelve.com/eblog/streamDataSource-df15382b03b24526955b1b14636316dd.png\" alt=\"streamDataSource\"></p>\n<h2 id=\"3-1过滤\"><a href=\"#3-1过滤\" class=\"headerlink\" title=\"3.1过滤\"></a>3.1过滤</h2><h3 id=\"1）filter-过滤-T-gt-boolean\"><a href=\"#1）filter-过滤-T-gt-boolean\" class=\"headerlink\" title=\"1）filter 过滤(T-&gt; boolean)\"></a>1）filter 过滤(T-&gt; boolean)</h3><p>假如我们要实现过滤出40岁以下的队员，我们可以这样来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().filter(user -&gt; user.getAge() &lt;= <span class=\"number\">40</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>filter里面，-&gt;箭头后面跟着的是一个<strong>boolean</strong>值，可以写任何的过滤条件，就相当于sql中where后面的东西，换句话说，能用sql实现的功能这里都可以实现<br>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）distinct-去重\"><a href=\"#2）distinct-去重\" class=\"headerlink\" title=\"2）distinct 去重\"></a>2）distinct 去重</h3><p>其用法和sql中的使用类似，假如我们要实现过去除用重复年龄的队员，我们可以这样来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserDistinct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）sorted排序\"><a href=\"#3）sorted排序\" class=\"headerlink\" title=\"3）sorted排序\"></a>3）sorted排序</h3><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(User o)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> age.compareTo(o.getAge());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSorted</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>反之, 需要调用 sorted((T, T) -&gt; int) 实现 Comparator 接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSortedWithComparator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().sorted(Comparator.comparingInt(User::getAge)).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）limit（）-返回前n个元素\"><a href=\"#4）limit（）-返回前n个元素\" class=\"headerlink\" title=\"4）limit（） 返回前n个元素\"></a>4）limit（） 返回前n个元素</h3><p>如果想知道队伍中年龄最小的就可以使用下面来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）skip\"><a href=\"#5）skip\" class=\"headerlink\" title=\"5）skip\"></a>5）skip</h3><p>它的用法和limit正好相反，是去除前面几个元素。<br>假如我们要去除前面两个元素就可以使用下面的方法来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSkip</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().skip(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6）组合使用\"><a href=\"#6）组合使用\" class=\"headerlink\" title=\"6）组合使用\"></a>6）组合使用</h3><p>以上的过滤函数物品们可以组合来使用来实现我们具体的需求，示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSortLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       List&lt;User&gt; resultList = userList.stream().sorted().limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">           System.out.println(user.toString());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以得到先排序后限制的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-映射\"><a href=\"#3-2-映射\" class=\"headerlink\" title=\"3.2 映射\"></a>3.2 映射</h2><h3 id=\"1）map-T-gt-R\"><a href=\"#1）map-T-gt-R\" class=\"headerlink\" title=\"1）map(T-&gt;R)\"></a>1）map(T-&gt;R)</h3><p>map是将T类型的数据转为R类型的数据，比如我们想要设置一个新的list，存储用户所有的城市信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;Integer&gt; resultList = userList.stream().map(User::getAge).distinct().collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(resultList.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们可以得到所有年龄的样本，执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">43</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）flatMap-T-gt-Stream\"><a href=\"#2）flatMap-T-gt-Stream\" class=\"headerlink\" title=\"2）flatMap(T -&gt; Stream)\"></a>2）flatMap(T -&gt; Stream<R>)</h3><p>将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStreamMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; habitsList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        habitsList.add(<span class=\"string\">&quot;唱歌,听歌&quot;</span>);</span><br><span class=\"line\">        habitsList.add(<span class=\"string\">&quot;羽毛球,足球,登山&quot;</span>);</span><br><span class=\"line\">        habitsList = habitsList.stream().map(s -&gt; s.split(<span class=\"string\">&quot;,&quot;</span>)).flatMap(Arrays::stream).collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(habitsList);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[唱歌, 听歌, 羽毛球, 足球, 登山]</span><br></pre></td></tr></table></figure>\n<p>这里原集合中的数据由逗号分割，使用split进行拆分后，得到的是Stream&lt;String[]&gt;，字符串数组组成的流，要使用flatMap的<strong>Arrays::stream</strong>，将Stream&lt;String[]&gt;转为Stream<String>,然后把流相连接，组成了完整的唱歌, 听歌, 羽毛球, 足球, 登山。</p>\n<h2 id=\"3-3-查找\"><a href=\"#3-3-查找\" class=\"headerlink\" title=\"3.3 查找\"></a>3.3 查找</h2><h3 id=\"1）allMatch（T-gt-boolean）\"><a href=\"#1）allMatch（T-gt-boolean）\" class=\"headerlink\" title=\"1）allMatch（T-&gt;boolean）\"></a>1）allMatch（T-&gt;boolean）</h3><p>检测是否全部满足参数行为，假如我们要检测是不是所有队员都是U21的球员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamAllMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isNotU21 = userList.stream().allMatch(user -&gt; user.getAge() &gt;= <span class=\"number\">21</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否都不是U21球员：&quot;</span> + isNotU21);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否都不是U21球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2）anyMatch（T-gt-boolean）\"><a href=\"#2）anyMatch（T-gt-boolean）\" class=\"headerlink\" title=\"2）anyMatch（T-&gt;boolean）\"></a>2）anyMatch（T-&gt;boolean）</h3><p>检测是否有任意元素满足给定的条件，比如，想知道是否有26岁的球员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamAnyMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isAgeU26 = userList.stream().anyMatch(user -&gt; user.getAge() == <span class=\"number\">26</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否有26岁的球员：&quot;</span> + isAgeU26);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否有<span class=\"number\">26</span>岁的球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3）noneMatch-T-gt-boolean\"><a href=\"#3）noneMatch-T-gt-boolean\" class=\"headerlink\" title=\"3）noneMatch(T -&gt; boolean)\"></a>3）noneMatch(T -&gt; boolean)</h3><p>流中是否有元素匹配给定的 T -&gt; boolean 条件。比如我们要检测是否含有U18的队员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamNoneMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> isNotU18 = userList.stream().noneMatch(user -&gt; user.getAge() &lt;= <span class=\"number\">18</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;是否都不是U18球员：&quot;</span> + isNotU18);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否都不是U18球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<p>说明没有U18的队员。</p>\n<h3 id=\"4）findFirst-找到第一个元素\"><a href=\"#4）findFirst-找到第一个元素\" class=\"headerlink\" title=\"4）findFirst( ):找到第一个元素\"></a>4）findFirst( ):找到第一个元素</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserFindFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; firstUser = userList.stream().sorted().findFirst();</span><br><span class=\"line\">        System.out.println(firstUser.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）findAny-找到任意一个元素\"><a href=\"#5）findAny-找到任意一个元素\" class=\"headerlink\" title=\"5）findAny():找到任意一个元素\"></a>5）findAny():找到任意一个元素</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserFindAny</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; anytUser = userList.parallelStream().sorted().findAny();</span><br><span class=\"line\">        System.out.println(anytUser.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)]</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-归纳计算\"><a href=\"#3-4-归纳计算\" class=\"headerlink\" title=\"3.4 归纳计算\"></a>3.4 归纳计算</h2><h3 id=\"1）求队员的总人数\"><a href=\"#1）求队员的总人数\" class=\"headerlink\" title=\"1）求队员的总人数\"></a>1）求队员的总人数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> totalAge = userList.stream().collect(Collectors.counting());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;队员人数为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">队员人数为：<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2）得到某一属性的最大最小值\"><a href=\"#2）得到某一属性的最大最小值\" class=\"headerlink\" title=\"2）得到某一属性的最大最小值\"></a>2）得到某一属性的最大最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserMaxAndMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; userMaxAge = userList.stream().collect(Collectors.maxBy(Comparator.comparing(User::getAge)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄最大的队员为：&quot;</span> + userMaxAge.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;User&gt; userMinAge = userList.stream().collect(Collectors.minBy(Comparator.comparing(User::getAge)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄最小的队员为：&quot;</span> + userMinAge.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄最大的队员为：Optional[User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br><span class=\"line\">年龄最小的队员为：Optional[User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）求年龄总和是多少\"><a href=\"#3）求年龄总和是多少\" class=\"headerlink\" title=\"3）求年龄总和是多少\"></a>3）求年龄总和是多少</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserSummingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalAge = userList.stream().collect(Collectors.summingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄总和为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄总和为：<span class=\"number\">175</span></span><br></pre></td></tr></table></figure>\n<p>我们经常会用BigDecimal来记录金钱，假设想得到BigDecimal的总和：<br>// 获得列表对象金额， 使用reduce聚合函数,实现累加器<br>BigDecimal sum = myList.stream() .map(User::getMoney)<br>.reduce(BigDecimal.ZERO,BigDecimal::add);</p>\n<h3 id=\"4）求年龄平均值\"><a href=\"#4）求年龄平均值\" class=\"headerlink\" title=\"4）求年龄平均值\"></a>4）求年龄平均值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserAveragingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Double totalAge = userList.stream().collect(Collectors.averagingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;平均年龄为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">平均年龄为：<span class=\"number\">29.166666666666668</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5）一次性得到元素的个数、总和、最大值、最小值\"><a href=\"#5）一次性得到元素的个数、总和、最大值、最小值\" class=\"headerlink\" title=\"5）一次性得到元素的个数、总和、最大值、最小值\"></a>5）一次性得到元素的个数、总和、最大值、最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserSummarizingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        IntSummaryStatistics  statistics  = userList.stream().collect(Collectors.summarizingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄的统计结果为：&quot;</span> + statistics );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄的统计结果为：IntSummaryStatistics&#123;count=<span class=\"number\">6</span>, sum=<span class=\"number\">175</span>, min=<span class=\"number\">25</span>, average=<span class=\"number\">29.166667</span>, max=<span class=\"number\">43</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6）字符串拼接\"><a href=\"#6）字符串拼接\" class=\"headerlink\" title=\"6）字符串拼接\"></a>6）字符串拼接</h3><p>要将队员的姓名连成一个字符串并用逗号分割。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserJoining</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        String  name  = userList.stream().map(User::getName).collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;所有的队员名字：&quot;</span> + name );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有的队员名字：费尔南多,费尔南迪尼奥,卡尔德克,阿德里安,隋维杰,克鲁伊夫</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5-分组\"><a href=\"#3-5-分组\" class=\"headerlink\" title=\"3.5 分组\"></a>3.5 分组</h2><p>在数据库操作中，我们经常通过GROUP BY关键字对查询到的数据进行分组，java8的流式处理也提供了分组的功能。使用Collectors.groupingBy来进行分组。</p>\n<h3 id=\"1）可以根据队员的年龄进行分组\"><a href=\"#1）可以根据队员的年龄进行分组\" class=\"headerlink\" title=\"1）可以根据队员的年龄进行分组\"></a>1）可以根据队员的年龄进行分组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserGroupingBy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       Map&lt;Integer, List&lt;User&gt;&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge));</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Map.Entry&lt;Integer,List&lt;User&gt;&gt; entry :ageMap.entrySet())&#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key= <span class=\"number\">25</span> and value= [User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br><span class=\"line\">key= <span class=\"number\">26</span> and value= [User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>), User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)]</span><br><span class=\"line\">key= <span class=\"number\">43</span> and value= [User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br><span class=\"line\">key= <span class=\"number\">27</span> and value= [User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)]</span><br><span class=\"line\">key= <span class=\"number\">28</span> and value= [User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)]</span><br></pre></td></tr></table></figure>\n<p>结果是一个map，key为不重复的年龄，value为属于该年龄的队员列表。已经实现了分组。另外我们还可以继续分组得到两次分组的结果。</p>\n<h3 id=\"2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\"><a href=\"#2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\" class=\"headerlink\" title=\"2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\"></a>2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list</h3><p>按年龄分组并统计人数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserGroupingByCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Map&lt;Integer,Long&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge,Collectors.counting()));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer,Long&gt; entry :ageMap.entrySet())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队员中&quot;</span> + entry.getKey() + <span class=\"string\">&quot;岁的队员人数为：&quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">队员中<span class=\"number\">25</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">26</span>岁的队员人数为：<span class=\"number\">2</span></span><br><span class=\"line\">队员中<span class=\"number\">43</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">27</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">28</span>岁的队员人数为：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3）partitioningBy-分区\"><a href=\"#3）partitioningBy-分区\" class=\"headerlink\" title=\"3）partitioningBy 分区\"></a>3）partitioningBy 分区</h3><p>分区与分组的区别在于，分区是按照 true 和 false 来分的，因此partitioningBy 接受的参数的 lambda 也是 T -&gt; boolean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserPartitioningBy</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Map&lt;Boolean,List&lt;User&gt;&gt; partitioningByMap  = userList.stream().collect(partitioningBy(user -&gt; user.getAge() &gt;= <span class=\"number\">30</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Boolean,List&lt;User&gt;&gt; entry :partitioningByMap.entrySet())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key= <span class=\"keyword\">false</span> and value= [User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>), User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>), User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>), User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>), User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)]</span><br><span class=\"line\">key= <span class=\"keyword\">true</span> and value= [User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>写在后面的话</strong>】留下stream的类实现的方法和依赖图，前面的实践也只是挑选了几个比较常用的Api。</p>\n<p><img src=\"https://image.eelve.com/eblog/stream-d2e3fe9045e945ce9411d8db6043b32c.png\" alt=\"stream\"></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"stream","path":"api/tags/stream.json"}]},{"title":"Java 8 Stream实践","slug":"Java 8 Stream实践本地版","date":"2019-06-29T06:54:24.000Z","updated":"2021-04-19T06:44:39.278Z","comments":true,"path":"api/articles/Java 8 Stream实践本地版.json","excerpt":null,"keywords":"南国薏米","cover":"https://eelve.com/upload/2019/7/streamDataSource-df15382b03b24526955b1b14636316dd.png","content":"<p>【<strong>前面的话</strong>】Java中的Stream于1.8版本析出，平时项目中也有用到，今天就系统的来实践一下。下面借用重庆力帆队伍中我个人比较喜欢的球员来操作一波，队员的年龄为了便于展示某些api做了调整，请不要太认真哦。</p>\n<hr>\n<h1 id=\"壹-Stream理解\"><a href=\"#壹-Stream理解\" class=\"headerlink\" title=\"壹. Stream理解\"></a>壹. Stream理解</h1><p>在java中我们称Stream为『<strong>流</strong>』，我们经常会用流去对集合进行一些流水线的操作。stream就像工厂一样，只需要把集合、命令还有一些参数灌输到流水线中去，就可以加工成得出想要的结果。这样的流水线能大大简洁代码，减少操作。给我个人的感觉类似JavaScript中的链式函数。</p>\n<h1 id=\"贰-Stream流程\"><a href=\"#贰-Stream流程\" class=\"headerlink\" title=\"贰. Stream流程\"></a>贰. Stream流程</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原集合 —&gt; 流 —&gt; 各种操作(过滤、分组、统计) —&gt; 终端操作</span><br></pre></td></tr></table></figure>\n<p>Stream流的操作流程一般都是这样的，先将集合转为流，然后经过各种操作，比如过滤、筛选、分组、计算。最后的终端操作，就是转化成我们想要的数据，这个数据的形式一般还是集合，有时也会按照需求输出count计数。下文会一一举例。</p>\n<h1 id=\"叁-API实践\"><a href=\"#叁-API实践\" class=\"headerlink\" title=\"叁. API实践\"></a>叁. API实践</h1><p>首先，定义一个用户对象，包含姓名、年龄、id三个成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.training.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> User</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TDO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhao.zhilue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2019/6/28 15:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(exclude=&#123;&quot;id&quot;,&quot;name&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span>  <span class=\"title\">Comparable</span>&lt;<span class=\"title\">User</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Link name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;name&quot;, columnDefinition = &quot;varchar(255) not null&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;age&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(User o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age.compareTo(o.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在数据库中插入测试数据，见下图：</p>\n<p><img src=\"https://eelve.com/upload/2019/7/streamDataSource-df15382b03b24526955b1b14636316dd.png\" alt=\"streamDataSource\"></p>\n<h2 id=\"3-1过滤\"><a href=\"#3-1过滤\" class=\"headerlink\" title=\"3.1过滤\"></a>3.1过滤</h2><h3 id=\"1）filter-过滤-T-gt-boolean\"><a href=\"#1）filter-过滤-T-gt-boolean\" class=\"headerlink\" title=\"1）filter 过滤(T-&gt; boolean)\"></a>1）filter 过滤(T-&gt; boolean)</h3><p>假如我们要实现过滤出40岁以下的队员，我们可以这样来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().filter(user -&gt; user.getAge() &lt;= <span class=\"number\">40</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>filter里面，-&gt;箭头后面跟着的是一个<strong>boolean</strong>值，可以写任何的过滤条件，就相当于sql中where后面的东西，换句话说，能用sql实现的功能这里都可以实现<br>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）distinct-去重\"><a href=\"#2）distinct-去重\" class=\"headerlink\" title=\"2）distinct 去重\"></a>2）distinct 去重</h3><p>其用法和sql中的使用类似，假如我们要实现过去除用重复年龄的队员，我们可以这样来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserDistinct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）sorted排序\"><a href=\"#3）sorted排序\" class=\"headerlink\" title=\"3）sorted排序\"></a>3）sorted排序</h3><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(User o)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> age.compareTo(o.getAge());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSorted</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>反之, 需要调用 sorted((T, T) -&gt; int) 实现 Comparator 接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSortedWithComparator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().sorted(Comparator.comparingInt(User::getAge)).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）limit（）-返回前n个元素\"><a href=\"#4）limit（）-返回前n个元素\" class=\"headerlink\" title=\"4）limit（） 返回前n个元素\"></a>4）limit（） 返回前n个元素</h3><p>如果想知道队伍中年龄最小的就可以使用下面来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）skip\"><a href=\"#5）skip\" class=\"headerlink\" title=\"5）skip\"></a>5）skip</h3><p>它的用法和limit正好相反，是去除前面几个元素。<br>假如我们要去除前面两个元素就可以使用下面的方法来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSkip</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().skip(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6）组合使用\"><a href=\"#6）组合使用\" class=\"headerlink\" title=\"6）组合使用\"></a>6）组合使用</h3><p>以上的过滤函数物品们可以组合来使用来实现我们具体的需求，示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSortLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       List&lt;User&gt; resultList = userList.stream().sorted().limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">           System.out.println(user.toString());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以得到先排序后限制的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-映射\"><a href=\"#3-2-映射\" class=\"headerlink\" title=\"3.2 映射\"></a>3.2 映射</h2><h3 id=\"1）map-T-gt-R\"><a href=\"#1）map-T-gt-R\" class=\"headerlink\" title=\"1）map(T-&gt;R)\"></a>1）map(T-&gt;R)</h3><p>map是将T类型的数据转为R类型的数据，比如我们想要设置一个新的list，存储用户所有的城市信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;Integer&gt; resultList = userList.stream().map(User::getAge).distinct().collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(resultList.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们可以得到所有年龄的样本，执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">43</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）flatMap-T-gt-Stream\"><a href=\"#2）flatMap-T-gt-Stream\" class=\"headerlink\" title=\"2）flatMap(T -&gt; Stream)\"></a>2）flatMap(T -&gt; Stream<R>)</h3><p>将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStreamMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; habitsList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        habitsList.add(<span class=\"string\">&quot;唱歌,听歌&quot;</span>);</span><br><span class=\"line\">        habitsList.add(<span class=\"string\">&quot;羽毛球,足球,登山&quot;</span>);</span><br><span class=\"line\">        habitsList = habitsList.stream().map(s -&gt; s.split(<span class=\"string\">&quot;,&quot;</span>)).flatMap(Arrays::stream).collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(habitsList);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[唱歌, 听歌, 羽毛球, 足球, 登山]</span><br></pre></td></tr></table></figure>\n<p>这里原集合中的数据由逗号分割，使用split进行拆分后，得到的是Stream&lt;String[]&gt;，字符串数组组成的流，要使用flatMap的<strong>Arrays::stream</strong>，将Stream&lt;String[]&gt;转为Stream<String>,然后把流相连接，组成了完整的唱歌, 听歌, 羽毛球, 足球, 登山。</p>\n<h2 id=\"3-3-查找\"><a href=\"#3-3-查找\" class=\"headerlink\" title=\"3.3 查找\"></a>3.3 查找</h2><h3 id=\"1）allMatch（T-gt-boolean）\"><a href=\"#1）allMatch（T-gt-boolean）\" class=\"headerlink\" title=\"1）allMatch（T-&gt;boolean）\"></a>1）allMatch（T-&gt;boolean）</h3><p>检测是否全部满足参数行为，假如我们要检测是不是所有队员都是U21的球员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamAllMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isNotU21 = userList.stream().allMatch(user -&gt; user.getAge() &gt;= <span class=\"number\">21</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否都不是U21球员：&quot;</span> + isNotU21);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否都不是U21球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2）anyMatch（T-gt-boolean）\"><a href=\"#2）anyMatch（T-gt-boolean）\" class=\"headerlink\" title=\"2）anyMatch（T-&gt;boolean）\"></a>2）anyMatch（T-&gt;boolean）</h3><p>检测是否有任意元素满足给定的条件，比如，想知道是否有26岁的球员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamAnyMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isAgeU26 = userList.stream().anyMatch(user -&gt; user.getAge() == <span class=\"number\">26</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否有26岁的球员：&quot;</span> + isAgeU26);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否有<span class=\"number\">26</span>岁的球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3）noneMatch-T-gt-boolean\"><a href=\"#3）noneMatch-T-gt-boolean\" class=\"headerlink\" title=\"3）noneMatch(T -&gt; boolean)\"></a>3）noneMatch(T -&gt; boolean)</h3><p>流中是否有元素匹配给定的 T -&gt; boolean 条件。比如我们要检测是否含有U18的队员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamNoneMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> isNotU18 = userList.stream().noneMatch(user -&gt; user.getAge() &lt;= <span class=\"number\">18</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;是否都不是U18球员：&quot;</span> + isNotU18);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否都不是U18球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<p>说明没有U18的队员。</p>\n<h3 id=\"4）findFirst-找到第一个元素\"><a href=\"#4）findFirst-找到第一个元素\" class=\"headerlink\" title=\"4）findFirst( ):找到第一个元素\"></a>4）findFirst( ):找到第一个元素</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserFindFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; firstUser = userList.stream().sorted().findFirst();</span><br><span class=\"line\">        System.out.println(firstUser.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）findAny-找到任意一个元素\"><a href=\"#5）findAny-找到任意一个元素\" class=\"headerlink\" title=\"5）findAny():找到任意一个元素\"></a>5）findAny():找到任意一个元素</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserFindAny</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; anytUser = userList.parallelStream().sorted().findAny();</span><br><span class=\"line\">        System.out.println(anytUser.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)]</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-归纳计算\"><a href=\"#3-4-归纳计算\" class=\"headerlink\" title=\"3.4 归纳计算\"></a>3.4 归纳计算</h2><h3 id=\"1）求队员的总人数\"><a href=\"#1）求队员的总人数\" class=\"headerlink\" title=\"1）求队员的总人数\"></a>1）求队员的总人数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> totalAge = userList.stream().collect(Collectors.counting());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;队员人数为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">队员人数为：<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2）得到某一属性的最大最小值\"><a href=\"#2）得到某一属性的最大最小值\" class=\"headerlink\" title=\"2）得到某一属性的最大最小值\"></a>2）得到某一属性的最大最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserMaxAndMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; userMaxAge = userList.stream().collect(Collectors.maxBy(Comparator.comparing(User::getAge)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄最大的队员为：&quot;</span> + userMaxAge.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;User&gt; userMinAge = userList.stream().collect(Collectors.minBy(Comparator.comparing(User::getAge)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄最小的队员为：&quot;</span> + userMinAge.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄最大的队员为：Optional[User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br><span class=\"line\">年龄最小的队员为：Optional[User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）求年龄总和是多少\"><a href=\"#3）求年龄总和是多少\" class=\"headerlink\" title=\"3）求年龄总和是多少\"></a>3）求年龄总和是多少</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserSummingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalAge = userList.stream().collect(Collectors.summingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄总和为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄总和为：<span class=\"number\">175</span></span><br></pre></td></tr></table></figure>\n<p>我们经常会用BigDecimal来记录金钱，假设想得到BigDecimal的总和：<br>// 获得列表对象金额， 使用reduce聚合函数,实现累加器<br>BigDecimal sum = myList.stream() .map(User::getMoney)<br>.reduce(BigDecimal.ZERO,BigDecimal::add);</p>\n<h3 id=\"4）求年龄平均值\"><a href=\"#4）求年龄平均值\" class=\"headerlink\" title=\"4）求年龄平均值\"></a>4）求年龄平均值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserAveragingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Double totalAge = userList.stream().collect(Collectors.averagingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;平均年龄为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">平均年龄为：<span class=\"number\">29.166666666666668</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5）一次性得到元素的个数、总和、最大值、最小值\"><a href=\"#5）一次性得到元素的个数、总和、最大值、最小值\" class=\"headerlink\" title=\"5）一次性得到元素的个数、总和、最大值、最小值\"></a>5）一次性得到元素的个数、总和、最大值、最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserSummarizingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        IntSummaryStatistics  statistics  = userList.stream().collect(Collectors.summarizingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄的统计结果为：&quot;</span> + statistics );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄的统计结果为：IntSummaryStatistics&#123;count=<span class=\"number\">6</span>, sum=<span class=\"number\">175</span>, min=<span class=\"number\">25</span>, average=<span class=\"number\">29.166667</span>, max=<span class=\"number\">43</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6）字符串拼接\"><a href=\"#6）字符串拼接\" class=\"headerlink\" title=\"6）字符串拼接\"></a>6）字符串拼接</h3><p>要将队员的姓名连成一个字符串并用逗号分割。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserJoining</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        String  name  = userList.stream().map(User::getName).collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;所有的队员名字：&quot;</span> + name );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有的队员名字：费尔南多,费尔南迪尼奥,卡尔德克,阿德里安,隋维杰,克鲁伊夫</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5-分组\"><a href=\"#3-5-分组\" class=\"headerlink\" title=\"3.5 分组\"></a>3.5 分组</h2><p>在数据库操作中，我们经常通过GROUP BY关键字对查询到的数据进行分组，java8的流式处理也提供了分组的功能。使用Collectors.groupingBy来进行分组。</p>\n<h3 id=\"1）可以根据队员的年龄进行分组\"><a href=\"#1）可以根据队员的年龄进行分组\" class=\"headerlink\" title=\"1）可以根据队员的年龄进行分组\"></a>1）可以根据队员的年龄进行分组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserGroupingBy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       Map&lt;Integer, List&lt;User&gt;&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge));</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Map.Entry&lt;Integer,List&lt;User&gt;&gt; entry :ageMap.entrySet())&#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key= <span class=\"number\">25</span> and value= [User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br><span class=\"line\">key= <span class=\"number\">26</span> and value= [User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>), User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)]</span><br><span class=\"line\">key= <span class=\"number\">43</span> and value= [User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br><span class=\"line\">key= <span class=\"number\">27</span> and value= [User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)]</span><br><span class=\"line\">key= <span class=\"number\">28</span> and value= [User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)]</span><br></pre></td></tr></table></figure>\n<p>结果是一个map，key为不重复的年龄，value为属于该年龄的队员列表。已经实现了分组。另外我们还可以继续分组得到两次分组的结果。</p>\n<h3 id=\"2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\"><a href=\"#2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\" class=\"headerlink\" title=\"2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\"></a>2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list</h3><p>按年龄分组并统计人数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserGroupingByCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Map&lt;Integer,Long&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge,Collectors.counting()));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer,Long&gt; entry :ageMap.entrySet())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队员中&quot;</span> + entry.getKey() + <span class=\"string\">&quot;岁的队员人数为：&quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">队员中<span class=\"number\">25</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">26</span>岁的队员人数为：<span class=\"number\">2</span></span><br><span class=\"line\">队员中<span class=\"number\">43</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">27</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">28</span>岁的队员人数为：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3）partitioningBy-分区\"><a href=\"#3）partitioningBy-分区\" class=\"headerlink\" title=\"3）partitioningBy 分区\"></a>3）partitioningBy 分区</h3><p>分区与分组的区别在于，分区是按照 true 和 false 来分的，因此partitioningBy 接受的参数的 lambda 也是 T -&gt; boolean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserPartitioningBy</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Map&lt;Boolean,List&lt;User&gt;&gt; partitioningByMap  = userList.stream().collect(partitioningBy(user -&gt; user.getAge() &gt;= <span class=\"number\">30</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Boolean,List&lt;User&gt;&gt; entry :partitioningByMap.entrySet())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key= <span class=\"keyword\">false</span> and value= [User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>), User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>), User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>), User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>), User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)]</span><br><span class=\"line\">key= <span class=\"keyword\">true</span> and value= [User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>写在后面的话</strong>】留下stream的类实现的方法和依赖图，前面的实践也只是挑选了几个比较常用的Api。</p>\n<p><img src=\"https://eelve.com/upload/2019/7/stream-d2e3fe9045e945ce9411d8db6043b32c.png\" alt=\"stream\"></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"hide","path":"api/categories/hide.json"}],"tags":[{"name":"hide","path":"api/tags/hide.json"}]}]}