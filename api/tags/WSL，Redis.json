{"name":"WSL，Redis","postlist":[{"title":"WSL2中体验Redis的布隆过滤器","slug":"WSL2中体验Redis的布隆过滤器","date":"2020-08-15T03:39:40.000Z","updated":"2021-04-19T06:44:39.149Z","comments":true,"path":"api/articles/WSL2中体验Redis的布隆过滤器.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png","content":"<p>【<strong>前面的话</strong>】前面已经安装了<a href=\"https://eelve.com/archives/hellowsl2\">WSL2</a> ，最近准备研究一下Redis的布隆过滤器，现在就先搭建一下环境。</p>\n<hr>\n<h1 id=\"壹、准备环境\"><a href=\"#壹、准备环境\" class=\"headerlink\" title=\"壹、准备环境\"></a>壹、准备环境</h1><ul>\n<li>WSL：WSL2</li>\n<li>Docker: Docker for Windows <code>Use the WSL 2 based engine</code></li>\n</ul>\n<h1 id=\"贰、安装过程\"><a href=\"#贰、安装过程\" class=\"headerlink\" title=\"贰、安装过程\"></a>贰、安装过程</h1><h2 id=\"2-1-前情资讯\"><a href=\"#2-1-前情资讯\" class=\"headerlink\" title=\"2.1 前情资讯\"></a>2.1 前情资讯</h2><p><code>Redis v4.0</code>之后有了 <code>Module（模块/插件）</code>功能，<code>Redis Modules</code>让 <code>Redis</code> 可以使用外部模块扩展其功能 。布隆过滤器就是其中的<code>Module</code>。详情可以查看<code>Redis</code>官方对 <code>Redis Modules</code>的介绍 ：<a href=\"https://redis.io/modules\">https://redis.io/modules</a></p>\n<p>另外，官网推荐了一个<code>RedisBloom</code>作为<code>Redis</code>布隆过滤器的<code>Module</code>,地址：<a href=\"https://github.com/RedisBloom/RedisBloom\">https://github.com/RedisBloom/RedisBloom</a>. 其他还有：</p>\n<ul>\n<li>redis-lua-scaling-bloom-filter （lua 脚本实现）：<a href=\"https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter\">https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter</a></li>\n<li>pyreBloom（Python中的快速Redis 布隆过滤器） ：<a href=\"https://github.com/seomoz/pyreBloom\">https://github.com/seomoz/pyreBloom</a></li>\n<li>……</li>\n</ul>\n<p><code>RedisBloom</code>提供了多种语言的客户端支持，包括：<code>Python</code>、<code>Java</code>、<code>JavaScript</code> 和 <code>PHP</code>。</p>\n<h2 id=\"2-2-Docker安装\"><a href=\"#2-2-Docker安装\" class=\"headerlink\" title=\"2.2 Docker安装\"></a>2.2 Docker安装</h2><p>如果我们需要体验<code>Redis</code>中的布隆过滤器非常简单，通过 Docker 就可以了！这里我们使用这个仓库下的镜像：<a href=\"https://hub.docker.com/r/redislabs/rebloom/\">https://hub.docker.com/r/redislabs/rebloom/</a></p>\n<p>下面是具体命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc@Chirius:/mnt/c/Users/Chirius$ docker run -p 9379:6379 --name redis-redisbloom redislabs/rebloom:latest</span><br><span class=\"line\">1:C 15 Aug 2020 03:26:02.860 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">1:C 15 Aug 2020 03:26:02.860 <span class=\"comment\"># Redis version=6.0.5, bits=64, commit=00000000, modified=0, pid=1, just started</span></span><br><span class=\"line\">1:C 15 Aug 2020 03:26:02.860 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">1:M 15 Aug 2020 03:26:02.862 * Running mode=standalone, port=6379.</span><br><span class=\"line\">1:M 15 Aug 2020 03:26:02.862 <span class=\"comment\"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class=\"line\">1:M 15 Aug 2020 03:26:02.862 <span class=\"comment\"># Server initialized</span></span><br><span class=\"line\">1:M 15 Aug 2020 03:26:02.862 <span class=\"comment\"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span></span><br><span class=\"line\">1:M 15 Aug 2020 03:26:02.862 <span class=\"comment\"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></span><br><span class=\"line\">1:M 15 Aug 2020 03:26:02.864 * Module <span class=\"string\">&#x27;bf&#x27;</span> loaded from /usr/lib/redis/modules/redisbloom.so</span><br><span class=\"line\">1:M 15 Aug 2020 03:26:02.864 * Ready to accept connections</span><br><span class=\"line\">^C1:signal-handler (1597462093) Received SIGINT scheduling shutdown...</span><br><span class=\"line\">1:M 15 Aug 2020 03:28:13.217 <span class=\"comment\"># User requested shutdown...</span></span><br><span class=\"line\">1:M 15 Aug 2020 03:28:13.217 <span class=\"comment\"># Redis is now ready to exit, bye bye...</span></span><br></pre></td></tr></table></figure>\n<p>根据提示修改内存参数等，注意使用root用户：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc@Chirius:/mnt/c/Users/Chirius$ <span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">cc@Chirius:~$ su root</span><br><span class=\"line\">Password:</span><br><span class=\"line\">root@Chirius:/home/cc<span class=\"comment\"># vi /etc/sysctl.conf</span></span><br><span class=\"line\">root@Chirius:/home/cc<span class=\"comment\"># sysctl vm.overcommit_memory=1</span></span><br><span class=\"line\">vm.overcommit_memory = 1</span><br><span class=\"line\">root@Chirius:/home/cc<span class=\"comment\"># echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class=\"line\">root@Chirius:/home/cc<span class=\"comment\"># ll /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class=\"line\">-rw-r--r-- 1 root root 4096 Aug 15 11:30 /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class=\"line\">root@Chirius:/home/cc<span class=\"comment\"># cat /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class=\"line\">always madvise [never]</span><br><span class=\"line\">root@Chirius:/home/cc<span class=\"comment\"># ll /etc/rc.local</span></span><br><span class=\"line\">ls: cannot access <span class=\"string\">&#x27;/etc/rc.local&#x27;</span>: No such file or directory</span><br><span class=\"line\">root@Chirius:/home/cc<span class=\"comment\"># vi /etc/rc.local</span></span><br><span class=\"line\">root@Chirius:/home/cc<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>然后再重启容器，就可以启动成功了，然后进行体验</p>\n<h1 id=\"叁、布隆过滤器体验\"><a href=\"#叁、布隆过滤器体验\" class=\"headerlink\" title=\"叁、布隆过滤器体验\"></a>叁、布隆过滤器体验</h1><h2 id=\"3-1-常用命令\"><a href=\"#3-1-常用命令\" class=\"headerlink\" title=\"3.1 常用命令\"></a>3.1 常用命令</h2><blockquote>\n<p>注意： key:布隆过滤器的名称，item : 添加的元素。</p>\n</blockquote>\n<ul>\n<li><code>BF.ADD</code>：将元素添加到布隆过滤器中，如果该过滤器尚不存在，则创建该过滤器。格式：<code>BF.ADD &#123;key&#125; &#123;item&#125;</code>。</li>\n<li><code>BF.MADD</code>: 将一个或多个元素添加到“布隆过滤器”中，并创建一个尚不存在的过滤器。该命令的操作方式BF.ADD与之相同，只不过它允许多个输入并返回多个值。格式：<code>BF.MADD &#123;key&#125; &#123;item&#125; [item ...]</code>。</li>\n<li><code>**BF.EXISTS **</code>: 确定元素是否在布隆过滤器中存在。格式：<code>BF.EXISTS &#123;key&#125; &#123;item&#125;</code>。</li>\n<li><code>BF.MEXISTS</code>： 确定一个或者多个元素是否在布隆过滤器中存在格式：<code>BF.MEXISTS &#123;key&#125; &#123;item&#125; [item ...]</code>。</li>\n</ul>\n<p>另外，<code>BF.RESERVE</code>命令需要单独介绍一下：</p>\n<p>这个命令的格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BF.RESERVE &#123;key&#125; &#123;error_rate&#125; &#123;capacity&#125; [EXPANSION expansion] 。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下面简单介绍一下每个参数的具体含义：</p>\n<ul>\n<li><code>key</code>：布隆过滤器的名称</li>\n<li><code>error_rate</code>:误报的期望概率。这应该是介于0到1之间的十进制值。例如，对于期望的误报率0.1％（1000中为1），<code>error_rate</code>应该设置为0.001。该数字越接近零，则每个项目的内存消耗越大，并且每个操作的CPU使用率越高。</li>\n<li><code>capacity</code>: 过滤器的容量。当实际存储的元素个数超过这个值之后，性能将开始下降。实际的降级将取决于超出限制的程度。随着过滤器元素数量呈指数增长，性能将线性下降。</li>\n</ul>\n<p>可选参数：</p>\n<ul>\n<li>expansion：如果创建了一个新的子过滤器，则其大小将是当前过滤器的大小乘以<code>expansion</code>。默认扩展值为2。这意味着每个后续子过滤器将是前一个子过滤器的两倍。</li>\n</ul>\n<h2 id=\"3-2-体验\"><a href=\"#3-2-体验\" class=\"headerlink\" title=\"3.2 体验\"></a>3.2 体验</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc@Chirius:/mnt/c/Users/Chirius$ docker <span class=\"built_in\">exec</span> -it redis-redisbloom bash</span><br><span class=\"line\">root@9cc653f9411a:/data<span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; BF.ADD mine zzl</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; BF.ADD mine llo</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; BF.ADD mine iio</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; BF.EXISTS mine super</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; BF.EXISTS mine iio</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; BF.EXISTS mine zzl</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>【<strong>后面的话</strong>】布隆过滤器主要用来解决<code>缓存穿透(大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层)</code>。一般MySQL 默认的最大连接数在 150 左右，这个可以通过<code>show variables like &#39;%max_connections%&#39;;</code>命令来查看。最大连接数一个还只是一个指标，cpu，内存，磁盘，网络等无力条件都是其运行指标，这些指标都会限制其并发能力！所以，一般<code>3000</code>个并发请求就能打死大部分数据库了。布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在与海量数据中。我们需要的就是判断<code>key</code>是否合法。具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，我会先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走具体的业务的流程。</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"WSL","path":"api/categories/WSL.json"}],"tags":[{"name":"WSL，Redis","path":"api/tags/WSL，Redis.json"}]}]}