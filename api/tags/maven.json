{"name":"maven","postlist":[{"title":"用命令将本地jar包导入到本地maven仓库","slug":"用命令将本地jar包导入到本地maven仓库","date":"2019-08-09T09:15:04.000Z","updated":"2021-04-19T06:44:39.261Z","comments":true,"path":"api/articles/用命令将本地jar包导入到本地maven仓库.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/%E5%AF%BC%E5%85%A5jar%E5%8C%85%E7%BB%93%E6%9E%9C-859bee2db9f14a2a8079b449d38e061c.png","content":"<p>【<strong>前情提要</strong>】在日常开发过程中，我们总是不可避免的需要依赖某些不在中央仓库，同时也不在本地仓库中的jar包，这是我们就需要使用命令行将需要导入本地仓库中的jar包导入本地仓库，使得项目依赖本地仓库中的代码。</p>\n<hr>\n<p>例如我们需要将下面pom文件中的jar包引入本地仓库</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.eelve<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>todo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>导入命令</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=D:\\link\\lib\\todo-1.0.jar  -DgroupId=com.eelve -DartifactId=todo -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure>\n<hr>\n<p>命令详解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Dfile：jar包所在本地的具体路径</span><br><span class=\"line\">-DgroupId：项目组织唯一的标识符，实际对应JAVA的包的结构</span><br><span class=\"line\">-DartifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称</span><br><span class=\"line\">-Dversion：版本号</span><br><span class=\"line\">-Dpackaging：打包的类型</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p>结果示例</p>\n<p><img src=\"https://image.eelve.com/eblog/%E5%AF%BC%E5%85%A5jar%E5%8C%85%E7%BB%93%E6%9E%9C-859bee2db9f14a2a8079b449d38e061c.png\" alt=\"导入jar包结果\"></p>\n<hr>\n<p>【小贴士】maven的仓库分类</p>\n<p>在maven中，仓库可以分为：本地仓库、远程仓库。<br>远程仓库可以分为：中央仓库、私服仓库。<br>中央仓库是maven官方指定的仓库，可以理解为“寻找的最后一站”。<br>私服仓库可以是自己建的，也可以是其它主体建的（比如aliyun的maven仓库，jboss的maven仓库等）。<br>私服可以分为：全局应用的私服仓库、应用到项目自身的私服仓库。</p>\n<p>maven寻找得顺序大致可以理解为：<br>1，在本地仓库中寻找，如果没有则进入下一步。<br>2，在全局应用的私服仓库中寻找，如果没有则进入下一步。<br>3，在项目自身的私服仓库中寻找，如果没有则进入下一步。<br>4，在中央仓库中寻找，如果没有则终止寻找。</p>\n<p>补充：<br>1，如果在找寻的过程中，如果发现该仓库有镜像设置，则用镜像的地址代替。<br>2，如果仓库的id设置成“central”，则该配置会覆盖maven默认的中央仓库配置。</p>\n<p>以上，通过实践得来的，可能不全面，仅当参考</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"maven","path":"api/tags/maven.json"}]}]}