{"name":"java","postlist":[{"title":"Spring Boot Admin 的使用","slug":"SpringBoot-Admin的使用","date":"2019-08-09T09:07:34.000Z","updated":"2021-04-19T06:44:39.287Z","comments":true,"path":"api/articles/SpringBoot-Admin的使用.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png","content":"<p>【<strong>前情提要</strong>】Spring Boot Actuator 提供了对单个 Spring Boot 应用的监控，信息包含应用状态、内存、线程、堆栈等，比较全面的监控了 Spring Boot 应用的整个生命周期。但是这样监控也有一些问题：第一，所有的监控都需要调用固定的接口来查看，如果全面查看应用状态需要调用很多接口，并且接口返回的 JSON 信息不方便运营人员理解；第二，如果 Spring Boot 应用集群非常大，每个应用都需要调用不同的接口来查看监控信息，操作非常繁琐低效。在这样的背景下，就诞生了另外一个开源软件：<strong>Spring Boot Admin</strong>。</p>\n<hr>\n<h1 id=\"壹、什么是Spring-Boot-Admin\"><a href=\"#壹、什么是Spring-Boot-Admin\" class=\"headerlink\" title=\"壹、什么是Spring Boot Admin\"></a>壹、什么是Spring Boot Admin</h1><p>Spring Boot Admin 是一个管理和监控 Spring Boot 应用程序的开源软件，每个应用都认为是一个客户端，通过 HTTP 或者使用 Eureka 注册到 admin server 中进行展示，Spring Boot Admin UI 部分使用 Vue.js 将数据展示在前端。</p>\n<p>Spring Boot Admin 是一个针对 Spring Boot 的 Actuator 接口进行 UI 美化封装的监控工具，它可以在列表中浏览所有被监控 spring-boot 项目的基本信息、详细的 Health 信息、内存信息、JVM 信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改 logger 的 level。</p>\n<p>值得注意的是 Spring Boot Admin 并不是 Spring Boot 官方出品的开源软件，但是其软件质量和使用广泛度都非常的高，并且 Spring Boot Admin 会及时随着 Spring Boot 的更新而更新，当 Spring Boot 推出 2.X 版本时 Spring Boot Admin 也及时进行了更新。</p>\n<p>Spring Boot Admin 2.x 不仅是跟着支持了 Spring Boot 2.x，还在 1.x 的基础上进行了大量的更新和优化:</p>\n<pre><code>重新规划了项目依赖包，让项目中更方便的集成 Spring Boot Admin\n1.x 前端使用了 Angular.js，2.x 使用 Vue 对界面进行了重写，界面美观度提升幅度非常高\n提供了支持 Spring Cloud 的组件\n其他更新，具体参考：Changes with 2.x\n</code></pre>\n<p>Spring Boot Admin 分为服务端和客户端，服务端其实就是一个监控后台用来汇总展示所有的监控信息，客户端就是我们的应用，使用时需要先启动服务端，在启动客户端的时候打开 Actuator 的接口，并指向服务端的地址，这样服务端会定时读取相关信息以达到监控的目的。</p>\n<hr>\n<p>接下来演示如何使用 Spring Boot Admin 对 Spring Boot 应用进行监控。</p>\n<h1 id=\"贰、监控单体应用\"><a href=\"#贰、监控单体应用\" class=\"headerlink\" title=\"贰、监控单体应用\"></a>贰、监控单体应用</h1><p>先给大家展示如何使用 Spring Boot Admin 监控单个 Spring Boot 应用。</p>\n<h2 id=\"Admin-Server-端\"><a href=\"#Admin-Server-端\" class=\"headerlink\" title=\"Admin Server 端\"></a>Admin Server 端</h2><h3 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>2.x 下只需要添加此一个包即可，其他组件会自动依赖添加。</strong></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>server.port=8000</p>\n<p>服务端设置端口为：8000。</p>\n<h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminServerApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>完成上面三步之后，启动服务端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 可以看到以下界面：<br><img src=\"https://image.eelve.com/eblog/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png\" alt=\"监控页面\"><br>因为刚启动没有应用，因此显示：No applications registered.，同时根据上图也可以看出 applications 页面会展示项目的应用数、实例数和状态三个信息。</p>\n<p>接下来我们构建一个客户端，并注册到服务端。</p>\n<h2 id=\"Admin-Client-端\"><a href=\"#Admin-Client-端\" class=\"headerlink\" title=\"Admin Client 端\"></a>Admin Client 端</h2><h2 id=\"项目依赖-1\"><a href=\"#项目依赖-1\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>添加 spring-boot-starter-web 是为了使应用处于启动状态，spring-boot-admin-starter-client 会自动添加 Actuator 相关依赖。</strong></p>\n<h3 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8001</span></span><br><span class=\"line\"><span class=\"meta\">spring.application.name</span>=<span class=\"string\">Admin Client</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.client.url</span>=<span class=\"string\">http://localhost:8000  </span></span><br><span class=\"line\"><span class=\"meta\">management.endpoints.web.exposure.include</span>=<span class=\"string\">*</span></span><br></pre></td></tr></table></figure>\n<pre><code>spring.boot.admin.client.url 配置 Admin Server 的地址\nmanagement.endpoints.web.exposure.include=* 打开客户端 Actuator 的监控\n</code></pre>\n<h3 id=\"启动类-1\"><a href=\"#启动类-1\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminClientApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminClientApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，启动 Client 端，Admin 服务端会自动检查到客户端的变化，并展示其应用：<br><img src=\"https://image.eelve.com/eblog/82-1b588fee05794b2d94a2f578ba805fbb.png\" alt=\"结果\"><br>页面会展示被监控的服务列表，点击项目名称会进入此应用的详细监控信息：<br><img src=\"https://image.eelve.com/eblog/83-d685df514a0e44b1bd45e5b6bd1a9e64.png\" alt=\"详情\"><br>通过上图可以看出，Spring Boot Admin 以图形化的形式展示了应用的各项信息，这些信息大多都来自于 <strong>Spring Boot Actuator</strong> 提供的接口。利用图形化的形式很容易看到应用的各项参数变化，甚至有些页面还可以进行一些操作，比如改变打印日志的级别等。</p>\n<h3 id=\"点击-journal-页面可以看到应用状态变化的历史过程：\"><a href=\"#点击-journal-页面可以看到应用状态变化的历史过程：\" class=\"headerlink\" title=\"点击 journal 页面可以看到应用状态变化的历史过程：\"></a>点击 journal 页面可以看到应用状态变化的历史过程：</h3><p><img src=\"https://image.eelve.com/eblog/84-fa96d9eee75d47d599f55e27533664e4.png\" alt=\"journal\"></p>\n<h3 id=\"点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\"><a href=\"#点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\" class=\"headerlink\" title=\"点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。\"></a>点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。</h3><p><img src=\"https://image.eelve.com/eblog/85-c42df15785a14110b7532b20afee8ca1.png\" alt=\"wallboard \"></p>\n<h1 id=\"叁、监控微服务\"><a href=\"#叁、监控微服务\" class=\"headerlink\" title=\"叁、监控微服务\"></a>叁、监控微服务</h1><p>如果我们使用的是单个 Spring Boot 应用，就需要在每一个被监控的应用中配置 Admin Server 的地址信息；如果应用都注册在 Eureka 中就不需要再对每个应用进行配置，Spring Boot Admin 会自动从注册中心抓取应用的相关信息。</p>\n<p>如果使用了 Spring Cloud 的服务发现功能，就不需要再单独添加 Admin Client 客户端，仅仅需要 Spring Boot Server，其他内容会自动进行配置。</p>\n<p>接下来以 Eureka 作为服务发现的示例来进行演示，实际上也可以使用 Consul 或者 Zookeeper。</p>\n<p>（1）服务端和客户端添加 spring-cloud-starter-eureka 到包依赖中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）启动类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityPermitAllConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            http.authorizeRequests().anyRequest().permitAll()  </span><br><span class=\"line\">                .and().csrf().disable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用类 <strong>SecurityPermitAllConfig</strong> 关闭了安全验证。</p>\n<p>（3）在客户端中配置服务发现的地址</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span>   </span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">leaseRenewalIntervalInSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">health-check-url-path:</span> <span class=\"string\">/actuator/health</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">startup:</span> <span class=\"string\">$&#123;random.int&#125;</span>    <span class=\"comment\">#needed to trigger info and endpoint update after restart</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">registryFetchIntervalSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">serviceUrl:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&quot;*&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">ALWAYS</span></span><br></pre></td></tr></table></figure>\n<p><strong>Spring Cloud</strong> 提供了示例代码可以参考这里：<a href=\"https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka/\">spring-boot-admin-sample-eureka</a>。</p>\n<p>重启启动服务端和客户端之后，访问服务端的相关地址就可以看到监控页面了。</p>\n<h1 id=\"肆、安全控制\"><a href=\"#肆、安全控制\" class=\"headerlink\" title=\"肆、安全控制\"></a>肆、安全控制</h1><p><strong>Spring Boot Admin</strong> 后台有很多的敏感信息和操作，如果公司不做权限控制可能会影响到公司系统的安全性。Spring Boot Admin 也考虑到了这个因素，可以利用前面的 Spring Security 做安全访问控制，在 spring-boot-admin-server 上进行改造。</p>\n<p>（1）添加 Spring Boot Security 依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）添加安全访问控制</p>\n<p>和前面的 Security 配置一样，给项目添加访问控制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecuritySecureConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String adminContextPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecuritySecureConfig</span><span class=\"params\">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class=\"keyword\">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class=\"line\">        successHandler.setTargetUrlParameter(<span class=\"string\">&quot;redirectTo&quot;</span>);</span><br><span class=\"line\">        successHandler.setDefaultTargetUrl(adminContextPath + <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() </span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).permitAll()</span><br><span class=\"line\">            .anyRequest().authenticated() </span><br><span class=\"line\">            .and()</span><br><span class=\"line\">        .formLogin().loginPage(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).successHandler(successHandler).and() </span><br><span class=\"line\">        .logout().logoutUrl(adminContextPath + <span class=\"string\">&quot;/logout&quot;</span>).and()</span><br><span class=\"line\">        .httpBasic().and() </span><br><span class=\"line\">        .csrf()</span><br><span class=\"line\">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class=\"line\">            .ignoringAntMatchers(</span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/instances&quot;</span>,   </span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/actuator/**&quot;</span>  </span><br><span class=\"line\">            );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() 所有静态内容不做安全验证</span><br><span class=\"line\">    anyRequest().authenticated() 其他请求均需要验证</span><br><span class=\"line\">    formLogin() 配置登录</span><br><span class=\"line\">    logout() 配置登出</span><br><span class=\"line\">    httpBasic() 支持 HTTP，引导 Spring Boot Admin 客户端注册</span><br><span class=\"line\">    csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 打开跨站点请求保护 Cookies</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/instances&quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/instances&quot;</span>，方便 Admin 客户端注册</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/actuator/** &quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/actuator/**&quot;</span>，可以让 Admin 监控到 Actuator 的相关接口</span><br></pre></td></tr></table></figure>\n<p>然后可以给 security 设置一个用户名和密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重启 Admin Server 端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 就会发现需要一个登录的用户名和密码了。<br><img src=\"https://image.eelve.com/eblog/86-dc4b6d05194a4c9786383189c6378f26.png\" alt=\"Admin Server\"><br>使用刚才设置的用户名和密码登录之后，发现注册到 Server 端的服务数成为 0 了，这是客户端统一也需要配置帐户名和密码信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重新启动，在服务端就又可以查看监控到的应用了。</p>\n<h1 id=\"伍、其他方式\"><a href=\"#伍、其他方式\" class=\"headerlink\" title=\"伍、其他方式\"></a>伍、其他方式</h1><p>如果 Actuator 的端口被使用 HTTP 认证保护，那么 Spring Boot Admin Server 访问的时候需要凭证信息，这时候可以使用 metadata 的方式对账户和密码进行配置。</p>\n<h2 id=\"直接使用客户端注册的方式：\"><a href=\"#直接使用客户端注册的方式：\" class=\"headerlink\" title=\"直接使用客户端注册的方式：\"></a>直接使用客户端注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.boot.admin.client:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8080</span></span><br><span class=\"line\">    <span class=\"attr\">instance:</span></span><br><span class=\"line\">      <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Eureka-进行注册的方式：\"><a href=\"#使用-Eureka-进行注册的方式：\" class=\"headerlink\" title=\"使用 Eureka 进行注册的方式：\"></a>使用 Eureka 进行注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Eureka 中的 metadataMap 是专门用来存放一些自定义的数据，当注册中心或者其他服务需要此服务的某些配置时可以在 metadataMap 里取。实际上，每个 instance 都有各自的 metadataMap，map 中存放着需要用到的属性。例如，上面配置中的 eureka.instance.metadata-map.user.name，当这个服务成功注册到 Eureka 上，Spring Boot Admin 就会拿到这个 instance，进而拿到 metadataMap 里的属性，然后放入请求头，向此服务发送请求，访问此服务的 Actuator 开放的端点。</p>\n<h1 id=\"陆、邮件告警\"><a href=\"#陆、邮件告警\" class=\"headerlink\" title=\"陆、邮件告警\"></a>陆、邮件告警</h1><p>Spring Boot Admin 将微服务中所有应用信息在后台进行了展示，非常方便我们对微服务整体的监控和治理。但是我们的运营人员也不可能一天 24 小时盯着监控后台，因此如果服务有异常的时候，有对应的邮件告警就太好了，其实 Spring Boot Admin 也给出了支持。</p>\n<p>我们对上面的示例项目 spring-boot-admin-server 进行改造。</p>\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"增加了邮件发送的-starter-包。\"><a href=\"#增加了邮件发送的-starter-包。\" class=\"headerlink\" title=\"增加了邮件发送的 starter 包。\"></a>增加了邮件发送的 starter 包。</h2><h3 id=\"配置文件-2\"><a href=\"#配置文件-2\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mail.host</span>=<span class=\"string\">smtp.qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.username</span>=<span class=\"string\">xxx@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.password</span>=<span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.auth</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.required</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.from</span>=<span class=\"string\">yyyy@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.to</span>=<span class=\"string\">zzz@qq.com</span></span><br></pre></td></tr></table></figure>\n<p><strong>在配置文件中添加邮件发送相关信息：邮件的发送者、接受者、协议、移动授权码等</strong>。</p>\n<p>配置完成后，重新启动项目 spring-boot-admin-server，这样 Admin Server 就具备了邮件告警的功能，默认情况下 Admin Server 对 Eureka 中的服务上下线都进行了监控，当服务上下线的时候我们就会收到相应的告警邮件。</p>\n<p>当然这只是最基本的邮件监控，在实际的使用过程中，需要根据情况对邮件告警内容进行自定义，比如监控堆内存的使用情况，当到达一定比例的时候进行告警等。</p>\n<p>【写在后面的话】Spring Boot Admin 解决了我们对大规模 Spring Boot 应用监控的需求，Spring Boot Admin 充分利用了 Actuator 开放的相关接口，采用优秀的图形界面将这些信息进行了展示，方便我们更加直观的查看集群中应用的状态。Spring Boot Admin 不仅可以监控单个 Spring Boot 应用，也可以结合 Spring Cloud 监控注册到服务中心的所有应用状态，再结合报警系统的使用就可以随时感知到应用的状态变化。在实际工作中 Spring Boot Admin 是我们在后期运营中频繁用到的一个组件，应该作为重点关注。</p>\n<hr>\n<p>最后是一个用http方式监听的demo：<a href=\"https://github.com/eelve/springbootadmin\">Spring Boot Admin使用http连接server端</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"springboot-admin","path":"api/tags/springboot-admin.json"}]},{"title":"SpringBoot自定义Starter","slug":"SpringBoot自定义Starter","date":"2020-04-05T04:01:17.000Z","updated":"2021-04-19T06:44:39.042Z","comments":true,"path":"api/articles/SpringBoot自定义Starter.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png","content":"<p>【<strong>前面的话</strong>】在使用SpringBoot的日常开发过程中，我们不可避免的要封装一些自己的Starter，今天这篇文章就来讨论一下怎么自定义一个Starter，本文会封装一个短信发送能力的Starter,使用<a href=\"https://office.ucpaas.com/about/index.html\">云之讯</a>的SDK。</p>\n<hr>\n<h1 id=\"壹、命名规范\"><a href=\"#壹、命名规范\" class=\"headerlink\" title=\"壹、命名规范\"></a>壹、命名规范</h1><p>官方的约定主要有一个命名的约定：在maven中，groupId代表着姓氏，artifactId代表着名字。Spring Boot也是有一个命名的建议的。groupId不要用官方的org.springframework.boot而要用你自己独特的。对于artifactId的命名，Spring Boot官方建议非官方的Starter命名格式遵循 xxxx-spring-boot-starter ，例如 mybatis-spring-boot-starter 。官方starter会遵循spring-boot-starter-xxxx ,例如spring-boot-starter-web 。很多开源starter作者会忽略这种约定，显得不够“专业“。</p>\n<h1 id=\"贰、新建工程\"><a href=\"#贰、新建工程\" class=\"headerlink\" title=\"贰、新建工程\"></a>贰、新建工程</h1><p>新建一个<strong>sms-spring-boot-starter</strong>工程，pom依赖如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--封装Starter核心依赖  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--非必需,该依赖作用是在使用IDEA编写配置文件有代码提示--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- lombok 插件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 因为要使用RestTemplate和转换Json，所以引入这两个依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.61<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"叁、Properties配置\"><a href=\"#叁、Properties配置\" class=\"headerlink\" title=\"叁、Properties配置\"></a>叁、Properties配置</h1><p>一般配置参数都是在Spring Boot 的application.yml中。我们会定义一个前缀标识来作为名称空间隔离各个组件的参数。对应的组件会定义一个XXXXProperties 来自动装配这些参数。自动装配的机制基于@ConfigurationProperties注解，请注意一定要显式声明你配置的前缀标识（prefix）。所以这里我们新建<strong>SmsProperties</strong>类，可以配置信息通过配置项名称映射成实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;ucpaassms-config&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accountSid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authToken;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里我们可以将配置文件中前缀为<strong>ucpaassms-config</strong>的配置，映射到<strong>SmsProperties</strong>类中。在将来使用时只需要在application.yml中加入上面对应SmsProperties的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ucpaassms-config:</span></span><br><span class=\"line\">  <span class=\"attr\">account-sid:</span>  <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">auth-token:</span>   <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span>        <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"肆、定义业务实现类\"><a href=\"#肆、定义业务实现类\" class=\"headerlink\" title=\"肆、定义业务实现类\"></a>肆、定义业务实现类</h1><p>拿到配置后，接下来就是根据配置来初始化我们的功能接口。这里我们新建<strong>SmsService</strong>，用来提供具体业务逻辑处理能力</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accountSid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authToken;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SmsService</span><span class=\"params\">(SmsProperties smsProperties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.appid = smsProperties.getAppid();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.accountSid = smsProperties.getAccountSid();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.authToken = smsProperties.getAuthToken();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 单独发送</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendSMS</span><span class=\"params\">(SendSMSDTO sendSMSDTO)</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;sid&quot;</span>, accountSid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;token&quot;</span>, authToken);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;appid&quot;</span>, appid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;templateid&quot;</span>, sendSMSDTO.getTemplateid());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;param&quot;</span>, sendSMSDTO.getParam());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;mobile&quot;</span>, sendSMSDTO.getMobile());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sendSMSDTO.getUid()!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,sendSMSDTO.getUid());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String json = JSONObject.toJSONString(jsonObject);</span><br><span class=\"line\">        <span class=\"comment\">//使用restTemplate进行访问远程Http服务</span></span><br><span class=\"line\">        HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">        HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(json, headers);</span><br><span class=\"line\">        String result = restTemplate.postForObject(ENUM_SMSAPI_URL.SENDSMS.getUrl(), httpEntity, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 群体发送</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendBatchSMS</span><span class=\"params\">(SendSMSDTO sendSMSDTO)</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;sid&quot;</span>, accountSid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;token&quot;</span>, authToken);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;appid&quot;</span>, appid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;templateid&quot;</span>, sendSMSDTO.getTemplateid());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;param&quot;</span>, sendSMSDTO.getParam());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;mobile&quot;</span>, sendSMSDTO.getMobile());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sendSMSDTO.getUid()!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,sendSMSDTO.getUid());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String json = JSONObject.toJSONString(jsonObject);</span><br><span class=\"line\">        <span class=\"comment\">//使用restTemplate进行访问远程Http服务</span></span><br><span class=\"line\">        HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">        HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(json, headers);</span><br><span class=\"line\">        String result = restTemplate.postForObject(ENUM_SMSAPI_URL.SENDBATCHSMS.getUrl(), httpEntity, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"伍、定义配置类\"><a href=\"#伍、定义配置类\" class=\"headerlink\" title=\"伍、定义配置类\"></a>伍、定义配置类</h1><p>功能接口实现完后我们会编写一个自动配置类 SmsAutoConfiguration 。除了@Configuration注解外，@EnableConfigurationProperties会帮助我们将我们的配置类SmsProperties加载进来。然后将我们需要暴露的功能接口声明为Spring Bean暴露给Spring Boot应用。这里我们新建<strong>SmsAutoConfiguration</strong>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>  <span class=\"comment\">//注释使类成为bean的工厂</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(SmsProperties.class)</span> <span class=\"comment\">//使@ConfigurationProperties注解生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SmsService <span class=\"title\">getBean</span><span class=\"params\">(SmsProperties smsProperties)</span></span>&#123;</span><br><span class=\"line\">        SmsService smsService = <span class=\"keyword\">new</span> SmsService(smsProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> smsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"陆、自动装配\"><a href=\"#陆、自动装配\" class=\"headerlink\" title=\"陆、自动装配\"></a>陆、自动装配</h1><p>这里会用到类似java的SPI机制。在资源包下新建META-INF/spring.factories写入SmsAutoConfiguration全限定名。这样在starter组件集成入Spring Boot应用时就可以被应用捕捉到。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;com.eelve.sms.starter.config.SmsAutoConfiguration</span><br></pre></td></tr></table></figure>\n<p>这里还有另外一种方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(SmsAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableSMS &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这样我们使用EnableSMS注解，就可以使用能力了</span></span><br></pre></td></tr></table></figure>\n<p>到这里我们的自定义配置就可以完成了，然后就可以上传仓库，提供给第三方使用了。</p>\n<h1 id=\"柒、测试\"><a href=\"#柒、测试\" class=\"headerlink\" title=\"柒、测试\"></a>柒、测试</h1><h2 id=\"7-1-加入sms-spring-boot-starter短信依赖\"><a href=\"#7-1-加入sms-spring-boot-starter短信依赖\" class=\"headerlink\" title=\"7.1 加入sms-spring-boot-starter短信依赖\"></a>7.1 加入<strong>sms-spring-boot-starter</strong>短信依赖</h2><h2 id=\"7-2-编写配置\"><a href=\"#7-2-编写配置\" class=\"headerlink\" title=\"7.2 编写配置\"></a>7.2 编写配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ucpaassms-config:</span></span><br><span class=\"line\">  <span class=\"attr\">account-sid:</span>  <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">auth-token:</span>   <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span>        <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-3-编写测试类\"><a href=\"#7-3-编写测试类\" class=\"headerlink\" title=\"7.3 编写测试类\"></a>7.3 编写测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.ucpaassms.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.sms.starter.SmsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.sms.starter.dto.SendSMSDTO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/sms&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SmsService smsService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/sendsmsTest&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendsmsTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建传输类设置参数</span></span><br><span class=\"line\">        SendSMSDTO sendSMSDTO  = <span class=\"keyword\">new</span> SendSMSDTO();</span><br><span class=\"line\">        sendSMSDTO.setMobile(<span class=\"string\">&quot;18888888888&quot;</span>);     <span class=\"comment\">//手机号</span></span><br><span class=\"line\">        sendSMSDTO.setTemplateid(<span class=\"string\">&quot;55555&quot;</span>); <span class=\"comment\">//模板</span></span><br><span class=\"line\">        sendSMSDTO.setParam(<span class=\"string\">&quot;9999&quot;</span>);      <span class=\"comment\">//参数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> smsService.sendSMS(sendSMSDTO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后运行，访问<a href=\"http://localhost:8080/sms/sendsmsTest\">http://localhost:8080/sms/sendsmsTest</a>,就可以收到发送的短信了</p>\n<pre><code>【蔚然山庄】尊敬的用户，敬请关注我们的后续活动。\n</code></pre>\n<hr>\n<p>【<strong>后面的话</strong>】</p>\n<p>在引入自己封装的Starter的时候,有的人会报错xxxx类的bean没有找到问题,是因为@SpringBootApplication扫描包的范围是启动类所在同级包和子包,但是不包括第三方的jar包.如果需要扫描maven依赖添加的Jar,我们就要单独使用@ComponentScan注解扫描包.<br>针对这种情况解决方式有两种:</p>\n<p>第一种:是你封装的Starter项目下父级包名称和测试项目的父级包名一样,例如这两个项目包名都叫com.eelve,这样可以不使用@ComponentScan注解,很显然这样做有局限性,不推荐.</p>\n<p>第二种:是可以单独使用@ComponentScan注解扫描第三方包,但是这里一定要注意@SpringBootApplication注解等价于默认属性使用@Configuration+@EnableAutoConfiguration+@ComponentScan,如果@SpringBootApplication和@ComponentScan注解同时存在，那么@SpringBootApplication注解中@ComponentScan的扫描范围会被覆盖,所以单独使用@ComponentScan的话,必须在该注解上配置项目需要扫描的包的所有范围,即项目包路径+依赖包路径.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/**</span></span><br><span class=\"line\"> <span class=\"string\">*</span> <span class=\"string\">@ComponentScan注解扫描多个包下示例</span></span><br><span class=\"line\"> <span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"string\">@ComponentScan(&#123;&quot;com.test&quot;,&quot;sms.test&quot;&#125;)</span></span><br></pre></td></tr></table></figure>\n<p>另外具体实现可以参考我的项目：<a href=\"https://github.com/eelve/ucpaas-spring-boot-starter\">ucpaas-spring-boot-starter</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"SpringBoot","path":"api/categories/SpringBoot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"}]},{"title":"Tomcat中URI不支持特殊字符解决方案","slug":"Tomcat中URI不支持特殊字符解决方案","date":"2020-06-30T04:17:57.000Z","updated":"2021-04-19T06:44:39.140Z","comments":true,"path":"api/articles/Tomcat中URI不支持特殊字符解决方案.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png","content":"<p>【<strong>前情提要</strong>】最近开发过程中遇到一个<code>Tomcat</code>中<code>IllegalArgumentException</code>的报错，所以在这里记录一下。</p>\n<h1 id=\"壹、错误现象\"><a href=\"#壹、错误现象\" class=\"headerlink\" title=\"壹、错误现象\"></a>壹、错误现象</h1><p>在用Get请求是当URL中包含特殊字符，比如：<code>&lt;</code>、<code>&gt;</code>、<code>(</code>、<code>)</code>、<code>&#123;</code>、<code>&#125;</code>、<code>|</code>等时，Tomcat会报出以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986</span><br><span class=\"line\">    at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:476) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:687) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_161]</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_161]</span><br><span class=\"line\">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:748) [na:1.8.0_161]</span><br></pre></td></tr></table></figure>\n<h1 id=\"贰、故障原因\"><a href=\"#贰、故障原因\" class=\"headerlink\" title=\"贰、故障原因\"></a>贰、故障原因</h1><p>因为Tomcat严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ])。传入的参数中有”{“不在RFC3986中的保留字段中，所以会报参数异常错。而且这个错误你在应用中处理不到，因为根本都还没有进入应用，在Tomcat中就已经报错了，而且就连你在Tomcat中配置错误页面也没有用。</p>\n<h1 id=\"叁、解决方案\"><a href=\"#叁、解决方案\" class=\"headerlink\" title=\"叁、解决方案\"></a>叁、解决方案</h1><h2 id=\"3-1、定义requestTargetAllow属性\"><a href=\"#3-1、定义requestTargetAllow属性\" class=\"headerlink\" title=\"3.1、定义requestTargetAllow属性\"></a>3.1、定义requestTargetAllow属性</h2><p>Tomcat 7.0.76, 8.0.42, 8.5.12 这些版本之后可以定义requestTargetAllow 属性来允许禁止的字符。在tomcat的 catalina.properties文件中添加这一句：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">tomcat.util.http.parser.HttpParser.requestTargetAllow</span>=<span class=\"string\">|&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2、修复server-xml配置文件\"><a href=\"#3-2、修复server-xml配置文件\" class=\"headerlink\" title=\"3.2、修复server.xml配置文件\"></a>3.2、修复server.xml配置文件</h2><p>如果某些版本的Tomcat已经参照<code>3.1</code>中的方法修改之后，还是不生效的话。从官网的文档中我们可以查看到如下提示：tomcat.util.http.parser.HttpParser. requestTargetAllow(This system property is deprecated. Use the relaxedPathChars and relaxedQueryChars attributes of the Connector instead)</p>\n<p>所有我们在Tomcat配置文件中：$CATALINA_HOME/conf/server.xml添加<code>relaxedQueryChars</code>属性添加到Connector元素：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8080&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">&quot;20000&quot;</span> <span class=\"attr\">URIEncoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span> <span class=\"attr\">relaxedQueryChars</span>=<span class=\"string\">&quot;[]|&#123;&#125;^<span class=\"symbol\">&amp;#x5c;</span><span class=\"symbol\">&amp;#x60;</span><span class=\"symbol\">&amp;quot;</span><span class=\"symbol\">&amp;lt;</span><span class=\"symbol\">&amp;gt;</span>&quot;</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3、Springboot修改方法\"><a href=\"#3-3、Springboot修改方法\" class=\"headerlink\" title=\"3.3、Springboot修改方法\"></a>3.3、Springboot修改方法</h2><p>在SpringBootApplication的的main方法中增加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(<span class=\"string\">&quot;tomcat.util.http.parser.HttpParser.requestTargetAllow&quot;</span>,<span class=\"string\">&quot;|&#123;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>另外在Springboot 2.0 之后的版本，可以自定义<code>WebServerFactoryCustomizer</code>，添加特殊字符的支持：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created on 2019/2/18 17:41.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Ethan</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * java.lang.IllegalArgumentException:</span></span><br><span class=\"line\"><span class=\"comment\"> *  Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PortalTomcatWebServerCustomizer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebServerFactoryCustomizer</span>&lt;<span class=\"title\">TomcatServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(TomcatServletWebServerFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        factory.addConnectorCustomizers(connector -&gt; connector.setAttribute(<span class=\"string\">&quot;relaxedQueryChars&quot;</span>, <span class=\"string\">&quot;&#123;&#125;[]|&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"tomcat","path":"api/tags/tomcat.json"}]},{"title":"spring-boot-starter-quartz集群实践","slug":"spring-boot-starter-quartz集群实践","date":"2019-08-09T09:06:12.000Z","updated":"2021-04-19T06:44:39.180Z","comments":true,"path":"api/articles/spring-boot-starter-quartz集群实践.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/1-a8a710a578ad47a8afc8ace72f3cbd7c.png","content":"<p>【<strong>前情提要</strong>】由于项目需要，需要一个定时任务集群，故此有了这个spring-boot-starter-quartz集群的实践。springboot的版本为：2.1.6.RELEASE；quartz的版本为：2.3.1.假如这里一共有两个定时任务的节点，它们的代码完全一样。</p>\n<hr>\n<h1 id=\"壹-jar包依赖\"><a href=\"#壹-jar包依赖\" class=\"headerlink\" title=\"壹.jar包依赖\"></a>壹.jar包依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class=\"line\">    &lt;&#x2F;properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">        &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>这里选择将定时任务的数据入库，避免数据直接存在内存中，因应用重启造成的数据丢失和做集群控制。</p>\n<h1 id=\"贰、项目配置\"><a href=\"#贰、项目配置\" class=\"headerlink\" title=\"贰、项目配置\"></a>贰、项目配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">servlet:</span></span><br><span class=\"line\">      <span class=\"attr\">context-path:</span> <span class=\"string\">/lovin</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/training?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">quartz:</span></span><br><span class=\"line\">    <span class=\"attr\">job-store-type:</span> <span class=\"string\">jdbc</span> <span class=\"comment\">#数据库方式</span></span><br><span class=\"line\">    <span class=\"attr\">jdbc:</span></span><br><span class=\"line\">      <span class=\"attr\">initialize-schema:</span> <span class=\"string\">never</span> <span class=\"comment\">#不初始化表结构</span></span><br><span class=\"line\">    <span class=\"attr\">properties:</span></span><br><span class=\"line\">      <span class=\"attr\">org:</span></span><br><span class=\"line\">        <span class=\"attr\">quartz:</span></span><br><span class=\"line\">          <span class=\"attr\">scheduler:</span></span><br><span class=\"line\">            <span class=\"attr\">instanceId:</span> <span class=\"string\">AUTO</span> <span class=\"comment\">#默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span></span><br><span class=\"line\">            <span class=\"comment\">#instanceName: clusteredScheduler #quartzScheduler</span></span><br><span class=\"line\">          <span class=\"attr\">jobStore:</span></span><br><span class=\"line\">            <span class=\"attr\">class:</span> <span class=\"string\">org.quartz.impl.jdbcjobstore.JobStoreTX</span> <span class=\"comment\">#持久化配置</span></span><br><span class=\"line\">            <span class=\"attr\">driverDelegateClass:</span> <span class=\"string\">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span> <span class=\"comment\">#我们仅为数据库制作了特定于数据库的代理</span></span><br><span class=\"line\">            <span class=\"attr\">useProperties:</span> <span class=\"literal\">false</span> <span class=\"comment\">#以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。</span></span><br><span class=\"line\">            <span class=\"attr\">tablePrefix:</span> <span class=\"string\">qrtz_</span>  <span class=\"comment\">#数据库表前缀</span></span><br><span class=\"line\">            <span class=\"attr\">misfireThreshold:</span> <span class=\"number\">60000</span> <span class=\"comment\">#在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。</span></span><br><span class=\"line\">            <span class=\"attr\">clusterCheckinInterval:</span> <span class=\"number\">5000</span> <span class=\"comment\">#设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span></span><br><span class=\"line\">            <span class=\"attr\">isClustered:</span> <span class=\"literal\">true</span> <span class=\"comment\">#打开群集功能</span></span><br><span class=\"line\">          <span class=\"attr\">threadPool:</span> <span class=\"comment\">#连接池</span></span><br><span class=\"line\">            <span class=\"attr\">class:</span> <span class=\"string\">org.quartz.simpl.SimpleThreadPool</span></span><br><span class=\"line\">            <span class=\"attr\">threadCount:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">threadPriority:</span> <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"attr\">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><strong>这里需要注意的是两个节点的端口号应该不一致，避免冲突</strong></p>\n<h1 id=\"叁、实现一个Job\"><a href=\"#叁、实现一个Job\" class=\"headerlink\" title=\"叁、实现一个Job\"></a>叁、实现一个Job</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Job</span> <span class=\"keyword\">extends</span> <span class=\"title\">QuartzJobBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">executeInternal</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">        JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class=\"line\">        <span class=\"comment\">// 业务逻辑 ...</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;------springbootquartzonejob执行&quot;</span>+jobDataMap.get(<span class=\"string\">&quot;name&quot;</span>).toString()+<span class=\"string\">&quot;###############&quot;</span>+jobExecutionContext.getTrigger());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其中的日志输出是为了便于观察任务执行情况</strong></p>\n<h1 id=\"肆、封装定时任务操作\"><a href=\"#肆、封装定时任务操作\" class=\"headerlink\" title=\"肆、封装定时任务操作\"></a>肆、封装定时任务操作</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuartzService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scheduler scheduler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startScheduler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            scheduler.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobClass</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务实现类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间表达式 (这是每隔多少秒为一次任务)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTimes</span></span><br><span class=\"line\"><span class=\"comment\">     *            运行的次数 （&lt;0:表示不限次数）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobData</span></span><br><span class=\"line\"><span class=\"comment\">     *            参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addJob</span><span class=\"params\">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, <span class=\"keyword\">int</span> jobTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">int</span> jobTimes, Map jobData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 任务名称和组构成任务key</span></span><br><span class=\"line\">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            <span class=\"comment\">// 设置job参数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jobData!= <span class=\"keyword\">null</span> &amp;&amp; jobData.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 使用simpleTrigger规则</span></span><br><span class=\"line\">            Trigger trigger = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jobTimes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                        .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class=\"number\">1</span>).withIntervalInSeconds(jobTime))</span><br><span class=\"line\">                        .startNow().build();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                trigger = TriggerBuilder</span><br><span class=\"line\">                        .newTrigger().withIdentity(jobName, jobGroupName).withSchedule(SimpleScheduleBuilder</span><br><span class=\"line\">                                .repeatSecondlyForever(<span class=\"number\">1</span>).withIntervalInSeconds(jobTime).withRepeatCount(jobTimes))</span><br><span class=\"line\">                        .startNow().build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增加一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobClass</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务实现类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称(建议唯一)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     *            时间表达式 （如：0/5 * * * * ? ）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobData</span></span><br><span class=\"line\"><span class=\"comment\">     *            参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addJob</span><span class=\"params\">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, String jobTime, Map jobData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建jobDetail实例，绑定Job实现类</span></span><br><span class=\"line\">            <span class=\"comment\">// 指明job的名称，所在组的名称，以及绑定job类</span></span><br><span class=\"line\">            <span class=\"comment\">// 任务名称和组构成任务key</span></span><br><span class=\"line\">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            <span class=\"comment\">// 设置job参数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jobData!= <span class=\"keyword\">null</span> &amp;&amp; jobData.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 定义调度触发规则</span></span><br><span class=\"line\">            <span class=\"comment\">// 使用cornTrigger规则</span></span><br><span class=\"line\">            <span class=\"comment\">// 触发器key</span></span><br><span class=\"line\">            Trigger trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class=\"line\">                    .startAt(DateBuilder.futureDate(<span class=\"number\">1</span>, IntervalUnit.SECOND))</span><br><span class=\"line\">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).startNow().build();</span><br><span class=\"line\">            <span class=\"comment\">// 把作业和触发器注册到任务调度中</span></span><br><span class=\"line\">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改 一个job的 时间表达式</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobTime</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateJob</span><span class=\"params\">(String jobName, String jobGroupName, String jobTime)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class=\"line\">            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class=\"line\">            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class=\"line\">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).build();</span><br><span class=\"line\">            <span class=\"comment\">// 重启触发器</span></span><br><span class=\"line\">            scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除任务一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     *            任务组名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            scheduler.deleteJob(<span class=\"keyword\">new</span> JobKey(jobName, jobGroupName));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.pauseJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 恢复一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resumeJob</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.resumeJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 立即执行一个job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jobGroupName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runAJobNow</span><span class=\"params\">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class=\"line\">            scheduler.triggerJob(jobKey);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有计划中的任务列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllJob() &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            GroupMatcher&lt;JobKey&gt; matcher = GroupMatcher.anyJobGroup();</span><br><span class=\"line\">            Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(matcher);</span><br><span class=\"line\">            jobList = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (JobKey jobKey : jobKeys) &#123;</span><br><span class=\"line\">                List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Trigger trigger : triggers) &#123;</span><br><span class=\"line\">                    Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;description&quot;</span>, <span class=\"string\">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class=\"line\">                    Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (trigger <span class=\"keyword\">instanceof</span> CronTrigger) &#123;</span><br><span class=\"line\">                        CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class=\"line\">                        String cronExpression = cronTrigger.getCronExpression();</span><br><span class=\"line\">                        map.put(<span class=\"string\">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    jobList.add(map);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jobList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有正在运行的job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryRunJob() &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;JobExecutionContext&gt; executingJobs = scheduler.getCurrentlyExecutingJobs();</span><br><span class=\"line\">            jobList = <span class=\"keyword\">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;(executingJobs.size());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (JobExecutionContext executingJob : executingJobs) &#123;</span><br><span class=\"line\">                Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">                JobDetail jobDetail = executingJob.getJobDetail();</span><br><span class=\"line\">                JobKey jobKey = jobDetail.getKey();</span><br><span class=\"line\">                Trigger trigger = executingJob.getTrigger();</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;description&quot;</span>, <span class=\"string\">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class=\"line\">                Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (trigger <span class=\"keyword\">instanceof</span> CronTrigger) &#123;</span><br><span class=\"line\">                    CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class=\"line\">                    String cronExpression = cronTrigger.getCronExpression();</span><br><span class=\"line\">                    map.put(<span class=\"string\">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                jobList.add(map);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SchedulerException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jobList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"陆、初始化任务\"><a href=\"#陆、初始化任务\" class=\"headerlink\" title=\"陆、初始化任务\"></a>陆、初始化任务</h1><p>这里不准备给用户用web界面来配置定时任务，故此采用<strong>CommandLineRunner</strong>来子啊应用初始化的时候来初始化任务。只需要实现CommandLineRunner的run()方法即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job&quot;</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;0 * * * * ?&quot;</span>, map);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job2&quot;</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job2&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;10 * * * * ?&quot;</span>, map);</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">        quartzService.deleteJob(<span class=\"string\">&quot;job3&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>);</span><br><span class=\"line\">        quartzService.addJob(Job.class, <span class=\"string\">&quot;job3&quot;</span>, <span class=\"string\">&quot;test2&quot;</span>, <span class=\"string\">&quot;15 * * * * ?&quot;</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"柒、测试验证\"><a href=\"#柒、测试验证\" class=\"headerlink\" title=\"柒、测试验证\"></a>柒、测试验证</h1><p>分别夏侯启动两个应用，然后观察任务执行，以及在运行过程中杀死某个服务，来观察定时任务的执行。<br><img src=\"https://image.eelve.com/eblog/1-a8a710a578ad47a8afc8ace72f3cbd7c.png\" alt=\"SpringbootquartzoneApplication\"><br><img src=\"https://image.eelve.com/eblog/2-db731d38c3ed4b4b8123482c9b3ef28d.png\" alt=\"SpringbootquartztwoApplication\"></p>\n<p>【<strong>写在后面的话</strong>】下面给出的是所需要脚本的连接地址：<a href=\"http://www.quartz-scheduler.org/downloads/\">脚本下载地址</a>，另外这边又一个自己实现的<a href=\"https://github.com/eelve/springbootquartzs.git\">demo</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"quartz","path":"api/tags/quartz.json"}]},{"title":"springboot+jsp打jar问题","slug":"springboot-jsp打jar问题","date":"2019-08-09T09:11:29.000Z","updated":"2021-04-19T06:44:39.192Z","comments":true,"path":"api/articles/springboot-jsp打jar问题.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/O$VVNDUD1GCU8FT%5DQH5Z@TM-23f04197a92d4a5db24b6e3fb656b7c1.png","content":"<p>【<strong>前情提要</strong>】最近做了一个项目，项目是springboot+jsp结构的，但是在发布生产环境的时候又需要用maven打成jar包，但是一开始的默认配置都不成功。下面的文章就是具体的解决过程。</p>\n<hr>\n<h1 id=\"壹、项目结构\"><a href=\"#壹、项目结构\" class=\"headerlink\" title=\"壹、项目结构\"></a>壹、项目结构</h1><p><img src=\"https://image.eelve.com/eblog/O$VVNDUD1GCU8FT%5DQH5Z@TM-23f04197a92d4a5db24b6e3fb656b7c1.png\" alt=\"项目结构\"></p>\n<h1 id=\"贰、异常现象\"><a href=\"#贰、异常现象\" class=\"headerlink\" title=\"贰、异常现象\"></a>贰、异常现象</h1><p>使用的JDK为1.8，springboot版本为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>打成的jar只包含class文件，没有见资源文件引入。<br><img src=\"https://image.eelve.com/eblog/20190713-90f9d3c88e4940de8c8faaa0b2d4ec7c.png\" alt=\"没有包含resourse的编译结果\"></p>\n<h1 id=\"叁、解决办法\"><a href=\"#叁、解决办法\" class=\"headerlink\" title=\"叁、解决办法\"></a>叁、解决办法</h1><h2 id=\"1-添加资源路径的映射\"><a href=\"#1-添加资源路径的映射\" class=\"headerlink\" title=\"1. 添加资源路径的映射\"></a>1. 添加资源路径的映射</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 开启过滤，用指定的参数替换directory下的文件中的参数 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>META-INF/resources<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                        **/*.java</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-修改maven编译版本为1-4-2\"><a href=\"#2-修改maven编译版本为1-4-2\" class=\"headerlink\" title=\"2. 修改maven编译版本为1.4.2\"></a>2. 修改maven编译版本为1.4.2</h2><p>只有使用这个版本打jar包才能解析jsp</p>\n<h2 id=\"3-设置mainClass\"><a href=\"#3-设置mainClass\" class=\"headerlink\" title=\"3. 设置mainClass\"></a>3. 设置mainClass</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- maven插件 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.gt.LaysshApplication<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-添加视图配置（可选）\"><a href=\"#4-添加视图配置（可选）\" class=\"headerlink\" title=\"4. 添加视图配置（可选）\"></a>4. 添加视图配置（可选）</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class=\"line\"></span><br><span class=\"line\">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure>\n<p>下面给出一个比较完整的maven编译配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 开启过滤，用指定的参数替换directory下的文件中的参数 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>META-INF/resources<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/**<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                        **/*.java</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- maven插件 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>com.gt.MyApplication<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>下面就是修改编译配置之后的结果</p>\n<p><img src=\"https://image.eelve.com/eblog/201907192-13a348f78e4c4d1cb0b6485cf535dfbe.png\" alt=\"正确的结果\"></p>\n<hr>\n<p>【写在后面的话】现代的模板解析引擎已经有了这么多了，为什么不试一下<strong>thymeleaf</strong>，但是在最近的项目中碰到了th:src标签不解析的问题，目前还不清楚具体原因，而且相同的写法在其他页面都生效，真是怪异啊。鉴于目前还是又很多人使用springboot+jsp来进行开发，但是因为使用IDEA工具创建的SpringBoot项目本身是没有webapp目录的。如果我们想要添加webapp目录的话，可以手动添加。下面就简单的来说一下配置过程。</p>\n<hr>\n<h2 id=\"1-点开项目结构管理，点击IDEA右上角的Project-Structure\"><a href=\"#1-点开项目结构管理，点击IDEA右上角的Project-Structure\" class=\"headerlink\" title=\"1.点开项目结构管理，点击IDEA右上角的Project Structure\"></a>1.点开项目结构管理，点击IDEA右上角的Project Structure</h2><p><img src=\"https://image.eelve.com/eblog/201907193-7d050c6d01c1449f999bb49a5c11fda8.png\" alt=\"Project Structure\"></p>\n<h2 id=\"2-先点击下图中的-号，再点击Web\"><a href=\"#2-先点击下图中的-号，再点击Web\" class=\"headerlink\" title=\"2.先点击下图中的+号，再点击Web\"></a>2.先点击下图中的+号，再点击Web</h2><p><img src=\"https://image.eelve.com/eblog/2019071904-f795ae6044024bafbd02136c86fbfbda.png\" alt=\"2019071904\"></p>\n<h2 id=\"3-修改配置\"><a href=\"#3-修改配置\" class=\"headerlink\" title=\"3.修改配置\"></a>3.修改配置</h2><p>下图是修改配置前的默认配置<br><img src=\"https://image.eelve.com/eblog/20190705-bb62a58b15d24b098aa2db949d18de32.png\" alt=\"修改前的配置\"><br>下面将webapp配置到传统的main目录下<br><img src=\"https://image.eelve.com/eblog/2019071906-d580c788cbd94ff7ba7cb43d70fb5ebb.png\" alt=\"修改后的配置\"><br><img src=\"https://image.eelve.com/eblog/2019071906-4c565cc7039a4ed7b0dff2044d3e1bae.png\" alt=\"配置Artifacts\"><br><img src=\"https://image.eelve.com/eblog/2019071907-1a3c18ec66514327b6f5b635dfde0f67.png\" alt=\"最后的配置成功的结果\"></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"jsp","path":"api/tags/jsp.json"},{"name":"jar","path":"api/tags/jar.json"}]},{"title":"SpringBoot打可执行war包","slug":"springboot-war","date":"2020-04-29T06:23:21.000Z","updated":"2021-04-19T06:44:39.199Z","comments":true,"path":"api/articles/springboot-war.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png","content":"<p>【<strong>前情提要</strong>】最近做了一个Springboot项目，但是最后需要打成WAR包在容器中部署，下面就简单记录一下。</p>\n<hr>\n<h1 id=\"壹、修改pom文件\"><a href=\"#壹、修改pom文件\" class=\"headerlink\" title=\"壹、修改pom文件\"></a>壹、修改pom文件</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.eelve<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springboot-war<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 打包方式 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 嵌入式tomcat相关jar将被放入到WEB-INF\\lib-provided下 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 打包插件 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"贰、修改启动类\"><a href=\"#贰、修改启动类\" class=\"headerlink\" title=\"贰、修改启动类\"></a>贰、修改启动类</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.springboot.war;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringbootWarApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> application.sources(SpringbootWarApplication.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSpringApplication.run(SpringbootWarApplication.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>后面的话</strong>】使用maven打包(clean package)，生成的war包可以用于传统的部署方式（外部tomcat），也可以直接使用java -jar 的方式运行。</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"jar","path":"api/tags/jar.json"}]},{"title":"使用Jasypt对SpringBoot配置文件加密","slug":"使用Jasypt对SpringBoot配置文件加密","date":"2019-08-09T09:14:23.000Z","updated":"2021-04-19T06:44:39.204Z","comments":true,"path":"api/articles/使用Jasypt对SpringBoot配置文件加密.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/springbootjasypydiagrams-3a7616cc841c4f7583fc7173e32aaab4.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h1><p>在日前安全形势越来越严重的情况下，让我意识到在项目中存在一个我们经常忽略的漏洞，那就是我们的项目的配置文件中配置信息的安全，尤其是数据库连接的用户名和密码的安全。所以这里我们就需要对数据库的用户名和密码进行加密，这也是本文的由来。本文采用Jasypt对Spring Boot配置文件加密的相关方法，其实呢，也还有其他方案，具体的会在后面的相关文章中说明。</p>\n<h1 id=\"引入jasypt\"><a href=\"#引入jasypt\" class=\"headerlink\" title=\"引入jasypt\"></a><strong>引入jasypt</strong></h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.ulisesbocchio<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"1-生成要加密的字符串\"><a href=\"#1-生成要加密的字符串\" class=\"headerlink\" title=\"1.生成要加密的字符串\"></a><strong>1.生成要加密的字符串</strong></h1><h2 id=\"1-1-将数据库的用户名和密码进行加密\"><a href=\"#1-1-将数据库的用户名和密码进行加密\" class=\"headerlink\" title=\"1.1 将数据库的用户名和密码进行加密\"></a>1.1 将数据库的用户名和密码进行加密</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BasicTextEncryptor textEncryptor = <span class=\"keyword\">new</span> BasicTextEncryptor();</span><br><span class=\"line\">        <span class=\"comment\">//加密所需的salt(盐)</span></span><br><span class=\"line\">        textEncryptor.setPassword(<span class=\"string\">&quot;1Qaz0oKm&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//要加密的数据（数据库的用户名或密码）</span></span><br><span class=\"line\">        String username = textEncryptor.encrypt(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        String password = textEncryptor.encrypt(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;password:&quot;</span>+password);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出信息</strong></p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username:NZmLHOOHX0SEjc285iG9YQ==</span><br><span class=\"line\">password:1JByM5wu5o+9H1Ba2o++Pg==</span><br><span class=\"line\">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#x27;applicationTaskExecutor&#x27;</span><br><span class=\"line\">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#x27;default&#x27;</span><br><span class=\"line\">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class=\"line\">2019-06-14 14:55:49.878  INFO 8904 --- [       Thread-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-或者使用Maven下载好的jar包加密-Maven-org-jasypt-jasypt-2-0-0-jasypt-2-0-0-jar\"><a href=\"#1-2-或者使用Maven下载好的jar包加密-Maven-org-jasypt-jasypt-2-0-0-jasypt-2-0-0-jar\" class=\"headerlink\" title=\"1.2. 或者使用Maven下载好的jar包加密\\Maven\\org\\jasypt\\jasypt\\2.0.0\\jasypt-2.0.0.jar\"></a>1.2. 或者使用Maven下载好的jar包加密\\Maven\\org\\jasypt\\jasypt\\2.0.0\\jasypt-2.0.0.jar</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI password=1Qaz0oKm algorithm=PBEWithMD5AndDES input=root</span><br></pre></td></tr></table></figure>\n<p><strong>输出信息</strong></p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----ENVIRONMENT-----------------</span><br><span class=\"line\">Runtime: Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 25.171-b11</span><br><span class=\"line\"></span><br><span class=\"line\">----ARGUMENTS-------------------</span><br><span class=\"line\">input: root</span><br><span class=\"line\">algorithm: PBEWithMD5AndDES</span><br><span class=\"line\">password: 1Qaz0oKm </span><br><span class=\"line\"></span><br><span class=\"line\">----OUTPUT----------------------</span><br><span class=\"line\">NZmLHOOHX0SEjc285iG9YQ==</span><br></pre></td></tr></table></figure>\n<p>拷贝-OUTPUT-下的结果即可</p>\n<h1 id=\"2-配置properties文件\"><a href=\"#2-配置properties文件\" class=\"headerlink\" title=\"2.配置properties文件\"></a><strong>2.配置properties文件</strong></h1><p>将生成的加密串配置ENC(加密串)到application.properties中</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">ENC(GHK23XVFNHoQQ97vIW523Q==)</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">ENC(aTKef0XcG05Cfzao92EqqQ==)</span></span><br><span class=\"line\">    <span class=\"attr\">data-username:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">database-platform:</span> <span class=\"string\">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">MYSQL</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\"><span class=\"attr\">jasypt:</span></span><br><span class=\"line\">  <span class=\"attr\">encryptor:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">1Qaz0oKm</span> <span class=\"comment\">#加密所需的salt(盐)</span></span><br><span class=\"line\">    <span class=\"comment\">#algorithm: PBEWithMD5AndDES   # 默认加密方式PBEWithMD5AndDES,可以更改为PBEWithMD5AndTripleDES</span></span><br></pre></td></tr></table></figure>\n<p><strong>加密方式对应的类为BasicTextEncryptor和StrongTextEncryptor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> StandardPBEStringEncryptor encryptor = <span class=\"keyword\">new</span> StandardPBEStringEncryptor();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BasicTextEncryptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.encryptor.setAlgorithm(<span class=\"string\">&quot;PBEWithMD5AndDES&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> StandardPBEStringEncryptor encryptor = <span class=\"keyword\">new</span> StandardPBEStringEncryptor();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrongTextEncryptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.encryptor.setAlgorithm(<span class=\"string\">&quot;PBEWithMD5AndTripleDES&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.eelve.com/eblog/springbootjasypydiagrams-3a7616cc841c4f7583fc7173e32aaab4.png\" alt=\"图片.png\"></p>\n<h1 id=\"3-部署时配置salt-盐-值\"><a href=\"#3-部署时配置salt-盐-值\" class=\"headerlink\" title=\"3.部署时配置salt(盐)值\"></a><strong>3.部署时配置salt(盐)值</strong></h1><p><strong>1. 为了防止salt(盐)泄露,反解出密码.可以在项目部署的时候使用命令传入salt(盐)值</strong></p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar -Djasypt.encryptor.password=1Qaz0oKm xxx.jar</span><br></pre></td></tr></table></figure>\n<p><strong>2. 或者在服务器的环境变量里配置,进一步提高安全性</strong></p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开/etc/profile文件</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">文件末尾插入</span><br><span class=\"line\">export JASYPT_PASSWORD = G0CvDz7oJn6</span><br><span class=\"line\"></span><br><span class=\"line\">编译 </span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">运行 </span><br><span class=\"line\">java -jar -Djasypt.encryptor.password=$&#123;JASYPT_PASSWORD&#125; xxx.jar</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/eelve/jasypt\">下面是一个我自己的具体实现：https://github.com/eelve/jasypt，使用Jasypt对数据库用信息加密后，可以成功连接上数据库</a><br><img src=\"https://image.eelve.com/eblog/springbootjasypyresult-5f2ef70fe5124f5595a48b341807f2c3.png\" alt=\"图片.png\"></p>\n<p><a href=\"https://github.com/ulisesbocchio/jasypt-spring-boot\">官方地址：https://github.com/ulisesbocchio/jasypt-spring-boot</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"jasypt","path":"api/tags/jasypt.json"}]},{"title":"Sentinel入门指北","slug":"Sentinel入门指北","date":"2021-02-01T12:30:57.000Z","updated":"2021-04-19T06:44:39.284Z","comments":true,"path":"api/articles/Sentinel入门指北.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/sentinel-flow-overview-ca2015f6c76449e2ac74f5a377e0573d.jpg","content":"<p>【<strong>前面的话</strong>】在前文 <a href=\"https://eelve.com/archives/springbootcircuitbreaker\">浅析Spring Boot单体应用熔断技术</a> 中对比了一下几种常见的接口熔断的技术。这里就具体使用 <code>Sentinel</code> 来记录以下。</p>\n<hr>\n<h1 id=\"壹、sentinel介绍\"><a href=\"#壹、sentinel介绍\" class=\"headerlink\" title=\"壹、sentinel介绍\"></a>壹、sentinel介绍</h1><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。<code>Sentinel</code> 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。</p>\n<h2 id=\"Sentinel的基本概念基本概念包括\"><a href=\"#Sentinel的基本概念基本概念包括\" class=\"headerlink\" title=\"Sentinel的基本概念基本概念包括:\"></a>Sentinel的基本概念基本概念包括:</h2><h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p>资源是 <code>Sentinel</code> 的关键概念。它可以是 <code>Java</code> 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。只要通过 <code>Sentinel API</code> 定义的代码，就是资源，能够被 <code>Sentinel</code> 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>\n<h2 id=\"Sentinel的主要功能\"><a href=\"#Sentinel的主要功能\" class=\"headerlink\" title=\"Sentinel的主要功能\"></a>Sentinel的主要功能</h2><h3 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h3><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p>\n<p><img src=\"https://image.eelve.com/eblog/sentinel-flow-overview-ca2015f6c76449e2ac74f5a377e0573d.jpg\" alt=\"流控效果\"></p>\n<p>流量控制有以下几个角度:</p>\n<ul>\n<li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li>\n<li>运行指标，例如 <code>QPS</code>、线程池、系统负载等；</li>\n<li>控制的效果，例如直接限流、冷启动、排队等。</li>\n</ul>\n<p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p>\n<h3 id=\"熔断降级\"><a href=\"#熔断降级\" class=\"headerlink\" title=\"熔断降级\"></a>熔断降级</h3><p>除了流量控制以外，降低调用链路中的不稳定资源也是 <code>Sentinel</code> 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。当调用链路中某个资源出现不稳定，例如，表现为 <code>timeout</code>，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p>\n<p>降级有以下几个角度:</p>\n<ul>\n<li>通过并发线程数进行限制</li>\n</ul>\n<p>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p>\n<ul>\n<li>通过响应时间对资源进行降级</li>\n</ul>\n<p>除了对并发线程数进行控制以外，<code>Sentinel</code> 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p>\n<h3 id=\"系统负载保护\"><a href=\"#系统负载保护\" class=\"headerlink\" title=\"系统负载保护\"></a>系统负载保护</h3><p>Sentinel同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p>\n<p>针对这个情况，<code>Sentinel</code> 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p>\n<h2 id=\"主要工作机制\"><a href=\"#主要工作机制\" class=\"headerlink\" title=\"主要工作机制\"></a>主要工作机制</h2><ul>\n<li>对主流框架提供适配或者显示的 <code>API</code>，来定义需要保护的资源，并提供设施对资源进行实时统计和调用链路分析。</li>\n<li>根据预设的规则，结合对资源的实时统计信息，对流量进行控制。同时，<code>Sentinel</code> 提供开放的接口，方便您定义及改变规则。</li>\n<li><code>Sentinel</code> 提供实时的监控系统，方便您快速了解目前系统的状态。</li>\n</ul>\n<h1 id=\"贰、基础使用\"><a href=\"#贰、基础使用\" class=\"headerlink\" title=\"贰、基础使用\"></a>贰、基础使用</h1><h2 id=\"2-1、-通过抛出异常的方式\"><a href=\"#2-1、-通过抛出异常的方式\" class=\"headerlink\" title=\"2.1、 通过抛出异常的方式\"></a>2.1、 通过抛出异常的方式</h2><p><code>SphU</code>包含了<code>try-catch</code>风格的<code>API</code>。用这种方式，当资源发生了限流之后会抛出<code>BlockException</code>。这个时候可以捕捉异常，进行限流之后的逻辑处理。示例代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> (Entry entry = SphU.entry(<span class=\"string\">&quot;resourceName&quot;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 被保护的业务逻辑</span></span><br><span class=\"line\">  <span class=\"comment\">// do something here...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 资源访问阻止，被限流或被降级</span></span><br><span class=\"line\">  <span class=\"comment\">// 在此处进行相应的处理操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>SphU.entry(xxx)</code>需要与<code>entry.exit()</code>方法成对出现，匹配调用，否则会导致调用链记录异常，抛出<code>ErrorEntryFreeException</code>异常。</p>\n</blockquote>\n<h2 id=\"2-2、通过返回布尔值方式\"><a href=\"#2-2、通过返回布尔值方式\" class=\"headerlink\" title=\"2.2、通过返回布尔值方式\"></a>2.2、通过返回布尔值方式</h2><p><code>SphO</code>提供 <code>if-else</code> 风格的 <code>API</code>。用这种方式，当资源发生了限流之后会返回 <code>false</code>，这个时候可以根据返回值，进行限流之后的逻辑处理。示例代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 资源名可使用任意有业务语义的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (SphO.entry(<span class=\"string\">&quot;自定义资源名&quot;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 务必保证finally会被执行</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 被保护的业务逻辑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    SphO.exit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 资源访问阻止，被限流或被降级</span></span><br><span class=\"line\">  <span class=\"comment\">// 进行相应的处理操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3、异步调用支持\"><a href=\"#2-3、异步调用支持\" class=\"headerlink\" title=\"2.3、异步调用支持\"></a>2.3、异步调用支持</h3><p><code>Sentinel</code> 支持异步调用链路的统计。在异步调用中，需要通过 <code>SphU.asyncEntry(xxx)</code> 方法定义资源，并通常需要在异步的回调函数中调用 <code>exit</code> 方法。以下是一个简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步调用.</span></span><br><span class=\"line\">    doAsync(userId, result -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在此处处理异步调用的结果.</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在回调结束后 exit.</span></span><br><span class=\"line\">            entry.exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Request blocked.</span></span><br><span class=\"line\">    <span class=\"comment\">// Handle the exception (e.g. retry or fallback).</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>SphU.asyncEntry(xxx)</code> 不会影响当前（调用线程）的 <code>Context</code>，因此以下两个 <code>entry</code> 在调用链上是平级关系（处于同一层），而不是嵌套关系：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用链类似于：</span></span><br><span class=\"line\"><span class=\"comment\">// -parent</span></span><br><span class=\"line\"><span class=\"comment\">// ---asyncResource</span></span><br><span class=\"line\"><span class=\"comment\">// ---syncResource</span></span><br><span class=\"line\">asyncEntry = SphU.asyncEntry(asyncResource);</span><br><span class=\"line\">entry = SphU.entry(normalResource);</span><br></pre></td></tr></table></figure>\n<p>若在异步回调中需要嵌套其它的资源调用（无论是 <code>entry</code> 还是 <code>asyncEntry</code>），只需要借助<code>Sentinel</code>提供的上下文切换功能，在对应的地方通过 <code>ContextUtil.runOnContext(context, f)</code> 进行 <code>Context</code> 变换，将对应资源调用处的 <code>Context</code> 切换为生成的异步 <code>Context</code>，即可维持正确的调用链路关系。示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResult</span><span class=\"params\">(String result)</span> </span>&#123;</span><br><span class=\"line\">    Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        entry = SphU.entry(<span class=\"string\">&quot;handleResultForAsync&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Handle your result here.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Blocked for the result handler.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            entry.exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">someAsync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Asynchronous invocation.</span></span><br><span class=\"line\">        doAsync(userId, result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在异步回调中进行上下文变换，通过 AsyncEntry 的 getAsyncContext 方法获取异步 Context</span></span><br><span class=\"line\">            ContextUtil.runOnContext(entry.getAsyncContext(), () -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此处嵌套正常的资源调用.</span></span><br><span class=\"line\">                    handleResult(result);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    entry.exit();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Request blocked.</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the exception (e.g. retry or fallback).</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时的调用链就类似于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-parent</span><br><span class=\"line\">---asyncInvocation</span><br><span class=\"line\">-----handleResultForAsync</span><br></pre></td></tr></table></figure>\n<h1 id=\"叁、注解使用\"><a href=\"#叁、注解使用\" class=\"headerlink\" title=\"叁、注解使用\"></a>叁、注解使用</h1><p><code>Sentinel</code> 提供了 <code>@SentinelResource</code> 注解用于定义资源，并提供了 <code>AspectJ</code> 的扩展用于自动定义资源、处理 <code>BlockException</code> 等。使用 <code>Sentinel Annotation AspectJ Extension</code> 的时候需要引入以下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：注解方式埋点不支持 private 方法。</p>\n</blockquote>\n<p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 <code>fallback</code> 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p>\n<ul>\n<li><code>value</code>：资源名称，必需项（不能为空）</li>\n<li><code>entryType</code>：<code>entry</code> 类型，可选项（默认为 <code>EntryType.OUT</code>）</li>\n<li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。<code>blockHandler</code> 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。<code>blockHandler</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n<li><code>fallback</code>：<code>fallback</code> 函数名称，可选项，用于在抛出异常的时候提供 <code>fallback</code> 处理逻辑。  <code>fallback</code> 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。<code>fallback</code> 函数签名和位置要求：<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>\n<li><code>fallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>defaultFallback</code>（since 1.6.0）：默认的 <code>fallback</code> 函数名称，可选项，通常用于通用的 <code>fallback</code> 逻辑（即可以用于很多服务或方法）。默认 <code>fallback</code> 函数可以针对所以类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 <code>fallback</code> 和 <code>defaultFallback</code>，则只有 <code>fallback</code> 会生效。<code>defaultFallback</code> 函数签名要求：<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>\n<li><code>defaultFallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 <code>fallback</code> 逻辑中，而是会原样抛出。</li>\n</ul>\n<blockquote>\n<p>注：1.6.0 之前的版本 <code>fallback</code> 函数只针对降级异常（<code>DegradeException</code>）进行处理，不能针对业务异常进行处理。</p>\n</blockquote>\n<p>特别地，若 <code>blockHandler</code> 和 <code>fallback</code> 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> 直接抛出。</p>\n<h1 id=\"肆、规则的种类\"><a href=\"#肆、规则的种类\" class=\"headerlink\" title=\"肆、规则的种类\"></a>肆、规则的种类</h1><p><code>Sentinel</code> 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效。同时 <code>Sentinel</code> 也提供相关 <code>API</code>，供您来定制自己的规则策略。</p>\n<p><code>Sentinel</code> 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。</p>\n<h2 id=\"4-1、流量控制规则-FlowRule\"><a href=\"#4-1、流量控制规则-FlowRule\" class=\"headerlink\" title=\"4.1、流量控制规则 (FlowRule)\"></a>4.1、流量控制规则 (FlowRule)</h2><ul>\n<li>重要属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，资源名是限流规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>限流阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>限流阈值类型，QPS 或线程数模式</td>\n<td>QPS 模式</td>\n</tr>\n<tr>\n<td>limitApp</td>\n<td>流控针对的调用来源</td>\n<td>default，代表不区分调用来源</td>\n</tr>\n<tr>\n<td>strategy</td>\n<td>调用关系限流策略：直接、链路、关联</td>\n<td>根据资源本身（直接）</td>\n</tr>\n<tr>\n<td>controlBehavior</td>\n<td>流控效果（直接拒绝 / 排队等待 / 慢启动模式），不支持按调用关系限流</td>\n<td>直接拒绝</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>同一个资源可以同时有多个限流规则。</p>\n</blockquote>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>FlowRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initFlowQpsRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;FlowRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    FlowRule rule1 = <span class=\"keyword\">new</span> FlowRule();</span><br><span class=\"line\">    rule1.setResource(resource);</span><br><span class=\"line\">    <span class=\"comment\">// Set max qps to 20</span></span><br><span class=\"line\">    rule1.setCount(<span class=\"number\">20</span>);</span><br><span class=\"line\">    rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class=\"line\">    rule1.setLimitApp(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">    rules.add(rule1);</span><br><span class=\"line\">    FlowRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2、熔断降级规则-DegradeRule\"><a href=\"#4-2、熔断降级规则-DegradeRule\" class=\"headerlink\" title=\"4.2、熔断降级规则 (DegradeRule)\"></a>4.2、熔断降级规则 (DegradeRule)</h2><ul>\n<li>熔断降级规则包含下面几个重要的属性：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，即规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>\n<td>慢调用比例</td>\n</tr>\n<tr>\n<td>count</td>\n<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>timeWindow</td>\n<td>熔断时长，单位为 s</td>\n<td></td>\n</tr>\n<tr>\n<td>minRequestAmount</td>\n<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>\n<td>5</td>\n</tr>\n<tr>\n<td>statIntervalMs</td>\n<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>\n<td>1000 ms</td>\n</tr>\n<tr>\n<td>slowRatioThreshold</td>\n<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>\n<td></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>同一个资源可以同时有多个降级规则</p>\n</blockquote>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>DegradeRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initDegradeRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;DegradeRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    DegradeRule rule = <span class=\"keyword\">new</span> DegradeRule(resource);</span><br><span class=\"line\">        .setGrade(CircuitBreakerStrategy.ERROR_RATIO.getType());</span><br><span class=\"line\">        .setCount(<span class=\"number\">0.7</span>); <span class=\"comment\">// Threshold is 70% error ratio</span></span><br><span class=\"line\">        .setMinRequestAmount(<span class=\"number\">100</span>)</span><br><span class=\"line\">        .setStatIntervalMs(<span class=\"number\">30000</span>) <span class=\"comment\">// 30s</span></span><br><span class=\"line\">        .setTimeWindow(<span class=\"number\">10</span>);</span><br><span class=\"line\">    rules.add(rule);</span><br><span class=\"line\">    DegradeRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3、系统保护规则-SystemRule\"><a href=\"#4-3、系统保护规则-SystemRule\" class=\"headerlink\" title=\"4.3、系统保护规则 (SystemRule)\"></a>4.3、系统保护规则 (SystemRule)</h2><p><code>Sentinel</code> 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 <code>Load</code>、<code>CPU</code> 使用率、<code>总体平均 RT</code>、<code>入口 QPS</code> 和<code>并发线程数</code>等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<ul>\n<li>系统规则包含下面几个重要的属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>highestSystemLoad</td>\n<td>load1 触发值，用于触发自适应控制阶段</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>avgRt</td>\n<td>所有入口流量的平均响应时间</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>maxThread</td>\n<td>入口流量的最大并发数</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>qps</td>\n<td>所有入口资源的 QPS</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>highestCpuUsage</td>\n<td>当前系统的 CPU 使用率（0.0-1.0）</td>\n<td>-1 (不生效)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>SystemRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSystemProtectionRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  List&lt;SystemRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  SystemRule rule = <span class=\"keyword\">new</span> SystemRule();</span><br><span class=\"line\">  rule.setHighestSystemLoad(<span class=\"number\">10</span>);</span><br><span class=\"line\">  rules.add(rule);</span><br><span class=\"line\">  SystemRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4、访问控制规则-AuthorityRule\"><a href=\"#4-4、访问控制规则-AuthorityRule\" class=\"headerlink\" title=\"4.4、访问控制规则 (AuthorityRule)\"></a>4.4、访问控制规则 (AuthorityRule)</h2><p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 <code>Sentinel</code> 的访问控制（黑白名单）的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p>\n<p>授权规则，即黑白名单规则（AuthorityRule）非常简单，主要有以下配置项：</p>\n<ul>\n<li><code>resource</code>：资源名，即限流规则的作用对象</li>\n<li><code>limitApp</code>：对应的黑名单/白名单，不同 <code>origin</code> 用 , 分隔，如 <code>appA</code>,<code>appB</code></li>\n<li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li>\n</ul>\n<hr>\n<p>【<strong>后面的话</strong>】在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p>\n<p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>FlowRule</code> 和 <code>Degrade</code>的校验方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Check whether provided flow rule is valid.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param rule flow rule to check</span><br><span class=\"line\"> * @return true if valid, otherwise false</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static boolean isValidRule(FlowRule rule) &#123;</span><br><span class=\"line\">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource()) &amp;&amp; rule.getCount() &gt;&#x3D; 0</span><br><span class=\"line\">        &amp;&amp; rule.getGrade() &gt;&#x3D; 0 &amp;&amp; rule.getStrategy() &gt;&#x3D; 0 &amp;&amp; rule.getControlBehavior() &gt;&#x3D; 0;</span><br><span class=\"line\">    if (!baseValid) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; Check strategy and control (shaping) behavior.</span><br><span class=\"line\">    return checkClusterField(rule) &amp;&amp; checkStrategyField(rule) &amp;&amp; checkControlBehaviorField(rule);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkClusterField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    if (!rule.isClusterMode()) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ClusterFlowConfig clusterConfig &#x3D; rule.getClusterConfig();</span><br><span class=\"line\">    if (clusterConfig &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!validClusterRuleId(clusterConfig.getFlowId())) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!isWindowConfigValid(clusterConfig.getSampleCount(), clusterConfig.getWindowIntervalMs())) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    switch (clusterConfig.getStrategy()) &#123;</span><br><span class=\"line\">        case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static boolean isWindowConfigValid(int sampleCount, int windowIntervalMs) &#123;</span><br><span class=\"line\">    return sampleCount &gt; 0 &amp;&amp; windowIntervalMs &gt; 0 &amp;&amp; windowIntervalMs % sampleCount &#x3D;&#x3D; 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkStrategyField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    if (rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_RELATE || rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_CHAIN) &#123;</span><br><span class=\"line\">        return StringUtil.isNotBlank(rule.getRefResource());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkControlBehaviorField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    switch (rule.getControlBehavior()) &#123;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP:</span><br><span class=\"line\">            return rule.getWarmUpPeriodSec() &gt; 0;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER:</span><br><span class=\"line\">            return rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER:</span><br><span class=\"line\">            return rule.getWarmUpPeriodSec() &gt; 0 &amp;&amp; rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidRule</span><span class=\"params\">(DegradeRule rule)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> baseValid = rule != <span class=\"keyword\">null</span> &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class=\"line\">        &amp;&amp; rule.getCount() &gt;= <span class=\"number\">0</span> &amp;&amp; rule.getTimeWindow() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!baseValid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rule.getMinRequestAmount() &lt;= <span class=\"number\">0</span> || rule.getStatIntervalMs() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (rule.getGrade()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_RT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rule.getSlowRatioThreshold() &gt;= <span class=\"number\">0</span> &amp;&amp; rule.getSlowRatioThreshold() &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rule.getCount() &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最后是我自己实现的 <a href=\"https://github.com/eelve/awesomesentinel/tree/basic-sentinel\">demo</a> 。</p>\n</blockquote>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"sentinel","path":"api/categories/sentinel.json"}],"tags":[{"name":"sentinel","path":"api/tags/sentinel.json"},{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"}]},{"title":"Java 8 Stream实践","slug":"Java 8 Stream实践","date":"2019-06-29T06:54:24.000Z","updated":"2021-04-19T06:44:39.275Z","comments":true,"path":"api/articles/Java 8 Stream实践.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/streamDataSource-df15382b03b24526955b1b14636316dd.png","content":"<p>【<strong>前面的话</strong>】Java中的Stream于1.8版本析出，平时项目中也有用到，今天就系统的来实践一下。下面借用重庆力帆队伍中我个人比较喜欢的球员来操作一波，队员的年龄为了便于展示某些api做了调整，请不要太认真哦。</p>\n<hr>\n<h1 id=\"壹-Stream理解\"><a href=\"#壹-Stream理解\" class=\"headerlink\" title=\"壹. Stream理解\"></a>壹. Stream理解</h1><p>在java中我们称Stream为『<strong>流</strong>』，我们经常会用流去对集合进行一些流水线的操作。stream就像工厂一样，只需要把集合、命令还有一些参数灌输到流水线中去，就可以加工成得出想要的结果。这样的流水线能大大简洁代码，减少操作。给我个人的感觉类似JavaScript中的链式函数。</p>\n<h1 id=\"贰-Stream流程\"><a href=\"#贰-Stream流程\" class=\"headerlink\" title=\"贰. Stream流程\"></a>贰. Stream流程</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原集合 —&gt; 流 —&gt; 各种操作(过滤、分组、统计) —&gt; 终端操作</span><br></pre></td></tr></table></figure>\n<p>Stream流的操作流程一般都是这样的，先将集合转为流，然后经过各种操作，比如过滤、筛选、分组、计算。最后的终端操作，就是转化成我们想要的数据，这个数据的形式一般还是集合，有时也会按照需求输出count计数。下文会一一举例。</p>\n<h1 id=\"叁-API实践\"><a href=\"#叁-API实践\" class=\"headerlink\" title=\"叁. API实践\"></a>叁. API实践</h1><p>首先，定义一个用户对象，包含姓名、年龄、id三个成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.training.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> User</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TDO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhao.zhilue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2019/6/28 15:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(exclude=&#123;&quot;id&quot;,&quot;name&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span>  <span class=\"title\">Comparable</span>&lt;<span class=\"title\">User</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Link name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;name&quot;, columnDefinition = &quot;varchar(255) not null&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;age&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(User o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age.compareTo(o.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在数据库中插入测试数据，见下图：</p>\n<p><img src=\"https://image.eelve.com/eblog/streamDataSource-df15382b03b24526955b1b14636316dd.png\" alt=\"streamDataSource\"></p>\n<h2 id=\"3-1过滤\"><a href=\"#3-1过滤\" class=\"headerlink\" title=\"3.1过滤\"></a>3.1过滤</h2><h3 id=\"1）filter-过滤-T-gt-boolean\"><a href=\"#1）filter-过滤-T-gt-boolean\" class=\"headerlink\" title=\"1）filter 过滤(T-&gt; boolean)\"></a>1）filter 过滤(T-&gt; boolean)</h3><p>假如我们要实现过滤出40岁以下的队员，我们可以这样来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().filter(user -&gt; user.getAge() &lt;= <span class=\"number\">40</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>filter里面，-&gt;箭头后面跟着的是一个<strong>boolean</strong>值，可以写任何的过滤条件，就相当于sql中where后面的东西，换句话说，能用sql实现的功能这里都可以实现<br>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）distinct-去重\"><a href=\"#2）distinct-去重\" class=\"headerlink\" title=\"2）distinct 去重\"></a>2）distinct 去重</h3><p>其用法和sql中的使用类似，假如我们要实现过去除用重复年龄的队员，我们可以这样来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserDistinct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）sorted排序\"><a href=\"#3）sorted排序\" class=\"headerlink\" title=\"3）sorted排序\"></a>3）sorted排序</h3><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(User o)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> age.compareTo(o.getAge());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSorted</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>反之, 需要调用 sorted((T, T) -&gt; int) 实现 Comparator 接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSortedWithComparator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().sorted(Comparator.comparingInt(User::getAge)).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）limit（）-返回前n个元素\"><a href=\"#4）limit（）-返回前n个元素\" class=\"headerlink\" title=\"4）limit（） 返回前n个元素\"></a>4）limit（） 返回前n个元素</h3><p>如果想知道队伍中年龄最小的就可以使用下面来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）skip\"><a href=\"#5）skip\" class=\"headerlink\" title=\"5）skip\"></a>5）skip</h3><p>它的用法和limit正好相反，是去除前面几个元素。<br>假如我们要去除前面两个元素就可以使用下面的方法来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSkip</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().skip(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6）组合使用\"><a href=\"#6）组合使用\" class=\"headerlink\" title=\"6）组合使用\"></a>6）组合使用</h3><p>以上的过滤函数物品们可以组合来使用来实现我们具体的需求，示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSortLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       List&lt;User&gt; resultList = userList.stream().sorted().limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">           System.out.println(user.toString());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以得到先排序后限制的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-映射\"><a href=\"#3-2-映射\" class=\"headerlink\" title=\"3.2 映射\"></a>3.2 映射</h2><h3 id=\"1）map-T-gt-R\"><a href=\"#1）map-T-gt-R\" class=\"headerlink\" title=\"1）map(T-&gt;R)\"></a>1）map(T-&gt;R)</h3><p>map是将T类型的数据转为R类型的数据，比如我们想要设置一个新的list，存储用户所有的城市信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;Integer&gt; resultList = userList.stream().map(User::getAge).distinct().collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(resultList.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们可以得到所有年龄的样本，执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">43</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）flatMap-T-gt-Stream\"><a href=\"#2）flatMap-T-gt-Stream\" class=\"headerlink\" title=\"2）flatMap(T -&gt; Stream)\"></a>2）flatMap(T -&gt; Stream<R>)</h3><p>将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStreamMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; habitsList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        habitsList.add(<span class=\"string\">&quot;唱歌,听歌&quot;</span>);</span><br><span class=\"line\">        habitsList.add(<span class=\"string\">&quot;羽毛球,足球,登山&quot;</span>);</span><br><span class=\"line\">        habitsList = habitsList.stream().map(s -&gt; s.split(<span class=\"string\">&quot;,&quot;</span>)).flatMap(Arrays::stream).collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(habitsList);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[唱歌, 听歌, 羽毛球, 足球, 登山]</span><br></pre></td></tr></table></figure>\n<p>这里原集合中的数据由逗号分割，使用split进行拆分后，得到的是Stream&lt;String[]&gt;，字符串数组组成的流，要使用flatMap的<strong>Arrays::stream</strong>，将Stream&lt;String[]&gt;转为Stream<String>,然后把流相连接，组成了完整的唱歌, 听歌, 羽毛球, 足球, 登山。</p>\n<h2 id=\"3-3-查找\"><a href=\"#3-3-查找\" class=\"headerlink\" title=\"3.3 查找\"></a>3.3 查找</h2><h3 id=\"1）allMatch（T-gt-boolean）\"><a href=\"#1）allMatch（T-gt-boolean）\" class=\"headerlink\" title=\"1）allMatch（T-&gt;boolean）\"></a>1）allMatch（T-&gt;boolean）</h3><p>检测是否全部满足参数行为，假如我们要检测是不是所有队员都是U21的球员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamAllMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isNotU21 = userList.stream().allMatch(user -&gt; user.getAge() &gt;= <span class=\"number\">21</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否都不是U21球员：&quot;</span> + isNotU21);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否都不是U21球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2）anyMatch（T-gt-boolean）\"><a href=\"#2）anyMatch（T-gt-boolean）\" class=\"headerlink\" title=\"2）anyMatch（T-&gt;boolean）\"></a>2）anyMatch（T-&gt;boolean）</h3><p>检测是否有任意元素满足给定的条件，比如，想知道是否有26岁的球员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamAnyMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isAgeU26 = userList.stream().anyMatch(user -&gt; user.getAge() == <span class=\"number\">26</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否有26岁的球员：&quot;</span> + isAgeU26);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否有<span class=\"number\">26</span>岁的球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3）noneMatch-T-gt-boolean\"><a href=\"#3）noneMatch-T-gt-boolean\" class=\"headerlink\" title=\"3）noneMatch(T -&gt; boolean)\"></a>3）noneMatch(T -&gt; boolean)</h3><p>流中是否有元素匹配给定的 T -&gt; boolean 条件。比如我们要检测是否含有U18的队员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamNoneMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> isNotU18 = userList.stream().noneMatch(user -&gt; user.getAge() &lt;= <span class=\"number\">18</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;是否都不是U18球员：&quot;</span> + isNotU18);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否都不是U18球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<p>说明没有U18的队员。</p>\n<h3 id=\"4）findFirst-找到第一个元素\"><a href=\"#4）findFirst-找到第一个元素\" class=\"headerlink\" title=\"4）findFirst( ):找到第一个元素\"></a>4）findFirst( ):找到第一个元素</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserFindFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; firstUser = userList.stream().sorted().findFirst();</span><br><span class=\"line\">        System.out.println(firstUser.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）findAny-找到任意一个元素\"><a href=\"#5）findAny-找到任意一个元素\" class=\"headerlink\" title=\"5）findAny():找到任意一个元素\"></a>5）findAny():找到任意一个元素</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserFindAny</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; anytUser = userList.parallelStream().sorted().findAny();</span><br><span class=\"line\">        System.out.println(anytUser.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)]</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-归纳计算\"><a href=\"#3-4-归纳计算\" class=\"headerlink\" title=\"3.4 归纳计算\"></a>3.4 归纳计算</h2><h3 id=\"1）求队员的总人数\"><a href=\"#1）求队员的总人数\" class=\"headerlink\" title=\"1）求队员的总人数\"></a>1）求队员的总人数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> totalAge = userList.stream().collect(Collectors.counting());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;队员人数为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">队员人数为：<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2）得到某一属性的最大最小值\"><a href=\"#2）得到某一属性的最大最小值\" class=\"headerlink\" title=\"2）得到某一属性的最大最小值\"></a>2）得到某一属性的最大最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserMaxAndMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; userMaxAge = userList.stream().collect(Collectors.maxBy(Comparator.comparing(User::getAge)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄最大的队员为：&quot;</span> + userMaxAge.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;User&gt; userMinAge = userList.stream().collect(Collectors.minBy(Comparator.comparing(User::getAge)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄最小的队员为：&quot;</span> + userMinAge.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄最大的队员为：Optional[User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br><span class=\"line\">年龄最小的队员为：Optional[User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）求年龄总和是多少\"><a href=\"#3）求年龄总和是多少\" class=\"headerlink\" title=\"3）求年龄总和是多少\"></a>3）求年龄总和是多少</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserSummingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalAge = userList.stream().collect(Collectors.summingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄总和为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄总和为：<span class=\"number\">175</span></span><br></pre></td></tr></table></figure>\n<p>我们经常会用BigDecimal来记录金钱，假设想得到BigDecimal的总和：<br>// 获得列表对象金额， 使用reduce聚合函数,实现累加器<br>BigDecimal sum = myList.stream() .map(User::getMoney)<br>.reduce(BigDecimal.ZERO,BigDecimal::add);</p>\n<h3 id=\"4）求年龄平均值\"><a href=\"#4）求年龄平均值\" class=\"headerlink\" title=\"4）求年龄平均值\"></a>4）求年龄平均值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserAveragingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Double totalAge = userList.stream().collect(Collectors.averagingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;平均年龄为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">平均年龄为：<span class=\"number\">29.166666666666668</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5）一次性得到元素的个数、总和、最大值、最小值\"><a href=\"#5）一次性得到元素的个数、总和、最大值、最小值\" class=\"headerlink\" title=\"5）一次性得到元素的个数、总和、最大值、最小值\"></a>5）一次性得到元素的个数、总和、最大值、最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserSummarizingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        IntSummaryStatistics  statistics  = userList.stream().collect(Collectors.summarizingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄的统计结果为：&quot;</span> + statistics );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄的统计结果为：IntSummaryStatistics&#123;count=<span class=\"number\">6</span>, sum=<span class=\"number\">175</span>, min=<span class=\"number\">25</span>, average=<span class=\"number\">29.166667</span>, max=<span class=\"number\">43</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6）字符串拼接\"><a href=\"#6）字符串拼接\" class=\"headerlink\" title=\"6）字符串拼接\"></a>6）字符串拼接</h3><p>要将队员的姓名连成一个字符串并用逗号分割。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserJoining</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        String  name  = userList.stream().map(User::getName).collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;所有的队员名字：&quot;</span> + name );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有的队员名字：费尔南多,费尔南迪尼奥,卡尔德克,阿德里安,隋维杰,克鲁伊夫</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5-分组\"><a href=\"#3-5-分组\" class=\"headerlink\" title=\"3.5 分组\"></a>3.5 分组</h2><p>在数据库操作中，我们经常通过GROUP BY关键字对查询到的数据进行分组，java8的流式处理也提供了分组的功能。使用Collectors.groupingBy来进行分组。</p>\n<h3 id=\"1）可以根据队员的年龄进行分组\"><a href=\"#1）可以根据队员的年龄进行分组\" class=\"headerlink\" title=\"1）可以根据队员的年龄进行分组\"></a>1）可以根据队员的年龄进行分组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserGroupingBy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       Map&lt;Integer, List&lt;User&gt;&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge));</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Map.Entry&lt;Integer,List&lt;User&gt;&gt; entry :ageMap.entrySet())&#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key= <span class=\"number\">25</span> and value= [User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br><span class=\"line\">key= <span class=\"number\">26</span> and value= [User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>), User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)]</span><br><span class=\"line\">key= <span class=\"number\">43</span> and value= [User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br><span class=\"line\">key= <span class=\"number\">27</span> and value= [User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)]</span><br><span class=\"line\">key= <span class=\"number\">28</span> and value= [User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)]</span><br></pre></td></tr></table></figure>\n<p>结果是一个map，key为不重复的年龄，value为属于该年龄的队员列表。已经实现了分组。另外我们还可以继续分组得到两次分组的结果。</p>\n<h3 id=\"2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\"><a href=\"#2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\" class=\"headerlink\" title=\"2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\"></a>2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list</h3><p>按年龄分组并统计人数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserGroupingByCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Map&lt;Integer,Long&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge,Collectors.counting()));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer,Long&gt; entry :ageMap.entrySet())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队员中&quot;</span> + entry.getKey() + <span class=\"string\">&quot;岁的队员人数为：&quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">队员中<span class=\"number\">25</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">26</span>岁的队员人数为：<span class=\"number\">2</span></span><br><span class=\"line\">队员中<span class=\"number\">43</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">27</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">28</span>岁的队员人数为：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3）partitioningBy-分区\"><a href=\"#3）partitioningBy-分区\" class=\"headerlink\" title=\"3）partitioningBy 分区\"></a>3）partitioningBy 分区</h3><p>分区与分组的区别在于，分区是按照 true 和 false 来分的，因此partitioningBy 接受的参数的 lambda 也是 T -&gt; boolean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserPartitioningBy</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Map&lt;Boolean,List&lt;User&gt;&gt; partitioningByMap  = userList.stream().collect(partitioningBy(user -&gt; user.getAge() &gt;= <span class=\"number\">30</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Boolean,List&lt;User&gt;&gt; entry :partitioningByMap.entrySet())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key= <span class=\"keyword\">false</span> and value= [User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>), User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>), User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>), User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>), User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)]</span><br><span class=\"line\">key= <span class=\"keyword\">true</span> and value= [User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>写在后面的话</strong>】留下stream的类实现的方法和依赖图，前面的实践也只是挑选了几个比较常用的Api。</p>\n<p><img src=\"https://image.eelve.com/eblog/stream-d2e3fe9045e945ce9411d8db6043b32c.png\" alt=\"stream\"></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"stream","path":"api/tags/stream.json"}]},{"title":"Spring Boot单体应用集成Sentinel熔断能力","slug":"SpringBoot单体应用集成Sentinel熔断能力","date":"2021-02-13T03:52:54.000Z","updated":"2021-04-19T06:52:48.655Z","comments":true,"path":"api/articles/SpringBoot单体应用集成Sentinel熔断能力.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png","content":"<p>【<strong>前面的话</strong>】在前文 <a href=\"https://eelve.com/archives/hellosentinel\">Sentinel入门指北</a> 中对<code>Sentinel</code>有了简单的了解之后，下面就<code>Spring Boot</code>单体应用集成<code>Sentinel</code>做一下简单的讨论。实际上官方已经提供了 <a href=\"https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel\">Spring Cloud Alibaba Sentinel</a> ，然后在配合 <code>控制台</code> 就可以方便使用熔断能力。但是存在部分不想引入<code>控制台</code>的场景，此文就由此而来。</p>\n<hr>\n<h1 id=\"壹、总体设计\"><a href=\"#壹、总体设计\" class=\"headerlink\" title=\"壹、总体设计\"></a>壹、总体设计</h1><p><code>Sentinel</code>在官方提供了<code>API</code>用于动态修改熔断的规则，针对每种规则都有独有的<code>loadRules</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Load &#123;<span class=\"doctag\">@link</span> FlowRule&#125;s, former rules will be replaced.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> rules new rules to load.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadRules</span><span class=\"params\">(List&lt;FlowRule&gt; rules)</span> </span>&#123;</span><br><span class=\"line\">    currentProperty.updateValue(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Load &#123;<span class=\"doctag\">@link</span> DegradeRule&#125;s, former rules will be replaced.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> rules new rules to load.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadRules</span><span class=\"params\">(List&lt;DegradeRule&gt; rules)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        currentProperty.updateValue(rules);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">        RecordLog.error(<span class=\"string\">&quot;[DegradeRuleManager] Unexpected error when loading degrade rules&quot;</span>, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Sentiunel</code>还有一个缺点，就是熔断规则只缓存在内存中，当应用重启之后，规则就消失了。所以解决方法就是可以考虑讲规则持久化，官方也有相应的实现的方案：<a href=\"https://sentinelguard.io/zh-cn/docs/dynamic-rule-configuration.html\">动态规则扩展</a> 。我这里实现的方案则是将规则存在数据库中，并提供API方式修改规则。 </p>\n<h1 id=\"贰、实现细节\"><a href=\"#贰、实现细节\" class=\"headerlink\" title=\"贰、实现细节\"></a>贰、实现细节</h1><h2 id=\"2-1、pom依赖\"><a href=\"#2-1、pom依赖\" class=\"headerlink\" title=\"2.1、pom依赖\"></a>2.1、pom依赖</h2><blockquote>\n<p><code>sentinel-annotation-aspectj</code> 提供注解支持功能，并且其中包含了 <code>sentinel-core</code> 所以就不需要单独再引入了。 </p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2、实体类\"><a href=\"#2-2、实体类\" class=\"headerlink\" title=\"2.2、实体类\"></a>2.2、实体类</h2><blockquote>\n<p>包括流控规则和降级规则的实体类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotBlank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotNull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhaozhilue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;flow_rule&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlowRuleEntity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;app&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String app;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Resource name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;resource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String resource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * Application name that will be limited by origin.</span></span><br><span class=\"line\"><span class=\"comment\">     * The default c is &#123;<span class=\"doctag\">@code</span> default&#125;, which means allowing all origin apps.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * For authority rules, multiple origin name can be separated with comma (&#x27;,&#x27;).</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;limit_app&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String limitApp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The threshold type of flow control (0: thread count, 1: QPS).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;grade&quot;,columnDefinition=&quot;INT default 1&quot;,nullable = false)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer grade = RuleConstant.FLOW_GRADE_QPS;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Flow control threshold count.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;count&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Flow control strategy based on invocation chain.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> RuleConstant#STRATEGY_DIRECT&#125; for direct flow control (by origin);</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> RuleConstant#STRATEGY_RELATE&#125; for relevant flow control (with relevant resource);</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> RuleConstant#STRATEGY_CHAIN&#125; for chain flow control (by entrance resource).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;strategy&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer strategy = RuleConstant.STRATEGY_DIRECT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Reference resource in flow control with relevant resource or context.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;ref_resource&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String refResource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Rate limiter control behavior.</span></span><br><span class=\"line\"><span class=\"comment\">     * 0. default(reject directly), 1. warm up, 2. rate limiter, 3. warm up + rate limiter</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;control_behavior&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer controlBehavior = RuleConstant.CONTROL_BEHAVIOR_DEFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;warm_up_period_sec&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer warmUpPeriodSec = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Max queueing time in rate limiter behavior.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;max_queueing_time_ms&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxQueueingTimeMs = <span class=\"number\">500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;cluster_mode&quot;,columnDefinition=&quot;BOOLEAN default false&quot;,nullable = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean clusterMode = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FlowRule <span class=\"title\">toRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FlowRule flowRule = <span class=\"keyword\">new</span> FlowRule();</span><br><span class=\"line\">        flowRule.setCount(<span class=\"keyword\">this</span>.count);</span><br><span class=\"line\">        flowRule.setGrade(<span class=\"keyword\">this</span>.grade);</span><br><span class=\"line\">        flowRule.setResource(<span class=\"keyword\">this</span>.resource);</span><br><span class=\"line\">        flowRule.setLimitApp(<span class=\"keyword\">this</span>.limitApp);</span><br><span class=\"line\">        flowRule.setRefResource(<span class=\"keyword\">this</span>.refResource);</span><br><span class=\"line\">        flowRule.setStrategy(<span class=\"keyword\">this</span>.strategy);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.controlBehavior != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            flowRule.setControlBehavior(controlBehavior);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.warmUpPeriodSec != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            flowRule.setWarmUpPeriodSec(warmUpPeriodSec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.maxQueueingTimeMs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            flowRule.setMaxQueueingTimeMs(maxQueueingTimeMs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flowRule.setClusterMode(clusterMode);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flowRule;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotBlank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotNull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhaozhilue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;degrade_rule&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DegradeRuleEntity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;app&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String app;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Resource name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;resource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String resource;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * Application name that will be limited by origin.</span></span><br><span class=\"line\"><span class=\"comment\">     * The default limitApp is &#123;<span class=\"doctag\">@code</span> default&#125;, which means allowing all origin apps.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * For authority rules, multiple origin name can be separated with comma (&#x27;,&#x27;).</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name=&quot;limit_app&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotBlank</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String limitApp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Circuit breaking strategy (0: average RT, 1: exception ratio, 2: exception count).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;grade&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer grade = RuleConstant.DEGRADE_GRADE_RT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Threshold count.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;count&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Recovery timeout (in seconds) when circuit breaker opens. After the timeout, the circuit breaker will</span></span><br><span class=\"line\"><span class=\"comment\">     * transform to half-open state for trying a few requests.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;timeWindow&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer timeWindow;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Minimum number of requests (in an active statistic time span) that can trigger circuit breaking.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.7.0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;min_request_amount&quot;,columnDefinition=&quot;INT default 5&quot;,nullable = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer minRequestAmount = RuleConstant.DEGRADE_DEFAULT_MIN_REQUEST_AMOUNT;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The threshold of slow request ratio in RT mode.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;slow_ratio_threshold&quot;,columnDefinition=&quot;DOUBLE default 1000&quot;,nullable = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double slowRatioThreshold = <span class=\"number\">1.0d</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;stat_interval_ms&quot;,columnDefinition=&quot;INT default 1000&quot;,nullable = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer statIntervalMs = <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DegradeRule <span class=\"title\">toRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DegradeRule rule = <span class=\"keyword\">new</span> DegradeRule();</span><br><span class=\"line\">        rule.setResource(resource);</span><br><span class=\"line\">        rule.setLimitApp(limitApp);</span><br><span class=\"line\">        rule.setCount(count);</span><br><span class=\"line\">        rule.setTimeWindow(timeWindow);</span><br><span class=\"line\">        rule.setGrade(grade);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minRequestAmount != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            rule.setMinRequestAmount(minRequestAmount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (slowRatioThreshold != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            rule.setSlowRatioThreshold(slowRatioThreshold);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (statIntervalMs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            rule.setStatIntervalMs(statIntervalMs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rule;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3、核心规则变更\"><a href=\"#2-3、核心规则变更\" class=\"headerlink\" title=\"2.3、核心规则变更\"></a>2.3、核心规则变更</h2><blockquote>\n<p>主要是提供规则更新的工具类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.enums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">RulesEnum</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Flow(<span class=\"number\">1</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    Degrade(<span class=\"number\">2</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    System(<span class=\"number\">3</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    Authority(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\">    RulesEnum(<span class=\"keyword\">int</span> code) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.AbstractRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityRuleManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.system.SystemRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.system.SystemRuleManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.java.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhaozhilue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Log</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefreshRulesUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends AbstractRule&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">refreshRule</span><span class=\"params\">(List&lt;T&gt; ruleList, RulesEnum rulesEnum)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;操作类型:&quot;</span>+rulesEnum.getCode() + <span class=\"string\">&quot;,ruleList:&quot;</span> + ruleList.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (rulesEnum)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Flow:</span><br><span class=\"line\">                FlowRuleManager.loadRules((List&lt;FlowRule&gt;) ruleList);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Degrade:</span><br><span class=\"line\">                DegradeRuleManager.loadRules((List&lt;DegradeRule&gt;)ruleList);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> System:</span><br><span class=\"line\">                SystemRuleManager.loadRules((List&lt;SystemRule&gt;)ruleList);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Authority:</span><br><span class=\"line\">                AuthorityRuleManager.loadRules((List&lt;AuthorityRule&gt;)ruleList);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;无效操作&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4、规则更新接口\"><a href=\"#2-4、规则更新接口\" class=\"headerlink\" title=\"2.4、规则更新接口\"></a>2.4、规则更新接口</h2><blockquote>\n<p>主要是提供接口给前端用于规则更新，并且包括更新内存中的熔断规则。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.entity.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.service.iml.FlowRuleServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.util.RefreshRulesUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/eelve/flow-rule&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlowRuleController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FlowRuleServiceImpl flowRuleService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/rules&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">allRules</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class=\"line\">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class=\"line\">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok().put(flowRuleService.allRules());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/rules&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">addRule</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestBody</span> FlowRuleEntity flowRuleEntity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 先添加，然后再查询出来批量更新</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        flowRuleService.addRule(flowRuleEntity);</span><br><span class=\"line\">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class=\"line\">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok().put(flowRuleEntity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping(&quot;/rules&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">updateRule</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestBody</span> FlowRuleEntity flowRuleEntity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 先添加，然后再查询出来批量更新</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        flowRuleService.addRule(flowRuleEntity);</span><br><span class=\"line\">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class=\"line\">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok().put(flowRuleEntity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(&quot;/rules/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">deleteRule</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@PathVariable(name = &quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 先添加，然后再查询出来批量更新</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        flowRuleService.deleteRuleById(id);</span><br><span class=\"line\">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class=\"line\">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.entity.DegradeRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.service.iml.DegradeRuleServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.util.RefreshRulesUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> DegradeRuleController</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhao.zhilue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2021/1/29 20:18</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/eelve/degrade-rule&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DegradeRuleController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DegradeRuleServiceImpl degradeRuleService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/rules&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">allRules</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class=\"line\">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class=\"line\">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok().put(degradeRuleService.allRules());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/rules&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">addRule</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestBody</span> DegradeRuleEntity degradeRuleEntity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 先添加，然后再查询出来批量更新</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        degradeRuleService.addRule(degradeRuleEntity);</span><br><span class=\"line\">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class=\"line\">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok().put(degradeRuleEntity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping(&quot;/rules&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">updateRule</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestBody</span> DegradeRuleEntity degradeRuleEntity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 先添加，然后再查询出来批量更新</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        degradeRuleService.addRule(degradeRuleEntity);</span><br><span class=\"line\">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class=\"line\">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok().put(degradeRuleEntity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(&quot;/rules/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">deleteRule</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@PathVariable(name = &quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 先添加，然后再查询出来批量更新</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        degradeRuleService.deleteRuleById(id);</span><br><span class=\"line\">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class=\"line\">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5、规则初始化\"><a href=\"#2-5、规则初始化\" class=\"headerlink\" title=\"2.5、规则初始化\"></a>2.5、规则初始化</h2><blockquote>\n<p>规则初始化可以使用 <code>Sentinel</code> 提供的 <code>SPI</code> 机制，实现 <code>com.alibaba.csp.sentinel.init#InitFunc</code> 接口，在接口被第一次调用时初始化，不过需要单独引入 <code>sentinel-datasource-extension</code> 。当然我们也可以直接 <code>Spring</code> 提供的 <code>CommandLineRunner</code> 或 <code>ApplicationRunner</code> 在项目启动是从数据库中加载规则。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreakerStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.system.SystemRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.slots.system.SystemRuleManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhaozhilue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RuleInitFunc</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        initFlowQpsRule();</span><br><span class=\"line\"></span><br><span class=\"line\">        initDegradeRule();</span><br><span class=\"line\"></span><br><span class=\"line\">        initSystemProtectionRule();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化流量规则</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initFlowQpsRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;FlowRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        FlowRule rule1 = <span class=\"keyword\">new</span> FlowRule();</span><br><span class=\"line\">        rule1.setResource(<span class=\"string\">&quot;allInfos&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Set max qps to 2</span></span><br><span class=\"line\">        rule1.setCount(<span class=\"number\">2</span>);</span><br><span class=\"line\">        rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class=\"line\">        rule1.setLimitApp(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">        rules.add(rule1);</span><br><span class=\"line\">        FlowRuleManager.loadRules(rules);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化熔断规则</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initDegradeRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;DegradeRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        DegradeRule rule = <span class=\"keyword\">new</span> DegradeRule(<span class=\"string\">&quot;allInfos&quot;</span>)</span><br><span class=\"line\">        .setGrade(CircuitBreakerStrategy.ERROR_RATIO.getType())</span><br><span class=\"line\">        .setCount(<span class=\"number\">0.7</span>) <span class=\"comment\">// Threshold is 70% error ratio</span></span><br><span class=\"line\">        .setMinRequestAmount(<span class=\"number\">100</span>)</span><br><span class=\"line\">                .setStatIntervalMs(<span class=\"number\">30000</span>) <span class=\"comment\">// 30s</span></span><br><span class=\"line\">                .setTimeWindow(<span class=\"number\">10</span>);</span><br><span class=\"line\">        rules.add(rule);</span><br><span class=\"line\">        DegradeRuleManager.loadRules(rules);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化系统保护跪着</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSystemProtectionRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;SystemRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        SystemRule rule = <span class=\"keyword\">new</span> SystemRule();</span><br><span class=\"line\">        rule.setHighestSystemLoad(<span class=\"number\">10</span>);</span><br><span class=\"line\">        rules.add(rule);</span><br><span class=\"line\">        SystemRuleManager.loadRules(rules);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>至此简单的 <code>Spring Boot</code> 单体应用接入 <code>Sentinel</code> 的熔断能力的后端开发就完成了。然后前端再开发相应的页面，就可以给用户真正的使用了。</p>\n</blockquote>\n<hr>\n<p>【<strong>后面的话</strong>】以上的接口有一点缺陷就是需要用户填写具体的熔断资源名称，但是用户实际上是有可能填写错误，从而导致熔断规则不生效。为此这里给出的解决方案是，在应用启动过程中扫描所有添加 <code>@SentinelResource</code> 注解的资源，然后再开放接口提供给前端，然后用户再填写熔断资源名称的时候就可以通过下拉来选择具体的资源名称了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PostConstruct;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> SentinelResourcetHolder</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> 扫描资源</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhao.zhilue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2021/1/30 9:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentinelResourcetHolder</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Set&lt;String&gt; SENTINEL_RESOURCE = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Set&lt;String&gt; <span class=\"title\">getSentinelResource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SENTINEL_RESOURCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">inintSentinelResourcetHolder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; objectMap =  applicationContext.getBeansWithAnnotation(Controller.class);</span><br><span class=\"line\">        objectMap.entrySet().forEach(o -&gt; &#123;</span><br><span class=\"line\">            Method[] methods = o.getValue().getClass().getDeclaredMethods();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">                SentinelResource sentinelResource = AnnotationUtils.findAnnotation(method, SentinelResource.class);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!Objects.isNull(sentinelResource))&#123;</span><br><span class=\"line\">                    SENTINEL_RESOURCE.add(sentinelResource.value());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        SentinelResourcetHolder.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.config.SentinelResourceFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.config.SentinelResourcetHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> SentinelResourceControl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhao.zhilue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2021/1/31 12:31</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api/eelve/sentinel/resource&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentinelResourceController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">getAllSentinelResourceV2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok().put(SentinelResourcetHolder.getSentinelResource());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>只有Controller层和Service层的直接第一层方法才能通过注解触发，如果是方法再调用普通方法需要勇SphO或者SphU原生写法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">extractedSphO</span><span class=\"params\">(Integer num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SphO.entry(<span class=\"string\">&quot;extractedSphO&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//需要保护的逻辑</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//需要和SphO.entry成对出现</span></span><br><span class=\"line\">                SphO.exit();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//熔断之后执行的方法</span></span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;something bad with blockException&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">extractedSphU</span><span class=\"params\">(Integer num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (Entry entry = SphU.entry(<span class=\"string\">&quot;extractedSphU&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//需要保护的逻辑</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//熔断之后执行的方法</span></span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;something bad with blockException&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"sentinel","path":"api/categories/sentinel.json"}],"tags":[{"name":"sentinel","path":"api/tags/sentinel.json"},{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"}]},{"title":"SpringBoot配置web访问H2","slug":"SpringBoot配置web访问H2","date":"2019-08-09T09:13:41.000Z","updated":"2021-04-19T06:44:39.290Z","comments":true,"path":"api/articles/SpringBoot配置web访问H2.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/h2databasecollection-bffb24f29c9947b8871454427c88a9a3.png","content":"<p>【<strong>前情提要</strong>】最近开始搭建博客，在本地调试的时候使用的数据库是h2，但是调试的时候需要查看数据库，本文也由此而来。</p>\n<hr>\n<p>下面是我用到的方法：</p>\n<ol>\n<li>使用IDEA的Database连接工具，具体操作方法就是按照要求配置连接url，用户名和密码即可。具体操作见下图：<br><img src=\"https://image.eelve.com/eblog/h2databasecollection-bffb24f29c9947b8871454427c88a9a3.png\" alt=\"h2ideadatabase配置\"><br>查询结果：<br><img src=\"https://image.eelve.com/eblog/h2databaseselect-5f10495470e446f98af7b8aff0228ef2.png\" alt=\"h2ideadatabase查询结果\"><br>但是但是这个时候启动<strong>项目会报错</strong>：<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.h2.jdbc.JdbcSQLException: Database may be already in use: null. Possible solutions: close all other connection(s); use the server mode [90020-197]</span><br><span class=\"line\">\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:357) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.message.DbException.get(DbException.java:168) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.mvstore.db.MVTableEngine$Store.convertIllegalStateException(MVTableEngine.java:188) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:168) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:100) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Database.getPageStore(Database.java:2538) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Database.open(Database.java:709) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Database.openDatabase(Database.java:286) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Database.&lt;init&gt;(Database.java:280) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Engine.openSession(Engine.java:66) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Engine.openSession(Engine.java:179) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:157) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Engine.createSession(Engine.java:140) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.Engine.createSession(Engine.java:28) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:351) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:124) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:103) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.Driver.connect(Driver.java:69) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136) ~[HikariCP-3.2.0.jar:na]</span><br><span class=\"line\">\tat com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369) ~[HikariCP-3.2.0.jar:na]</span><br><span class=\"line\">\tat com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198) ~[HikariCP-3.2.0.jar:na]</span><br><span class=\"line\">\tat com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467) [HikariCP-3.2.0.jar:na]</span><br><span class=\"line\">\tat com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541) [HikariCP-3.2.0.jar:na]</span><br><span class=\"line\">\tat com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:115) [HikariCP-3.2.0.jar:na]</span><br><span class=\"line\">\tat com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.2.0.jar:na]</span><br><span class=\"line\">\tat org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:113) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5.CGLIB$jpaVendorAdapter$6(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5$$FastClassBySpringCGLIB$$824457c4.invoke(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) [spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) [spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5.jpaVendorAdapter(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161]</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161]</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:367) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:662) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:479) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:312) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:131) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1665) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1417) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:218) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1325) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1171) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:235) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:226) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:101) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:88) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:261) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:234) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory$Initializer.onStartup(UndertowServletWebServerFactory.java:616) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:203) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class=\"line\">\tat io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:185) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class=\"line\">\tat io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:42) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class=\"line\">\tat io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class=\"line\">\tat io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:250) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class=\"line\">\tat org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.createDeploymentManager(UndertowServletWebServerFactory.java:284) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.getWebServer(UndertowServletWebServerFactory.java:208) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:181) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:154) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">\tat run.halo.app.Application.main(Application.java:31) ~[classes/:na]</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161]</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161]</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]</span><br><span class=\"line\">\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class=\"line\">Caused by: java.lang.IllegalStateException: The file is locked: nio:C:/Users/Chirius/.halo/db/halo.mv.db [1.4.197/7]</span><br><span class=\"line\">\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:870) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.mvstore.FileStore.open(FileStore.java:173) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.mvstore.MVStore.&lt;init&gt;(MVStore.java:350) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:2934) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\tat org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:155) ~[h2-1.4.197.jar:1.4.197]</span><br><span class=\"line\">\t... 152 common frames omitted</span><br></pre></td></tr></table></figure>\n所以笔主在这里不推荐这种方法，因为会占用h2数据库连接，用了这种数据库连接就不能启动项目，反之亦然。</li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li>使用H2 Console进行查看，由于项目是SpringBoot的，所以在这里只需要修改相应配置即可，由<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h2:</span><br><span class=\"line\">    console:</span><br><span class=\"line\">      settings:</span><br><span class=\"line\">        web-allow-others: false</span><br><span class=\"line\">      path: &#x2F;h2-console</span><br><span class=\"line\">      enabled: false</span><br></pre></td></tr></table></figure>\n改为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h2:</span><br><span class=\"line\">    console:</span><br><span class=\"line\">      settings:</span><br><span class=\"line\">        web-allow-others: false</span><br><span class=\"line\">      path: &#x2F;h2-console</span><br><span class=\"line\">      enabled: false</span><br></pre></td></tr></table></figure>\n即可，启动项目，然后在项目访问路径后面加上配置的path**/h2-console**就可以查看具体结果了：<br><img src=\"https://image.eelve.com/eblog/12344-e3c905ae1b794528af9706227afa9b38.png\" alt=\"通过H2 Console查看的结果\"></li>\n</ol>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"h2","path":"api/tags/h2.json"}]},{"title":"浅析Spring Boot单体应用熔断技术","slug":"浅析Spring-Boot单体应用熔断技术","date":"2021-01-20T12:20:20.000Z","updated":"2021-04-19T06:44:39.305Z","comments":true,"path":"api/articles/浅析Spring-Boot单体应用熔断技术.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/2021012001.png","content":"<p>【<strong>前面的话</strong>】最近在看服务熔断的相关技术，下面就来总结一下。</p>\n<h1 id=\"壹、入围方案\"><a href=\"#壹、入围方案\" class=\"headerlink\" title=\"壹、入围方案\"></a>壹、入围方案</h1><ul>\n<li>Sentinel<ul>\n<li><a href=\"https://github.com/alibaba/Sentinel\">github地址</a></li>\n<li><a href=\"https://sentinelguard.io/zh-cn/docs/introduction.html\">https://sentinelguard.io/zh-cn/docs/introduction.html</a></li>\n<li>阿里出品，Spring Cloud Alibaba限流组件，目前持续更新中</li>\n<li>自带Dashboard，可以查看接口Qps等，并且可以动态修改各种规则</li>\n<li>流量控制，直接限流、冷启动、排队</li>\n<li>熔断降级，限制并发限制数和相应时间</li>\n<li>系统负载保护，提供系统级别防护，限制总体CPU等</li>\n<li>主要核心：资源，规则（流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。），和指标</li>\n<li>文档非常清晰和详细，中文</li>\n<li>支持动态规则（推模式和拉模式）</li>\n</ul>\n</li>\n<li>Hystrix<ul>\n<li><a href=\"https://github.com/Netflix/Hystrix\">github地址</a></li>\n<li><a href=\"https://github.com/Netflix/Hystrix/wiki\">https://github.com/Netflix/Hystrix/wiki</a></li>\n<li>Netflix出品，Spring Cloud Netflix限流组件，已经停止新特性开发，只进行bug修复，最近更新为2018年，功能稳定</li>\n<li>有简单的dashboard页面</li>\n<li>以隔离和熔断为主的容错机制，超时或被熔断的调用将会快速失败，并可以提供 fallback 机制的初代熔断框架，异常统计基于滑动窗口</li>\n</ul>\n</li>\n<li>resilience4j<ul>\n<li><a href=\"https://github.com/resilience4j/resilience4j\">github地址</a></li>\n<li><a href=\"https://resilience4j.readme.io/docs\">https://resilience4j.readme.io/docs</a></li>\n<li>是一款轻量、简单，并且文档非常清晰、丰富的熔断工具。是Hystrix替代品，实现思路和Hystrix一致，目前持续更新中</li>\n<li>需要自己对micrometer、prometheus以及Dropwizard metrics进行整合</li>\n<li>CircuitBreaker 熔断</li>\n<li>Bulkhead 隔离</li>\n<li>RateLimiter QPS限制</li>\n<li>Retry 重试</li>\n<li>TimeLimiter 超时限制</li>\n<li>Cache 缓存</li>\n</ul>\n</li>\n<li>自己实现(基于Guava)<ul>\n<li>基于Guava的令牌桶，可以轻松实现对QPS进行限流</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"贰、技术对比\"><a href=\"#贰、技术对比\" class=\"headerlink\" title=\"贰、技术对比\"></a>贰、技术对比</h1><table>\n<thead>\n<tr>\n<th></th>\n<th><strong>Sentinel</strong></th>\n<th><strong>Hystrix</strong></th>\n<th><strong>resilience4j</strong></th>\n<th>使用Guava实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>隔离策略</td>\n<td>信号量隔离（并发线程数限流）</td>\n<td>线程池隔离/信号量隔离</td>\n<td>信号量隔离</td>\n<td></td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>基于响应时间、异常比率、异常数</td>\n<td>基于异常比率</td>\n<td>基于异常比率、响应时间</td>\n<td></td>\n</tr>\n<tr>\n<td>实时统计实现</td>\n<td>滑动窗口（LeapArray）</td>\n<td>滑动窗口（基于 RxJava）</td>\n<td>Ring Bit Buffer</td>\n<td>令牌桶</td>\n</tr>\n<tr>\n<td>动态规则配置</td>\n<td>支持多种数据源</td>\n<td>支持多种数据源</td>\n<td>有限支持</td>\n<td></td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>多个扩展点</td>\n<td>插件的形式</td>\n<td>接口的形式</td>\n<td></td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>单机限流</td>\n<td>基于 QPS，支持基于调用关系的限流</td>\n<td>有限的支持</td>\n<td>Rate Limiter</td>\n<td>基于 QPS</td>\n</tr>\n<tr>\n<td>集群流控</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td></td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>支持预热模式与匀速排队控制效果</td>\n<td>不支持</td>\n<td>简单的 Rate Limiter 模式</td>\n<td></td>\n</tr>\n<tr>\n<td>系统自适应保护</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td></td>\n</tr>\n<tr>\n<td>热点识别/防护</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td></td>\n</tr>\n<tr>\n<td>Service Mesh 支持</td>\n<td>支持 Envoy/Istio</td>\n<td>不支持</td>\n<td>不支持</td>\n<td></td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>提供开箱即用的控制台，可配置规则、实时监控、机器发现等</td>\n<td>简单的监控查看</td>\n<td>不提供控制台，可对接其它监控系统</td>\n<td></td>\n</tr>\n<tr>\n<td>是否支持默认规则</td>\n<td>不支持，需要针对每个接口配置规则</td>\n<td>支持</td>\n<td>支持</td>\n<td></td>\n</tr>\n<tr>\n<td>是否支持过滤异常</td>\n<td>注解单个接口支持</td>\n<td>注解和全局默认配置</td>\n<td>注解和全局默认配置</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"叁、应用改造\"><a href=\"#叁、应用改造\" class=\"headerlink\" title=\"叁、应用改造\"></a>叁、应用改造</h1><h2 id=\"3-1、sentinel\"><a href=\"#3-1、sentinel\" class=\"headerlink\" title=\"3.1、sentinel\"></a>3.1、sentinel</h2><h3 id=\"3-1-1、引入依赖\"><a href=\"#3-1-1、引入依赖\" class=\"headerlink\" title=\"3.1.1、引入依赖\"></a>3.1.1、引入依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-2、改造接口或者service层\"><a href=\"#3-1-2、改造接口或者service层\" class=\"headerlink\" title=\"3.1.2、改造接口或者service层\"></a>3.1.2、改造接口或者service层</h3><blockquote>\n<p>@SentinelResource(value = “allInfos”,fallback = “errorReturn”)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SentinelResource &#123;</span><br><span class=\"line\">    <span class=\"comment\">//资源名称</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//流量方向</span></span><br><span class=\"line\">    <span class=\"function\">EntryType <span class=\"title\">entryType</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> EntryType.OUT</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//资源类型</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">resourceType</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//异常处理方法</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">blockHandler</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//异常处理类</span></span><br><span class=\"line\">    Class&lt;?&gt;[] blockHandlerClass() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//熔断方法</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">fallback</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认熔断方法</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">defaultFallback</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//熔断类</span></span><br><span class=\"line\">    Class&lt;?&gt;[] fallbackClass() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//统计异常</span></span><br><span class=\"line\">    Class&lt;? extends Throwable&gt;[] exceptionsToTrace() <span class=\"keyword\">default</span> &#123;Throwable.class&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//忽略异常</span></span><br><span class=\"line\">    Class&lt;? extends Throwable&gt;[] exceptionsToIgnore() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/get&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@SentinelResource(value = &quot;allInfos&quot;,fallback = &quot;errorReturn&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">allInfos</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;num % 2 == 0&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BaseException(<span class=\"string\">&quot;something bad with 2&quot;</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> JsonResult.ok();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ProgramException e) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> JsonResult.error(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-3、针对接口配置熔断方法或者限流方法\"><a href=\"#3-1-3、针对接口配置熔断方法或者限流方法\" class=\"headerlink\" title=\"3.1.3、针对接口配置熔断方法或者限流方法\"></a>3.1.3、针对接口配置熔断方法或者限流方法</h3><blockquote>\n<p>默认过滤拦截所有Controller接口</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 限流，参数需要和方法保持一致</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> BlockException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">errorReturn</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestParam</span> Integer num)</span> <span class=\"keyword\">throws</span> BlockException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.error(<span class=\"string\">&quot;error 限流&quot;</span> + num );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 熔断，参数需要和方法保持一直，并且需要添加BlockException异常</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> BlockException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">errorReturn</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestParam</span> Integer num,BlockException b)</span> <span class=\"keyword\">throws</span> BlockException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.error(<span class=\"string\">&quot;error 熔断&quot;</span> + num );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意也可以不配置限流或者熔断方法。通过全局异常去捕获<strong>UndeclaredThrowableException</strong>或者<strong>BlockException</strong>避免大量的开发量</p>\n</blockquote>\n<h3 id=\"3-1-4、接入dashboard\"><a href=\"#3-1-4、接入dashboard\" class=\"headerlink\" title=\"3.1.4、接入dashboard\"></a>3.1.4、接入dashboard</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">      <span class=\"attr\">transport:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8719</span></span><br><span class=\"line\">        <span class=\"attr\">dashboard:</span> <span class=\"string\">localhost:8080</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.eelve.com/eblog/2021012001.png\" alt=\"sentinel\"></p>\n<h3 id=\"3-1-5、规则持久化和动态更新\"><a href=\"#3-1-5、规则持久化和动态更新\" class=\"headerlink\" title=\"3.1.5、规则持久化和动态更新\"></a>3.1.5、规则持久化和动态更新</h3><blockquote>\n<p>接入配置中心如：zookeeper等等，并对规则采用推模式</p>\n</blockquote>\n<h2 id=\"3-2、hystrix\"><a href=\"#3-2、hystrix\" class=\"headerlink\" title=\"3.2、hystrix\"></a>3.2、hystrix</h2><h3 id=\"3-2-1、引入依赖\"><a href=\"#3-2-1、引入依赖\" class=\"headerlink\" title=\"3.2.1、引入依赖\"></a>3.2.1、引入依赖</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-2、改造接口\"><a href=\"#3-2-2、改造接口\" class=\"headerlink\" title=\"3.2.2、改造接口\"></a>3.2.2、改造接口</h3><blockquote>\n<p>@HystrixCommand(fallbackMethod = “timeOutError”)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> HystrixCommand &#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">groupKey</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">commandKey</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">threadPoolKey</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">fallbackMethod</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    HystrixProperty[] commandProperties() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    HystrixProperty[] threadPoolProperties() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;? extends Throwable&gt;[] ignoreExceptions() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">ObservableExecutionMode <span class=\"title\">observableExecutionMode</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> ObservableExecutionMode.EAGER</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    HystrixException[] raiseHystrixExceptions() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">defaultFallback</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/get&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@HystrixCommand(fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">allInfos</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;num % 3 == 0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BaseException(<span class=\"string\">&quot;something bad whitch 3&quot;</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ProgramException | InterruptedException exception) &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.error(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-3、针对接口配置熔断方法\"><a href=\"#3-2-3、针对接口配置熔断方法\" class=\"headerlink\" title=\"3.2.3、针对接口配置熔断方法\"></a>3.2.3、针对接口配置熔断方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该方法是熔断回调方法，参数需要和接口保持一致</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">fallbackMethod</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestParam</span> Integer num)</span> </span>&#123;</span><br><span class=\"line\">    response.setStatus(<span class=\"number\">500</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;发生了熔断！！&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JsonResult.error(<span class=\"string\">&quot;熔断&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-4、配置默认策略\"><a href=\"#3-2-4、配置默认策略\" class=\"headerlink\" title=\"3.2.4、配置默认策略\"></a>3.2.4、配置默认策略</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hystrix:</span><br><span class=\"line\">  command:</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      execution:</span><br><span class=\"line\">        isolation:</span><br><span class=\"line\">          strategy: THREAD</span><br><span class=\"line\">          thread:</span><br><span class=\"line\">            # 线程超时15秒,调用Fallback方法</span><br><span class=\"line\">            timeoutInMilliseconds: 15000</span><br><span class=\"line\">      metrics:</span><br><span class=\"line\">        rollingStats:</span><br><span class=\"line\">          timeInMilliseconds: 15000</span><br><span class=\"line\">      circuitBreaker:</span><br><span class=\"line\">        # 10秒内出现3个以上请求(已临近阀值),并且出错率在50%以上,开启断路器.断开服务,调用Fallback方法</span><br><span class=\"line\">        requestVolumeThreshold: 3</span><br><span class=\"line\">        sleepWindowInMilliseconds: 10000</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-5、接入监控\"><a href=\"#3-2-5、接入监控\" class=\"headerlink\" title=\"3.2.5、接入监控\"></a>3.2.5、接入监控</h3><p><img src=\"https://image.eelve.com/eblog/2021012002.png\" alt=\"hystrix\"></p>\n<p><img src=\"https://image.eelve.com/eblog/2021012003.png\" alt=\"hystrix示意图\"></p>\n<blockquote>\n<p>曲线：用来记录2分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。</p>\n</blockquote>\n<blockquote>\n<p><strong>集群监控需要用到注册中心</strong></p>\n</blockquote>\n<h2 id=\"3-3、resilience4j\"><a href=\"#3-3、resilience4j\" class=\"headerlink\" title=\"3.3、resilience4j\"></a>3.3、resilience4j</h2><h3 id=\"3-3-1、引入依赖\"><a href=\"#3-3-1、引入依赖\" class=\"headerlink\" title=\"3.3.1、引入依赖\"></a>3.3.1、引入依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;resilience4j-spring-boot2&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;resilience4j-bulkhead&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;resilience4j-ratelimiter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;resilience4j-timelimiter&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以按需要引入：bulkhead，ratelimiter，timelimiter等</p>\n</blockquote>\n<h3 id=\"3-3-2、改造接口\"><a href=\"#3-3-2、改造接口\" class=\"headerlink\" title=\"3.3.2、改造接口\"></a>3.3.2、改造接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/get&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"comment\">//@TimeLimiter(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@CircuitBreaker(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Bulkhead(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">allInfos</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;param-----&gt;&quot;</span> + num);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Thread.sleep(num);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;num % 2 == 0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BaseException(<span class=\"string\">&quot;something bad with 2&quot;</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;num % 3 == 0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BaseException(<span class=\"string\">&quot;something bad whitch 3&quot;</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num % <span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;num % 5 == 0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ProgramException(<span class=\"string\">&quot;something bad whitch 5&quot;</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;num % 7 == 0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> res = <span class=\"number\">1</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.ok();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BufferUnderflowException e) &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResult.error(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3、针对接口配置熔断方法\"><a href=\"#3-3-3、针对接口配置熔断方法\" class=\"headerlink\" title=\"3.3.3、针对接口配置熔断方法\"></a>3.3.3、针对接口配置熔断方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要参数一致，并且加上相应异常</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> exception</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">fallbackMethod</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@RequestParam</span> Integer num, BulkheadFullException exception)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JsonResult.error(<span class=\"string\">&quot;error 熔断&quot;</span> + num );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-4、配置规则\"><a href=\"#3-3-4、配置规则\" class=\"headerlink\" title=\"3.3.4、配置规则\"></a>3.3.4、配置规则</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">resilience4j.circuitbreaker:</span></span><br><span class=\"line\">    <span class=\"attr\">instances:</span></span><br><span class=\"line\">        <span class=\"attr\">backendA:</span></span><br><span class=\"line\">            <span class=\"attr\">registerHealthIndicator:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">slidingWindowSize:</span> <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">backendB:</span></span><br><span class=\"line\">            <span class=\"attr\">registerHealthIndicator:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">slidingWindowSize:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">permittedNumberOfCallsInHalfOpenState:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">slidingWindowType:</span> <span class=\"string\">TIME_BASED</span></span><br><span class=\"line\">            <span class=\"attr\">minimumNumberOfCalls:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">waitDurationInOpenState:</span> <span class=\"string\">50s</span></span><br><span class=\"line\">            <span class=\"attr\">failureRateThreshold:</span> <span class=\"number\">50</span></span><br><span class=\"line\">            <span class=\"attr\">eventConsumerBufferSize:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">recordFailurePredicate:</span> <span class=\"string\">io.github.robwin.exception.RecordFailurePredicate</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resilience4j.retry:</span></span><br><span class=\"line\">    <span class=\"attr\">instances:</span></span><br><span class=\"line\">        <span class=\"attr\">backendA:</span></span><br><span class=\"line\">            <span class=\"attr\">maxRetryAttempts:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">waitDuration:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">            <span class=\"attr\">enableExponentialBackoff:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">exponentialBackoffMultiplier:</span> <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"attr\">retryExceptions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">org.springframework.web.client.HttpServerErrorException</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">java.io.IOException</span></span><br><span class=\"line\">            <span class=\"attr\">ignoreExceptions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">io.github.robwin.exception.BusinessException</span></span><br><span class=\"line\">        <span class=\"attr\">backendB:</span></span><br><span class=\"line\">            <span class=\"attr\">maxRetryAttempts:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">waitDuration:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">            <span class=\"attr\">retryExceptions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">org.springframework.web.client.HttpServerErrorException</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">java.io.IOException</span></span><br><span class=\"line\">            <span class=\"attr\">ignoreExceptions:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">io.github.robwin.exception.BusinessException</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resilience4j.bulkhead:</span></span><br><span class=\"line\">    <span class=\"attr\">instances:</span></span><br><span class=\"line\">        <span class=\"attr\">backendA:</span></span><br><span class=\"line\">            <span class=\"attr\">maxConcurrentCalls:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">backendB:</span></span><br><span class=\"line\">            <span class=\"attr\">maxWaitDuration:</span> <span class=\"string\">10ms</span></span><br><span class=\"line\">            <span class=\"attr\">maxConcurrentCalls:</span> <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resilience4j.thread-pool-bulkhead:</span></span><br><span class=\"line\">  <span class=\"attr\">instances:</span></span><br><span class=\"line\">    <span class=\"attr\">backendC:</span></span><br><span class=\"line\">      <span class=\"attr\">maxThreadPoolSize:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">coreThreadPoolSize:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">queueCapacity:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resilience4j.ratelimiter:</span></span><br><span class=\"line\">    <span class=\"attr\">instances:</span></span><br><span class=\"line\">        <span class=\"attr\">backendA:</span></span><br><span class=\"line\">            <span class=\"attr\">limitForPeriod:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">limitRefreshPeriod:</span> <span class=\"string\">1s</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutDuration:</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"attr\">registerHealthIndicator:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">eventConsumerBufferSize:</span> <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"attr\">backendB:</span></span><br><span class=\"line\">            <span class=\"attr\">limitForPeriod:</span> <span class=\"number\">6</span></span><br><span class=\"line\">            <span class=\"attr\">limitRefreshPeriod:</span> <span class=\"string\">500ms</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutDuration:</span> <span class=\"string\">3s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resilience4j.timelimiter:</span></span><br><span class=\"line\">    <span class=\"attr\">instances:</span></span><br><span class=\"line\">        <span class=\"attr\">backendA:</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutDuration:</span> <span class=\"string\">2s</span></span><br><span class=\"line\">            <span class=\"attr\">cancelRunningFuture:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">backendB:</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutDuration:</span> <span class=\"string\">1s</span></span><br><span class=\"line\">            <span class=\"attr\">cancelRunningFuture:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置的规则可以被代码覆盖</p>\n</blockquote>\n<h3 id=\"3-3-5、配置监控\"><a href=\"#3-3-5、配置监控\" class=\"headerlink\" title=\"3.3.5、配置监控\"></a>3.3.5、配置监控</h3><blockquote>\n<p>如grafana等</p>\n</blockquote>\n<h1 id=\"肆、关注点\"><a href=\"#肆、关注点\" class=\"headerlink\" title=\"肆、关注点\"></a>肆、关注点</h1><ul>\n<li>是否需要过滤部分异常</li>\n<li>是否需要全局默认规则</li>\n<li>可能需要引入其他中间件</li>\n<li>k8s流量控制</li>\n<li>规则存储和动态修改</li>\n<li>接入改造代价</li>\n</ul>\n<h1 id=\"【后面的话】\"><a href=\"#【后面的话】\" class=\"headerlink\" title=\"【后面的话】\"></a>【<strong>后面的话</strong>】</h1><p>个人建议的话，比较推荐sentinel，它提供了很多接口便于开发者自己拓展，同时我觉得他的规则动态更新也比较方便。最后是相关示例代码:<a href=\"https://github.com/eelve/limiting\">单体应用示例代码</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"springboot","path":"api/categories/springboot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"}]}]}