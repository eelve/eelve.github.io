{"title":"Sentinel进阶之热点参数限流","slug":"Sentinel进阶之热点参数限流","date":"2021-08-30T14:04:09.000Z","updated":"2021-08-30T14:23:28.942Z","comments":true,"path":"api/articles/Sentinel进阶之热点参数限流.json","excerpt":null,"covers":["https://image.eelve.com/eblog/2021083001.png","https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png"],"content":"<p>【<strong>前面的话</strong>】在前面几篇文章中简单介绍了一下<code>Sentinel</code>的功能都是针对接口的，今天就来继续说一下Sentinel的热点参数限流。</p>\n<hr>\n<h1 id=\"壹、概览\"><a href=\"#壹、概览\" class=\"headerlink\" title=\"壹、概览\"></a>壹、概览</h1><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 <code>Top K</code> 数据，并对其访问进行限制。比如：</p>\n<ul>\n<li>商品 <code>ID</code> 为参数，统计一段时间内最常购买的商品 <code>ID</code> 并进行限制</li>\n<li>用户 <code>ID</code> 为参数，针对一段时间内频繁访问的用户 <code>ID</code> 进行限制</li>\n</ul>\n<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>\n<p><img src=\"https://image.eelve.com/eblog/2021083001.png\" alt=\"sentinel-hot-param-overview\"></p>\n<p><code>Sentinel</code> 利用 <code>LRU</code> 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。</p>\n<h1 id=\"贰、基本使用\"><a href=\"#贰、基本使用\" class=\"headerlink\" title=\"贰、基本使用\"></a>贰、基本使用</h1><p>要使用热点参数限流功能，需要引入以下依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sentinel-parameter-flow-control&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;x.y.z&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>然后为对应的资源配置热点参数限流规则，并在 <code>entry</code> 的时候传入相应的参数，即可使热点参数限流生效。</p>\n<blockquote>\n<p>注：若自行扩展并注册了自己实现的 <code>SlotChainBuilder</code>，并希望使用热点参数限流功能，则可以在 <code>chain</code> 里面合适的地方插入 <code>ParamFlowSlot</code>。</p>\n</blockquote>\n<p>那么如何传入对应的参数以便 <code>Sentinel</code> 统计呢？我们可以通过 <code>SphU</code> 类里面几个 <code>entry</code> 重载方法来传入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Entry <span class=\"title\">entry</span><span class=\"params\">(String name, EntryType type, <span class=\"keyword\">int</span> count, Object... args)</span> <span class=\"keyword\">throws</span> BlockException</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Entry <span class=\"title\">entry</span><span class=\"params\">(Method method, EntryType type, <span class=\"keyword\">int</span> count, Object... args)</span> <span class=\"keyword\">throws</span> BlockException</span></span><br></pre></td></tr></table></figure>\n<p>其中最后的一串 <code>args</code> 就是要传入的参数，有多个就按照次序依次传入。比如要传入两个参数 <code>paramA</code> 和 <code>paramB</code>，则可以：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// paramA in index 0, paramB in index 1.</span></span><br><span class=\"line\"><span class=\"comment\">// 若需要配置例外项或者使用集群维度流控，则传入的参数只支持基本类型。</span></span><br><span class=\"line\">SphU.entry(resourceName, EntryType.IN, <span class=\"number\">1</span>, paramA, paramB);</span><br></pre></td></tr></table></figure>\n<p><code>注意</code>：若 <code>entry</code> 的时候传入了热点参数，那么 <code>exit</code> 的时候也一定要带上对应的参数（<code>exit(count, args)</code>），否则可能会有统计错误。正确的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    entry = SphU.entry(resourceName, EntryType.IN, <span class=\"number\">1</span>, paramA, paramB);</span><br><span class=\"line\">    <span class=\"comment\">// Your logic here.</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Handle request rejection.</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        entry.exit(<span class=\"number\">1</span>, paramA, paramB);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于 <code>@SentinelResource</code> 注解方式定义的资源，若注解作用的方法上有参数，<code>Sentinel</code> 会将它们作为参数传入 <code>SphU.entry(res, args)</code>。比如以下的方法里面 <code>uid</code> 和 <code>type</code> 会分别作为第一个和第二个参数传入 <code>Sentinel API</code>，从而可以用于热点规则判断：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SentinelResource(&quot;myMethod&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">doSomething</span><span class=\"params\">(String uid, <span class=\"keyword\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// some logic here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"叁、热点参数规则\"><a href=\"#叁、热点参数规则\" class=\"headerlink\" title=\"叁、热点参数规则\"></a>叁、热点参数规则</h1><p>热点参数规则（<code>ParamFlowRule</code>）类似于流量控制规则（<code>FlowRule</code>）：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，必填</td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>限流阈值，必填</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>限流模式</td>\n<td>QPS 模式</td>\n</tr>\n<tr>\n<td>durationInSec</td>\n<td>统计窗口时间长度（单位为秒），1.6.0 版本开始支持</td>\n<td>1s</td>\n</tr>\n<tr>\n<td>controlBehavior</td>\n<td>流控效果（支持快速失败和匀速排队模式），1.6.0 版本开始支持</td>\n<td>快速失败</td>\n</tr>\n<tr>\n<td>maxQueueingTimeMs</td>\n<td>最大排队等待时长（仅在匀速排队模式生效），1.6.0 版本开始支持</td>\n<td>0ms</td>\n</tr>\n<tr>\n<td>paramIdx</td>\n<td>热点参数的索引，必填，对应 SphU.entry(xxx, args) 中的参数索引位置</td>\n<td></td>\n</tr>\n<tr>\n<td>paramFlowItemList</td>\n<td>参数例外项，可以针对指定的参数值单独设置限流阈值，不受前面 count 阈值的限制。仅支持基本类型和字符串类型</td>\n<td></td>\n</tr>\n<tr>\n<td>clusterMode</td>\n<td>是否是集群参数流控规则</td>\n<td>false</td>\n</tr>\n<tr>\n<td>clusterConfig</td>\n<td>集群流控相关配置</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>我们可以通过 <code>ParamFlowRuleManager</code> 的 <code>loadRules</code> 方法更新热点参数规则，下面是一个示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ParamFlowRule rule = <span class=\"keyword\">new</span> ParamFlowRule(resourceName)</span><br><span class=\"line\">    .setParamIdx(<span class=\"number\">0</span>)</span><br><span class=\"line\">    .setCount(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 针对 int 类型的参数 PARAM_B，单独设置限流 QPS 阈值为 10，而不是全局的阈值 5.</span></span><br><span class=\"line\">ParamFlowItem item = <span class=\"keyword\">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))</span><br><span class=\"line\">    .setClassType(<span class=\"keyword\">int</span>.class.getName())</span><br><span class=\"line\">    .setCount(<span class=\"number\">10</span>);</span><br><span class=\"line\">rule.setParamFlowItemList(Collections.singletonList(item));</span><br><span class=\"line\"></span><br><span class=\"line\">ParamFlowRuleManager.loadRules(Collections.singletonList(rule));</span><br></pre></td></tr></table></figure>\n<h1 id=\"肆、示例\"><a href=\"#肆、示例\" class=\"headerlink\" title=\"肆、示例\"></a>肆、示例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParamFlowQpsDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM_A = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM_B = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM_C = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM_D = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Here we prepare different parameters to validate flow control by parameters.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer[] PARAMS = <span class=\"keyword\">new</span> Integer[] &#123;PARAM_A, PARAM_B, PARAM_C, PARAM_D&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String RESOURCE_KEY = <span class=\"string\">&quot;resA&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        initParamFlowRules();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">20</span>;</span><br><span class=\"line\">        ParamFlowQpsRunner&lt;Integer&gt; runner = <span class=\"keyword\">new</span> ParamFlowQpsRunner&lt;&gt;(PARAMS, RESOURCE_KEY, threadCount, <span class=\"number\">120</span>);</span><br><span class=\"line\">        runner.tick();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        runner.simulateTraffic();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initParamFlowRules</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// QPS mode, threshold is 5 for every frequent &quot;hot spot&quot; parameter in index 0 (the first arg).</span></span><br><span class=\"line\">        ParamFlowRule rule = <span class=\"keyword\">new</span> ParamFlowRule(RESOURCE_KEY)</span><br><span class=\"line\">            .setParamIdx(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .setGrade(RuleConstant.FLOW_GRADE_QPS)</span><br><span class=\"line\">            <span class=\"comment\">//.setDurationInSec(3)</span></span><br><span class=\"line\">            <span class=\"comment\">//.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER)</span></span><br><span class=\"line\">            <span class=\"comment\">//.setMaxQueueingTimeMs(600)</span></span><br><span class=\"line\">            .setCount(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// We can set threshold count for specific parameter value individually.</span></span><br><span class=\"line\">        <span class=\"comment\">// Here we add an exception item. That means: QPS threshold of entries with parameter `PARAM_B` (type: int)</span></span><br><span class=\"line\">        <span class=\"comment\">// in index 0 will be 10, rather than the global threshold (5).</span></span><br><span class=\"line\">        ParamFlowItem item = <span class=\"keyword\">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))</span><br><span class=\"line\">            .setClassType(<span class=\"keyword\">int</span>.class.getName())</span><br><span class=\"line\">            .setCount(<span class=\"number\">10</span>);</span><br><span class=\"line\">        rule.setParamFlowItemList(Collections.singletonList(item));</span><br><span class=\"line\">        ParamFlowRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>后面的话</strong>】<a href=\"https://github.com/eelve/awesomesentinel\">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","more":"<p>【<strong>前面的话</strong>】在前面几篇文章中简单介绍了一下<code>Sentinel</code>的功能都是针对接口的，今天就来继续说一下Sentinel的热点参数限流。</p>\n<hr>\n<h1 id=\"壹、概览\"><a href=\"#壹、概览\" class=\"headerlink\" title=\"壹、概览\"></a>壹、概览</h1><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 <code>Top K</code> 数据，并对其访问进行限制。比如：</p>\n<ul>\n<li>商品 <code>ID</code> 为参数，统计一段时间内最常购买的商品 <code>ID</code> 并进行限制</li>\n<li>用户 <code>ID</code> 为参数，针对一段时间内频繁访问的用户 <code>ID</code> 进行限制</li>\n</ul>\n<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>\n<p><img src=\"https://image.eelve.com/eblog/2021083001.png\" alt=\"sentinel-hot-param-overview\"></p>\n<p><code>Sentinel</code> 利用 <code>LRU</code> 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。</p>\n<h1 id=\"贰、基本使用\"><a href=\"#贰、基本使用\" class=\"headerlink\" title=\"贰、基本使用\"></a>贰、基本使用</h1><p>要使用热点参数限流功能，需要引入以下依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sentinel-parameter-flow-control&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;x.y.z&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>然后为对应的资源配置热点参数限流规则，并在 <code>entry</code> 的时候传入相应的参数，即可使热点参数限流生效。</p>\n<blockquote>\n<p>注：若自行扩展并注册了自己实现的 <code>SlotChainBuilder</code>，并希望使用热点参数限流功能，则可以在 <code>chain</code> 里面合适的地方插入 <code>ParamFlowSlot</code>。</p>\n</blockquote>\n<p>那么如何传入对应的参数以便 <code>Sentinel</code> 统计呢？我们可以通过 <code>SphU</code> 类里面几个 <code>entry</code> 重载方法来传入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Entry <span class=\"title\">entry</span><span class=\"params\">(String name, EntryType type, <span class=\"keyword\">int</span> count, Object... args)</span> <span class=\"keyword\">throws</span> BlockException</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Entry <span class=\"title\">entry</span><span class=\"params\">(Method method, EntryType type, <span class=\"keyword\">int</span> count, Object... args)</span> <span class=\"keyword\">throws</span> BlockException</span></span><br></pre></td></tr></table></figure>\n<p>其中最后的一串 <code>args</code> 就是要传入的参数，有多个就按照次序依次传入。比如要传入两个参数 <code>paramA</code> 和 <code>paramB</code>，则可以：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// paramA in index 0, paramB in index 1.</span></span><br><span class=\"line\"><span class=\"comment\">// 若需要配置例外项或者使用集群维度流控，则传入的参数只支持基本类型。</span></span><br><span class=\"line\">SphU.entry(resourceName, EntryType.IN, <span class=\"number\">1</span>, paramA, paramB);</span><br></pre></td></tr></table></figure>\n<p><code>注意</code>：若 <code>entry</code> 的时候传入了热点参数，那么 <code>exit</code> 的时候也一定要带上对应的参数（<code>exit(count, args)</code>），否则可能会有统计错误。正确的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    entry = SphU.entry(resourceName, EntryType.IN, <span class=\"number\">1</span>, paramA, paramB);</span><br><span class=\"line\">    <span class=\"comment\">// Your logic here.</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Handle request rejection.</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        entry.exit(<span class=\"number\">1</span>, paramA, paramB);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于 <code>@SentinelResource</code> 注解方式定义的资源，若注解作用的方法上有参数，<code>Sentinel</code> 会将它们作为参数传入 <code>SphU.entry(res, args)</code>。比如以下的方法里面 <code>uid</code> 和 <code>type</code> 会分别作为第一个和第二个参数传入 <code>Sentinel API</code>，从而可以用于热点规则判断：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SentinelResource(&quot;myMethod&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">doSomething</span><span class=\"params\">(String uid, <span class=\"keyword\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// some logic here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"叁、热点参数规则\"><a href=\"#叁、热点参数规则\" class=\"headerlink\" title=\"叁、热点参数规则\"></a>叁、热点参数规则</h1><p>热点参数规则（<code>ParamFlowRule</code>）类似于流量控制规则（<code>FlowRule</code>）：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，必填</td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>限流阈值，必填</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>限流模式</td>\n<td>QPS 模式</td>\n</tr>\n<tr>\n<td>durationInSec</td>\n<td>统计窗口时间长度（单位为秒），1.6.0 版本开始支持</td>\n<td>1s</td>\n</tr>\n<tr>\n<td>controlBehavior</td>\n<td>流控效果（支持快速失败和匀速排队模式），1.6.0 版本开始支持</td>\n<td>快速失败</td>\n</tr>\n<tr>\n<td>maxQueueingTimeMs</td>\n<td>最大排队等待时长（仅在匀速排队模式生效），1.6.0 版本开始支持</td>\n<td>0ms</td>\n</tr>\n<tr>\n<td>paramIdx</td>\n<td>热点参数的索引，必填，对应 SphU.entry(xxx, args) 中的参数索引位置</td>\n<td></td>\n</tr>\n<tr>\n<td>paramFlowItemList</td>\n<td>参数例外项，可以针对指定的参数值单独设置限流阈值，不受前面 count 阈值的限制。仅支持基本类型和字符串类型</td>\n<td></td>\n</tr>\n<tr>\n<td>clusterMode</td>\n<td>是否是集群参数流控规则</td>\n<td>false</td>\n</tr>\n<tr>\n<td>clusterConfig</td>\n<td>集群流控相关配置</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>我们可以通过 <code>ParamFlowRuleManager</code> 的 <code>loadRules</code> 方法更新热点参数规则，下面是一个示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ParamFlowRule rule = <span class=\"keyword\">new</span> ParamFlowRule(resourceName)</span><br><span class=\"line\">    .setParamIdx(<span class=\"number\">0</span>)</span><br><span class=\"line\">    .setCount(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 针对 int 类型的参数 PARAM_B，单独设置限流 QPS 阈值为 10，而不是全局的阈值 5.</span></span><br><span class=\"line\">ParamFlowItem item = <span class=\"keyword\">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))</span><br><span class=\"line\">    .setClassType(<span class=\"keyword\">int</span>.class.getName())</span><br><span class=\"line\">    .setCount(<span class=\"number\">10</span>);</span><br><span class=\"line\">rule.setParamFlowItemList(Collections.singletonList(item));</span><br><span class=\"line\"></span><br><span class=\"line\">ParamFlowRuleManager.loadRules(Collections.singletonList(rule));</span><br></pre></td></tr></table></figure>\n<h1 id=\"肆、示例\"><a href=\"#肆、示例\" class=\"headerlink\" title=\"肆、示例\"></a>肆、示例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParamFlowQpsDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM_A = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM_B = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM_C = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PARAM_D = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Here we prepare different parameters to validate flow control by parameters.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer[] PARAMS = <span class=\"keyword\">new</span> Integer[] &#123;PARAM_A, PARAM_B, PARAM_C, PARAM_D&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String RESOURCE_KEY = <span class=\"string\">&quot;resA&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        initParamFlowRules();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">20</span>;</span><br><span class=\"line\">        ParamFlowQpsRunner&lt;Integer&gt; runner = <span class=\"keyword\">new</span> ParamFlowQpsRunner&lt;&gt;(PARAMS, RESOURCE_KEY, threadCount, <span class=\"number\">120</span>);</span><br><span class=\"line\">        runner.tick();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        runner.simulateTraffic();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initParamFlowRules</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// QPS mode, threshold is 5 for every frequent &quot;hot spot&quot; parameter in index 0 (the first arg).</span></span><br><span class=\"line\">        ParamFlowRule rule = <span class=\"keyword\">new</span> ParamFlowRule(RESOURCE_KEY)</span><br><span class=\"line\">            .setParamIdx(<span class=\"number\">0</span>)</span><br><span class=\"line\">            .setGrade(RuleConstant.FLOW_GRADE_QPS)</span><br><span class=\"line\">            <span class=\"comment\">//.setDurationInSec(3)</span></span><br><span class=\"line\">            <span class=\"comment\">//.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER)</span></span><br><span class=\"line\">            <span class=\"comment\">//.setMaxQueueingTimeMs(600)</span></span><br><span class=\"line\">            .setCount(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// We can set threshold count for specific parameter value individually.</span></span><br><span class=\"line\">        <span class=\"comment\">// Here we add an exception item. That means: QPS threshold of entries with parameter `PARAM_B` (type: int)</span></span><br><span class=\"line\">        <span class=\"comment\">// in index 0 will be 10, rather than the global threshold (5).</span></span><br><span class=\"line\">        ParamFlowItem item = <span class=\"keyword\">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))</span><br><span class=\"line\">            .setClassType(<span class=\"keyword\">int</span>.class.getName())</span><br><span class=\"line\">            .setCount(<span class=\"number\">10</span>);</span><br><span class=\"line\">        rule.setParamFlowItemList(Collections.singletonList(item));</span><br><span class=\"line\">        ParamFlowRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>后面的话</strong>】<a href=\"https://github.com/eelve/awesomesentinel\">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","categories":[{"name":"sentinel","path":"api/categories/sentinel.json"}],"tags":[{"name":"sentinel","path":"api/tags/sentinel.json"}]}