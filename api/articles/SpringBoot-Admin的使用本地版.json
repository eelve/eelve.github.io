{"title":"Spring Boot Admin 的使用本地版","slug":"SpringBoot-Admin的使用本地版","date":"2019-08-09T09:07:34.000Z","updated":"2021-04-19T07:47:19.522Z","comments":true,"path":"api/articles/SpringBoot-Admin的使用本地版.json","excerpt":null,"covers":["https://eelve.com/upload/2019/8/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png","https://eelve.com/upload/2019/8/82-1b588fee05794b2d94a2f578ba805fbb.png","https://eelve.com/upload/2019/8/84-fa96d9eee75d47d599f55e27533664e4.png","https://eelve.com/upload/2019/8/85-c42df15785a14110b7532b20afee8ca1.png","https://eelve.com/upload/2019/8/86-dc4b6d05194a4c9786383189c6378f26.png","https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png"],"content":"<p>【<strong>前情提要</strong>】Spring Boot Actuator 提供了对单个 Spring Boot 应用的监控，信息包含应用状态、内存、线程、堆栈等，比较全面的监控了 Spring Boot 应用的整个生命周期。但是这样监控也有一些问题：第一，所有的监控都需要调用固定的接口来查看，如果全面查看应用状态需要调用很多接口，并且接口返回的 JSON 信息不方便运营人员理解；第二，如果 Spring Boot 应用集群非常大，每个应用都需要调用不同的接口来查看监控信息，操作非常繁琐低效。在这样的背景下，就诞生了另外一个开源软件：<strong>Spring Boot Admin</strong>。</p>\n<hr>\n<h1 id=\"壹、什么是Spring-Boot-Admin\"><a href=\"#壹、什么是Spring-Boot-Admin\" class=\"headerlink\" title=\"壹、什么是Spring Boot Admin\"></a>壹、什么是Spring Boot Admin</h1><p>Spring Boot Admin 是一个管理和监控 Spring Boot 应用程序的开源软件，每个应用都认为是一个客户端，通过 HTTP 或者使用 Eureka 注册到 admin server 中进行展示，Spring Boot Admin UI 部分使用 Vue.js 将数据展示在前端。</p>\n<p>Spring Boot Admin 是一个针对 Spring Boot 的 Actuator 接口进行 UI 美化封装的监控工具，它可以在列表中浏览所有被监控 spring-boot 项目的基本信息、详细的 Health 信息、内存信息、JVM 信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改 logger 的 level。</p>\n<p>值得注意的是 Spring Boot Admin 并不是 Spring Boot 官方出品的开源软件，但是其软件质量和使用广泛度都非常的高，并且 Spring Boot Admin 会及时随着 Spring Boot 的更新而更新，当 Spring Boot 推出 2.X 版本时 Spring Boot Admin 也及时进行了更新。</p>\n<p>Spring Boot Admin 2.x 不仅是跟着支持了 Spring Boot 2.x，还在 1.x 的基础上进行了大量的更新和优化:</p>\n<pre><code>重新规划了项目依赖包，让项目中更方便的集成 Spring Boot Admin\n1.x 前端使用了 Angular.js，2.x 使用 Vue 对界面进行了重写，界面美观度提升幅度非常高\n提供了支持 Spring Cloud 的组件\n其他更新，具体参考：Changes with 2.x\n</code></pre>\n<p>Spring Boot Admin 分为服务端和客户端，服务端其实就是一个监控后台用来汇总展示所有的监控信息，客户端就是我们的应用，使用时需要先启动服务端，在启动客户端的时候打开 Actuator 的接口，并指向服务端的地址，这样服务端会定时读取相关信息以达到监控的目的。</p>\n<hr>\n<p>接下来演示如何使用 Spring Boot Admin 对 Spring Boot 应用进行监控。</p>\n<h1 id=\"贰、监控单体应用\"><a href=\"#贰、监控单体应用\" class=\"headerlink\" title=\"贰、监控单体应用\"></a>贰、监控单体应用</h1><p>先给大家展示如何使用 Spring Boot Admin 监控单个 Spring Boot 应用。</p>\n<h2 id=\"Admin-Server-端\"><a href=\"#Admin-Server-端\" class=\"headerlink\" title=\"Admin Server 端\"></a>Admin Server 端</h2><h3 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>2.x 下只需要添加此一个包即可，其他组件会自动依赖添加。</strong></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>server.port=8000</p>\n<p>服务端设置端口为：8000。</p>\n<h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminServerApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>完成上面三步之后，启动服务端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 可以看到以下界面：<br><img src=\"https://eelve.com/upload/2019/8/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png\" alt=\"监控页面\"><br>因为刚启动没有应用，因此显示：No applications registered.，同时根据上图也可以看出 applications 页面会展示项目的应用数、实例数和状态三个信息。</p>\n<p>接下来我们构建一个客户端，并注册到服务端。</p>\n<h2 id=\"Admin-Client-端\"><a href=\"#Admin-Client-端\" class=\"headerlink\" title=\"Admin Client 端\"></a>Admin Client 端</h2><h2 id=\"项目依赖-1\"><a href=\"#项目依赖-1\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>添加 spring-boot-starter-web 是为了使应用处于启动状态，spring-boot-admin-starter-client 会自动添加 Actuator 相关依赖。</strong></p>\n<h3 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8001</span></span><br><span class=\"line\"><span class=\"meta\">spring.application.name</span>=<span class=\"string\">Admin Client</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.client.url</span>=<span class=\"string\">http://localhost:8000  </span></span><br><span class=\"line\"><span class=\"meta\">management.endpoints.web.exposure.include</span>=<span class=\"string\">*</span></span><br></pre></td></tr></table></figure>\n<pre><code>spring.boot.admin.client.url 配置 Admin Server 的地址\nmanagement.endpoints.web.exposure.include=* 打开客户端 Actuator 的监控\n</code></pre>\n<h3 id=\"启动类-1\"><a href=\"#启动类-1\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminClientApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminClientApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，启动 Client 端，Admin 服务端会自动检查到客户端的变化，并展示其应用：<br><img src=\"https://eelve.com/upload/2019/8/82-1b588fee05794b2d94a2f578ba805fbb.png\" alt=\"结果\"><br>页面会展示被监控的服务列表，点击项目名称会进入此应用的详细监控信息：<br><img src=\"https://eelve.com/upload/2019/8/83-d685df514a0e44b1bd45e5b6bd1a9e64.png\" alt=\"详情\"><br>通过上图可以看出，Spring Boot Admin 以图形化的形式展示了应用的各项信息，这些信息大多都来自于 <strong>Spring Boot Actuator</strong> 提供的接口。利用图形化的形式很容易看到应用的各项参数变化，甚至有些页面还可以进行一些操作，比如改变打印日志的级别等。</p>\n<h3 id=\"点击-journal-页面可以看到应用状态变化的历史过程：\"><a href=\"#点击-journal-页面可以看到应用状态变化的历史过程：\" class=\"headerlink\" title=\"点击 journal 页面可以看到应用状态变化的历史过程：\"></a>点击 journal 页面可以看到应用状态变化的历史过程：</h3><p><img src=\"https://eelve.com/upload/2019/8/84-fa96d9eee75d47d599f55e27533664e4.png\" alt=\"journal\"></p>\n<h3 id=\"点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\"><a href=\"#点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\" class=\"headerlink\" title=\"点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。\"></a>点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。</h3><p><img src=\"https://eelve.com/upload/2019/8/85-c42df15785a14110b7532b20afee8ca1.png\" alt=\"wallboard \"></p>\n<h1 id=\"叁、监控微服务\"><a href=\"#叁、监控微服务\" class=\"headerlink\" title=\"叁、监控微服务\"></a>叁、监控微服务</h1><p>如果我们使用的是单个 Spring Boot 应用，就需要在每一个被监控的应用中配置 Admin Server 的地址信息；如果应用都注册在 Eureka 中就不需要再对每个应用进行配置，Spring Boot Admin 会自动从注册中心抓取应用的相关信息。</p>\n<p>如果使用了 Spring Cloud 的服务发现功能，就不需要再单独添加 Admin Client 客户端，仅仅需要 Spring Boot Server，其他内容会自动进行配置。</p>\n<p>接下来以 Eureka 作为服务发现的示例来进行演示，实际上也可以使用 Consul 或者 Zookeeper。</p>\n<p>（1）服务端和客户端添加 spring-cloud-starter-eureka 到包依赖中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）启动类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityPermitAllConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            http.authorizeRequests().anyRequest().permitAll()  </span><br><span class=\"line\">                .and().csrf().disable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用类 <strong>SecurityPermitAllConfig</strong> 关闭了安全验证。</p>\n<p>（3）在客户端中配置服务发现的地址</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span>   </span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">leaseRenewalIntervalInSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">health-check-url-path:</span> <span class=\"string\">/actuator/health</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">startup:</span> <span class=\"string\">$&#123;random.int&#125;</span>    <span class=\"comment\">#needed to trigger info and endpoint update after restart</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">registryFetchIntervalSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">serviceUrl:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&quot;*&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">ALWAYS</span></span><br></pre></td></tr></table></figure>\n<p><strong>Spring Cloud</strong> 提供了示例代码可以参考这里：<a href=\"https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka/\">spring-boot-admin-sample-eureka</a>。</p>\n<p>重启启动服务端和客户端之后，访问服务端的相关地址就可以看到监控页面了。</p>\n<h1 id=\"肆、安全控制\"><a href=\"#肆、安全控制\" class=\"headerlink\" title=\"肆、安全控制\"></a>肆、安全控制</h1><p><strong>Spring Boot Admin</strong> 后台有很多的敏感信息和操作，如果公司不做权限控制可能会影响到公司系统的安全性。Spring Boot Admin 也考虑到了这个因素，可以利用前面的 Spring Security 做安全访问控制，在 spring-boot-admin-server 上进行改造。</p>\n<p>（1）添加 Spring Boot Security 依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）添加安全访问控制</p>\n<p>和前面的 Security 配置一样，给项目添加访问控制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecuritySecureConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String adminContextPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecuritySecureConfig</span><span class=\"params\">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class=\"keyword\">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class=\"line\">        successHandler.setTargetUrlParameter(<span class=\"string\">&quot;redirectTo&quot;</span>);</span><br><span class=\"line\">        successHandler.setDefaultTargetUrl(adminContextPath + <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() </span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).permitAll()</span><br><span class=\"line\">            .anyRequest().authenticated() </span><br><span class=\"line\">            .and()</span><br><span class=\"line\">        .formLogin().loginPage(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).successHandler(successHandler).and() </span><br><span class=\"line\">        .logout().logoutUrl(adminContextPath + <span class=\"string\">&quot;/logout&quot;</span>).and()</span><br><span class=\"line\">        .httpBasic().and() </span><br><span class=\"line\">        .csrf()</span><br><span class=\"line\">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class=\"line\">            .ignoringAntMatchers(</span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/instances&quot;</span>,   </span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/actuator/**&quot;</span>  </span><br><span class=\"line\">            );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() 所有静态内容不做安全验证</span><br><span class=\"line\">    anyRequest().authenticated() 其他请求均需要验证</span><br><span class=\"line\">    formLogin() 配置登录</span><br><span class=\"line\">    logout() 配置登出</span><br><span class=\"line\">    httpBasic() 支持 HTTP，引导 Spring Boot Admin 客户端注册</span><br><span class=\"line\">    csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 打开跨站点请求保护 Cookies</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/instances&quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/instances&quot;</span>，方便 Admin 客户端注册</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/actuator/** &quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/actuator/**&quot;</span>，可以让 Admin 监控到 Actuator 的相关接口</span><br></pre></td></tr></table></figure>\n<p>然后可以给 security 设置一个用户名和密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重启 Admin Server 端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 就会发现需要一个登录的用户名和密码了。<br><img src=\"https://eelve.com/upload/2019/8/86-dc4b6d05194a4c9786383189c6378f26.png\" alt=\"Admin Server\"><br>使用刚才设置的用户名和密码登录之后，发现注册到 Server 端的服务数成为 0 了，这是客户端统一也需要配置帐户名和密码信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重新启动，在服务端就又可以查看监控到的应用了。</p>\n<h1 id=\"伍、其他方式\"><a href=\"#伍、其他方式\" class=\"headerlink\" title=\"伍、其他方式\"></a>伍、其他方式</h1><p>如果 Actuator 的端口被使用 HTTP 认证保护，那么 Spring Boot Admin Server 访问的时候需要凭证信息，这时候可以使用 metadata 的方式对账户和密码进行配置。</p>\n<h2 id=\"直接使用客户端注册的方式：\"><a href=\"#直接使用客户端注册的方式：\" class=\"headerlink\" title=\"直接使用客户端注册的方式：\"></a>直接使用客户端注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.boot.admin.client:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8080</span></span><br><span class=\"line\">    <span class=\"attr\">instance:</span></span><br><span class=\"line\">      <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Eureka-进行注册的方式：\"><a href=\"#使用-Eureka-进行注册的方式：\" class=\"headerlink\" title=\"使用 Eureka 进行注册的方式：\"></a>使用 Eureka 进行注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Eureka 中的 metadataMap 是专门用来存放一些自定义的数据，当注册中心或者其他服务需要此服务的某些配置时可以在 metadataMap 里取。实际上，每个 instance 都有各自的 metadataMap，map 中存放着需要用到的属性。例如，上面配置中的 eureka.instance.metadata-map.user.name，当这个服务成功注册到 Eureka 上，Spring Boot Admin 就会拿到这个 instance，进而拿到 metadataMap 里的属性，然后放入请求头，向此服务发送请求，访问此服务的 Actuator 开放的端点。</p>\n<h1 id=\"陆、邮件告警\"><a href=\"#陆、邮件告警\" class=\"headerlink\" title=\"陆、邮件告警\"></a>陆、邮件告警</h1><p>Spring Boot Admin 将微服务中所有应用信息在后台进行了展示，非常方便我们对微服务整体的监控和治理。但是我们的运营人员也不可能一天 24 小时盯着监控后台，因此如果服务有异常的时候，有对应的邮件告警就太好了，其实 Spring Boot Admin 也给出了支持。</p>\n<p>我们对上面的示例项目 spring-boot-admin-server 进行改造。</p>\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"增加了邮件发送的-starter-包。\"><a href=\"#增加了邮件发送的-starter-包。\" class=\"headerlink\" title=\"增加了邮件发送的 starter 包。\"></a>增加了邮件发送的 starter 包。</h2><h3 id=\"配置文件-2\"><a href=\"#配置文件-2\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mail.host</span>=<span class=\"string\">smtp.qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.username</span>=<span class=\"string\">xxx@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.password</span>=<span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.auth</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.required</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.from</span>=<span class=\"string\">yyyy@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.to</span>=<span class=\"string\">zzz@qq.com</span></span><br></pre></td></tr></table></figure>\n<p><strong>在配置文件中添加邮件发送相关信息：邮件的发送者、接受者、协议、移动授权码等</strong>。</p>\n<p>配置完成后，重新启动项目 spring-boot-admin-server，这样 Admin Server 就具备了邮件告警的功能，默认情况下 Admin Server 对 Eureka 中的服务上下线都进行了监控，当服务上下线的时候我们就会收到相应的告警邮件。</p>\n<p>当然这只是最基本的邮件监控，在实际的使用过程中，需要根据情况对邮件告警内容进行自定义，比如监控堆内存的使用情况，当到达一定比例的时候进行告警等。</p>\n<p>【写在后面的话】Spring Boot Admin 解决了我们对大规模 Spring Boot 应用监控的需求，Spring Boot Admin 充分利用了 Actuator 开放的相关接口，采用优秀的图形界面将这些信息进行了展示，方便我们更加直观的查看集群中应用的状态。Spring Boot Admin 不仅可以监控单个 Spring Boot 应用，也可以结合 Spring Cloud 监控注册到服务中心的所有应用状态，再结合报警系统的使用就可以随时感知到应用的状态变化。在实际工作中 Spring Boot Admin 是我们在后期运营中频繁用到的一个组件，应该作为重点关注。</p>\n<hr>\n<p>最后是一个用http方式监听的demo：<a href=\"https://github.com/eelve/springbootadmin\">Spring Boot Admin使用http连接server端</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","more":"<p>【<strong>前情提要</strong>】Spring Boot Actuator 提供了对单个 Spring Boot 应用的监控，信息包含应用状态、内存、线程、堆栈等，比较全面的监控了 Spring Boot 应用的整个生命周期。但是这样监控也有一些问题：第一，所有的监控都需要调用固定的接口来查看，如果全面查看应用状态需要调用很多接口，并且接口返回的 JSON 信息不方便运营人员理解；第二，如果 Spring Boot 应用集群非常大，每个应用都需要调用不同的接口来查看监控信息，操作非常繁琐低效。在这样的背景下，就诞生了另外一个开源软件：<strong>Spring Boot Admin</strong>。</p>\n<hr>\n<h1 id=\"壹、什么是Spring-Boot-Admin\"><a href=\"#壹、什么是Spring-Boot-Admin\" class=\"headerlink\" title=\"壹、什么是Spring Boot Admin\"></a>壹、什么是Spring Boot Admin</h1><p>Spring Boot Admin 是一个管理和监控 Spring Boot 应用程序的开源软件，每个应用都认为是一个客户端，通过 HTTP 或者使用 Eureka 注册到 admin server 中进行展示，Spring Boot Admin UI 部分使用 Vue.js 将数据展示在前端。</p>\n<p>Spring Boot Admin 是一个针对 Spring Boot 的 Actuator 接口进行 UI 美化封装的监控工具，它可以在列表中浏览所有被监控 spring-boot 项目的基本信息、详细的 Health 信息、内存信息、JVM 信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改 logger 的 level。</p>\n<p>值得注意的是 Spring Boot Admin 并不是 Spring Boot 官方出品的开源软件，但是其软件质量和使用广泛度都非常的高，并且 Spring Boot Admin 会及时随着 Spring Boot 的更新而更新，当 Spring Boot 推出 2.X 版本时 Spring Boot Admin 也及时进行了更新。</p>\n<p>Spring Boot Admin 2.x 不仅是跟着支持了 Spring Boot 2.x，还在 1.x 的基础上进行了大量的更新和优化:</p>\n<pre><code>重新规划了项目依赖包，让项目中更方便的集成 Spring Boot Admin\n1.x 前端使用了 Angular.js，2.x 使用 Vue 对界面进行了重写，界面美观度提升幅度非常高\n提供了支持 Spring Cloud 的组件\n其他更新，具体参考：Changes with 2.x\n</code></pre>\n<p>Spring Boot Admin 分为服务端和客户端，服务端其实就是一个监控后台用来汇总展示所有的监控信息，客户端就是我们的应用，使用时需要先启动服务端，在启动客户端的时候打开 Actuator 的接口，并指向服务端的地址，这样服务端会定时读取相关信息以达到监控的目的。</p>\n<hr>\n<p>接下来演示如何使用 Spring Boot Admin 对 Spring Boot 应用进行监控。</p>\n<h1 id=\"贰、监控单体应用\"><a href=\"#贰、监控单体应用\" class=\"headerlink\" title=\"贰、监控单体应用\"></a>贰、监控单体应用</h1><p>先给大家展示如何使用 Spring Boot Admin 监控单个 Spring Boot 应用。</p>\n<h2 id=\"Admin-Server-端\"><a href=\"#Admin-Server-端\" class=\"headerlink\" title=\"Admin Server 端\"></a>Admin Server 端</h2><h3 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>2.x 下只需要添加此一个包即可，其他组件会自动依赖添加。</strong></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>server.port=8000</p>\n<p>服务端设置端口为：8000。</p>\n<h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminServerApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>完成上面三步之后，启动服务端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 可以看到以下界面：<br><img src=\"https://eelve.com/upload/2019/8/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png\" alt=\"监控页面\"><br>因为刚启动没有应用，因此显示：No applications registered.，同时根据上图也可以看出 applications 页面会展示项目的应用数、实例数和状态三个信息。</p>\n<p>接下来我们构建一个客户端，并注册到服务端。</p>\n<h2 id=\"Admin-Client-端\"><a href=\"#Admin-Client-端\" class=\"headerlink\" title=\"Admin Client 端\"></a>Admin Client 端</h2><h2 id=\"项目依赖-1\"><a href=\"#项目依赖-1\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">  &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>添加 spring-boot-starter-web 是为了使应用处于启动状态，spring-boot-admin-starter-client 会自动添加 Actuator 相关依赖。</strong></p>\n<h3 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8001</span></span><br><span class=\"line\"><span class=\"meta\">spring.application.name</span>=<span class=\"string\">Admin Client</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.client.url</span>=<span class=\"string\">http://localhost:8000  </span></span><br><span class=\"line\"><span class=\"meta\">management.endpoints.web.exposure.include</span>=<span class=\"string\">*</span></span><br></pre></td></tr></table></figure>\n<pre><code>spring.boot.admin.client.url 配置 Admin Server 的地址\nmanagement.endpoints.web.exposure.include=* 打开客户端 Actuator 的监控\n</code></pre>\n<h3 id=\"启动类-1\"><a href=\"#启动类-1\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminClientApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(AdminClientApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，启动 Client 端，Admin 服务端会自动检查到客户端的变化，并展示其应用：<br><img src=\"https://eelve.com/upload/2019/8/82-1b588fee05794b2d94a2f578ba805fbb.png\" alt=\"结果\"><br>页面会展示被监控的服务列表，点击项目名称会进入此应用的详细监控信息：<br><img src=\"https://eelve.com/upload/2019/8/83-d685df514a0e44b1bd45e5b6bd1a9e64.png\" alt=\"详情\"><br>通过上图可以看出，Spring Boot Admin 以图形化的形式展示了应用的各项信息，这些信息大多都来自于 <strong>Spring Boot Actuator</strong> 提供的接口。利用图形化的形式很容易看到应用的各项参数变化，甚至有些页面还可以进行一些操作，比如改变打印日志的级别等。</p>\n<h3 id=\"点击-journal-页面可以看到应用状态变化的历史过程：\"><a href=\"#点击-journal-页面可以看到应用状态变化的历史过程：\" class=\"headerlink\" title=\"点击 journal 页面可以看到应用状态变化的历史过程：\"></a>点击 journal 页面可以看到应用状态变化的历史过程：</h3><p><img src=\"https://eelve.com/upload/2019/8/84-fa96d9eee75d47d599f55e27533664e4.png\" alt=\"journal\"></p>\n<h3 id=\"点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\"><a href=\"#点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。\" class=\"headerlink\" title=\"点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。\"></a>点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。</h3><p><img src=\"https://eelve.com/upload/2019/8/85-c42df15785a14110b7532b20afee8ca1.png\" alt=\"wallboard \"></p>\n<h1 id=\"叁、监控微服务\"><a href=\"#叁、监控微服务\" class=\"headerlink\" title=\"叁、监控微服务\"></a>叁、监控微服务</h1><p>如果我们使用的是单个 Spring Boot 应用，就需要在每一个被监控的应用中配置 Admin Server 的地址信息；如果应用都注册在 Eureka 中就不需要再对每个应用进行配置，Spring Boot Admin 会自动从注册中心抓取应用的相关信息。</p>\n<p>如果使用了 Spring Cloud 的服务发现功能，就不需要再单独添加 Admin Client 客户端，仅仅需要 Spring Boot Server，其他内容会自动进行配置。</p>\n<p>接下来以 Eureka 作为服务发现的示例来进行演示，实际上也可以使用 Consul 或者 Zookeeper。</p>\n<p>（1）服务端和客户端添加 spring-cloud-starter-eureka 到包依赖中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）启动类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityPermitAllConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            http.authorizeRequests().anyRequest().permitAll()  </span><br><span class=\"line\">                .and().csrf().disable();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用类 <strong>SecurityPermitAllConfig</strong> 关闭了安全验证。</p>\n<p>（3）在客户端中配置服务发现的地址</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span>   </span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">leaseRenewalIntervalInSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">health-check-url-path:</span> <span class=\"string\">/actuator/health</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">startup:</span> <span class=\"string\">$&#123;random.int&#125;</span>    <span class=\"comment\">#needed to trigger info and endpoint update after restart</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">registryFetchIntervalSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">serviceUrl:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&quot;*&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">ALWAYS</span></span><br></pre></td></tr></table></figure>\n<p><strong>Spring Cloud</strong> 提供了示例代码可以参考这里：<a href=\"https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka/\">spring-boot-admin-sample-eureka</a>。</p>\n<p>重启启动服务端和客户端之后，访问服务端的相关地址就可以看到监控页面了。</p>\n<h1 id=\"肆、安全控制\"><a href=\"#肆、安全控制\" class=\"headerlink\" title=\"肆、安全控制\"></a>肆、安全控制</h1><p><strong>Spring Boot Admin</strong> 后台有很多的敏感信息和操作，如果公司不做权限控制可能会影响到公司系统的安全性。Spring Boot Admin 也考虑到了这个因素，可以利用前面的 Spring Security 做安全访问控制，在 spring-boot-admin-server 上进行改造。</p>\n<p>（1）添加 Spring Boot Security 依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>（2）添加安全访问控制</p>\n<p>和前面的 Security 配置一样，给项目添加访问控制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecuritySecureConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String adminContextPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecuritySecureConfig</span><span class=\"params\">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// @formatter:off</span></span><br><span class=\"line\">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class=\"keyword\">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class=\"line\">        successHandler.setTargetUrlParameter(<span class=\"string\">&quot;redirectTo&quot;</span>);</span><br><span class=\"line\">        successHandler.setDefaultTargetUrl(adminContextPath + <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests()</span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() </span><br><span class=\"line\">            .antMatchers(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).permitAll()</span><br><span class=\"line\">            .anyRequest().authenticated() </span><br><span class=\"line\">            .and()</span><br><span class=\"line\">        .formLogin().loginPage(adminContextPath + <span class=\"string\">&quot;/login&quot;</span>).successHandler(successHandler).and() </span><br><span class=\"line\">        .logout().logoutUrl(adminContextPath + <span class=\"string\">&quot;/logout&quot;</span>).and()</span><br><span class=\"line\">        .httpBasic().and() </span><br><span class=\"line\">        .csrf()</span><br><span class=\"line\">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class=\"line\">            .ignoringAntMatchers(</span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/instances&quot;</span>,   </span><br><span class=\"line\">                adminContextPath + <span class=\"string\">&quot;/actuator/**&quot;</span>  </span><br><span class=\"line\">            );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    antMatchers(adminContextPath + <span class=\"string\">&quot;/assets/**&quot;</span>).permitAll() 所有静态内容不做安全验证</span><br><span class=\"line\">    anyRequest().authenticated() 其他请求均需要验证</span><br><span class=\"line\">    formLogin() 配置登录</span><br><span class=\"line\">    logout() 配置登出</span><br><span class=\"line\">    httpBasic() 支持 HTTP，引导 Spring Boot Admin 客户端注册</span><br><span class=\"line\">    csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 打开跨站点请求保护 Cookies</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/instances&quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/instances&quot;</span>，方便 Admin 客户端注册</span><br><span class=\"line\">    adminContextPath + <span class=\"string\">&quot;/actuator/** &quot;</span> 取消跨站点请求保护 <span class=\"string\">&quot;/actuator/**&quot;</span>，可以让 Admin 监控到 Actuator 的相关接口</span><br></pre></td></tr></table></figure>\n<p>然后可以给 security 设置一个用户名和密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重启 Admin Server 端，访问网址 <a href=\"http://localhost:8000/\">http://localhost:8000</a> 就会发现需要一个登录的用户名和密码了。<br><img src=\"https://eelve.com/upload/2019/8/86-dc4b6d05194a4c9786383189c6378f26.png\" alt=\"Admin Server\"><br>使用刚才设置的用户名和密码登录之后，发现注册到 Server 端的服务数成为 0 了，这是客户端统一也需要配置帐户名和密码信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.security.user.name&#x3D;admin</span><br><span class=\"line\">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>\n<p>配置完成之后重新启动，在服务端就又可以查看监控到的应用了。</p>\n<h1 id=\"伍、其他方式\"><a href=\"#伍、其他方式\" class=\"headerlink\" title=\"伍、其他方式\"></a>伍、其他方式</h1><p>如果 Actuator 的端口被使用 HTTP 认证保护，那么 Spring Boot Admin Server 访问的时候需要凭证信息，这时候可以使用 metadata 的方式对账户和密码进行配置。</p>\n<h2 id=\"直接使用客户端注册的方式：\"><a href=\"#直接使用客户端注册的方式：\" class=\"headerlink\" title=\"直接使用客户端注册的方式：\"></a>直接使用客户端注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.boot.admin.client:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8080</span></span><br><span class=\"line\">    <span class=\"attr\">instance:</span></span><br><span class=\"line\">      <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Eureka-进行注册的方式：\"><a href=\"#使用-Eureka-进行注册的方式：\" class=\"headerlink\" title=\"使用 Eureka 进行注册的方式：\"></a>使用 Eureka 进行注册的方式：</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata-map:</span></span><br><span class=\"line\">      <span class=\"attr\">user.name:</span> <span class=\"string\">$&#123;spring.security.user.name&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">user.password:</span> <span class=\"string\">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Eureka 中的 metadataMap 是专门用来存放一些自定义的数据，当注册中心或者其他服务需要此服务的某些配置时可以在 metadataMap 里取。实际上，每个 instance 都有各自的 metadataMap，map 中存放着需要用到的属性。例如，上面配置中的 eureka.instance.metadata-map.user.name，当这个服务成功注册到 Eureka 上，Spring Boot Admin 就会拿到这个 instance，进而拿到 metadataMap 里的属性，然后放入请求头，向此服务发送请求，访问此服务的 Actuator 开放的端点。</p>\n<h1 id=\"陆、邮件告警\"><a href=\"#陆、邮件告警\" class=\"headerlink\" title=\"陆、邮件告警\"></a>陆、邮件告警</h1><p>Spring Boot Admin 将微服务中所有应用信息在后台进行了展示，非常方便我们对微服务整体的监控和治理。但是我们的运营人员也不可能一天 24 小时盯着监控后台，因此如果服务有异常的时候，有对应的邮件告警就太好了，其实 Spring Boot Admin 也给出了支持。</p>\n<p>我们对上面的示例项目 spring-boot-admin-server 进行改造。</p>\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"增加了邮件发送的-starter-包。\"><a href=\"#增加了邮件发送的-starter-包。\" class=\"headerlink\" title=\"增加了邮件发送的 starter 包。\"></a>增加了邮件发送的 starter 包。</h2><h3 id=\"配置文件-2\"><a href=\"#配置文件-2\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mail.host</span>=<span class=\"string\">smtp.qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.username</span>=<span class=\"string\">xxx@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.password</span>=<span class=\"string\">xxx</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.auth</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.mail.properties.mail.smtp.starttls.required</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.from</span>=<span class=\"string\">yyyy@qq.com</span></span><br><span class=\"line\"><span class=\"meta\">spring.boot.admin.notify.mail.to</span>=<span class=\"string\">zzz@qq.com</span></span><br></pre></td></tr></table></figure>\n<p><strong>在配置文件中添加邮件发送相关信息：邮件的发送者、接受者、协议、移动授权码等</strong>。</p>\n<p>配置完成后，重新启动项目 spring-boot-admin-server，这样 Admin Server 就具备了邮件告警的功能，默认情况下 Admin Server 对 Eureka 中的服务上下线都进行了监控，当服务上下线的时候我们就会收到相应的告警邮件。</p>\n<p>当然这只是最基本的邮件监控，在实际的使用过程中，需要根据情况对邮件告警内容进行自定义，比如监控堆内存的使用情况，当到达一定比例的时候进行告警等。</p>\n<p>【写在后面的话】Spring Boot Admin 解决了我们对大规模 Spring Boot 应用监控的需求，Spring Boot Admin 充分利用了 Actuator 开放的相关接口，采用优秀的图形界面将这些信息进行了展示，方便我们更加直观的查看集群中应用的状态。Spring Boot Admin 不仅可以监控单个 Spring Boot 应用，也可以结合 Spring Cloud 监控注册到服务中心的所有应用状态，再结合报警系统的使用就可以随时感知到应用的状态变化。在实际工作中 Spring Boot Admin 是我们在后期运营中频繁用到的一个组件，应该作为重点关注。</p>\n<hr>\n<p>最后是一个用http方式监听的demo：<a href=\"https://github.com/eelve/springbootadmin\">Spring Boot Admin使用http连接server端</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","categories":[{"name":"hide","path":"api/categories/hide.json"}],"tags":[{"name":"hide","path":"api/tags/hide.json"}]}