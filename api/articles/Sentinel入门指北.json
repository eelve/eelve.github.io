{"title":"Sentinel入门指北","slug":"Sentinel入门指北","date":"2021-02-01T12:30:57.000Z","updated":"2021-04-19T06:44:39.284Z","comments":true,"path":"api/articles/Sentinel入门指北.json","excerpt":null,"covers":["https://image.eelve.com/eblog/sentinel-flow-overview-ca2015f6c76449e2ac74f5a377e0573d.jpg","https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png"],"content":"<p>【<strong>前面的话</strong>】在前文 <a href=\"https://eelve.com/archives/springbootcircuitbreaker\">浅析Spring Boot单体应用熔断技术</a> 中对比了一下几种常见的接口熔断的技术。这里就具体使用 <code>Sentinel</code> 来记录以下。</p>\n<hr>\n<h1 id=\"壹、sentinel介绍\"><a href=\"#壹、sentinel介绍\" class=\"headerlink\" title=\"壹、sentinel介绍\"></a>壹、sentinel介绍</h1><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。<code>Sentinel</code> 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。</p>\n<h2 id=\"Sentinel的基本概念基本概念包括\"><a href=\"#Sentinel的基本概念基本概念包括\" class=\"headerlink\" title=\"Sentinel的基本概念基本概念包括:\"></a>Sentinel的基本概念基本概念包括:</h2><h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p>资源是 <code>Sentinel</code> 的关键概念。它可以是 <code>Java</code> 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。只要通过 <code>Sentinel API</code> 定义的代码，就是资源，能够被 <code>Sentinel</code> 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>\n<h2 id=\"Sentinel的主要功能\"><a href=\"#Sentinel的主要功能\" class=\"headerlink\" title=\"Sentinel的主要功能\"></a>Sentinel的主要功能</h2><h3 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h3><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p>\n<p><img src=\"https://image.eelve.com/eblog/sentinel-flow-overview-ca2015f6c76449e2ac74f5a377e0573d.jpg\" alt=\"流控效果\"></p>\n<p>流量控制有以下几个角度:</p>\n<ul>\n<li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li>\n<li>运行指标，例如 <code>QPS</code>、线程池、系统负载等；</li>\n<li>控制的效果，例如直接限流、冷启动、排队等。</li>\n</ul>\n<p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p>\n<h3 id=\"熔断降级\"><a href=\"#熔断降级\" class=\"headerlink\" title=\"熔断降级\"></a>熔断降级</h3><p>除了流量控制以外，降低调用链路中的不稳定资源也是 <code>Sentinel</code> 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。当调用链路中某个资源出现不稳定，例如，表现为 <code>timeout</code>，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p>\n<p>降级有以下几个角度:</p>\n<ul>\n<li>通过并发线程数进行限制</li>\n</ul>\n<p>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p>\n<ul>\n<li>通过响应时间对资源进行降级</li>\n</ul>\n<p>除了对并发线程数进行控制以外，<code>Sentinel</code> 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p>\n<h3 id=\"系统负载保护\"><a href=\"#系统负载保护\" class=\"headerlink\" title=\"系统负载保护\"></a>系统负载保护</h3><p>Sentinel同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p>\n<p>针对这个情况，<code>Sentinel</code> 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p>\n<h2 id=\"主要工作机制\"><a href=\"#主要工作机制\" class=\"headerlink\" title=\"主要工作机制\"></a>主要工作机制</h2><ul>\n<li>对主流框架提供适配或者显示的 <code>API</code>，来定义需要保护的资源，并提供设施对资源进行实时统计和调用链路分析。</li>\n<li>根据预设的规则，结合对资源的实时统计信息，对流量进行控制。同时，<code>Sentinel</code> 提供开放的接口，方便您定义及改变规则。</li>\n<li><code>Sentinel</code> 提供实时的监控系统，方便您快速了解目前系统的状态。</li>\n</ul>\n<h1 id=\"贰、基础使用\"><a href=\"#贰、基础使用\" class=\"headerlink\" title=\"贰、基础使用\"></a>贰、基础使用</h1><h2 id=\"2-1、-通过抛出异常的方式\"><a href=\"#2-1、-通过抛出异常的方式\" class=\"headerlink\" title=\"2.1、 通过抛出异常的方式\"></a>2.1、 通过抛出异常的方式</h2><p><code>SphU</code>包含了<code>try-catch</code>风格的<code>API</code>。用这种方式，当资源发生了限流之后会抛出<code>BlockException</code>。这个时候可以捕捉异常，进行限流之后的逻辑处理。示例代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> (Entry entry = SphU.entry(<span class=\"string\">&quot;resourceName&quot;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 被保护的业务逻辑</span></span><br><span class=\"line\">  <span class=\"comment\">// do something here...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 资源访问阻止，被限流或被降级</span></span><br><span class=\"line\">  <span class=\"comment\">// 在此处进行相应的处理操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>SphU.entry(xxx)</code>需要与<code>entry.exit()</code>方法成对出现，匹配调用，否则会导致调用链记录异常，抛出<code>ErrorEntryFreeException</code>异常。</p>\n</blockquote>\n<h2 id=\"2-2、通过返回布尔值方式\"><a href=\"#2-2、通过返回布尔值方式\" class=\"headerlink\" title=\"2.2、通过返回布尔值方式\"></a>2.2、通过返回布尔值方式</h2><p><code>SphO</code>提供 <code>if-else</code> 风格的 <code>API</code>。用这种方式，当资源发生了限流之后会返回 <code>false</code>，这个时候可以根据返回值，进行限流之后的逻辑处理。示例代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 资源名可使用任意有业务语义的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (SphO.entry(<span class=\"string\">&quot;自定义资源名&quot;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 务必保证finally会被执行</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 被保护的业务逻辑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    SphO.exit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 资源访问阻止，被限流或被降级</span></span><br><span class=\"line\">  <span class=\"comment\">// 进行相应的处理操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3、异步调用支持\"><a href=\"#2-3、异步调用支持\" class=\"headerlink\" title=\"2.3、异步调用支持\"></a>2.3、异步调用支持</h3><p><code>Sentinel</code> 支持异步调用链路的统计。在异步调用中，需要通过 <code>SphU.asyncEntry(xxx)</code> 方法定义资源，并通常需要在异步的回调函数中调用 <code>exit</code> 方法。以下是一个简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步调用.</span></span><br><span class=\"line\">    doAsync(userId, result -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在此处处理异步调用的结果.</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在回调结束后 exit.</span></span><br><span class=\"line\">            entry.exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Request blocked.</span></span><br><span class=\"line\">    <span class=\"comment\">// Handle the exception (e.g. retry or fallback).</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>SphU.asyncEntry(xxx)</code> 不会影响当前（调用线程）的 <code>Context</code>，因此以下两个 <code>entry</code> 在调用链上是平级关系（处于同一层），而不是嵌套关系：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用链类似于：</span></span><br><span class=\"line\"><span class=\"comment\">// -parent</span></span><br><span class=\"line\"><span class=\"comment\">// ---asyncResource</span></span><br><span class=\"line\"><span class=\"comment\">// ---syncResource</span></span><br><span class=\"line\">asyncEntry = SphU.asyncEntry(asyncResource);</span><br><span class=\"line\">entry = SphU.entry(normalResource);</span><br></pre></td></tr></table></figure>\n<p>若在异步回调中需要嵌套其它的资源调用（无论是 <code>entry</code> 还是 <code>asyncEntry</code>），只需要借助<code>Sentinel</code>提供的上下文切换功能，在对应的地方通过 <code>ContextUtil.runOnContext(context, f)</code> 进行 <code>Context</code> 变换，将对应资源调用处的 <code>Context</code> 切换为生成的异步 <code>Context</code>，即可维持正确的调用链路关系。示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResult</span><span class=\"params\">(String result)</span> </span>&#123;</span><br><span class=\"line\">    Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        entry = SphU.entry(<span class=\"string\">&quot;handleResultForAsync&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Handle your result here.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Blocked for the result handler.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            entry.exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">someAsync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Asynchronous invocation.</span></span><br><span class=\"line\">        doAsync(userId, result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在异步回调中进行上下文变换，通过 AsyncEntry 的 getAsyncContext 方法获取异步 Context</span></span><br><span class=\"line\">            ContextUtil.runOnContext(entry.getAsyncContext(), () -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此处嵌套正常的资源调用.</span></span><br><span class=\"line\">                    handleResult(result);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    entry.exit();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Request blocked.</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the exception (e.g. retry or fallback).</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时的调用链就类似于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-parent</span><br><span class=\"line\">---asyncInvocation</span><br><span class=\"line\">-----handleResultForAsync</span><br></pre></td></tr></table></figure>\n<h1 id=\"叁、注解使用\"><a href=\"#叁、注解使用\" class=\"headerlink\" title=\"叁、注解使用\"></a>叁、注解使用</h1><p><code>Sentinel</code> 提供了 <code>@SentinelResource</code> 注解用于定义资源，并提供了 <code>AspectJ</code> 的扩展用于自动定义资源、处理 <code>BlockException</code> 等。使用 <code>Sentinel Annotation AspectJ Extension</code> 的时候需要引入以下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：注解方式埋点不支持 private 方法。</p>\n</blockquote>\n<p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 <code>fallback</code> 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p>\n<ul>\n<li><code>value</code>：资源名称，必需项（不能为空）</li>\n<li><code>entryType</code>：<code>entry</code> 类型，可选项（默认为 <code>EntryType.OUT</code>）</li>\n<li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。<code>blockHandler</code> 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。<code>blockHandler</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n<li><code>fallback</code>：<code>fallback</code> 函数名称，可选项，用于在抛出异常的时候提供 <code>fallback</code> 处理逻辑。  <code>fallback</code> 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。<code>fallback</code> 函数签名和位置要求：<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>\n<li><code>fallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>defaultFallback</code>（since 1.6.0）：默认的 <code>fallback</code> 函数名称，可选项，通常用于通用的 <code>fallback</code> 逻辑（即可以用于很多服务或方法）。默认 <code>fallback</code> 函数可以针对所以类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 <code>fallback</code> 和 <code>defaultFallback</code>，则只有 <code>fallback</code> 会生效。<code>defaultFallback</code> 函数签名要求：<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>\n<li><code>defaultFallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 <code>fallback</code> 逻辑中，而是会原样抛出。</li>\n</ul>\n<blockquote>\n<p>注：1.6.0 之前的版本 <code>fallback</code> 函数只针对降级异常（<code>DegradeException</code>）进行处理，不能针对业务异常进行处理。</p>\n</blockquote>\n<p>特别地，若 <code>blockHandler</code> 和 <code>fallback</code> 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> 直接抛出。</p>\n<h1 id=\"肆、规则的种类\"><a href=\"#肆、规则的种类\" class=\"headerlink\" title=\"肆、规则的种类\"></a>肆、规则的种类</h1><p><code>Sentinel</code> 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效。同时 <code>Sentinel</code> 也提供相关 <code>API</code>，供您来定制自己的规则策略。</p>\n<p><code>Sentinel</code> 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。</p>\n<h2 id=\"4-1、流量控制规则-FlowRule\"><a href=\"#4-1、流量控制规则-FlowRule\" class=\"headerlink\" title=\"4.1、流量控制规则 (FlowRule)\"></a>4.1、流量控制规则 (FlowRule)</h2><ul>\n<li>重要属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，资源名是限流规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>限流阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>限流阈值类型，QPS 或线程数模式</td>\n<td>QPS 模式</td>\n</tr>\n<tr>\n<td>limitApp</td>\n<td>流控针对的调用来源</td>\n<td>default，代表不区分调用来源</td>\n</tr>\n<tr>\n<td>strategy</td>\n<td>调用关系限流策略：直接、链路、关联</td>\n<td>根据资源本身（直接）</td>\n</tr>\n<tr>\n<td>controlBehavior</td>\n<td>流控效果（直接拒绝 / 排队等待 / 慢启动模式），不支持按调用关系限流</td>\n<td>直接拒绝</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>同一个资源可以同时有多个限流规则。</p>\n</blockquote>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>FlowRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initFlowQpsRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;FlowRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    FlowRule rule1 = <span class=\"keyword\">new</span> FlowRule();</span><br><span class=\"line\">    rule1.setResource(resource);</span><br><span class=\"line\">    <span class=\"comment\">// Set max qps to 20</span></span><br><span class=\"line\">    rule1.setCount(<span class=\"number\">20</span>);</span><br><span class=\"line\">    rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class=\"line\">    rule1.setLimitApp(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">    rules.add(rule1);</span><br><span class=\"line\">    FlowRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2、熔断降级规则-DegradeRule\"><a href=\"#4-2、熔断降级规则-DegradeRule\" class=\"headerlink\" title=\"4.2、熔断降级规则 (DegradeRule)\"></a>4.2、熔断降级规则 (DegradeRule)</h2><ul>\n<li>熔断降级规则包含下面几个重要的属性：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，即规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>\n<td>慢调用比例</td>\n</tr>\n<tr>\n<td>count</td>\n<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>timeWindow</td>\n<td>熔断时长，单位为 s</td>\n<td></td>\n</tr>\n<tr>\n<td>minRequestAmount</td>\n<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>\n<td>5</td>\n</tr>\n<tr>\n<td>statIntervalMs</td>\n<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>\n<td>1000 ms</td>\n</tr>\n<tr>\n<td>slowRatioThreshold</td>\n<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>\n<td></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>同一个资源可以同时有多个降级规则</p>\n</blockquote>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>DegradeRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initDegradeRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;DegradeRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    DegradeRule rule = <span class=\"keyword\">new</span> DegradeRule(resource);</span><br><span class=\"line\">        .setGrade(CircuitBreakerStrategy.ERROR_RATIO.getType());</span><br><span class=\"line\">        .setCount(<span class=\"number\">0.7</span>); <span class=\"comment\">// Threshold is 70% error ratio</span></span><br><span class=\"line\">        .setMinRequestAmount(<span class=\"number\">100</span>)</span><br><span class=\"line\">        .setStatIntervalMs(<span class=\"number\">30000</span>) <span class=\"comment\">// 30s</span></span><br><span class=\"line\">        .setTimeWindow(<span class=\"number\">10</span>);</span><br><span class=\"line\">    rules.add(rule);</span><br><span class=\"line\">    DegradeRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3、系统保护规则-SystemRule\"><a href=\"#4-3、系统保护规则-SystemRule\" class=\"headerlink\" title=\"4.3、系统保护规则 (SystemRule)\"></a>4.3、系统保护规则 (SystemRule)</h2><p><code>Sentinel</code> 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 <code>Load</code>、<code>CPU</code> 使用率、<code>总体平均 RT</code>、<code>入口 QPS</code> 和<code>并发线程数</code>等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<ul>\n<li>系统规则包含下面几个重要的属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>highestSystemLoad</td>\n<td>load1 触发值，用于触发自适应控制阶段</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>avgRt</td>\n<td>所有入口流量的平均响应时间</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>maxThread</td>\n<td>入口流量的最大并发数</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>qps</td>\n<td>所有入口资源的 QPS</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>highestCpuUsage</td>\n<td>当前系统的 CPU 使用率（0.0-1.0）</td>\n<td>-1 (不生效)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>SystemRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSystemProtectionRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  List&lt;SystemRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  SystemRule rule = <span class=\"keyword\">new</span> SystemRule();</span><br><span class=\"line\">  rule.setHighestSystemLoad(<span class=\"number\">10</span>);</span><br><span class=\"line\">  rules.add(rule);</span><br><span class=\"line\">  SystemRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4、访问控制规则-AuthorityRule\"><a href=\"#4-4、访问控制规则-AuthorityRule\" class=\"headerlink\" title=\"4.4、访问控制规则 (AuthorityRule)\"></a>4.4、访问控制规则 (AuthorityRule)</h2><p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 <code>Sentinel</code> 的访问控制（黑白名单）的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p>\n<p>授权规则，即黑白名单规则（AuthorityRule）非常简单，主要有以下配置项：</p>\n<ul>\n<li><code>resource</code>：资源名，即限流规则的作用对象</li>\n<li><code>limitApp</code>：对应的黑名单/白名单，不同 <code>origin</code> 用 , 分隔，如 <code>appA</code>,<code>appB</code></li>\n<li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li>\n</ul>\n<hr>\n<p>【<strong>后面的话</strong>】在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p>\n<p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>FlowRule</code> 和 <code>Degrade</code>的校验方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Check whether provided flow rule is valid.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param rule flow rule to check</span><br><span class=\"line\"> * @return true if valid, otherwise false</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static boolean isValidRule(FlowRule rule) &#123;</span><br><span class=\"line\">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource()) &amp;&amp; rule.getCount() &gt;&#x3D; 0</span><br><span class=\"line\">        &amp;&amp; rule.getGrade() &gt;&#x3D; 0 &amp;&amp; rule.getStrategy() &gt;&#x3D; 0 &amp;&amp; rule.getControlBehavior() &gt;&#x3D; 0;</span><br><span class=\"line\">    if (!baseValid) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; Check strategy and control (shaping) behavior.</span><br><span class=\"line\">    return checkClusterField(rule) &amp;&amp; checkStrategyField(rule) &amp;&amp; checkControlBehaviorField(rule);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkClusterField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    if (!rule.isClusterMode()) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ClusterFlowConfig clusterConfig &#x3D; rule.getClusterConfig();</span><br><span class=\"line\">    if (clusterConfig &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!validClusterRuleId(clusterConfig.getFlowId())) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!isWindowConfigValid(clusterConfig.getSampleCount(), clusterConfig.getWindowIntervalMs())) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    switch (clusterConfig.getStrategy()) &#123;</span><br><span class=\"line\">        case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static boolean isWindowConfigValid(int sampleCount, int windowIntervalMs) &#123;</span><br><span class=\"line\">    return sampleCount &gt; 0 &amp;&amp; windowIntervalMs &gt; 0 &amp;&amp; windowIntervalMs % sampleCount &#x3D;&#x3D; 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkStrategyField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    if (rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_RELATE || rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_CHAIN) &#123;</span><br><span class=\"line\">        return StringUtil.isNotBlank(rule.getRefResource());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkControlBehaviorField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    switch (rule.getControlBehavior()) &#123;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP:</span><br><span class=\"line\">            return rule.getWarmUpPeriodSec() &gt; 0;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER:</span><br><span class=\"line\">            return rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER:</span><br><span class=\"line\">            return rule.getWarmUpPeriodSec() &gt; 0 &amp;&amp; rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidRule</span><span class=\"params\">(DegradeRule rule)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> baseValid = rule != <span class=\"keyword\">null</span> &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class=\"line\">        &amp;&amp; rule.getCount() &gt;= <span class=\"number\">0</span> &amp;&amp; rule.getTimeWindow() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!baseValid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rule.getMinRequestAmount() &lt;= <span class=\"number\">0</span> || rule.getStatIntervalMs() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (rule.getGrade()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_RT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rule.getSlowRatioThreshold() &gt;= <span class=\"number\">0</span> &amp;&amp; rule.getSlowRatioThreshold() &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rule.getCount() &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最后是我自己实现的 <a href=\"https://github.com/eelve/awesomesentinel/tree/basic-sentinel\">demo</a> 。</p>\n</blockquote>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","more":"<p>【<strong>前面的话</strong>】在前文 <a href=\"https://eelve.com/archives/springbootcircuitbreaker\">浅析Spring Boot单体应用熔断技术</a> 中对比了一下几种常见的接口熔断的技术。这里就具体使用 <code>Sentinel</code> 来记录以下。</p>\n<hr>\n<h1 id=\"壹、sentinel介绍\"><a href=\"#壹、sentinel介绍\" class=\"headerlink\" title=\"壹、sentinel介绍\"></a>壹、sentinel介绍</h1><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。<code>Sentinel</code> 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。</p>\n<h2 id=\"Sentinel的基本概念基本概念包括\"><a href=\"#Sentinel的基本概念基本概念包括\" class=\"headerlink\" title=\"Sentinel的基本概念基本概念包括:\"></a>Sentinel的基本概念基本概念包括:</h2><h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p>资源是 <code>Sentinel</code> 的关键概念。它可以是 <code>Java</code> 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。只要通过 <code>Sentinel API</code> 定义的代码，就是资源，能够被 <code>Sentinel</code> 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>\n<h2 id=\"Sentinel的主要功能\"><a href=\"#Sentinel的主要功能\" class=\"headerlink\" title=\"Sentinel的主要功能\"></a>Sentinel的主要功能</h2><h3 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h3><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p>\n<p><img src=\"https://image.eelve.com/eblog/sentinel-flow-overview-ca2015f6c76449e2ac74f5a377e0573d.jpg\" alt=\"流控效果\"></p>\n<p>流量控制有以下几个角度:</p>\n<ul>\n<li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li>\n<li>运行指标，例如 <code>QPS</code>、线程池、系统负载等；</li>\n<li>控制的效果，例如直接限流、冷启动、排队等。</li>\n</ul>\n<p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p>\n<h3 id=\"熔断降级\"><a href=\"#熔断降级\" class=\"headerlink\" title=\"熔断降级\"></a>熔断降级</h3><p>除了流量控制以外，降低调用链路中的不稳定资源也是 <code>Sentinel</code> 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。当调用链路中某个资源出现不稳定，例如，表现为 <code>timeout</code>，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p>\n<p>降级有以下几个角度:</p>\n<ul>\n<li>通过并发线程数进行限制</li>\n</ul>\n<p>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p>\n<ul>\n<li>通过响应时间对资源进行降级</li>\n</ul>\n<p>除了对并发线程数进行控制以外，<code>Sentinel</code> 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p>\n<h3 id=\"系统负载保护\"><a href=\"#系统负载保护\" class=\"headerlink\" title=\"系统负载保护\"></a>系统负载保护</h3><p>Sentinel同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p>\n<p>针对这个情况，<code>Sentinel</code> 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p>\n<h2 id=\"主要工作机制\"><a href=\"#主要工作机制\" class=\"headerlink\" title=\"主要工作机制\"></a>主要工作机制</h2><ul>\n<li>对主流框架提供适配或者显示的 <code>API</code>，来定义需要保护的资源，并提供设施对资源进行实时统计和调用链路分析。</li>\n<li>根据预设的规则，结合对资源的实时统计信息，对流量进行控制。同时，<code>Sentinel</code> 提供开放的接口，方便您定义及改变规则。</li>\n<li><code>Sentinel</code> 提供实时的监控系统，方便您快速了解目前系统的状态。</li>\n</ul>\n<h1 id=\"贰、基础使用\"><a href=\"#贰、基础使用\" class=\"headerlink\" title=\"贰、基础使用\"></a>贰、基础使用</h1><h2 id=\"2-1、-通过抛出异常的方式\"><a href=\"#2-1、-通过抛出异常的方式\" class=\"headerlink\" title=\"2.1、 通过抛出异常的方式\"></a>2.1、 通过抛出异常的方式</h2><p><code>SphU</code>包含了<code>try-catch</code>风格的<code>API</code>。用这种方式，当资源发生了限流之后会抛出<code>BlockException</code>。这个时候可以捕捉异常，进行限流之后的逻辑处理。示例代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> (Entry entry = SphU.entry(<span class=\"string\">&quot;resourceName&quot;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 被保护的业务逻辑</span></span><br><span class=\"line\">  <span class=\"comment\">// do something here...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 资源访问阻止，被限流或被降级</span></span><br><span class=\"line\">  <span class=\"comment\">// 在此处进行相应的处理操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>SphU.entry(xxx)</code>需要与<code>entry.exit()</code>方法成对出现，匹配调用，否则会导致调用链记录异常，抛出<code>ErrorEntryFreeException</code>异常。</p>\n</blockquote>\n<h2 id=\"2-2、通过返回布尔值方式\"><a href=\"#2-2、通过返回布尔值方式\" class=\"headerlink\" title=\"2.2、通过返回布尔值方式\"></a>2.2、通过返回布尔值方式</h2><p><code>SphO</code>提供 <code>if-else</code> 风格的 <code>API</code>。用这种方式，当资源发生了限流之后会返回 <code>false</code>，这个时候可以根据返回值，进行限流之后的逻辑处理。示例代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 资源名可使用任意有业务语义的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (SphO.entry(<span class=\"string\">&quot;自定义资源名&quot;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 务必保证finally会被执行</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 被保护的业务逻辑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    SphO.exit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 资源访问阻止，被限流或被降级</span></span><br><span class=\"line\">  <span class=\"comment\">// 进行相应的处理操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3、异步调用支持\"><a href=\"#2-3、异步调用支持\" class=\"headerlink\" title=\"2.3、异步调用支持\"></a>2.3、异步调用支持</h3><p><code>Sentinel</code> 支持异步调用链路的统计。在异步调用中，需要通过 <code>SphU.asyncEntry(xxx)</code> 方法定义资源，并通常需要在异步的回调函数中调用 <code>exit</code> 方法。以下是一个简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步调用.</span></span><br><span class=\"line\">    doAsync(userId, result -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在此处处理异步调用的结果.</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在回调结束后 exit.</span></span><br><span class=\"line\">            entry.exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Request blocked.</span></span><br><span class=\"line\">    <span class=\"comment\">// Handle the exception (e.g. retry or fallback).</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>SphU.asyncEntry(xxx)</code> 不会影响当前（调用线程）的 <code>Context</code>，因此以下两个 <code>entry</code> 在调用链上是平级关系（处于同一层），而不是嵌套关系：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用链类似于：</span></span><br><span class=\"line\"><span class=\"comment\">// -parent</span></span><br><span class=\"line\"><span class=\"comment\">// ---asyncResource</span></span><br><span class=\"line\"><span class=\"comment\">// ---syncResource</span></span><br><span class=\"line\">asyncEntry = SphU.asyncEntry(asyncResource);</span><br><span class=\"line\">entry = SphU.entry(normalResource);</span><br></pre></td></tr></table></figure>\n<p>若在异步回调中需要嵌套其它的资源调用（无论是 <code>entry</code> 还是 <code>asyncEntry</code>），只需要借助<code>Sentinel</code>提供的上下文切换功能，在对应的地方通过 <code>ContextUtil.runOnContext(context, f)</code> 进行 <code>Context</code> 变换，将对应资源调用处的 <code>Context</code> 切换为生成的异步 <code>Context</code>，即可维持正确的调用链路关系。示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResult</span><span class=\"params\">(String result)</span> </span>&#123;</span><br><span class=\"line\">    Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        entry = SphU.entry(<span class=\"string\">&quot;handleResultForAsync&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Handle your result here.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Blocked for the result handler.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            entry.exit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">someAsync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Asynchronous invocation.</span></span><br><span class=\"line\">        doAsync(userId, result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在异步回调中进行上下文变换，通过 AsyncEntry 的 getAsyncContext 方法获取异步 Context</span></span><br><span class=\"line\">            ContextUtil.runOnContext(entry.getAsyncContext(), () -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此处嵌套正常的资源调用.</span></span><br><span class=\"line\">                    handleResult(result);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    entry.exit();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (BlockException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Request blocked.</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the exception (e.g. retry or fallback).</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时的调用链就类似于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-parent</span><br><span class=\"line\">---asyncInvocation</span><br><span class=\"line\">-----handleResultForAsync</span><br></pre></td></tr></table></figure>\n<h1 id=\"叁、注解使用\"><a href=\"#叁、注解使用\" class=\"headerlink\" title=\"叁、注解使用\"></a>叁、注解使用</h1><p><code>Sentinel</code> 提供了 <code>@SentinelResource</code> 注解用于定义资源，并提供了 <code>AspectJ</code> 的扩展用于自动定义资源、处理 <code>BlockException</code> 等。使用 <code>Sentinel Annotation AspectJ Extension</code> 的时候需要引入以下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：注解方式埋点不支持 private 方法。</p>\n</blockquote>\n<p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 <code>fallback</code> 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p>\n<ul>\n<li><code>value</code>：资源名称，必需项（不能为空）</li>\n<li><code>entryType</code>：<code>entry</code> 类型，可选项（默认为 <code>EntryType.OUT</code>）</li>\n<li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。<code>blockHandler</code> 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。<code>blockHandler</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n<li><code>fallback</code>：<code>fallback</code> 函数名称，可选项，用于在抛出异常的时候提供 <code>fallback</code> 处理逻辑。  <code>fallback</code> 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。<code>fallback</code> 函数签名和位置要求：<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>\n<li><code>fallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>defaultFallback</code>（since 1.6.0）：默认的 <code>fallback</code> 函数名称，可选项，通常用于通用的 <code>fallback</code> 逻辑（即可以用于很多服务或方法）。默认 <code>fallback</code> 函数可以针对所以类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 <code>fallback</code> 和 <code>defaultFallback</code>，则只有 <code>fallback</code> 会生效。<code>defaultFallback</code> 函数签名要求：<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>\n<li><code>defaultFallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 <code>fallback</code> 逻辑中，而是会原样抛出。</li>\n</ul>\n<blockquote>\n<p>注：1.6.0 之前的版本 <code>fallback</code> 函数只针对降级异常（<code>DegradeException</code>）进行处理，不能针对业务异常进行处理。</p>\n</blockquote>\n<p>特别地，若 <code>blockHandler</code> 和 <code>fallback</code> 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> 直接抛出。</p>\n<h1 id=\"肆、规则的种类\"><a href=\"#肆、规则的种类\" class=\"headerlink\" title=\"肆、规则的种类\"></a>肆、规则的种类</h1><p><code>Sentinel</code> 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效。同时 <code>Sentinel</code> 也提供相关 <code>API</code>，供您来定制自己的规则策略。</p>\n<p><code>Sentinel</code> 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。</p>\n<h2 id=\"4-1、流量控制规则-FlowRule\"><a href=\"#4-1、流量控制规则-FlowRule\" class=\"headerlink\" title=\"4.1、流量控制规则 (FlowRule)\"></a>4.1、流量控制规则 (FlowRule)</h2><ul>\n<li>重要属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，资源名是限流规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>count</td>\n<td>限流阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>限流阈值类型，QPS 或线程数模式</td>\n<td>QPS 模式</td>\n</tr>\n<tr>\n<td>limitApp</td>\n<td>流控针对的调用来源</td>\n<td>default，代表不区分调用来源</td>\n</tr>\n<tr>\n<td>strategy</td>\n<td>调用关系限流策略：直接、链路、关联</td>\n<td>根据资源本身（直接）</td>\n</tr>\n<tr>\n<td>controlBehavior</td>\n<td>流控效果（直接拒绝 / 排队等待 / 慢启动模式），不支持按调用关系限流</td>\n<td>直接拒绝</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>同一个资源可以同时有多个限流规则。</p>\n</blockquote>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>FlowRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initFlowQpsRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;FlowRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    FlowRule rule1 = <span class=\"keyword\">new</span> FlowRule();</span><br><span class=\"line\">    rule1.setResource(resource);</span><br><span class=\"line\">    <span class=\"comment\">// Set max qps to 20</span></span><br><span class=\"line\">    rule1.setCount(<span class=\"number\">20</span>);</span><br><span class=\"line\">    rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class=\"line\">    rule1.setLimitApp(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">    rules.add(rule1);</span><br><span class=\"line\">    FlowRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2、熔断降级规则-DegradeRule\"><a href=\"#4-2、熔断降级规则-DegradeRule\" class=\"headerlink\" title=\"4.2、熔断降级规则 (DegradeRule)\"></a>4.2、熔断降级规则 (DegradeRule)</h2><ul>\n<li>熔断降级规则包含下面几个重要的属性：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，即规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>\n<td>慢调用比例</td>\n</tr>\n<tr>\n<td>count</td>\n<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>timeWindow</td>\n<td>熔断时长，单位为 s</td>\n<td></td>\n</tr>\n<tr>\n<td>minRequestAmount</td>\n<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>\n<td>5</td>\n</tr>\n<tr>\n<td>statIntervalMs</td>\n<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>\n<td>1000 ms</td>\n</tr>\n<tr>\n<td>slowRatioThreshold</td>\n<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>\n<td></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>同一个资源可以同时有多个降级规则</p>\n</blockquote>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>DegradeRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initDegradeRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;DegradeRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    DegradeRule rule = <span class=\"keyword\">new</span> DegradeRule(resource);</span><br><span class=\"line\">        .setGrade(CircuitBreakerStrategy.ERROR_RATIO.getType());</span><br><span class=\"line\">        .setCount(<span class=\"number\">0.7</span>); <span class=\"comment\">// Threshold is 70% error ratio</span></span><br><span class=\"line\">        .setMinRequestAmount(<span class=\"number\">100</span>)</span><br><span class=\"line\">        .setStatIntervalMs(<span class=\"number\">30000</span>) <span class=\"comment\">// 30s</span></span><br><span class=\"line\">        .setTimeWindow(<span class=\"number\">10</span>);</span><br><span class=\"line\">    rules.add(rule);</span><br><span class=\"line\">    DegradeRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3、系统保护规则-SystemRule\"><a href=\"#4-3、系统保护规则-SystemRule\" class=\"headerlink\" title=\"4.3、系统保护规则 (SystemRule)\"></a>4.3、系统保护规则 (SystemRule)</h2><p><code>Sentinel</code> 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 <code>Load</code>、<code>CPU</code> 使用率、<code>总体平均 RT</code>、<code>入口 QPS</code> 和<code>并发线程数</code>等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<ul>\n<li>系统规则包含下面几个重要的属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>highestSystemLoad</td>\n<td>load1 触发值，用于触发自适应控制阶段</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>avgRt</td>\n<td>所有入口流量的平均响应时间</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>maxThread</td>\n<td>入口流量的最大并发数</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>qps</td>\n<td>所有入口资源的 QPS</td>\n<td>-1 (不生效)</td>\n</tr>\n<tr>\n<td>highestCpuUsage</td>\n<td>当前系统的 CPU 使用率（0.0-1.0）</td>\n<td>-1 (不生效)</td>\n</tr>\n</tbody></table>\n<ul>\n<li>通过代码定义流量控制规则</li>\n</ul>\n<p>理解上面规则的定义之后，我们可以通过调用 <code>SystemRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSystemProtectionRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  List&lt;SystemRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  SystemRule rule = <span class=\"keyword\">new</span> SystemRule();</span><br><span class=\"line\">  rule.setHighestSystemLoad(<span class=\"number\">10</span>);</span><br><span class=\"line\">  rules.add(rule);</span><br><span class=\"line\">  SystemRuleManager.loadRules(rules);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4、访问控制规则-AuthorityRule\"><a href=\"#4-4、访问控制规则-AuthorityRule\" class=\"headerlink\" title=\"4.4、访问控制规则 (AuthorityRule)\"></a>4.4、访问控制规则 (AuthorityRule)</h2><p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 <code>Sentinel</code> 的访问控制（黑白名单）的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p>\n<p>授权规则，即黑白名单规则（AuthorityRule）非常简单，主要有以下配置项：</p>\n<ul>\n<li><code>resource</code>：资源名，即限流规则的作用对象</li>\n<li><code>limitApp</code>：对应的黑名单/白名单，不同 <code>origin</code> 用 , 分隔，如 <code>appA</code>,<code>appB</code></li>\n<li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li>\n</ul>\n<hr>\n<p>【<strong>后面的话</strong>】在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p>\n<p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>FlowRule</code> 和 <code>Degrade</code>的校验方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Check whether provided flow rule is valid.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param rule flow rule to check</span><br><span class=\"line\"> * @return true if valid, otherwise false</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static boolean isValidRule(FlowRule rule) &#123;</span><br><span class=\"line\">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource()) &amp;&amp; rule.getCount() &gt;&#x3D; 0</span><br><span class=\"line\">        &amp;&amp; rule.getGrade() &gt;&#x3D; 0 &amp;&amp; rule.getStrategy() &gt;&#x3D; 0 &amp;&amp; rule.getControlBehavior() &gt;&#x3D; 0;</span><br><span class=\"line\">    if (!baseValid) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; Check strategy and control (shaping) behavior.</span><br><span class=\"line\">    return checkClusterField(rule) &amp;&amp; checkStrategyField(rule) &amp;&amp; checkControlBehaviorField(rule);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkClusterField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    if (!rule.isClusterMode()) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ClusterFlowConfig clusterConfig &#x3D; rule.getClusterConfig();</span><br><span class=\"line\">    if (clusterConfig &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!validClusterRuleId(clusterConfig.getFlowId())) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!isWindowConfigValid(clusterConfig.getSampleCount(), clusterConfig.getWindowIntervalMs())) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    switch (clusterConfig.getStrategy()) &#123;</span><br><span class=\"line\">        case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static boolean isWindowConfigValid(int sampleCount, int windowIntervalMs) &#123;</span><br><span class=\"line\">    return sampleCount &gt; 0 &amp;&amp; windowIntervalMs &gt; 0 &amp;&amp; windowIntervalMs % sampleCount &#x3D;&#x3D; 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkStrategyField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    if (rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_RELATE || rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_CHAIN) &#123;</span><br><span class=\"line\">        return StringUtil.isNotBlank(rule.getRefResource());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static boolean checkControlBehaviorField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class=\"line\">    switch (rule.getControlBehavior()) &#123;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP:</span><br><span class=\"line\">            return rule.getWarmUpPeriodSec() &gt; 0;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER:</span><br><span class=\"line\">            return rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class=\"line\">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER:</span><br><span class=\"line\">            return rule.getWarmUpPeriodSec() &gt; 0 &amp;&amp; rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidRule</span><span class=\"params\">(DegradeRule rule)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> baseValid = rule != <span class=\"keyword\">null</span> &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class=\"line\">        &amp;&amp; rule.getCount() &gt;= <span class=\"number\">0</span> &amp;&amp; rule.getTimeWindow() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!baseValid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rule.getMinRequestAmount() &lt;= <span class=\"number\">0</span> || rule.getStatIntervalMs() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (rule.getGrade()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_RT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rule.getSlowRatioThreshold() &gt;= <span class=\"number\">0</span> &amp;&amp; rule.getSlowRatioThreshold() &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rule.getCount() &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最后是我自己实现的 <a href=\"https://github.com/eelve/awesomesentinel/tree/basic-sentinel\">demo</a> 。</p>\n</blockquote>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","categories":[{"name":"sentinel","path":"api/categories/sentinel.json"}],"tags":[{"name":"sentinel","path":"api/tags/sentinel.json"},{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"}]}