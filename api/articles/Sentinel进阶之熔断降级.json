{"title":"Sentinel进阶之熔断降级","slug":"Sentinel进阶之熔断降级","date":"2021-06-06T11:03:25.000Z","updated":"2021-06-07T00:12:02.281Z","comments":true,"path":"api/articles/Sentinel进阶之熔断降级.json","excerpt":null,"covers":["https://image.eelve.com/eblog/service-chain.png","https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png"],"content":"<p>【<strong>前面的话</strong>】在前文 <a href=\"https://eelve.com/archives/sentinel-flow-control\">Sentinel进阶之流量</a> 中简单介绍了一下<code>Sentinel</code>的流量控制，今天就来继续说一下Sentinel的熔断降级。</p>\n<hr>\n<h1 id=\"壹、概述\"><a href=\"#壹、概述\" class=\"headerlink\" title=\"壹、概述\"></a>壹、概述</h1><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p>\n<p><img src=\"https://image.eelve.com/eblog/service-chain.png\" alt=\"服务调用链\"></p>\n<p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<code>弱依赖服务调用</code>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p>\n<blockquote>\n<p>Sentinel 1.8.0 及以上版本对熔断降级特性进行了全新的改进升级，我们可以选择最新版本体验降级规则熔断。</p>\n</blockquote>\n<h1 id=\"贰、熔断策略\"><a href=\"#贰、熔断策略\" class=\"headerlink\" title=\"贰、熔断策略\"></a>贰、熔断策略</h1><p>Sentinel 提供以下几种熔断策略：</p>\n<ul>\n<li>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 <code>RT</code>（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求响应时间小于设置的慢调用 <code>RT</code> 则结束熔断，若大于设置的慢调用 <code>RT</code> 则会再次被熔断。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SlowRatioCircuitBreakerDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static final String KEY &#x3D; &quot;some_method&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static volatile boolean stop &#x3D; false;</span><br><span class=\"line\">  private static int seconds &#x3D; 120;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static AtomicInteger total &#x3D; new AtomicInteger();</span><br><span class=\"line\">  private static AtomicInteger pass &#x3D; new AtomicInteger();</span><br><span class=\"line\">  private static AtomicInteger block &#x3D; new AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">      initDegradeRule();</span><br><span class=\"line\">      registerStateChangeObserver();</span><br><span class=\"line\">      startTick();</span><br><span class=\"line\"></span><br><span class=\"line\">      int concurrency &#x3D; 8;</span><br><span class=\"line\">      for (int i &#x3D; 0; i &lt; concurrency; i++) &#123;</span><br><span class=\"line\">          Thread entryThread &#x3D; new Thread(() -&gt; &#123;</span><br><span class=\"line\">              while (true) &#123;</span><br><span class=\"line\">                  Entry entry &#x3D; null;</span><br><span class=\"line\">                  try &#123;</span><br><span class=\"line\">                      entry &#x3D; SphU.entry(KEY);</span><br><span class=\"line\">                      pass.incrementAndGet();</span><br><span class=\"line\">                      &#x2F;&#x2F; RT: [40ms, 60ms)</span><br><span class=\"line\">                      sleep(ThreadLocalRandom.current().nextInt(40, 60));</span><br><span class=\"line\">                  &#125; catch (BlockException e) &#123;</span><br><span class=\"line\">                      block.incrementAndGet();</span><br><span class=\"line\">                      sleep(ThreadLocalRandom.current().nextInt(5, 10));</span><br><span class=\"line\">                  &#125; finally &#123;</span><br><span class=\"line\">                      total.incrementAndGet();</span><br><span class=\"line\">                      if (entry !&#x3D; null) &#123;</span><br><span class=\"line\">                          entry.exit();</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          entryThread.setName(&quot;sentinel-simulate-traffic-task-&quot; + i);</span><br><span class=\"line\">          entryThread.start();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static void registerStateChangeObserver() &#123;</span><br><span class=\"line\">      EventObserverRegistry.getInstance().addStateChangeObserver(&quot;logging&quot;,</span><br><span class=\"line\">          (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class=\"line\">              if (newState &#x3D;&#x3D; State.OPEN) &#123;</span><br><span class=\"line\">                  System.err.println(String.format(&quot;%s -&gt; OPEN at %d, snapshotValue&#x3D;%.2f&quot;, prevState.name(),</span><br><span class=\"line\">                      TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class=\"line\">              &#125; else &#123;</span><br><span class=\"line\">                  System.err.println(String.format(&quot;%s -&gt; %s at %d&quot;, prevState.name(), newState.name(),</span><br><span class=\"line\">                      TimeUtil.currentTimeMillis()));</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static void initDegradeRule() &#123;</span><br><span class=\"line\">      List&lt;DegradeRule&gt; rules &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">      DegradeRule rule &#x3D; new DegradeRule(KEY)</span><br><span class=\"line\">          .setGrade(CircuitBreakerStrategy.SLOW_REQUEST_RATIO.getType())</span><br><span class=\"line\">          &#x2F;&#x2F; Max allowed response time</span><br><span class=\"line\">          .setCount(50)</span><br><span class=\"line\">          &#x2F;&#x2F; Retry timeout (in second)</span><br><span class=\"line\">          .setTimeWindow(10)</span><br><span class=\"line\">          &#x2F;&#x2F; Circuit breaker opens when slow request ratio &gt; 60%</span><br><span class=\"line\">          .setSlowRatioThreshold(0.6)</span><br><span class=\"line\">          .setMinRequestAmount(100)</span><br><span class=\"line\">          .setStatIntervalMs(20000);</span><br><span class=\"line\">      rules.add(rule);</span><br><span class=\"line\"></span><br><span class=\"line\">      DegradeRuleManager.loadRules(rules);</span><br><span class=\"line\">      System.out.println(&quot;Degrade rule loaded: &quot; + rules);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static void sleep(int timeMs) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">          TimeUnit.MILLISECONDS.sleep(timeMs);</span><br><span class=\"line\">      &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">          &#x2F;&#x2F; ignore</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static void startTick() &#123;</span><br><span class=\"line\">      Thread timer &#x3D; new Thread(new TimerTask());</span><br><span class=\"line\">      timer.setName(&quot;sentinel-timer-tick-task&quot;);</span><br><span class=\"line\">      timer.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static class TimerTask implements Runnable &#123;</span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      public void run() &#123;</span><br><span class=\"line\">          long start &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">          System.out.println(&quot;Begin to run! Go go go!&quot;);</span><br><span class=\"line\">          System.out.println(&quot;See corresponding metrics.log for accurate statistic data&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">          long oldTotal &#x3D; 0;</span><br><span class=\"line\">          long oldPass &#x3D; 0;</span><br><span class=\"line\">          long oldBlock &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">          while (!stop) &#123;</span><br><span class=\"line\">              sleep(1000);</span><br><span class=\"line\"></span><br><span class=\"line\">              long globalTotal &#x3D; total.get();</span><br><span class=\"line\">              long oneSecondTotal &#x3D; globalTotal - oldTotal;</span><br><span class=\"line\">              oldTotal &#x3D; globalTotal;</span><br><span class=\"line\"></span><br><span class=\"line\">              long globalPass &#x3D; pass.get();</span><br><span class=\"line\">              long oneSecondPass &#x3D; globalPass - oldPass;</span><br><span class=\"line\">              oldPass &#x3D; globalPass;</span><br><span class=\"line\"></span><br><span class=\"line\">              long globalBlock &#x3D; block.get();</span><br><span class=\"line\">              long oneSecondBlock &#x3D; globalBlock - oldBlock;</span><br><span class=\"line\">              oldBlock &#x3D; globalBlock;</span><br><span class=\"line\"></span><br><span class=\"line\">              System.out.println(TimeUtil.currentTimeMillis() + &quot;, total:&quot; + oneSecondTotal</span><br><span class=\"line\">                  + &quot;, pass:&quot; + oneSecondPass + &quot;, block:&quot; + oneSecondBlock);</span><br><span class=\"line\"></span><br><span class=\"line\">              if (seconds-- &lt;&#x3D; 0) &#123;</span><br><span class=\"line\">                  stop &#x3D; true;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          long cost &#x3D; System.currentTimeMillis() - start;</span><br><span class=\"line\">          System.out.println(&quot;time cost: &quot; + cost + &quot; ms&quot;);</span><br><span class=\"line\">          System.out.println(&quot;total: &quot; + total.get() + &quot;, pass:&quot; + pass.get()</span><br><span class=\"line\">              + &quot;, block:&quot; + block.get());</span><br><span class=\"line\">          System.exit(0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 <code>0% - 100%</code>。</li>\n<li>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>\n</ul>\n<p>注意异常降级仅针对业务异常，对 <code>Sentinel</code> 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  entry = SphU.entry(resource);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Write your biz code here.</span></span><br><span class=\"line\">  <span class=\"comment\">// &lt;&lt;BIZ CODE&gt;&gt;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!BlockException.isBlockException(t)) &#123;</span><br><span class=\"line\">    Tracer.trace(t);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    entry.exit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>开源整合模块，如 <code>Sentinel Dubbo Adapter</code>, <code>Sentinel Web Servlet Filter</code> 或 <code>@SentinelResource</code> 注解会自动统计业务异常，无需手动调用。但是如果你的程序发生异常的异常被处理过，或者异常时并不会抛出异常，则需要你自己手动调用 <code>Tracer.trace(ex)</code> 来记录业务异常。否则你的<code>异常比例</code>和<code>异常数</code>将不会生效。</p>\n</blockquote>\n<h1 id=\"叁、熔断降级规则说明\"><a href=\"#叁、熔断降级规则说明\" class=\"headerlink\" title=\"叁、熔断降级规则说明\"></a>叁、熔断降级规则说明</h1><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，即规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>\n<td>慢调用比例</td>\n</tr>\n<tr>\n<td>count</td>\n<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>timeWindow</td>\n<td>熔断时长，单位为 s</td>\n<td></td>\n</tr>\n<tr>\n<td>minRequestAmount</td>\n<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>\n<td>5</td>\n</tr>\n<tr>\n<td>statIntervalMs</td>\n<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>\n<td>1000 ms</td>\n</tr>\n<tr>\n<td>slowRatioThreshold</td>\n<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"肆、熔断器事件监听\"><a href=\"#肆、熔断器事件监听\" class=\"headerlink\" title=\"肆、熔断器事件监听\"></a>肆、熔断器事件监听</h1><p><code>Sentinel</code> 支持注册自定义的事件监听器监听熔断器状态变换事件（state change event）。示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventObserverRegistry.getInstance().addStateChangeObserver(<span class=\"string\">&quot;logging&quot;</span>,</span><br><span class=\"line\">    (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newState == State.OPEN) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 变换至 OPEN state 时会携带触发时的值</span></span><br><span class=\"line\">            System.err.println(String.format(<span class=\"string\">&quot;%s -&gt; OPEN at %d, snapshotValue=%.2f&quot;</span>, prevState.name(),</span><br><span class=\"line\">                TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.err.println(String.format(<span class=\"string\">&quot;%s -&gt; %s at %d&quot;</span>, prevState.name(), newState.name(),</span><br><span class=\"line\">                TimeUtil.currentTimeMillis()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>后面的话</strong>】<a href=\"https://github.com/eelve/awesomesentinel\">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>\n<p>另外在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p>\n<p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>DegradeRule</code> 的校验方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static boolean isValidRule(DegradeRule rule) &#123;</span><br><span class=\"line\">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class=\"line\">        &amp;&amp; rule.getCount() &gt;&#x3D; 0 &amp;&amp; rule.getTimeWindow() &gt; 0;</span><br><span class=\"line\">    if (!baseValid) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (rule.getMinRequestAmount() &lt;&#x3D; 0 || rule.getStatIntervalMs() &lt;&#x3D; 0) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    switch (rule.getGrade()) &#123;</span><br><span class=\"line\">        case RuleConstant.DEGRADE_GRADE_RT:</span><br><span class=\"line\">            return rule.getSlowRatioThreshold() &gt;&#x3D; 0 &amp;&amp; rule.getSlowRatioThreshold() &lt;&#x3D; 1;</span><br><span class=\"line\">        case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class=\"line\">            return rule.getCount() &lt;&#x3D; 1;</span><br><span class=\"line\">        case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","more":"<p>【<strong>前面的话</strong>】在前文 <a href=\"https://eelve.com/archives/sentinel-flow-control\">Sentinel进阶之流量</a> 中简单介绍了一下<code>Sentinel</code>的流量控制，今天就来继续说一下Sentinel的熔断降级。</p>\n<hr>\n<h1 id=\"壹、概述\"><a href=\"#壹、概述\" class=\"headerlink\" title=\"壹、概述\"></a>壹、概述</h1><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p>\n<p><img src=\"https://image.eelve.com/eblog/service-chain.png\" alt=\"服务调用链\"></p>\n<p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<code>弱依赖服务调用</code>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p>\n<blockquote>\n<p>Sentinel 1.8.0 及以上版本对熔断降级特性进行了全新的改进升级，我们可以选择最新版本体验降级规则熔断。</p>\n</blockquote>\n<h1 id=\"贰、熔断策略\"><a href=\"#贰、熔断策略\" class=\"headerlink\" title=\"贰、熔断策略\"></a>贰、熔断策略</h1><p>Sentinel 提供以下几种熔断策略：</p>\n<ul>\n<li>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 <code>RT</code>（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求响应时间小于设置的慢调用 <code>RT</code> 则结束熔断，若大于设置的慢调用 <code>RT</code> 则会再次被熔断。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SlowRatioCircuitBreakerDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static final String KEY &#x3D; &quot;some_method&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static volatile boolean stop &#x3D; false;</span><br><span class=\"line\">  private static int seconds &#x3D; 120;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static AtomicInteger total &#x3D; new AtomicInteger();</span><br><span class=\"line\">  private static AtomicInteger pass &#x3D; new AtomicInteger();</span><br><span class=\"line\">  private static AtomicInteger block &#x3D; new AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">      initDegradeRule();</span><br><span class=\"line\">      registerStateChangeObserver();</span><br><span class=\"line\">      startTick();</span><br><span class=\"line\"></span><br><span class=\"line\">      int concurrency &#x3D; 8;</span><br><span class=\"line\">      for (int i &#x3D; 0; i &lt; concurrency; i++) &#123;</span><br><span class=\"line\">          Thread entryThread &#x3D; new Thread(() -&gt; &#123;</span><br><span class=\"line\">              while (true) &#123;</span><br><span class=\"line\">                  Entry entry &#x3D; null;</span><br><span class=\"line\">                  try &#123;</span><br><span class=\"line\">                      entry &#x3D; SphU.entry(KEY);</span><br><span class=\"line\">                      pass.incrementAndGet();</span><br><span class=\"line\">                      &#x2F;&#x2F; RT: [40ms, 60ms)</span><br><span class=\"line\">                      sleep(ThreadLocalRandom.current().nextInt(40, 60));</span><br><span class=\"line\">                  &#125; catch (BlockException e) &#123;</span><br><span class=\"line\">                      block.incrementAndGet();</span><br><span class=\"line\">                      sleep(ThreadLocalRandom.current().nextInt(5, 10));</span><br><span class=\"line\">                  &#125; finally &#123;</span><br><span class=\"line\">                      total.incrementAndGet();</span><br><span class=\"line\">                      if (entry !&#x3D; null) &#123;</span><br><span class=\"line\">                          entry.exit();</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          entryThread.setName(&quot;sentinel-simulate-traffic-task-&quot; + i);</span><br><span class=\"line\">          entryThread.start();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static void registerStateChangeObserver() &#123;</span><br><span class=\"line\">      EventObserverRegistry.getInstance().addStateChangeObserver(&quot;logging&quot;,</span><br><span class=\"line\">          (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class=\"line\">              if (newState &#x3D;&#x3D; State.OPEN) &#123;</span><br><span class=\"line\">                  System.err.println(String.format(&quot;%s -&gt; OPEN at %d, snapshotValue&#x3D;%.2f&quot;, prevState.name(),</span><br><span class=\"line\">                      TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class=\"line\">              &#125; else &#123;</span><br><span class=\"line\">                  System.err.println(String.format(&quot;%s -&gt; %s at %d&quot;, prevState.name(), newState.name(),</span><br><span class=\"line\">                      TimeUtil.currentTimeMillis()));</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static void initDegradeRule() &#123;</span><br><span class=\"line\">      List&lt;DegradeRule&gt; rules &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">      DegradeRule rule &#x3D; new DegradeRule(KEY)</span><br><span class=\"line\">          .setGrade(CircuitBreakerStrategy.SLOW_REQUEST_RATIO.getType())</span><br><span class=\"line\">          &#x2F;&#x2F; Max allowed response time</span><br><span class=\"line\">          .setCount(50)</span><br><span class=\"line\">          &#x2F;&#x2F; Retry timeout (in second)</span><br><span class=\"line\">          .setTimeWindow(10)</span><br><span class=\"line\">          &#x2F;&#x2F; Circuit breaker opens when slow request ratio &gt; 60%</span><br><span class=\"line\">          .setSlowRatioThreshold(0.6)</span><br><span class=\"line\">          .setMinRequestAmount(100)</span><br><span class=\"line\">          .setStatIntervalMs(20000);</span><br><span class=\"line\">      rules.add(rule);</span><br><span class=\"line\"></span><br><span class=\"line\">      DegradeRuleManager.loadRules(rules);</span><br><span class=\"line\">      System.out.println(&quot;Degrade rule loaded: &quot; + rules);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static void sleep(int timeMs) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">          TimeUnit.MILLISECONDS.sleep(timeMs);</span><br><span class=\"line\">      &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">          &#x2F;&#x2F; ignore</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static void startTick() &#123;</span><br><span class=\"line\">      Thread timer &#x3D; new Thread(new TimerTask());</span><br><span class=\"line\">      timer.setName(&quot;sentinel-timer-tick-task&quot;);</span><br><span class=\"line\">      timer.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static class TimerTask implements Runnable &#123;</span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      public void run() &#123;</span><br><span class=\"line\">          long start &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">          System.out.println(&quot;Begin to run! Go go go!&quot;);</span><br><span class=\"line\">          System.out.println(&quot;See corresponding metrics.log for accurate statistic data&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">          long oldTotal &#x3D; 0;</span><br><span class=\"line\">          long oldPass &#x3D; 0;</span><br><span class=\"line\">          long oldBlock &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">          while (!stop) &#123;</span><br><span class=\"line\">              sleep(1000);</span><br><span class=\"line\"></span><br><span class=\"line\">              long globalTotal &#x3D; total.get();</span><br><span class=\"line\">              long oneSecondTotal &#x3D; globalTotal - oldTotal;</span><br><span class=\"line\">              oldTotal &#x3D; globalTotal;</span><br><span class=\"line\"></span><br><span class=\"line\">              long globalPass &#x3D; pass.get();</span><br><span class=\"line\">              long oneSecondPass &#x3D; globalPass - oldPass;</span><br><span class=\"line\">              oldPass &#x3D; globalPass;</span><br><span class=\"line\"></span><br><span class=\"line\">              long globalBlock &#x3D; block.get();</span><br><span class=\"line\">              long oneSecondBlock &#x3D; globalBlock - oldBlock;</span><br><span class=\"line\">              oldBlock &#x3D; globalBlock;</span><br><span class=\"line\"></span><br><span class=\"line\">              System.out.println(TimeUtil.currentTimeMillis() + &quot;, total:&quot; + oneSecondTotal</span><br><span class=\"line\">                  + &quot;, pass:&quot; + oneSecondPass + &quot;, block:&quot; + oneSecondBlock);</span><br><span class=\"line\"></span><br><span class=\"line\">              if (seconds-- &lt;&#x3D; 0) &#123;</span><br><span class=\"line\">                  stop &#x3D; true;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          long cost &#x3D; System.currentTimeMillis() - start;</span><br><span class=\"line\">          System.out.println(&quot;time cost: &quot; + cost + &quot; ms&quot;);</span><br><span class=\"line\">          System.out.println(&quot;total: &quot; + total.get() + &quot;, pass:&quot; + pass.get()</span><br><span class=\"line\">              + &quot;, block:&quot; + block.get());</span><br><span class=\"line\">          System.exit(0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 <code>0% - 100%</code>。</li>\n<li>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>\n</ul>\n<p>注意异常降级仅针对业务异常，对 <code>Sentinel</code> 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  entry = SphU.entry(resource);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Write your biz code here.</span></span><br><span class=\"line\">  <span class=\"comment\">// &lt;&lt;BIZ CODE&gt;&gt;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!BlockException.isBlockException(t)) &#123;</span><br><span class=\"line\">    Tracer.trace(t);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    entry.exit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>开源整合模块，如 <code>Sentinel Dubbo Adapter</code>, <code>Sentinel Web Servlet Filter</code> 或 <code>@SentinelResource</code> 注解会自动统计业务异常，无需手动调用。但是如果你的程序发生异常的异常被处理过，或者异常时并不会抛出异常，则需要你自己手动调用 <code>Tracer.trace(ex)</code> 来记录业务异常。否则你的<code>异常比例</code>和<code>异常数</code>将不会生效。</p>\n</blockquote>\n<h1 id=\"叁、熔断降级规则说明\"><a href=\"#叁、熔断降级规则说明\" class=\"headerlink\" title=\"叁、熔断降级规则说明\"></a>叁、熔断降级规则说明</h1><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>resource</td>\n<td>资源名，即规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>\n<td>慢调用比例</td>\n</tr>\n<tr>\n<td>count</td>\n<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>timeWindow</td>\n<td>熔断时长，单位为 s</td>\n<td></td>\n</tr>\n<tr>\n<td>minRequestAmount</td>\n<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>\n<td>5</td>\n</tr>\n<tr>\n<td>statIntervalMs</td>\n<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>\n<td>1000 ms</td>\n</tr>\n<tr>\n<td>slowRatioThreshold</td>\n<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"肆、熔断器事件监听\"><a href=\"#肆、熔断器事件监听\" class=\"headerlink\" title=\"肆、熔断器事件监听\"></a>肆、熔断器事件监听</h1><p><code>Sentinel</code> 支持注册自定义的事件监听器监听熔断器状态变换事件（state change event）。示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventObserverRegistry.getInstance().addStateChangeObserver(<span class=\"string\">&quot;logging&quot;</span>,</span><br><span class=\"line\">    (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newState == State.OPEN) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 变换至 OPEN state 时会携带触发时的值</span></span><br><span class=\"line\">            System.err.println(String.format(<span class=\"string\">&quot;%s -&gt; OPEN at %d, snapshotValue=%.2f&quot;</span>, prevState.name(),</span><br><span class=\"line\">                TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.err.println(String.format(<span class=\"string\">&quot;%s -&gt; %s at %d&quot;</span>, prevState.name(), newState.name(),</span><br><span class=\"line\">                TimeUtil.currentTimeMillis()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>后面的话</strong>】<a href=\"https://github.com/eelve/awesomesentinel\">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>\n<p>另外在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p>\n<p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>DegradeRule</code> 的校验方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static boolean isValidRule(DegradeRule rule) &#123;</span><br><span class=\"line\">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class=\"line\">        &amp;&amp; rule.getCount() &gt;&#x3D; 0 &amp;&amp; rule.getTimeWindow() &gt; 0;</span><br><span class=\"line\">    if (!baseValid) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (rule.getMinRequestAmount() &lt;&#x3D; 0 || rule.getStatIntervalMs() &lt;&#x3D; 0) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    switch (rule.getGrade()) &#123;</span><br><span class=\"line\">        case RuleConstant.DEGRADE_GRADE_RT:</span><br><span class=\"line\">            return rule.getSlowRatioThreshold() &gt;&#x3D; 0 &amp;&amp; rule.getSlowRatioThreshold() &lt;&#x3D; 1;</span><br><span class=\"line\">        case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class=\"line\">            return rule.getCount() &lt;&#x3D; 1;</span><br><span class=\"line\">        case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","categories":[{"name":"sentinel","path":"api/categories/sentinel.json"}],"tags":[{"name":"sentinel","path":"api/tags/sentinel.json"}]}