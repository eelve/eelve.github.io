{"title":"SpringBoot自定义Starter","slug":"SpringBoot自定义Starter","date":"2020-04-05T04:01:17.000Z","updated":"2021-04-19T06:44:39.042Z","comments":true,"path":"api/articles/SpringBoot自定义Starter.json","excerpt":null,"covers":["https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png"],"content":"<p>【<strong>前面的话</strong>】在使用SpringBoot的日常开发过程中，我们不可避免的要封装一些自己的Starter，今天这篇文章就来讨论一下怎么自定义一个Starter，本文会封装一个短信发送能力的Starter,使用<a href=\"https://office.ucpaas.com/about/index.html\">云之讯</a>的SDK。</p>\n<hr>\n<h1 id=\"壹、命名规范\"><a href=\"#壹、命名规范\" class=\"headerlink\" title=\"壹、命名规范\"></a>壹、命名规范</h1><p>官方的约定主要有一个命名的约定：在maven中，groupId代表着姓氏，artifactId代表着名字。Spring Boot也是有一个命名的建议的。groupId不要用官方的org.springframework.boot而要用你自己独特的。对于artifactId的命名，Spring Boot官方建议非官方的Starter命名格式遵循 xxxx-spring-boot-starter ，例如 mybatis-spring-boot-starter 。官方starter会遵循spring-boot-starter-xxxx ,例如spring-boot-starter-web 。很多开源starter作者会忽略这种约定，显得不够“专业“。</p>\n<h1 id=\"贰、新建工程\"><a href=\"#贰、新建工程\" class=\"headerlink\" title=\"贰、新建工程\"></a>贰、新建工程</h1><p>新建一个<strong>sms-spring-boot-starter</strong>工程，pom依赖如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--封装Starter核心依赖  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--非必需,该依赖作用是在使用IDEA编写配置文件有代码提示--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- lombok 插件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 因为要使用RestTemplate和转换Json，所以引入这两个依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.61<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"叁、Properties配置\"><a href=\"#叁、Properties配置\" class=\"headerlink\" title=\"叁、Properties配置\"></a>叁、Properties配置</h1><p>一般配置参数都是在Spring Boot 的application.yml中。我们会定义一个前缀标识来作为名称空间隔离各个组件的参数。对应的组件会定义一个XXXXProperties 来自动装配这些参数。自动装配的机制基于@ConfigurationProperties注解，请注意一定要显式声明你配置的前缀标识（prefix）。所以这里我们新建<strong>SmsProperties</strong>类，可以配置信息通过配置项名称映射成实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;ucpaassms-config&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accountSid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authToken;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里我们可以将配置文件中前缀为<strong>ucpaassms-config</strong>的配置，映射到<strong>SmsProperties</strong>类中。在将来使用时只需要在application.yml中加入上面对应SmsProperties的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ucpaassms-config:</span></span><br><span class=\"line\">  <span class=\"attr\">account-sid:</span>  <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">auth-token:</span>   <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span>        <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"肆、定义业务实现类\"><a href=\"#肆、定义业务实现类\" class=\"headerlink\" title=\"肆、定义业务实现类\"></a>肆、定义业务实现类</h1><p>拿到配置后，接下来就是根据配置来初始化我们的功能接口。这里我们新建<strong>SmsService</strong>，用来提供具体业务逻辑处理能力</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accountSid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authToken;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SmsService</span><span class=\"params\">(SmsProperties smsProperties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.appid = smsProperties.getAppid();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.accountSid = smsProperties.getAccountSid();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.authToken = smsProperties.getAuthToken();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 单独发送</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendSMS</span><span class=\"params\">(SendSMSDTO sendSMSDTO)</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;sid&quot;</span>, accountSid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;token&quot;</span>, authToken);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;appid&quot;</span>, appid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;templateid&quot;</span>, sendSMSDTO.getTemplateid());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;param&quot;</span>, sendSMSDTO.getParam());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;mobile&quot;</span>, sendSMSDTO.getMobile());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sendSMSDTO.getUid()!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,sendSMSDTO.getUid());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String json = JSONObject.toJSONString(jsonObject);</span><br><span class=\"line\">        <span class=\"comment\">//使用restTemplate进行访问远程Http服务</span></span><br><span class=\"line\">        HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">        HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(json, headers);</span><br><span class=\"line\">        String result = restTemplate.postForObject(ENUM_SMSAPI_URL.SENDSMS.getUrl(), httpEntity, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 群体发送</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendBatchSMS</span><span class=\"params\">(SendSMSDTO sendSMSDTO)</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;sid&quot;</span>, accountSid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;token&quot;</span>, authToken);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;appid&quot;</span>, appid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;templateid&quot;</span>, sendSMSDTO.getTemplateid());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;param&quot;</span>, sendSMSDTO.getParam());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;mobile&quot;</span>, sendSMSDTO.getMobile());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sendSMSDTO.getUid()!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,sendSMSDTO.getUid());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String json = JSONObject.toJSONString(jsonObject);</span><br><span class=\"line\">        <span class=\"comment\">//使用restTemplate进行访问远程Http服务</span></span><br><span class=\"line\">        HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">        HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(json, headers);</span><br><span class=\"line\">        String result = restTemplate.postForObject(ENUM_SMSAPI_URL.SENDBATCHSMS.getUrl(), httpEntity, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"伍、定义配置类\"><a href=\"#伍、定义配置类\" class=\"headerlink\" title=\"伍、定义配置类\"></a>伍、定义配置类</h1><p>功能接口实现完后我们会编写一个自动配置类 SmsAutoConfiguration 。除了@Configuration注解外，@EnableConfigurationProperties会帮助我们将我们的配置类SmsProperties加载进来。然后将我们需要暴露的功能接口声明为Spring Bean暴露给Spring Boot应用。这里我们新建<strong>SmsAutoConfiguration</strong>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>  <span class=\"comment\">//注释使类成为bean的工厂</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(SmsProperties.class)</span> <span class=\"comment\">//使@ConfigurationProperties注解生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SmsService <span class=\"title\">getBean</span><span class=\"params\">(SmsProperties smsProperties)</span></span>&#123;</span><br><span class=\"line\">        SmsService smsService = <span class=\"keyword\">new</span> SmsService(smsProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> smsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"陆、自动装配\"><a href=\"#陆、自动装配\" class=\"headerlink\" title=\"陆、自动装配\"></a>陆、自动装配</h1><p>这里会用到类似java的SPI机制。在资源包下新建META-INF/spring.factories写入SmsAutoConfiguration全限定名。这样在starter组件集成入Spring Boot应用时就可以被应用捕捉到。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;com.eelve.sms.starter.config.SmsAutoConfiguration</span><br></pre></td></tr></table></figure>\n<p>这里还有另外一种方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(SmsAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableSMS &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这样我们使用EnableSMS注解，就可以使用能力了</span></span><br></pre></td></tr></table></figure>\n<p>到这里我们的自定义配置就可以完成了，然后就可以上传仓库，提供给第三方使用了。</p>\n<h1 id=\"柒、测试\"><a href=\"#柒、测试\" class=\"headerlink\" title=\"柒、测试\"></a>柒、测试</h1><h2 id=\"7-1-加入sms-spring-boot-starter短信依赖\"><a href=\"#7-1-加入sms-spring-boot-starter短信依赖\" class=\"headerlink\" title=\"7.1 加入sms-spring-boot-starter短信依赖\"></a>7.1 加入<strong>sms-spring-boot-starter</strong>短信依赖</h2><h2 id=\"7-2-编写配置\"><a href=\"#7-2-编写配置\" class=\"headerlink\" title=\"7.2 编写配置\"></a>7.2 编写配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ucpaassms-config:</span></span><br><span class=\"line\">  <span class=\"attr\">account-sid:</span>  <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">auth-token:</span>   <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span>        <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-3-编写测试类\"><a href=\"#7-3-编写测试类\" class=\"headerlink\" title=\"7.3 编写测试类\"></a>7.3 编写测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.ucpaassms.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.sms.starter.SmsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.sms.starter.dto.SendSMSDTO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/sms&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SmsService smsService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/sendsmsTest&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendsmsTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建传输类设置参数</span></span><br><span class=\"line\">        SendSMSDTO sendSMSDTO  = <span class=\"keyword\">new</span> SendSMSDTO();</span><br><span class=\"line\">        sendSMSDTO.setMobile(<span class=\"string\">&quot;18888888888&quot;</span>);     <span class=\"comment\">//手机号</span></span><br><span class=\"line\">        sendSMSDTO.setTemplateid(<span class=\"string\">&quot;55555&quot;</span>); <span class=\"comment\">//模板</span></span><br><span class=\"line\">        sendSMSDTO.setParam(<span class=\"string\">&quot;9999&quot;</span>);      <span class=\"comment\">//参数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> smsService.sendSMS(sendSMSDTO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后运行，访问<a href=\"http://localhost:8080/sms/sendsmsTest\">http://localhost:8080/sms/sendsmsTest</a>,就可以收到发送的短信了</p>\n<pre><code>【蔚然山庄】尊敬的用户，敬请关注我们的后续活动。\n</code></pre>\n<hr>\n<p>【<strong>后面的话</strong>】</p>\n<p>在引入自己封装的Starter的时候,有的人会报错xxxx类的bean没有找到问题,是因为@SpringBootApplication扫描包的范围是启动类所在同级包和子包,但是不包括第三方的jar包.如果需要扫描maven依赖添加的Jar,我们就要单独使用@ComponentScan注解扫描包.<br>针对这种情况解决方式有两种:</p>\n<p>第一种:是你封装的Starter项目下父级包名称和测试项目的父级包名一样,例如这两个项目包名都叫com.eelve,这样可以不使用@ComponentScan注解,很显然这样做有局限性,不推荐.</p>\n<p>第二种:是可以单独使用@ComponentScan注解扫描第三方包,但是这里一定要注意@SpringBootApplication注解等价于默认属性使用@Configuration+@EnableAutoConfiguration+@ComponentScan,如果@SpringBootApplication和@ComponentScan注解同时存在，那么@SpringBootApplication注解中@ComponentScan的扫描范围会被覆盖,所以单独使用@ComponentScan的话,必须在该注解上配置项目需要扫描的包的所有范围,即项目包路径+依赖包路径.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/**</span></span><br><span class=\"line\"> <span class=\"string\">*</span> <span class=\"string\">@ComponentScan注解扫描多个包下示例</span></span><br><span class=\"line\"> <span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"string\">@ComponentScan(&#123;&quot;com.test&quot;,&quot;sms.test&quot;&#125;)</span></span><br></pre></td></tr></table></figure>\n<p>另外具体实现可以参考我的项目：<a href=\"https://github.com/eelve/ucpaas-spring-boot-starter\">ucpaas-spring-boot-starter</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","more":"<p>【<strong>前面的话</strong>】在使用SpringBoot的日常开发过程中，我们不可避免的要封装一些自己的Starter，今天这篇文章就来讨论一下怎么自定义一个Starter，本文会封装一个短信发送能力的Starter,使用<a href=\"https://office.ucpaas.com/about/index.html\">云之讯</a>的SDK。</p>\n<hr>\n<h1 id=\"壹、命名规范\"><a href=\"#壹、命名规范\" class=\"headerlink\" title=\"壹、命名规范\"></a>壹、命名规范</h1><p>官方的约定主要有一个命名的约定：在maven中，groupId代表着姓氏，artifactId代表着名字。Spring Boot也是有一个命名的建议的。groupId不要用官方的org.springframework.boot而要用你自己独特的。对于artifactId的命名，Spring Boot官方建议非官方的Starter命名格式遵循 xxxx-spring-boot-starter ，例如 mybatis-spring-boot-starter 。官方starter会遵循spring-boot-starter-xxxx ,例如spring-boot-starter-web 。很多开源starter作者会忽略这种约定，显得不够“专业“。</p>\n<h1 id=\"贰、新建工程\"><a href=\"#贰、新建工程\" class=\"headerlink\" title=\"贰、新建工程\"></a>贰、新建工程</h1><p>新建一个<strong>sms-spring-boot-starter</strong>工程，pom依赖如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--封装Starter核心依赖  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--非必需,该依赖作用是在使用IDEA编写配置文件有代码提示--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- lombok 插件  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 因为要使用RestTemplate和转换Json，所以引入这两个依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.61<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"叁、Properties配置\"><a href=\"#叁、Properties配置\" class=\"headerlink\" title=\"叁、Properties配置\"></a>叁、Properties配置</h1><p>一般配置参数都是在Spring Boot 的application.yml中。我们会定义一个前缀标识来作为名称空间隔离各个组件的参数。对应的组件会定义一个XXXXProperties 来自动装配这些参数。自动装配的机制基于@ConfigurationProperties注解，请注意一定要显式声明你配置的前缀标识（prefix）。所以这里我们新建<strong>SmsProperties</strong>类，可以配置信息通过配置项名称映射成实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;ucpaassms-config&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accountSid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authToken;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里我们可以将配置文件中前缀为<strong>ucpaassms-config</strong>的配置，映射到<strong>SmsProperties</strong>类中。在将来使用时只需要在application.yml中加入上面对应SmsProperties的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ucpaassms-config:</span></span><br><span class=\"line\">  <span class=\"attr\">account-sid:</span>  <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">auth-token:</span>   <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span>        <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"肆、定义业务实现类\"><a href=\"#肆、定义业务实现类\" class=\"headerlink\" title=\"肆、定义业务实现类\"></a>肆、定义业务实现类</h1><p>拿到配置后，接下来就是根据配置来初始化我们的功能接口。这里我们新建<strong>SmsService</strong>，用来提供具体业务逻辑处理能力</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accountSid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authToken;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SmsService</span><span class=\"params\">(SmsProperties smsProperties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.appid = smsProperties.getAppid();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.accountSid = smsProperties.getAccountSid();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.authToken = smsProperties.getAuthToken();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 单独发送</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendSMS</span><span class=\"params\">(SendSMSDTO sendSMSDTO)</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;sid&quot;</span>, accountSid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;token&quot;</span>, authToken);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;appid&quot;</span>, appid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;templateid&quot;</span>, sendSMSDTO.getTemplateid());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;param&quot;</span>, sendSMSDTO.getParam());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;mobile&quot;</span>, sendSMSDTO.getMobile());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sendSMSDTO.getUid()!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,sendSMSDTO.getUid());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String json = JSONObject.toJSONString(jsonObject);</span><br><span class=\"line\">        <span class=\"comment\">//使用restTemplate进行访问远程Http服务</span></span><br><span class=\"line\">        HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">        HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(json, headers);</span><br><span class=\"line\">        String result = restTemplate.postForObject(ENUM_SMSAPI_URL.SENDSMS.getUrl(), httpEntity, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 群体发送</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendBatchSMS</span><span class=\"params\">(SendSMSDTO sendSMSDTO)</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;sid&quot;</span>, accountSid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;token&quot;</span>, authToken);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;appid&quot;</span>, appid);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;templateid&quot;</span>, sendSMSDTO.getTemplateid());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;param&quot;</span>, sendSMSDTO.getParam());</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;mobile&quot;</span>, sendSMSDTO.getMobile());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sendSMSDTO.getUid()!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,sendSMSDTO.getUid());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            jsonObject.put(<span class=\"string\">&quot;uid&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String json = JSONObject.toJSONString(jsonObject);</span><br><span class=\"line\">        <span class=\"comment\">//使用restTemplate进行访问远程Http服务</span></span><br><span class=\"line\">        HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">        HttpEntity&lt;String&gt; httpEntity = <span class=\"keyword\">new</span> HttpEntity&lt;String&gt;(json, headers);</span><br><span class=\"line\">        String result = restTemplate.postForObject(ENUM_SMSAPI_URL.SENDBATCHSMS.getUrl(), httpEntity, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"伍、定义配置类\"><a href=\"#伍、定义配置类\" class=\"headerlink\" title=\"伍、定义配置类\"></a>伍、定义配置类</h1><p>功能接口实现完后我们会编写一个自动配置类 SmsAutoConfiguration 。除了@Configuration注解外，@EnableConfigurationProperties会帮助我们将我们的配置类SmsProperties加载进来。然后将我们需要暴露的功能接口声明为Spring Bean暴露给Spring Boot应用。这里我们新建<strong>SmsAutoConfiguration</strong>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>  <span class=\"comment\">//注释使类成为bean的工厂</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(SmsProperties.class)</span> <span class=\"comment\">//使@ConfigurationProperties注解生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SmsService <span class=\"title\">getBean</span><span class=\"params\">(SmsProperties smsProperties)</span></span>&#123;</span><br><span class=\"line\">        SmsService smsService = <span class=\"keyword\">new</span> SmsService(smsProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> smsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"陆、自动装配\"><a href=\"#陆、自动装配\" class=\"headerlink\" title=\"陆、自动装配\"></a>陆、自动装配</h1><p>这里会用到类似java的SPI机制。在资源包下新建META-INF/spring.factories写入SmsAutoConfiguration全限定名。这样在starter组件集成入Spring Boot应用时就可以被应用捕捉到。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;com.eelve.sms.starter.config.SmsAutoConfiguration</span><br></pre></td></tr></table></figure>\n<p>这里还有另外一种方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(SmsAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableSMS &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这样我们使用EnableSMS注解，就可以使用能力了</span></span><br></pre></td></tr></table></figure>\n<p>到这里我们的自定义配置就可以完成了，然后就可以上传仓库，提供给第三方使用了。</p>\n<h1 id=\"柒、测试\"><a href=\"#柒、测试\" class=\"headerlink\" title=\"柒、测试\"></a>柒、测试</h1><h2 id=\"7-1-加入sms-spring-boot-starter短信依赖\"><a href=\"#7-1-加入sms-spring-boot-starter短信依赖\" class=\"headerlink\" title=\"7.1 加入sms-spring-boot-starter短信依赖\"></a>7.1 加入<strong>sms-spring-boot-starter</strong>短信依赖</h2><h2 id=\"7-2-编写配置\"><a href=\"#7-2-编写配置\" class=\"headerlink\" title=\"7.2 编写配置\"></a>7.2 编写配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ucpaassms-config:</span></span><br><span class=\"line\">  <span class=\"attr\">account-sid:</span>  <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">auth-token:</span>   <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span>        <span class=\"string\">//这里填写平台获取的ID和KEY</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-3-编写测试类\"><a href=\"#7-3-编写测试类\" class=\"headerlink\" title=\"7.3 编写测试类\"></a>7.3 编写测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.ucpaassms.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.sms.starter.SmsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.eelve.sms.starter.dto.SendSMSDTO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/sms&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SmsService smsService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/sendsmsTest&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendsmsTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建传输类设置参数</span></span><br><span class=\"line\">        SendSMSDTO sendSMSDTO  = <span class=\"keyword\">new</span> SendSMSDTO();</span><br><span class=\"line\">        sendSMSDTO.setMobile(<span class=\"string\">&quot;18888888888&quot;</span>);     <span class=\"comment\">//手机号</span></span><br><span class=\"line\">        sendSMSDTO.setTemplateid(<span class=\"string\">&quot;55555&quot;</span>); <span class=\"comment\">//模板</span></span><br><span class=\"line\">        sendSMSDTO.setParam(<span class=\"string\">&quot;9999&quot;</span>);      <span class=\"comment\">//参数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> smsService.sendSMS(sendSMSDTO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后运行，访问<a href=\"http://localhost:8080/sms/sendsmsTest\">http://localhost:8080/sms/sendsmsTest</a>,就可以收到发送的短信了</p>\n<pre><code>【蔚然山庄】尊敬的用户，敬请关注我们的后续活动。\n</code></pre>\n<hr>\n<p>【<strong>后面的话</strong>】</p>\n<p>在引入自己封装的Starter的时候,有的人会报错xxxx类的bean没有找到问题,是因为@SpringBootApplication扫描包的范围是启动类所在同级包和子包,但是不包括第三方的jar包.如果需要扫描maven依赖添加的Jar,我们就要单独使用@ComponentScan注解扫描包.<br>针对这种情况解决方式有两种:</p>\n<p>第一种:是你封装的Starter项目下父级包名称和测试项目的父级包名一样,例如这两个项目包名都叫com.eelve,这样可以不使用@ComponentScan注解,很显然这样做有局限性,不推荐.</p>\n<p>第二种:是可以单独使用@ComponentScan注解扫描第三方包,但是这里一定要注意@SpringBootApplication注解等价于默认属性使用@Configuration+@EnableAutoConfiguration+@ComponentScan,如果@SpringBootApplication和@ComponentScan注解同时存在，那么@SpringBootApplication注解中@ComponentScan的扫描范围会被覆盖,所以单独使用@ComponentScan的话,必须在该注解上配置项目需要扫描的包的所有范围,即项目包路径+依赖包路径.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/**</span></span><br><span class=\"line\"> <span class=\"string\">*</span> <span class=\"string\">@ComponentScan注解扫描多个包下示例</span></span><br><span class=\"line\"> <span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"string\">@ComponentScan(&#123;&quot;com.test&quot;,&quot;sms.test&quot;&#125;)</span></span><br></pre></td></tr></table></figure>\n<p>另外具体实现可以参考我的项目：<a href=\"https://github.com/eelve/ucpaas-spring-boot-starter\">ucpaas-spring-boot-starter</a></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","categories":[{"name":"SpringBoot","path":"api/categories/SpringBoot.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"}]}