{"title":"Sentinel进阶之系统自适应保护","slug":"Sentinel进阶之系统自适应保护","date":"2021-06-07T00:07:07.000Z","updated":"2023-09-30T08:39:39.682Z","comments":true,"path":"api/articles/Sentinel进阶之系统自适应保护.json","excerpt":null,"covers":["https://image.eelve.com/eblog/system-load.png","https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png"],"content":"<p>【<strong>前面的话</strong>】在前文 <a href=\"https://eelve.com/posts/b6bfdc75.html\">Sentinel进阶之熔断降级</a> 中简单介绍了一下<code>Sentinel</code>的流量控制，今天就来继续说一下Sentinel的系统自适应保护。</p>\n<hr>\n<h1 id=\"壹、概述\"><a href=\"#壹、概述\" class=\"headerlink\" title=\"壹、概述\"></a>壹、概述</h1><p>Sentinel 系统自适应保护从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<h1 id=\"贰、背景\"><a href=\"#贰、背景\" class=\"headerlink\" title=\"贰、背景\"></a>贰、背景</h1><p>在开始之前，先回顾一下 <code>Sentinel</code> 做系统自适应保护的目的：</p>\n<ul>\n<li>保证系统不被拖垮</li>\n<li>在系统稳定的前提下，保持系统的吞吐量</li>\n</ul>\n<p>长期以来，系统自适应保护的思路是根据硬指标，即系统的负载 (load1) 来做系统过载保护。当系统负载高于某个阈值，就禁止或者减少流量的进入；当load开始好转，则恢复流量的进入。这个思路给我们带来了不可避免的两个问题：</p>\n<ul>\n<li>load 是一个“果”，如果根据 load 的情况来调节流量的通过率，那么就始终有延迟性。也就意味着通过率的任何调整，都会过一段时间才能看到效果。当前通过率是使load恶化的一个动作，那么也至少要过 1 秒之后才能观测到；同理，如果当前通过率调整是让 <code>load</code> 好转的一个动作，也需要1秒之后才能继续调整，这样就浪费了系统的处理能力。所以我们看到的曲线，总是会有抖动。</li>\n<li>恢复慢。想象一下这样的一个场景（真实），出现了这样一个问题，下游应用不可靠，导致应用RT很高，从而load到了一个很高的点。过了一段时间之后下游应用恢复了，应用RT也相应减少。这个时候，其实应该大幅度增大流量的通过率；但是由于这个时候 <code>load</code> 仍然很高，通过率的恢复仍然不高。</li>\n</ul>\n<p><code>TCP BBR</code> 的思想给了我们一个很大的启发。我们应该根据系统能够处理的请求，和允许进来的请求，来做平衡，而不是根据一个间接的指标（系统 load）来做限流。最终我们追求的目标是 <code>在系统不被拖垮的情况下，提高系统的吞吐率，而不是 load 一定要到低于某个阈值</code>。如果我们还是按照固有的思维，超过特定的 load 就禁止流量进入，系统 load 恢复就放开流量，这样做的结果是无论我们怎么调参数，调比例，都是按照果来调节因，都无法取得良好的效果。</p>\n<p><code>Sentinel</code> 在系统自适应保护的做法是，用 load1 作为启动控制流量的值，而允许通过的流量由处理请求的能力，即请求的响应时间以及当前系统正在处理的请求速率来决定。</p>\n<h1 id=\"叁、系统规则\"><a href=\"#叁、系统规则\" class=\"headerlink\" title=\"叁、系统规则\"></a>叁、系统规则</h1><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体Load、RT、入口QPS 和线程数四个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<p>系统保护规则是应用整体维度的，而不是资源维度的，并且<code>仅对入口流量生效</code>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>\n<p>系统规则支持以下的阈值类型：</p>\n<ul>\n<li><code>Load</code>（仅对 <code>Linux/Unix-like</code> 机器生效）：当系统 <code>load1</code> 超过阈值，且系统当前的并发线程数超过系统容量时才会触发系统保护。系统容量由系统的 <code>maxQps * minRt</code> 计算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li>\n<li><code>CPU usage</code>（1.5.0+ 版本）：当系统 <code>CPU</code> 使用率超过阈值即触发系统保护（取值范围 <code>0.0-1.0</code>）。</li>\n<li><code>RT</code>：当单台机器上所有入口流量的<code>平均RT</code> 达到阈值即触发系统保护，单位是毫秒。</li>\n<li><code>线程数</code>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>\n<li><code>入口 QPS</code>：当单台机器上所有入口流量的 <code>QPS</code> 达到阈值即触发系统保护。</li>\n</ul>\n<h1 id=\"肆、原理\"><a href=\"#肆、原理\" class=\"headerlink\" title=\"肆、原理\"></a>肆、原理</h1><p>先用经典图来镇楼:</p>\n<p><img src=\"https://image.eelve.com/eblog/system-load.png\" alt=\"系统load\"></p>\n<p>我们把系统处理请求的过程想象为一个水管，到来的请求是往这个水管灌水，当系统处理顺畅的时候，请求不需要排队，直接从水管中穿过，这个请求的RT是最短的；反之，当请求堆积的时候，那么处理请求的时间则会变为：排队时间 + 最短处理时间。</p>\n<ul>\n<li>推论一: 如果我们能够保证水管里的水量，能够让水顺畅的流动，则不会增加排队的请求；也就是说，这个时候的系统负载不会进一步恶化。</li>\n</ul>\n<p>我们用 T 来表示(水管内部的水量)，用RT来表示请求的处理时间，用P来表示进来的请求数，那么一个请求从进入水管道到从水管出来，这个水管会存在 <code>P * RT</code>　个请求。换一句话来说，当 <code>T ≈ QPS * Avg(RT)</code> 的时候，我们可以认为系统的处理能力和允许进入的请求个数达到了平衡，系统的负载不会进一步恶化。</p>\n<p>接下来的问题是，水管的水位是可以达到了一个平衡点，但是这个平衡点只能保证水管的水位不再继续增高，但是还面临一个问题，就是在达到平衡点之前，这个水管里已经堆积了多少水。如果之前水管的水已经在一个量级了，那么这个时候系统允许通过的水量可能只能缓慢通过，RT会大，之前堆积在水管里的水会滞留；反之，如果之前的水管水位偏低，那么又会浪费了系统的处理能力。</p>\n<ul>\n<li>推论二:　当保持入口的流量是水管出来的流量的最大的值的时候，可以最大利用水管的处理能力。</li>\n</ul>\n<p>然而，和 TCP BBR 的不一样的地方在于，还需要用一个系统负载的值（load1）来激发这套机制启动。</p>\n<blockquote>\n<p>这种系统自适应算法对于低 load 的请求，它的效果是一个“兜底”的角色。<code>对于不是应用本身造成的 load 高的情况（如其它进程导致的不稳定的情况），效果不明显</code>。</p>\n</blockquote>\n<h1 id=\"伍、示例\"><a href=\"#伍、示例\" class=\"headerlink\" title=\"伍、示例\"></a>伍、示例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemGuardDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger pass = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger block = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger total = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> seconds = <span class=\"number\">60</span> + <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        tick();</span><br><span class=\"line\">        initSystemRule();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">            Thread entryThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                        Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            entry = SphU.entry(<span class=\"string\">&quot;methodA&quot;</span>, EntryType.IN);</span><br><span class=\"line\">                            pass.incrementAndGet();</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (BlockException e1) &#123;</span><br><span class=\"line\">                            block.incrementAndGet();</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e2) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// biz exception</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                            total.incrementAndGet();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                entry.exit();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            entryThread.setName(<span class=\"string\">&quot;working-thread&quot;</span>);</span><br><span class=\"line\">            entryThread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initSystemRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;SystemRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;SystemRule&gt;();</span><br><span class=\"line\">        SystemRule rule = <span class=\"keyword\">new</span> SystemRule();</span><br><span class=\"line\">        <span class=\"comment\">// max load is 3</span></span><br><span class=\"line\">        rule.setHighestSystemLoad(<span class=\"number\">3.0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// max cpu usage is 60%</span></span><br><span class=\"line\">        rule.setHighestCpuUsage(<span class=\"number\">0.6</span>);</span><br><span class=\"line\">        <span class=\"comment\">// max avg rt of all request is 10 ms</span></span><br><span class=\"line\">        rule.setAvgRt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// max total qps is 20</span></span><br><span class=\"line\">        rule.setQps(<span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"comment\">// max parallel working thread is 10</span></span><br><span class=\"line\">        rule.setMaxThread(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        rules.add(rule);</span><br><span class=\"line\">        SystemRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">tick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread timer = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TimerTask());</span><br><span class=\"line\">        timer.setName(<span class=\"string\">&quot;sentinel-timer-task&quot;</span>);</span><br><span class=\"line\">        timer.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;begin to statistic!!!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> oldTotal = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> oldPass = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> oldBlock = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> globalTotal = total.get();</span><br><span class=\"line\">                <span class=\"keyword\">long</span> oneSecondTotal = globalTotal - oldTotal;</span><br><span class=\"line\">                oldTotal = globalTotal;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">long</span> globalPass = pass.get();</span><br><span class=\"line\">                <span class=\"keyword\">long</span> oneSecondPass = globalPass - oldPass;</span><br><span class=\"line\">                oldPass = globalPass;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">long</span> globalBlock = block.get();</span><br><span class=\"line\">                <span class=\"keyword\">long</span> oneSecondBlock = globalBlock - oldBlock;</span><br><span class=\"line\">                oldBlock = globalBlock;</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(seconds + <span class=\"string\">&quot;, &quot;</span> + TimeUtil.currentTimeMillis() + <span class=\"string\">&quot;, total:&quot;</span></span><br><span class=\"line\">                    + oneSecondTotal + <span class=\"string\">&quot;, pass:&quot;</span></span><br><span class=\"line\">                    + oneSecondPass + <span class=\"string\">&quot;, block:&quot;</span> + oneSecondBlock);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (seconds-- &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    stop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>后面的话</strong>】<a href=\"https://github.com/eelve/awesomesentinel\">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","more":"<p>【<strong>前面的话</strong>】在前文 <a href=\"https://eelve.com/posts/b6bfdc75.html\">Sentinel进阶之熔断降级</a> 中简单介绍了一下<code>Sentinel</code>的流量控制，今天就来继续说一下Sentinel的系统自适应保护。</p>\n<hr>\n<h1 id=\"壹、概述\"><a href=\"#壹、概述\" class=\"headerlink\" title=\"壹、概述\"></a>壹、概述</h1><p>Sentinel 系统自适应保护从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<h1 id=\"贰、背景\"><a href=\"#贰、背景\" class=\"headerlink\" title=\"贰、背景\"></a>贰、背景</h1><p>在开始之前，先回顾一下 <code>Sentinel</code> 做系统自适应保护的目的：</p>\n<ul>\n<li>保证系统不被拖垮</li>\n<li>在系统稳定的前提下，保持系统的吞吐量</li>\n</ul>\n<p>长期以来，系统自适应保护的思路是根据硬指标，即系统的负载 (load1) 来做系统过载保护。当系统负载高于某个阈值，就禁止或者减少流量的进入；当load开始好转，则恢复流量的进入。这个思路给我们带来了不可避免的两个问题：</p>\n<ul>\n<li>load 是一个“果”，如果根据 load 的情况来调节流量的通过率，那么就始终有延迟性。也就意味着通过率的任何调整，都会过一段时间才能看到效果。当前通过率是使load恶化的一个动作，那么也至少要过 1 秒之后才能观测到；同理，如果当前通过率调整是让 <code>load</code> 好转的一个动作，也需要1秒之后才能继续调整，这样就浪费了系统的处理能力。所以我们看到的曲线，总是会有抖动。</li>\n<li>恢复慢。想象一下这样的一个场景（真实），出现了这样一个问题，下游应用不可靠，导致应用RT很高，从而load到了一个很高的点。过了一段时间之后下游应用恢复了，应用RT也相应减少。这个时候，其实应该大幅度增大流量的通过率；但是由于这个时候 <code>load</code> 仍然很高，通过率的恢复仍然不高。</li>\n</ul>\n<p><code>TCP BBR</code> 的思想给了我们一个很大的启发。我们应该根据系统能够处理的请求，和允许进来的请求，来做平衡，而不是根据一个间接的指标（系统 load）来做限流。最终我们追求的目标是 <code>在系统不被拖垮的情况下，提高系统的吞吐率，而不是 load 一定要到低于某个阈值</code>。如果我们还是按照固有的思维，超过特定的 load 就禁止流量进入，系统 load 恢复就放开流量，这样做的结果是无论我们怎么调参数，调比例，都是按照果来调节因，都无法取得良好的效果。</p>\n<p><code>Sentinel</code> 在系统自适应保护的做法是，用 load1 作为启动控制流量的值，而允许通过的流量由处理请求的能力，即请求的响应时间以及当前系统正在处理的请求速率来决定。</p>\n<h1 id=\"叁、系统规则\"><a href=\"#叁、系统规则\" class=\"headerlink\" title=\"叁、系统规则\"></a>叁、系统规则</h1><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体Load、RT、入口QPS 和线程数四个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<p>系统保护规则是应用整体维度的，而不是资源维度的，并且<code>仅对入口流量生效</code>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>\n<p>系统规则支持以下的阈值类型：</p>\n<ul>\n<li><code>Load</code>（仅对 <code>Linux/Unix-like</code> 机器生效）：当系统 <code>load1</code> 超过阈值，且系统当前的并发线程数超过系统容量时才会触发系统保护。系统容量由系统的 <code>maxQps * minRt</code> 计算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li>\n<li><code>CPU usage</code>（1.5.0+ 版本）：当系统 <code>CPU</code> 使用率超过阈值即触发系统保护（取值范围 <code>0.0-1.0</code>）。</li>\n<li><code>RT</code>：当单台机器上所有入口流量的<code>平均RT</code> 达到阈值即触发系统保护，单位是毫秒。</li>\n<li><code>线程数</code>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>\n<li><code>入口 QPS</code>：当单台机器上所有入口流量的 <code>QPS</code> 达到阈值即触发系统保护。</li>\n</ul>\n<h1 id=\"肆、原理\"><a href=\"#肆、原理\" class=\"headerlink\" title=\"肆、原理\"></a>肆、原理</h1><p>先用经典图来镇楼:</p>\n<p><img src=\"https://image.eelve.com/eblog/system-load.png\" alt=\"系统load\"></p>\n<p>我们把系统处理请求的过程想象为一个水管，到来的请求是往这个水管灌水，当系统处理顺畅的时候，请求不需要排队，直接从水管中穿过，这个请求的RT是最短的；反之，当请求堆积的时候，那么处理请求的时间则会变为：排队时间 + 最短处理时间。</p>\n<ul>\n<li>推论一: 如果我们能够保证水管里的水量，能够让水顺畅的流动，则不会增加排队的请求；也就是说，这个时候的系统负载不会进一步恶化。</li>\n</ul>\n<p>我们用 T 来表示(水管内部的水量)，用RT来表示请求的处理时间，用P来表示进来的请求数，那么一个请求从进入水管道到从水管出来，这个水管会存在 <code>P * RT</code>　个请求。换一句话来说，当 <code>T ≈ QPS * Avg(RT)</code> 的时候，我们可以认为系统的处理能力和允许进入的请求个数达到了平衡，系统的负载不会进一步恶化。</p>\n<p>接下来的问题是，水管的水位是可以达到了一个平衡点，但是这个平衡点只能保证水管的水位不再继续增高，但是还面临一个问题，就是在达到平衡点之前，这个水管里已经堆积了多少水。如果之前水管的水已经在一个量级了，那么这个时候系统允许通过的水量可能只能缓慢通过，RT会大，之前堆积在水管里的水会滞留；反之，如果之前的水管水位偏低，那么又会浪费了系统的处理能力。</p>\n<ul>\n<li>推论二:　当保持入口的流量是水管出来的流量的最大的值的时候，可以最大利用水管的处理能力。</li>\n</ul>\n<p>然而，和 TCP BBR 的不一样的地方在于，还需要用一个系统负载的值（load1）来激发这套机制启动。</p>\n<blockquote>\n<p>这种系统自适应算法对于低 load 的请求，它的效果是一个“兜底”的角色。<code>对于不是应用本身造成的 load 高的情况（如其它进程导致的不稳定的情况），效果不明显</code>。</p>\n</blockquote>\n<h1 id=\"伍、示例\"><a href=\"#伍、示例\" class=\"headerlink\" title=\"伍、示例\"></a>伍、示例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemGuardDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger pass = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger block = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger total = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> seconds = <span class=\"number\">60</span> + <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        tick();</span><br><span class=\"line\">        initSystemRule();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">            Thread entryThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                        Entry entry = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            entry = SphU.entry(<span class=\"string\">&quot;methodA&quot;</span>, EntryType.IN);</span><br><span class=\"line\">                            pass.incrementAndGet();</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (BlockException e1) &#123;</span><br><span class=\"line\">                            block.incrementAndGet();</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e2) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// biz exception</span></span><br><span class=\"line\">                        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                            total.incrementAndGet();</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                entry.exit();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            entryThread.setName(<span class=\"string\">&quot;working-thread&quot;</span>);</span><br><span class=\"line\">            entryThread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initSystemRule</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;SystemRule&gt; rules = <span class=\"keyword\">new</span> ArrayList&lt;SystemRule&gt;();</span><br><span class=\"line\">        SystemRule rule = <span class=\"keyword\">new</span> SystemRule();</span><br><span class=\"line\">        <span class=\"comment\">// max load is 3</span></span><br><span class=\"line\">        rule.setHighestSystemLoad(<span class=\"number\">3.0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// max cpu usage is 60%</span></span><br><span class=\"line\">        rule.setHighestCpuUsage(<span class=\"number\">0.6</span>);</span><br><span class=\"line\">        <span class=\"comment\">// max avg rt of all request is 10 ms</span></span><br><span class=\"line\">        rule.setAvgRt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// max total qps is 20</span></span><br><span class=\"line\">        rule.setQps(<span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"comment\">// max parallel working thread is 10</span></span><br><span class=\"line\">        rule.setMaxThread(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        rules.add(rule);</span><br><span class=\"line\">        SystemRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">tick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread timer = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TimerTask());</span><br><span class=\"line\">        timer.setName(<span class=\"string\">&quot;sentinel-timer-task&quot;</span>);</span><br><span class=\"line\">        timer.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;begin to statistic!!!&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> oldTotal = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> oldPass = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> oldBlock = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stop) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> globalTotal = total.get();</span><br><span class=\"line\">                <span class=\"keyword\">long</span> oneSecondTotal = globalTotal - oldTotal;</span><br><span class=\"line\">                oldTotal = globalTotal;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">long</span> globalPass = pass.get();</span><br><span class=\"line\">                <span class=\"keyword\">long</span> oneSecondPass = globalPass - oldPass;</span><br><span class=\"line\">                oldPass = globalPass;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">long</span> globalBlock = block.get();</span><br><span class=\"line\">                <span class=\"keyword\">long</span> oneSecondBlock = globalBlock - oldBlock;</span><br><span class=\"line\">                oldBlock = globalBlock;</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(seconds + <span class=\"string\">&quot;, &quot;</span> + TimeUtil.currentTimeMillis() + <span class=\"string\">&quot;, total:&quot;</span></span><br><span class=\"line\">                    + oneSecondTotal + <span class=\"string\">&quot;, pass:&quot;</span></span><br><span class=\"line\">                    + oneSecondPass + <span class=\"string\">&quot;, block:&quot;</span> + oneSecondBlock);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (seconds-- &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    stop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>后面的话</strong>】<a href=\"https://github.com/eelve/awesomesentinel\">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","categories":[{"name":"sentinel","path":"api/categories/sentinel.json"}],"tags":[{"name":"sentinel","path":"api/tags/sentinel.json"}]}