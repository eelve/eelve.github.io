{"title":"怎么找回遗失的Github的Contribution","slug":"怎么找回遗失的Github的Contribution","date":"2020-02-29T16:18:06.000Z","updated":"2021-04-19T06:44:39.249Z","comments":true,"path":"api/articles/怎么找回遗失的Github的Contribution.json","excerpt":null,"covers":["https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png"],"content":"<p>【<strong>前面的话</strong>】在日常工作中，一般都会用到版本管理工具git，往往项目组要求的提交信息和Github的提交信息是不一致的，有的时候就可能会出现不可避免的犯错，导致Github的Contribution丢失，进而就在Github中丢失了打卡记录。好在Github提供了解决方法，下面就把官网的方案搬过来。</p>\n<hr>\n<p>首先是官网的原网站：<br><a href=\"https://help.github.com/en/github/using-git/changing-author-info\">Changing author info</a> </p>\n<p>To change the name and/or email address recorded in existing commits, you must rewrite the entire history of your Git repository.</p>\n<hr>\n<p>下面是中文翻译</p>\n<p>1.打开终端（Mac 或 Linux 用户）或命令行（Windows 用户）。</p>\n<p>2.创建一个你的 repo 的全新裸 clone （repo.git 替换为你的项目，下同） </p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --bare &lt;https://github.com/user/repo.git&gt; cd repo.git</span><br></pre></td></tr></table></figure>\n<p>3.复制粘贴脚本，并根据你的信息修改以下变量：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">OLD_EMAIL</span></span><br><span class=\"line\"><span class=\"string\">CORRECT_NAME</span></span><br><span class=\"line\"><span class=\"string\">CORRECT_EMAIL</span></span><br></pre></td></tr></table></figure>\n<p>脚本：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">git filter-branch --env-filter &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">OLD_EMAIL=&quot;your-old-email@example.com&quot;</span><br><span class=\"line\">CORRECT_NAME=&quot;Your Correct Name&quot;</span><br><span class=\"line\">CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span><br><span class=\"line\">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span><br><span class=\"line\">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">&#x27; --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure>\n<p>4.按 Enter 执行脚本。</p>\n<p>5.查看新 Git 历史有没有错误。</p>\n<p>6.把正确历史 push 到 Github：（push 有困难时记得修改 DNS 或者搭梯子） </p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --force --tags origin &#x27;refs/heads/*&#x27;</span><br></pre></td></tr></table></figure>\n<p>7.清除临时 clone。<br> <figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">rm -rf repo.git</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>【<strong>后面的话</strong>】正确合理的设置全局用户名和邮箱，同时针对有特殊要求的项目就可以单独设置。</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name  &quot;name&quot;</span><br><span class=\"line\">git config --global user.name &quot;globalname&quot;</span><br><span class=\"line\">git config user.email  &quot;email&quot;</span><br><span class=\"line\">git config --global user.email  &quot;globalemail&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>同时该操作谨慎在与他人的合作项目中使用，改变作者信息 为改变已经存在的 commit 的用户名和/或邮箱地址，你必须重写你 Git repo 的整个历史。</p>\n<pre><code>警告：这种行为对你的 repo 的历史具有破坏性。如果你的 repo 是与他人协同工作的，重写已发布的历史是一种不好的习惯。仅限紧急情况执行该操作。 使用脚本改变你 repo 的 Git 历史 我们写了一段能把 commit 作者旧的邮箱地址修改为正确用户名和邮箱的脚本。\n\n注意：执行这段脚本会重写 repo 所有协作者的历史。完成以下操作后，任何 fork 或 clone 的人必须获取重写后的历史并把所有本地修改 rebase 入重写后的历史中。\n</code></pre>\n<p>意思就是需要重新拉去代码才能继续进行开发了</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","more":"<p>【<strong>前面的话</strong>】在日常工作中，一般都会用到版本管理工具git，往往项目组要求的提交信息和Github的提交信息是不一致的，有的时候就可能会出现不可避免的犯错，导致Github的Contribution丢失，进而就在Github中丢失了打卡记录。好在Github提供了解决方法，下面就把官网的方案搬过来。</p>\n<hr>\n<p>首先是官网的原网站：<br><a href=\"https://help.github.com/en/github/using-git/changing-author-info\">Changing author info</a> </p>\n<p>To change the name and/or email address recorded in existing commits, you must rewrite the entire history of your Git repository.</p>\n<hr>\n<p>下面是中文翻译</p>\n<p>1.打开终端（Mac 或 Linux 用户）或命令行（Windows 用户）。</p>\n<p>2.创建一个你的 repo 的全新裸 clone （repo.git 替换为你的项目，下同） </p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --bare &lt;https://github.com/user/repo.git&gt; cd repo.git</span><br></pre></td></tr></table></figure>\n<p>3.复制粘贴脚本，并根据你的信息修改以下变量：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">OLD_EMAIL</span></span><br><span class=\"line\"><span class=\"string\">CORRECT_NAME</span></span><br><span class=\"line\"><span class=\"string\">CORRECT_EMAIL</span></span><br></pre></td></tr></table></figure>\n<p>脚本：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">git filter-branch --env-filter &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">OLD_EMAIL=&quot;your-old-email@example.com&quot;</span><br><span class=\"line\">CORRECT_NAME=&quot;Your Correct Name&quot;</span><br><span class=\"line\">CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span><br><span class=\"line\">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span><br><span class=\"line\">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">&#x27; --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure>\n<p>4.按 Enter 执行脚本。</p>\n<p>5.查看新 Git 历史有没有错误。</p>\n<p>6.把正确历史 push 到 Github：（push 有困难时记得修改 DNS 或者搭梯子） </p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --force --tags origin &#x27;refs/heads/*&#x27;</span><br></pre></td></tr></table></figure>\n<p>7.清除临时 clone。<br> <figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">rm -rf repo.git</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>【<strong>后面的话</strong>】正确合理的设置全局用户名和邮箱，同时针对有特殊要求的项目就可以单独设置。</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name  &quot;name&quot;</span><br><span class=\"line\">git config --global user.name &quot;globalname&quot;</span><br><span class=\"line\">git config user.email  &quot;email&quot;</span><br><span class=\"line\">git config --global user.email  &quot;globalemail&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>同时该操作谨慎在与他人的合作项目中使用，改变作者信息 为改变已经存在的 commit 的用户名和/或邮箱地址，你必须重写你 Git repo 的整个历史。</p>\n<pre><code>警告：这种行为对你的 repo 的历史具有破坏性。如果你的 repo 是与他人协同工作的，重写已发布的历史是一种不好的习惯。仅限紧急情况执行该操作。 使用脚本改变你 repo 的 Git 历史 我们写了一段能把 commit 作者旧的邮箱地址修改为正确用户名和邮箱的脚本。\n\n注意：执行这段脚本会重写 repo 所有协作者的历史。完成以下操作后，任何 fork 或 clone 的人必须获取重写后的历史并把所有本地修改 rebase 入重写后的历史中。\n</code></pre>\n<p>意思就是需要重新拉去代码才能继续进行开发了</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","categories":[{"name":"github","path":"api/categories/github.json"}],"tags":[{"name":"github","path":"api/tags/github.json"}]}