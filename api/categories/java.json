{"name":"java","postlist":[{"title":"Tomcat中URI不支持特殊字符解决方案","slug":"Tomcat中URI不支持特殊字符解决方案","date":"2020-06-30T04:17:57.000Z","updated":"2021-04-19T06:44:39.140Z","comments":true,"path":"api/articles/Tomcat中URI不支持特殊字符解决方案.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png","content":"<p>【<strong>前情提要</strong>】最近开发过程中遇到一个<code>Tomcat</code>中<code>IllegalArgumentException</code>的报错，所以在这里记录一下。</p>\n<h1 id=\"壹、错误现象\"><a href=\"#壹、错误现象\" class=\"headerlink\" title=\"壹、错误现象\"></a>壹、错误现象</h1><p>在用Get请求是当URL中包含特殊字符，比如：<code>&lt;</code>、<code>&gt;</code>、<code>(</code>、<code>)</code>、<code>&#123;</code>、<code>&#125;</code>、<code>|</code>等时，Tomcat会报出以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986</span><br><span class=\"line\">    at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:476) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:687) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_161]</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_161]</span><br><span class=\"line\">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:748) [na:1.8.0_161]</span><br></pre></td></tr></table></figure>\n<h1 id=\"贰、故障原因\"><a href=\"#贰、故障原因\" class=\"headerlink\" title=\"贰、故障原因\"></a>贰、故障原因</h1><p>因为Tomcat严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ])。传入的参数中有”{“不在RFC3986中的保留字段中，所以会报参数异常错。而且这个错误你在应用中处理不到，因为根本都还没有进入应用，在Tomcat中就已经报错了，而且就连你在Tomcat中配置错误页面也没有用。</p>\n<h1 id=\"叁、解决方案\"><a href=\"#叁、解决方案\" class=\"headerlink\" title=\"叁、解决方案\"></a>叁、解决方案</h1><h2 id=\"3-1、定义requestTargetAllow属性\"><a href=\"#3-1、定义requestTargetAllow属性\" class=\"headerlink\" title=\"3.1、定义requestTargetAllow属性\"></a>3.1、定义requestTargetAllow属性</h2><p>Tomcat 7.0.76, 8.0.42, 8.5.12 这些版本之后可以定义requestTargetAllow 属性来允许禁止的字符。在tomcat的 catalina.properties文件中添加这一句：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">tomcat.util.http.parser.HttpParser.requestTargetAllow</span>=<span class=\"string\">|&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2、修复server-xml配置文件\"><a href=\"#3-2、修复server-xml配置文件\" class=\"headerlink\" title=\"3.2、修复server.xml配置文件\"></a>3.2、修复server.xml配置文件</h2><p>如果某些版本的Tomcat已经参照<code>3.1</code>中的方法修改之后，还是不生效的话。从官网的文档中我们可以查看到如下提示：tomcat.util.http.parser.HttpParser. requestTargetAllow(This system property is deprecated. Use the relaxedPathChars and relaxedQueryChars attributes of the Connector instead)</p>\n<p>所有我们在Tomcat配置文件中：$CATALINA_HOME/conf/server.xml添加<code>relaxedQueryChars</code>属性添加到Connector元素：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8080&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">&quot;20000&quot;</span> <span class=\"attr\">URIEncoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span> <span class=\"attr\">relaxedQueryChars</span>=<span class=\"string\">&quot;[]|&#123;&#125;^<span class=\"symbol\">&amp;#x5c;</span><span class=\"symbol\">&amp;#x60;</span><span class=\"symbol\">&amp;quot;</span><span class=\"symbol\">&amp;lt;</span><span class=\"symbol\">&amp;gt;</span>&quot;</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3、Springboot修改方法\"><a href=\"#3-3、Springboot修改方法\" class=\"headerlink\" title=\"3.3、Springboot修改方法\"></a>3.3、Springboot修改方法</h2><p>在SpringBootApplication的的main方法中增加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(<span class=\"string\">&quot;tomcat.util.http.parser.HttpParser.requestTargetAllow&quot;</span>,<span class=\"string\">&quot;|&#123;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>另外在Springboot 2.0 之后的版本，可以自定义<code>WebServerFactoryCustomizer</code>，添加特殊字符的支持：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created on 2019/2/18 17:41.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Ethan</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * java.lang.IllegalArgumentException:</span></span><br><span class=\"line\"><span class=\"comment\"> *  Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PortalTomcatWebServerCustomizer</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebServerFactoryCustomizer</span>&lt;<span class=\"title\">TomcatServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(TomcatServletWebServerFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        factory.addConnectorCustomizers(connector -&gt; connector.setAttribute(<span class=\"string\">&quot;relaxedQueryChars&quot;</span>, <span class=\"string\">&quot;&#123;&#125;[]|&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"tomcat","path":"api/tags/tomcat.json"}]},{"title":"用命令将本地jar包导入到本地maven仓库","slug":"用命令将本地jar包导入到本地maven仓库","date":"2019-08-09T09:15:04.000Z","updated":"2021-04-19T06:44:39.261Z","comments":true,"path":"api/articles/用命令将本地jar包导入到本地maven仓库.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/%E5%AF%BC%E5%85%A5jar%E5%8C%85%E7%BB%93%E6%9E%9C-859bee2db9f14a2a8079b449d38e061c.png","content":"<p>【<strong>前情提要</strong>】在日常开发过程中，我们总是不可避免的需要依赖某些不在中央仓库，同时也不在本地仓库中的jar包，这是我们就需要使用命令行将需要导入本地仓库中的jar包导入本地仓库，使得项目依赖本地仓库中的代码。</p>\n<hr>\n<p>例如我们需要将下面pom文件中的jar包引入本地仓库</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.eelve<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>todo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>导入命令</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=D:\\link\\lib\\todo-1.0.jar  -DgroupId=com.eelve -DartifactId=todo -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure>\n<hr>\n<p>命令详解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Dfile：jar包所在本地的具体路径</span><br><span class=\"line\">-DgroupId：项目组织唯一的标识符，实际对应JAVA的包的结构</span><br><span class=\"line\">-DartifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称</span><br><span class=\"line\">-Dversion：版本号</span><br><span class=\"line\">-Dpackaging：打包的类型</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p>结果示例</p>\n<p><img src=\"https://image.eelve.com/eblog/%E5%AF%BC%E5%85%A5jar%E5%8C%85%E7%BB%93%E6%9E%9C-859bee2db9f14a2a8079b449d38e061c.png\" alt=\"导入jar包结果\"></p>\n<hr>\n<p>【小贴士】maven的仓库分类</p>\n<p>在maven中，仓库可以分为：本地仓库、远程仓库。<br>远程仓库可以分为：中央仓库、私服仓库。<br>中央仓库是maven官方指定的仓库，可以理解为“寻找的最后一站”。<br>私服仓库可以是自己建的，也可以是其它主体建的（比如aliyun的maven仓库，jboss的maven仓库等）。<br>私服可以分为：全局应用的私服仓库、应用到项目自身的私服仓库。</p>\n<p>maven寻找得顺序大致可以理解为：<br>1，在本地仓库中寻找，如果没有则进入下一步。<br>2，在全局应用的私服仓库中寻找，如果没有则进入下一步。<br>3，在项目自身的私服仓库中寻找，如果没有则进入下一步。<br>4，在中央仓库中寻找，如果没有则终止寻找。</p>\n<p>补充：<br>1，如果在找寻的过程中，如果发现该仓库有镜像设置，则用镜像的地址代替。<br>2，如果仓库的id设置成“central”，则该配置会覆盖maven默认的中央仓库配置。</p>\n<p>以上，通过实践得来的，可能不全面，仅当参考</p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"maven","path":"api/tags/maven.json"}]},{"title":"Java 8 Stream实践","slug":"Java 8 Stream实践","date":"2019-06-29T06:54:24.000Z","updated":"2021-04-19T06:44:39.275Z","comments":true,"path":"api/articles/Java 8 Stream实践.json","excerpt":null,"keywords":"南国薏米","cover":"https://image.eelve.com/eblog/streamDataSource-df15382b03b24526955b1b14636316dd.png","content":"<p>【<strong>前面的话</strong>】Java中的Stream于1.8版本析出，平时项目中也有用到，今天就系统的来实践一下。下面借用重庆力帆队伍中我个人比较喜欢的球员来操作一波，队员的年龄为了便于展示某些api做了调整，请不要太认真哦。</p>\n<hr>\n<h1 id=\"壹-Stream理解\"><a href=\"#壹-Stream理解\" class=\"headerlink\" title=\"壹. Stream理解\"></a>壹. Stream理解</h1><p>在java中我们称Stream为『<strong>流</strong>』，我们经常会用流去对集合进行一些流水线的操作。stream就像工厂一样，只需要把集合、命令还有一些参数灌输到流水线中去，就可以加工成得出想要的结果。这样的流水线能大大简洁代码，减少操作。给我个人的感觉类似JavaScript中的链式函数。</p>\n<h1 id=\"贰-Stream流程\"><a href=\"#贰-Stream流程\" class=\"headerlink\" title=\"贰. Stream流程\"></a>贰. Stream流程</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原集合 —&gt; 流 —&gt; 各种操作(过滤、分组、统计) —&gt; 终端操作</span><br></pre></td></tr></table></figure>\n<p>Stream流的操作流程一般都是这样的，先将集合转为流，然后经过各种操作，比如过滤、筛选、分组、计算。最后的终端操作，就是转化成我们想要的数据，这个数据的形式一般还是集合，有时也会按照需求输出count计数。下文会一一举例。</p>\n<h1 id=\"叁-API实践\"><a href=\"#叁-API实践\" class=\"headerlink\" title=\"叁. API实践\"></a>叁. API实践</h1><p>首先，定义一个用户对象，包含姓名、年龄、id三个成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.eelve.training.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> User</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TDO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> zhao.zhilue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2019/6/28 15:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(exclude=&#123;&quot;id&quot;,&quot;name&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span>  <span class=\"title\">Comparable</span>&lt;<span class=\"title\">User</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Link name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;name&quot;, columnDefinition = &quot;varchar(255) not null&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column(name = &quot;age&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(User o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age.compareTo(o.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在数据库中插入测试数据，见下图：</p>\n<p><img src=\"https://image.eelve.com/eblog/streamDataSource-df15382b03b24526955b1b14636316dd.png\" alt=\"streamDataSource\"></p>\n<h2 id=\"3-1过滤\"><a href=\"#3-1过滤\" class=\"headerlink\" title=\"3.1过滤\"></a>3.1过滤</h2><h3 id=\"1）filter-过滤-T-gt-boolean\"><a href=\"#1）filter-过滤-T-gt-boolean\" class=\"headerlink\" title=\"1）filter 过滤(T-&gt; boolean)\"></a>1）filter 过滤(T-&gt; boolean)</h3><p>假如我们要实现过滤出40岁以下的队员，我们可以这样来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().filter(user -&gt; user.getAge() &lt;= <span class=\"number\">40</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>filter里面，-&gt;箭头后面跟着的是一个<strong>boolean</strong>值，可以写任何的过滤条件，就相当于sql中where后面的东西，换句话说，能用sql实现的功能这里都可以实现<br>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）distinct-去重\"><a href=\"#2）distinct-去重\" class=\"headerlink\" title=\"2）distinct 去重\"></a>2）distinct 去重</h3><p>其用法和sql中的使用类似，假如我们要实现过去除用重复年龄的队员，我们可以这样来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserDistinct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）sorted排序\"><a href=\"#3）sorted排序\" class=\"headerlink\" title=\"3）sorted排序\"></a>3）sorted排序</h3><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(User o)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> age.compareTo(o.getAge());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSorted</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>反之, 需要调用 sorted((T, T) -&gt; int) 实现 Comparator 接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSortedWithComparator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().sorted(Comparator.comparingInt(User::getAge)).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）limit（）-返回前n个元素\"><a href=\"#4）limit（）-返回前n个元素\" class=\"headerlink\" title=\"4）limit（） 返回前n个元素\"></a>4）limit（） 返回前n个元素</h3><p>如果想知道队伍中年龄最小的就可以使用下面来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）skip\"><a href=\"#5）skip\" class=\"headerlink\" title=\"5）skip\"></a>5）skip</h3><p>它的用法和limit正好相反，是去除前面几个元素。<br>假如我们要去除前面两个元素就可以使用下面的方法来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSkip</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;User&gt; resultList = userList.stream().skip(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6）组合使用\"><a href=\"#6）组合使用\" class=\"headerlink\" title=\"6）组合使用\"></a>6）组合使用</h3><p>以上的过滤函数物品们可以组合来使用来实现我们具体的需求，示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamSortLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       List&lt;User&gt; resultList = userList.stream().sorted().limit(<span class=\"number\">5</span>).collect(Collectors.toList());</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (User user :  resultList)&#123;</span><br><span class=\"line\">           System.out.println(user.toString());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以得到先排序后限制的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)</span><br><span class=\"line\">User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-映射\"><a href=\"#3-2-映射\" class=\"headerlink\" title=\"3.2 映射\"></a>3.2 映射</h2><h3 id=\"1）map-T-gt-R\"><a href=\"#1）map-T-gt-R\" class=\"headerlink\" title=\"1）map(T-&gt;R)\"></a>1）map(T-&gt;R)</h3><p>map是将T类型的数据转为R类型的数据，比如我们想要设置一个新的list，存储用户所有的城市信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        List&lt;Integer&gt; resultList = userList.stream().map(User::getAge).distinct().collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(resultList.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们可以得到所有年龄的样本，执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">43</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）flatMap-T-gt-Stream\"><a href=\"#2）flatMap-T-gt-Stream\" class=\"headerlink\" title=\"2）flatMap(T -&gt; Stream)\"></a>2）flatMap(T -&gt; Stream<R>)</h3><p>将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStreamMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; habitsList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        habitsList.add(<span class=\"string\">&quot;唱歌,听歌&quot;</span>);</span><br><span class=\"line\">        habitsList.add(<span class=\"string\">&quot;羽毛球,足球,登山&quot;</span>);</span><br><span class=\"line\">        habitsList = habitsList.stream().map(s -&gt; s.split(<span class=\"string\">&quot;,&quot;</span>)).flatMap(Arrays::stream).collect(Collectors.toList());</span><br><span class=\"line\">        System.out.println(habitsList);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[唱歌, 听歌, 羽毛球, 足球, 登山]</span><br></pre></td></tr></table></figure>\n<p>这里原集合中的数据由逗号分割，使用split进行拆分后，得到的是Stream&lt;String[]&gt;，字符串数组组成的流，要使用flatMap的<strong>Arrays::stream</strong>，将Stream&lt;String[]&gt;转为Stream<String>,然后把流相连接，组成了完整的唱歌, 听歌, 羽毛球, 足球, 登山。</p>\n<h2 id=\"3-3-查找\"><a href=\"#3-3-查找\" class=\"headerlink\" title=\"3.3 查找\"></a>3.3 查找</h2><h3 id=\"1）allMatch（T-gt-boolean）\"><a href=\"#1）allMatch（T-gt-boolean）\" class=\"headerlink\" title=\"1）allMatch（T-&gt;boolean）\"></a>1）allMatch（T-&gt;boolean）</h3><p>检测是否全部满足参数行为，假如我们要检测是不是所有队员都是U21的球员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamAllMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isNotU21 = userList.stream().allMatch(user -&gt; user.getAge() &gt;= <span class=\"number\">21</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否都不是U21球员：&quot;</span> + isNotU21);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否都不是U21球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2）anyMatch（T-gt-boolean）\"><a href=\"#2）anyMatch（T-gt-boolean）\" class=\"headerlink\" title=\"2）anyMatch（T-&gt;boolean）\"></a>2）anyMatch（T-&gt;boolean）</h3><p>检测是否有任意元素满足给定的条件，比如，想知道是否有26岁的球员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamAnyMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isAgeU26 = userList.stream().anyMatch(user -&gt; user.getAge() == <span class=\"number\">26</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是否有26岁的球员：&quot;</span> + isAgeU26);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否有<span class=\"number\">26</span>岁的球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3）noneMatch-T-gt-boolean\"><a href=\"#3）noneMatch-T-gt-boolean\" class=\"headerlink\" title=\"3）noneMatch(T -&gt; boolean)\"></a>3）noneMatch(T -&gt; boolean)</h3><p>流中是否有元素匹配给定的 T -&gt; boolean 条件。比如我们要检测是否含有U18的队员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserStreamNoneMatch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> isNotU18 = userList.stream().noneMatch(user -&gt; user.getAge() &lt;= <span class=\"number\">18</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;是否都不是U18球员：&quot;</span> + isNotU18);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否都不是U18球员：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<p>说明没有U18的队员。</p>\n<h3 id=\"4）findFirst-找到第一个元素\"><a href=\"#4）findFirst-找到第一个元素\" class=\"headerlink\" title=\"4）findFirst( ):找到第一个元素\"></a>4）findFirst( ):找到第一个元素</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserFindFirst</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; firstUser = userList.stream().sorted().findFirst();</span><br><span class=\"line\">        System.out.println(firstUser.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）findAny-找到任意一个元素\"><a href=\"#5）findAny-找到任意一个元素\" class=\"headerlink\" title=\"5）findAny():找到任意一个元素\"></a>5）findAny():找到任意一个元素</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserFindAny</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; anytUser = userList.parallelStream().sorted().findAny();</span><br><span class=\"line\">        System.out.println(anytUser.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>)]</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-归纳计算\"><a href=\"#3-4-归纳计算\" class=\"headerlink\" title=\"3.4 归纳计算\"></a>3.4 归纳计算</h2><h3 id=\"1）求队员的总人数\"><a href=\"#1）求队员的总人数\" class=\"headerlink\" title=\"1）求队员的总人数\"></a>1）求队员的总人数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> totalAge = userList.stream().collect(Collectors.counting());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;队员人数为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">队员人数为：<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2）得到某一属性的最大最小值\"><a href=\"#2）得到某一属性的最大最小值\" class=\"headerlink\" title=\"2）得到某一属性的最大最小值\"></a>2）得到某一属性的最大最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserMaxAndMin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Optional&lt;User&gt; userMaxAge = userList.stream().collect(Collectors.maxBy(Comparator.comparing(User::getAge)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄最大的队员为：&quot;</span> + userMaxAge.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;User&gt; userMinAge = userList.stream().collect(Collectors.minBy(Comparator.comparing(User::getAge)));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄最小的队员为：&quot;</span> + userMinAge.toString());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄最大的队员为：Optional[User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br><span class=\"line\">年龄最小的队员为：Optional[User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）求年龄总和是多少\"><a href=\"#3）求年龄总和是多少\" class=\"headerlink\" title=\"3）求年龄总和是多少\"></a>3）求年龄总和是多少</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserSummingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalAge = userList.stream().collect(Collectors.summingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄总和为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄总和为：<span class=\"number\">175</span></span><br></pre></td></tr></table></figure>\n<p>我们经常会用BigDecimal来记录金钱，假设想得到BigDecimal的总和：<br>// 获得列表对象金额， 使用reduce聚合函数,实现累加器<br>BigDecimal sum = myList.stream() .map(User::getMoney)<br>.reduce(BigDecimal.ZERO,BigDecimal::add);</p>\n<h3 id=\"4）求年龄平均值\"><a href=\"#4）求年龄平均值\" class=\"headerlink\" title=\"4）求年龄平均值\"></a>4）求年龄平均值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserAveragingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Double totalAge = userList.stream().collect(Collectors.averagingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;平均年龄为：&quot;</span> + totalAge);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">平均年龄为：<span class=\"number\">29.166666666666668</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5）一次性得到元素的个数、总和、最大值、最小值\"><a href=\"#5）一次性得到元素的个数、总和、最大值、最小值\" class=\"headerlink\" title=\"5）一次性得到元素的个数、总和、最大值、最小值\"></a>5）一次性得到元素的个数、总和、最大值、最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserSummarizingInt</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        IntSummaryStatistics  statistics  = userList.stream().collect(Collectors.summarizingInt(User::getAge));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;年龄的统计结果为：&quot;</span> + statistics );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">年龄的统计结果为：IntSummaryStatistics&#123;count=<span class=\"number\">6</span>, sum=<span class=\"number\">175</span>, min=<span class=\"number\">25</span>, average=<span class=\"number\">29.166667</span>, max=<span class=\"number\">43</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6）字符串拼接\"><a href=\"#6）字符串拼接\" class=\"headerlink\" title=\"6）字符串拼接\"></a>6）字符串拼接</h3><p>要将队员的姓名连成一个字符串并用逗号分割。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserJoining</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        String  name  = userList.stream().map(User::getName).collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;所有的队员名字：&quot;</span> + name );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有的队员名字：费尔南多,费尔南迪尼奥,卡尔德克,阿德里安,隋维杰,克鲁伊夫</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5-分组\"><a href=\"#3-5-分组\" class=\"headerlink\" title=\"3.5 分组\"></a>3.5 分组</h2><p>在数据库操作中，我们经常通过GROUP BY关键字对查询到的数据进行分组，java8的流式处理也提供了分组的功能。使用Collectors.groupingBy来进行分组。</p>\n<h3 id=\"1）可以根据队员的年龄进行分组\"><a href=\"#1）可以根据队员的年龄进行分组\" class=\"headerlink\" title=\"1）可以根据队员的年龄进行分组\"></a>1）可以根据队员的年龄进行分组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserGroupingBy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">       Map&lt;Integer, List&lt;User&gt;&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge));</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Map.Entry&lt;Integer,List&lt;User&gt;&gt; entry :ageMap.entrySet())&#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key= <span class=\"number\">25</span> and value= [User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>)]</span><br><span class=\"line\">key= <span class=\"number\">26</span> and value= [User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>), User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)]</span><br><span class=\"line\">key= <span class=\"number\">43</span> and value= [User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br><span class=\"line\">key= <span class=\"number\">27</span> and value= [User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>)]</span><br><span class=\"line\">key= <span class=\"number\">28</span> and value= [User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>)]</span><br></pre></td></tr></table></figure>\n<p>结果是一个map，key为不重复的年龄，value为属于该年龄的队员列表。已经实现了分组。另外我们还可以继续分组得到两次分组的结果。</p>\n<h3 id=\"2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\"><a href=\"#2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\" class=\"headerlink\" title=\"2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list\"></a>2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list</h3><p>按年龄分组并统计人数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserGroupingByCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Map&lt;Integer,Long&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge,Collectors.counting()));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer,Long&gt; entry :ageMap.entrySet())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队员中&quot;</span> + entry.getKey() + <span class=\"string\">&quot;岁的队员人数为：&quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">队员中<span class=\"number\">25</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">26</span>岁的队员人数为：<span class=\"number\">2</span></span><br><span class=\"line\">队员中<span class=\"number\">43</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">27</span>岁的队员人数为：<span class=\"number\">1</span></span><br><span class=\"line\">队员中<span class=\"number\">28</span>岁的队员人数为：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3）partitioningBy-分区\"><a href=\"#3）partitioningBy-分区\" class=\"headerlink\" title=\"3）partitioningBy 分区\"></a>3）partitioningBy 分区</h3><p>分区与分组的区别在于，分区是按照 true 和 false 来分的，因此partitioningBy 接受的参数的 lambda 也是 T -&gt; boolean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUserPartitioningBy</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class=\"line\">        Map&lt;Boolean,List&lt;User&gt;&gt; partitioningByMap  = userList.stream().collect(partitioningBy(user -&gt; user.getAge() &gt;= <span class=\"number\">30</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Boolean,List&lt;User&gt;&gt; entry :partitioningByMap.entrySet())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;key= &quot;</span> + entry.getKey() + <span class=\"string\">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key= <span class=\"keyword\">false</span> and value= [User(id=<span class=\"number\">1</span>, name=费尔南多, age=<span class=\"number\">25</span>), User(id=<span class=\"number\">2</span>, name=费尔南迪尼奥, age=<span class=\"number\">26</span>), User(id=<span class=\"number\">3</span>, name=卡尔德克, age=<span class=\"number\">27</span>), User(id=<span class=\"number\">4</span>, name=阿德里安, age=<span class=\"number\">28</span>), User(id=<span class=\"number\">5</span>, name=隋维杰, age=<span class=\"number\">26</span>)]</span><br><span class=\"line\">key= <span class=\"keyword\">true</span> and value= [User(id=<span class=\"number\">6</span>, name=克鲁伊夫, age=<span class=\"number\">43</span>)]</span><br></pre></td></tr></table></figure>\n<hr>\n<p>【<strong>写在后面的话</strong>】留下stream的类实现的方法和依赖图，前面的实践也只是挑选了几个比较常用的Api。</p>\n<p><img src=\"https://image.eelve.com/eblog/stream-d2e3fe9045e945ce9411d8db6043b32c.png\" alt=\"stream\"></p>\n<hr>\n<p><img src=\"https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png\" alt=\"薏米笔记\"></p>\n","raw":null,"categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"stream","path":"api/tags/stream.json"}]}]}