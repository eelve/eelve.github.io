<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Elastic Stack实战之Beats家族介绍</title>
    <url>/posts/d1a5ff40.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】前面我们已经体验过了Elasticsearch、Logstash和Kibanan，也是就是ELK三大剑客。记得在前文<a href="https://eelve.com/posts/e05eadb0.html">Elastic Stack实战之Logstash初体验</a>中提到过Elastic Stack大家族中增加了一个新的高效率的采集组件，那就是Beats家族，那今天就来了解一下。</p>
<hr>
<h1 id="壹、什么是Beats"><a href="#壹、什么是Beats" class="headerlink" title="壹、什么是Beats"></a>壹、什么是Beats</h1><p><img src="https://image.eelve.com/eblog/illustration-beats-header-overflow-1ba7ff649dbf41598d71ed24d1ade8da.png" alt="illustration-beats-header-overflow"></p>
<p><strong>Beats</strong>是轻量型数据采集器。</p>
<p><strong>Beats</strong>平台集合了多种单一用途数据采集器。它们从成百上千或成千上万台机器和系统向 Logstash 或 Elasticsearch 发送数据。 </p>
<h1 id="贰、Beats系列简介"><a href="#贰、Beats系列简介" class="headerlink" title="贰、Beats系列简介"></a>贰、Beats系列简介</h1><p>全品类采集器，搞定所有数据类型。</p>
<ul>
<li><p><a href="https://www.elastic.co/beats/filebeat">Filebeat</a>：用于采集日志文件</p>
</li>
<li><p><a href="https://www.elastic.co/beats/metricbeat">Metricbeat</a>: 用于采集指标数据</p>
</li>
<li><p><a href="https://www.elastic.co/beats/packetbeat">Packetbeat</a>: 用于采集网络数据</p>
</li>
<li><p><a href="https://www.elastic.co/beats/winlogbeat">Winlogbeat</a>: 用于采集Windows事件</p>
</li>
<li><p><a href="https://www.elastic.co/beats/auditbeat">Auditbeat</a>: 用于采集审计数据</p>
</li>
<li><p><a href="https://www.elastic.co/beats/heartbeat">Heartbeat</a>: 用于采集运行时间监控</p>
</li>
<li><p><a href="https://www.elastic.co/beats/functionbeat">Functionbeat</a>: 是一个无需服务器的采集器</p>
</li>
</ul>
<h1 id="叁、Beats特点"><a href="#叁、Beats特点" class="headerlink" title="叁、Beats特点"></a>叁、Beats特点</h1><ul>
<li>轻量型：Beats 是数据采集的得力工具。将Beats和您的容器一起置于服务器上，或者将Beats作为功能加以部署，然后便可在 Elasticsearch中集中处理数据。Beats能够采集符合 Elastic Common Schema(ECS)要求的数据，如果您希望拥有更加强大的处理能力，Beats能够将数据转发至Logstash进行转换和解析。 </li>
</ul>
<p><img src="https://image.eelve.com/eblog/illustration-beats-lightweight-d6ee1493b6a64579a71fb63e2e95b4ac.svg" alt="illustration-beats-lightweight"></p>
<ul>
<li>即插即用：借助模块加速数据可视化体验。Filebeat 和 Metricbeat 中包含的一些模块能够简化从关键数据源（例如云平台、容器和系统，以及网络技术）采集、解析和可视化信息的过程。只需运行一行命令，即可开始探索。 </li>
</ul>
<p><img src="https://image.eelve.com/eblog/screenshot-beats-modules-8dec132b351e4c6a9835d806e24e520e.jpg" alt="screenshot-beats-modules"></p>
<ul>
<li>从环境中获得洞见：Beats 从您的专属环境中收集日志和指标，然后通过来自主机、诸如 Docker 和 Kubernetes 等容器平台以及云服务提供商的必要元数据对这些内容进行记录，然后再传输到 Elastic Stack 中。从监测容器到从无需服务器的架构传输数据，我们确保您拥有所需的上下文。 </li>
</ul>
<p><img src="https://image.eelve.com/eblog/screenshot-infrastructure-ui-368a637d105b42a4b87d0df2b2158275.png" alt="screenshot-infrastructure-ui"></p>
<ul>
<li>可扩展：缺少某种采集器？别着急。您可以自行构建并分享。每款开源 Beat 都以 libbeat（转发数据时所用的通用库）为基石。需要监控某个专用协议？自行构建。我们将为您提供所需的构建基块。</li>
</ul>
<p><img src="https://image.eelve.com/eblog/illustration-beats-exstensible-555-white-bg-1767d533ca824a5290360eb027eed811.svg" alt="illustration-beats-exstensible-555-white-bg"></p>
<ul>
<li>托管式：Beats 同样能向 Elastic Cloud 输送数据</li>
</ul>
<p><img src="https://image.eelve.com/eblog/illustration-beats-elasticsearch-service-e783d59f07bc406c95c0942484f91c22.svg" alt="illustration-beats-elasticsearch-service"></p>
<hr>
<p>【<strong>后面的话</strong>】本文只是Beats家族的一个介绍，后面还有相关文章进行体验。Beats采集数据之后可以直接给Elasticsearch，也可以经过Logstash过滤处理之后再由Logstash存入Elasticsearch。在后面的文章会做相应的演示的。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Beats</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Beats家族介绍本地版</title>
    <url>/posts/89ab2246.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】前面我们已经体验过了Elasticsearch、Logstash和Kibanan，也是就是ELK三大剑客。记得在前文<a href="https://eelve.com/posts/e05eadb0.html">Elastic Stack实战之Logstash初体验</a>中提到过Elastic Stack大家族中增加了一个新的高效率的采集组件，那就是Beats家族，那今天就来了解一下。</p>
<hr>
<h1 id="壹、什么是Beats"><a href="#壹、什么是Beats" class="headerlink" title="壹、什么是Beats"></a>壹、什么是Beats</h1><p><img src="https://eelve.com/upload/2020/3/illustration-beats-header-overflow-1ba7ff649dbf41598d71ed24d1ade8da.png" alt="illustration-beats-header-overflow"></p>
<p><strong>Beats</strong>是轻量型数据采集器。</p>
<p><strong>Beats</strong>平台集合了多种单一用途数据采集器。它们从成百上千或成千上万台机器和系统向 Logstash 或 Elasticsearch 发送数据。 </p>
<h1 id="贰、Beats系列简介"><a href="#贰、Beats系列简介" class="headerlink" title="贰、Beats系列简介"></a>贰、Beats系列简介</h1><p>全品类采集器，搞定所有数据类型。</p>
<ul>
<li><p><a href="https://www.elastic.co/beats/filebeat">Filebeat</a>：用于采集日志文件</p>
</li>
<li><p><a href="https://www.elastic.co/beats/metricbeat">Metricbeat</a>: 用于采集指标数据</p>
</li>
<li><p><a href="https://www.elastic.co/beats/packetbeat">Packetbeat</a>: 用于采集网络数据</p>
</li>
<li><p><a href="https://www.elastic.co/beats/winlogbeat">Winlogbeat</a>: 用于采集Windows事件</p>
</li>
<li><p><a href="https://www.elastic.co/beats/auditbeat">Auditbeat</a>: 用于采集审计数据</p>
</li>
<li><p><a href="https://www.elastic.co/beats/heartbeat">Heartbeat</a>: 用于采集运行时间监控</p>
</li>
<li><p><a href="https://www.elastic.co/beats/functionbeat">Functionbeat</a>: 是一个无需服务器的采集器</p>
</li>
</ul>
<h1 id="叁、Beats特点"><a href="#叁、Beats特点" class="headerlink" title="叁、Beats特点"></a>叁、Beats特点</h1><ul>
<li>轻量型：Beats 是数据采集的得力工具。将Beats和您的容器一起置于服务器上，或者将Beats作为功能加以部署，然后便可在 Elasticsearch中集中处理数据。Beats能够采集符合 Elastic Common Schema(ECS)要求的数据，如果您希望拥有更加强大的处理能力，Beats能够将数据转发至Logstash进行转换和解析。 </li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/illustration-beats-lightweight-d6ee1493b6a64579a71fb63e2e95b4ac.svg" alt="illustration-beats-lightweight"></p>
<ul>
<li>即插即用：借助模块加速数据可视化体验。Filebeat 和 Metricbeat 中包含的一些模块能够简化从关键数据源（例如云平台、容器和系统，以及网络技术）采集、解析和可视化信息的过程。只需运行一行命令，即可开始探索。 </li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/screenshot-beats-modules-8dec132b351e4c6a9835d806e24e520e.jpg" alt="screenshot-beats-modules"></p>
<ul>
<li>从环境中获得洞见：Beats 从您的专属环境中收集日志和指标，然后通过来自主机、诸如 Docker 和 Kubernetes 等容器平台以及云服务提供商的必要元数据对这些内容进行记录，然后再传输到 Elastic Stack 中。从监测容器到从无需服务器的架构传输数据，我们确保您拥有所需的上下文。 </li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/screenshot-infrastructure-ui-368a637d105b42a4b87d0df2b2158275.png" alt="screenshot-infrastructure-ui"></p>
<ul>
<li>可扩展：缺少某种采集器？别着急。您可以自行构建并分享。每款开源 Beat 都以 libbeat（转发数据时所用的通用库）为基石。需要监控某个专用协议？自行构建。我们将为您提供所需的构建基块。</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/illustration-beats-exstensible-555-white-bg-1767d533ca824a5290360eb027eed811.svg" alt="illustration-beats-exstensible-555-white-bg"></p>
<ul>
<li>托管式：Beats 同样能向 Elastic Cloud 输送数据</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/illustration-beats-elasticsearch-service-e783d59f07bc406c95c0942484f91c22.svg" alt="illustration-beats-elasticsearch-service"></p>
<hr>
<p>【<strong>后面的话</strong>】本文只是Beats家族的一个介绍，后面还有相关文章进行体验。Beats采集数据之后可以直接给Elasticsearch，也可以经过Logstash过滤处理之后再由Logstash存入Elasticsearch。在后面的文章会做相应的演示的。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Elasticsearch初体验(一)本地版</title>
    <url>/posts/f324c167.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】前面已经准备好了服务器环境，今天就来开始安装<a href="https://www.elastic.co/cn/elasticsearch">Elasticsearch</a>然后体验。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br></pre></td></tr></table></figure>
<p>这里说一下，Elasticsearch是依赖Java环境的，elasticsearch-7.6.0要求至少为1.8，官方建议为11.如果你的机器上还没有Java环境的话，记得要先准备环境。当然安装也是非常简单：</p>
<p>1.下载linux版本的jdk</p>
<p>2.解压然后配置环境变量</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">java environment</span></span><br><span class="line">export JAVA_HOME=/usr/jdk</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br></pre></td></tr></table></figure>
<p>3.刷新环境变量，检查结果</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 ~]# source /etc/profile</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 ~]# java -version</span><br><span class="line">java version &quot;1.8.0_211&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_211-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="贰、Elasticsearch安装"><a href="#贰、Elasticsearch安装" class="headerlink" title="贰、Elasticsearch安装"></a>贰、Elasticsearch安装</h1><h2 id="2-1-下载地址"><a href="#2-1-下载地址" class="headerlink" title="2.1 下载地址"></a>2.1 下载地址</h2><h2 id="elasticsearch-7-6-0-linux-x86-64-tar-gz"><a href="#elasticsearch-7-6-0-linux-x86-64-tar-gz" class="headerlink" title="elasticsearch-7.6.0-linux-x86_64.tar.gz"></a><a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.0-linux-x86_64.tar.gz">elasticsearch-7.6.0-linux-x86_64.tar.gz</a></h2><h2 id="2-2-解压elasticsearch-7-6-0-linux-x86-64-tar-gz"><a href="#2-2-解压elasticsearch-7-6-0-linux-x86-64-tar-gz" class="headerlink" title="2.2 解压elasticsearch-7.6.0-linux-x86_64.tar.gz"></a>2.2 解压elasticsearch-7.6.0-linux-x86_64.tar.gz</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf elasticsearch-7.6.0-linux-x86_64.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="2-3-修改elasticsearch配置"><a href="#2-3-修改elasticsearch配置" class="headerlink" title="2.3 修改elasticsearch配置"></a>2.3 修改elasticsearch配置</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 elastic]# cd /usr/elastic/elasticsearch/config/</span><br><span class="line">[root@192 config]# vi elasticsearch.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面给出单机版安装最小配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span> <span class="comment">#节点名字</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="comment">#生产配置为127.0.0.1，测试可以为其他地址</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>] <span class="comment">#初始化master节点</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span>  <span class="comment">#开启跨域</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#开启跨域</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-后台启动"><a href="#2-4-后台启动" class="headerlink" title="2.4 后台启动"></a>2.4 后台启动</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 bin]# ./elasticsearch</span><br><span class="line">[1] 1620</span><br><span class="line">[root@192 bin]# future versions of Elasticsearch will require Java 11; your Java version from [/usr/jdk/jre] does not meet this requirement</span><br><span class="line">[2020-03-01T11:55:38,871][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [node-1] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:174) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125) ~[elasticsearch-cli-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">Caused by: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:105) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:172) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:349) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	... 6 more</span><br><span class="line">uncaught exception in thread [main]</span><br><span class="line">java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:105)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:172)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:349)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161)</span><br><span class="line">	at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125)</span><br><span class="line">	at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92)</span><br><span class="line">For complete error details, refer to the log at /usr/elastic/elasticsearch/logs/eelve.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里说的是elasticsearch不能用root用户启动，这里就需要添加一个用户，然后重新启动</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 bin]# adduser iio</span><br><span class="line">[root@192 bin]# passwd iio</span><br><span class="line">Changing password for user iio.</span><br><span class="line">New password: </span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后更改elasticsearch用户组</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 bin]# chown -R iio:iio /usr/elastic/elasticsearch/</span><br></pre></td></tr></table></figure>
<p>然后就可以启动成功了</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 bin]# su iio</span><br><span class="line">[iio@192 bin]$ ./elasticsearch</span><br><span class="line">future versions of Elasticsearch will require Java 11; your Java version from [/usr/jdk/jre] does not meet this requirement</span><br><span class="line">[2020-03-01T12:03:32,970][INFO ][o.e.e.NodeEnvironment    ] [node-1] using [1] data paths, mounts [[/ (rootfs)]], net usable_space [20.9gb], net total_space [25.9gb], types [rootfs]</span><br><span class="line">[2020-03-01T12:03:32,972][INFO ][o.e.e.NodeEnvironment    ] [node-1] heap size [990.7mb], compressed ordinary object pointers [true]</span><br><span class="line">[2020-03-01T12:03:33,103][INFO ][o.e.n.Node               ] [node-1] node name [node-1], node ID [2IBvVjP0QbeA-FDLFoLFFg], cluster name [eelve]</span><br><span class="line">[2020-03-01T12:03:33,103][INFO ][o.e.n.Node               ] [node-1] version[7.6.0], pid[1952], build[default/tar/7f634e9f44834fbc12724506cc1da681b0c3b1e3/2020-02-06T00:09:00.449973Z], OS[Linux/3.10.0-1062.el7.x86_64/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_211/25.211-b12]</span><br><span class="line">[2020-03-01T12:03:33,103][INFO ][o.e.n.Node               ] [node-1] JVM home [/usr/jdk/jre]</span><br><span class="line">[2020-03-01T12:03:33,104][INFO ][o.e.n.Node               ] [node-1] JVM arguments [-Des.networkaddress.cache.ttl=60, -Des.networkaddress.cache.negative.ttl=10, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dio.netty.allocator.numDirectArenas=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.locale.providers=COMPAT, -Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -Djava.io.tmpdir=/tmp/elasticsearch-5828849950285366888, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -XX:+PrintGCDetails, -XX:+PrintGCDateStamps, -XX:+PrintTenuringDistribution, -XX:+PrintGCApplicationStoppedTime, -Xloggc:logs/gc.log, -XX:+UseGCLogFileRotation, -XX:NumberOfGCLogFiles=32, -XX:GCLogFileSize=64m, -XX:MaxDirectMemorySize=536870912, -Des.path.home=/usr/elastic/elasticsearch, -Des.path.conf=/usr/elastic/elasticsearch/config, -Des.distribution.flavor=default, -Des.distribution.type=tar, -Des.bundled_jdk=true]</span><br><span class="line">[2020-03-01T12:03:34,656][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [aggs-matrix-stats]</span><br><span class="line">[2020-03-01T12:03:34,656][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [analysis-common]</span><br><span class="line">[2020-03-01T12:03:34,656][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [flattened]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [frozen-indices]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [ingest-common]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [ingest-geoip]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [ingest-user-agent]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [lang-expression]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [lang-mustache]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [lang-painless]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [mapper-extras]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [parent-join]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [percolator]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [rank-eval]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [reindex]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [repository-url]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [search-business-rules]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [spatial]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [transform]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [transport-netty4]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [vectors]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-analytics]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-ccr]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-core]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-deprecation]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-enrich]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-graph]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-ilm]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-logstash]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-ml]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-monitoring]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-rollup]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-security]</span><br><span class="line">[2020-03-01T12:03:34,662][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-sql]</span><br><span class="line">[2020-03-01T12:03:34,662][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-voting-only-node]</span><br><span class="line">[2020-03-01T12:03:34,662][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-watcher]</span><br><span class="line">[2020-03-01T12:03:34,662][INFO ][o.e.p.PluginsService     ] [node-1] no plugins loaded</span><br><span class="line">[2020-03-01T12:03:37,968][INFO ][o.e.x.s.a.s.FileRolesStore] [node-1] parsed [0] roles from file [/usr/elastic/elasticsearch/config/roles.yml]</span><br><span class="line">[2020-03-01T12:03:38,382][INFO ][o.e.x.m.p.l.CppLogMessageHandler] [node-1] [controller/2044] [Main.cc@110] controller (64 bit): Version 7.6.0 (Build 1c8cca13fa9631) Copyright (c) 2020 Elasticsearch BV</span><br><span class="line">[2020-03-01T12:03:38,870][DEBUG][o.e.a.ActionModule       ] [node-1] Using REST wrapper from plugin org.elasticsearch.xpack.security.Security</span><br><span class="line">[2020-03-01T12:03:38,999][INFO ][o.e.d.DiscoveryModule    ] [node-1] using discovery type [zen] and seed hosts providers [settings]</span><br><span class="line">[2020-03-01T12:03:39,805][INFO ][o.e.n.Node               ] [node-1] initialized</span><br><span class="line">[2020-03-01T12:03:39,805][INFO ][o.e.n.Node               ] [node-1] starting ...</span><br><span class="line">[2020-03-01T12:03:39,954][INFO ][o.e.t.TransportService   ] [node-1] publish_address &#123;192.168.237.11:9300&#125;, bound_addresses &#123;[::]:9300&#125;</span><br><span class="line">[2020-03-01T12:03:40,352][INFO ][o.e.b.BootstrapChecks    ] [node-1] bound or publishing to a non-loopback address, enforcing bootstrap checks</span><br><span class="line">[2020-03-01T12:03:40,380][INFO ][o.e.c.c.Coordinator      ] [node-1] cluster UUID [PKv57dWOS5OAazrBgqoLcQ]</span><br><span class="line">[2020-03-01T12:03:40,565][INFO ][o.e.c.s.MasterService    ] [node-1] elected-as-master ([1] nodes joined)[&#123;node-1&#125;&#123;2IBvVjP0QbeA-FDLFoLFFg&#125;&#123;kGzTwK3ZRLGujF_9zhpR9A&#125;&#123;192.168.237.11&#125;&#123;192.168.237.11:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=3954036736, xpack.installed=true, ml.max_open_jobs=20&#125; elect leader, _BECOME_MASTER_TASK_, _FINISH_ELECTION_], term: 9, version: 279, delta: master node changed &#123;previous [], current [&#123;node-1&#125;&#123;2IBvVjP0QbeA-FDLFoLFFg&#125;&#123;kGzTwK3ZRLGujF_9zhpR9A&#125;&#123;192.168.237.11&#125;&#123;192.168.237.11:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=3954036736, xpack.installed=true, ml.max_open_jobs=20&#125;]&#125;</span><br><span class="line">[2020-03-01T12:03:40,674][INFO ][o.e.c.s.ClusterApplierService] [node-1] master node changed &#123;previous [], current [&#123;node-1&#125;&#123;2IBvVjP0QbeA-FDLFoLFFg&#125;&#123;kGzTwK3ZRLGujF_9zhpR9A&#125;&#123;192.168.237.11&#125;&#123;192.168.237.11:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=3954036736, xpack.installed=true, ml.max_open_jobs=20&#125;]&#125;, term: 9, version: 279, reason: Publication&#123;term=9, version=279&#125;</span><br><span class="line">[2020-03-01T12:03:40,741][INFO ][o.e.h.AbstractHttpServerTransport] [node-1] publish_address &#123;192.168.237.11:9200&#125;, bound_addresses &#123;[::]:9200&#125;</span><br><span class="line">[2020-03-01T12:03:40,741][INFO ][o.e.n.Node               ] [node-1] started</span><br><span class="line">[2020-03-01T12:03:41,213][INFO ][o.e.l.LicenseService     ] [node-1] license [b7ab8f1c-3e13-45f0-a4d2-6f5f31a554a1] mode [basic] - valid</span><br><span class="line">[2020-03-01T12:03:41,214][INFO ][o.e.x.s.s.SecurityStatusChangeListener] [node-1] Active license is now [BASIC]; Security is disabled</span><br><span class="line">[2020-03-01T12:03:41,220][INFO ][o.e.g.GatewayService     ] [node-1] recovered [9] indices into cluster_state</span><br><span class="line">[2020-03-01T12:03:42,116][INFO ][o.e.c.r.a.AllocationService] [node-1] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[metricbeat-7.6.0][0]]]).</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里说明一下，有可能会碰到内存不足，因为elasticsearch的<strong>jvm.options</strong>中配置的内存参数为1g，如果你的虚拟机给的内存不够就会出问题<br>修改<strong>jvm.options</strong>中的虚拟机参数为合适的参数，然后就可以启动成功了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">-Xms1g</span></span><br><span class="line"><span class="string">-Xmx1g</span></span><br></pre></td></tr></table></figure>
<p>这里还需要修改liunx的环境配置参数，避免重新启动的时候报错：<br>vi 编辑 /etc/security/limits.conf，在末尾加上：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">*</span> <span class="string">soft</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="string">*</span> <span class="string">hard</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="string">*</span> <span class="string">soft</span> <span class="string">nproc</span> <span class="number">32000</span></span><br><span class="line"><span class="string">*</span> <span class="string">hard</span> <span class="string">nproc</span> <span class="number">32000</span></span><br><span class="line"><span class="string">*</span> <span class="string">hard</span> <span class="string">memlock</span> <span class="string">unlimited</span></span><br><span class="line"><span class="string">*</span> <span class="string">soft</span> <span class="string">memlock</span> <span class="string">unlimited</span></span><br></pre></td></tr></table></figure>
<p>vi 编辑 /etc/sysctl.conf，在末尾加上：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">vm.max_map_count=655360</span></span><br></pre></td></tr></table></figure>
<p>然后刷新配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@192</span> <span class="string">bin</span>]<span class="comment"># sysctl -p</span></span><br><span class="line"><span class="string">kernel.printk</span> <span class="string">=</span> <span class="number">5</span></span><br><span class="line"><span class="string">vm.max_map_count</span> <span class="string">=</span> <span class="number">655360</span></span><br><span class="line">[<span class="string">root@192</span> <span class="string">bin</span>]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再次启动，然后检查</p>
<p><img src="https://eelve.com/upload/2020/3/2020010301-5b565f99650d4acbb3ba464408dca641.png" alt="2020010301"><br><img src="https://eelve.com/upload/2020/3/2020030102-ff4ef388edeb4bb1b88ddf45df96543f.png" alt="2020030102"></p>
<hr>
<p>【<strong>后面的话</strong>】<br>后台启动</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./elasticsearch -d</span><br></pre></td></tr></table></figure>
<p>查看进程,这里的常用的命令可能不好使，我们可以使用下面的命令查找进程</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ jps</span><br><span class="line">2294 Jps</span><br><span class="line">2135 Elasticsearch</span><br><span class="line">[iio@192 bin]$ kill -9 2135</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Elasticsearch初体验(三)</title>
    <url>/posts/46949ae6.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】书接上文<a href="https://eelve.com/posts/975621af.html">Elastic Stack实践之Elasticsearch使用(一)</a>。</p>
<hr>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Elasticsearch初体验(一)</title>
    <url>/posts/975621af.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】前面已经准备好了服务器环境，今天就来开始安装<a href="https://www.elastic.co/cn/elasticsearch">Elasticsearch</a>然后体验。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br></pre></td></tr></table></figure>
<p>这里说一下，Elasticsearch是依赖Java环境的，elasticsearch-7.6.0要求至少为1.8，官方建议为11.如果你的机器上还没有Java环境的话，记得要先准备环境。当然安装也是非常简单：</p>
<p>1.下载linux版本的jdk</p>
<p>2.解压然后配置环境变量</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">java environment</span></span><br><span class="line">export JAVA_HOME=/usr/jdk</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br></pre></td></tr></table></figure>
<p>3.刷新环境变量，检查结果</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 ~]# source /etc/profile</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 ~]# java -version</span><br><span class="line">java version &quot;1.8.0_211&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_211-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="贰、Elasticsearch安装"><a href="#贰、Elasticsearch安装" class="headerlink" title="贰、Elasticsearch安装"></a>贰、Elasticsearch安装</h1><h2 id="2-1-下载地址"><a href="#2-1-下载地址" class="headerlink" title="2.1 下载地址"></a>2.1 下载地址</h2><h2 id="elasticsearch-7-6-0-linux-x86-64-tar-gz"><a href="#elasticsearch-7-6-0-linux-x86-64-tar-gz" class="headerlink" title="elasticsearch-7.6.0-linux-x86_64.tar.gz"></a><a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.0-linux-x86_64.tar.gz">elasticsearch-7.6.0-linux-x86_64.tar.gz</a></h2><h2 id="2-2-解压elasticsearch-7-6-0-linux-x86-64-tar-gz"><a href="#2-2-解压elasticsearch-7-6-0-linux-x86-64-tar-gz" class="headerlink" title="2.2 解压elasticsearch-7.6.0-linux-x86_64.tar.gz"></a>2.2 解压elasticsearch-7.6.0-linux-x86_64.tar.gz</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf elasticsearch-7.6.0-linux-x86_64.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="2-3-修改elasticsearch配置"><a href="#2-3-修改elasticsearch配置" class="headerlink" title="2.3 修改elasticsearch配置"></a>2.3 修改elasticsearch配置</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 elastic]# cd /usr/elastic/elasticsearch/config/</span><br><span class="line">[root@192 config]# vi elasticsearch.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面给出单机版安装最小配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span> <span class="comment">#节点名字</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="comment">#生产配置为127.0.0.1，测试可以为其他地址</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>] <span class="comment">#初始化master节点</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span>  <span class="comment">#开启跨域</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#开启跨域</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-后台启动"><a href="#2-4-后台启动" class="headerlink" title="2.4 后台启动"></a>2.4 后台启动</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 bin]# ./elasticsearch</span><br><span class="line">[1] 1620</span><br><span class="line">[root@192 bin]# future versions of Elasticsearch will require Java 11; your Java version from [/usr/jdk/jre] does not meet this requirement</span><br><span class="line">[2020-03-01T11:55:38,871][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [node-1] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:174) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125) ~[elasticsearch-cli-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">Caused by: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:105) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:172) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:349) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170) ~[elasticsearch-7.6.0.jar:7.6.0]</span><br><span class="line">	... 6 more</span><br><span class="line">uncaught exception in thread [main]</span><br><span class="line">java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:105)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:172)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:349)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161)</span><br><span class="line">	at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125)</span><br><span class="line">	at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92)</span><br><span class="line">For complete error details, refer to the log at /usr/elastic/elasticsearch/logs/eelve.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里说的是elasticsearch不能用root用户启动，这里就需要添加一个用户，然后重新启动</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 bin]# adduser iio</span><br><span class="line">[root@192 bin]# passwd iio</span><br><span class="line">Changing password for user iio.</span><br><span class="line">New password: </span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后更改elasticsearch用户组</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 bin]# chown -R iio:iio /usr/elastic/elasticsearch/</span><br></pre></td></tr></table></figure>
<p>然后就可以启动成功了</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 bin]# su iio</span><br><span class="line">[iio@192 bin]$ ./elasticsearch</span><br><span class="line">future versions of Elasticsearch will require Java 11; your Java version from [/usr/jdk/jre] does not meet this requirement</span><br><span class="line">[2020-03-01T12:03:32,970][INFO ][o.e.e.NodeEnvironment    ] [node-1] using [1] data paths, mounts [[/ (rootfs)]], net usable_space [20.9gb], net total_space [25.9gb], types [rootfs]</span><br><span class="line">[2020-03-01T12:03:32,972][INFO ][o.e.e.NodeEnvironment    ] [node-1] heap size [990.7mb], compressed ordinary object pointers [true]</span><br><span class="line">[2020-03-01T12:03:33,103][INFO ][o.e.n.Node               ] [node-1] node name [node-1], node ID [2IBvVjP0QbeA-FDLFoLFFg], cluster name [eelve]</span><br><span class="line">[2020-03-01T12:03:33,103][INFO ][o.e.n.Node               ] [node-1] version[7.6.0], pid[1952], build[default/tar/7f634e9f44834fbc12724506cc1da681b0c3b1e3/2020-02-06T00:09:00.449973Z], OS[Linux/3.10.0-1062.el7.x86_64/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_211/25.211-b12]</span><br><span class="line">[2020-03-01T12:03:33,103][INFO ][o.e.n.Node               ] [node-1] JVM home [/usr/jdk/jre]</span><br><span class="line">[2020-03-01T12:03:33,104][INFO ][o.e.n.Node               ] [node-1] JVM arguments [-Des.networkaddress.cache.ttl=60, -Des.networkaddress.cache.negative.ttl=10, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dio.netty.allocator.numDirectArenas=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.locale.providers=COMPAT, -Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -Djava.io.tmpdir=/tmp/elasticsearch-5828849950285366888, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -XX:+PrintGCDetails, -XX:+PrintGCDateStamps, -XX:+PrintTenuringDistribution, -XX:+PrintGCApplicationStoppedTime, -Xloggc:logs/gc.log, -XX:+UseGCLogFileRotation, -XX:NumberOfGCLogFiles=32, -XX:GCLogFileSize=64m, -XX:MaxDirectMemorySize=536870912, -Des.path.home=/usr/elastic/elasticsearch, -Des.path.conf=/usr/elastic/elasticsearch/config, -Des.distribution.flavor=default, -Des.distribution.type=tar, -Des.bundled_jdk=true]</span><br><span class="line">[2020-03-01T12:03:34,656][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [aggs-matrix-stats]</span><br><span class="line">[2020-03-01T12:03:34,656][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [analysis-common]</span><br><span class="line">[2020-03-01T12:03:34,656][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [flattened]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [frozen-indices]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [ingest-common]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [ingest-geoip]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [ingest-user-agent]</span><br><span class="line">[2020-03-01T12:03:34,657][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [lang-expression]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [lang-mustache]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [lang-painless]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [mapper-extras]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [parent-join]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [percolator]</span><br><span class="line">[2020-03-01T12:03:34,658][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [rank-eval]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [reindex]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [repository-url]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [search-business-rules]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [spatial]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [transform]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [transport-netty4]</span><br><span class="line">[2020-03-01T12:03:34,659][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [vectors]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-analytics]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-ccr]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-core]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-deprecation]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-enrich]</span><br><span class="line">[2020-03-01T12:03:34,660][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-graph]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-ilm]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-logstash]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-ml]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-monitoring]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-rollup]</span><br><span class="line">[2020-03-01T12:03:34,661][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-security]</span><br><span class="line">[2020-03-01T12:03:34,662][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-sql]</span><br><span class="line">[2020-03-01T12:03:34,662][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-voting-only-node]</span><br><span class="line">[2020-03-01T12:03:34,662][INFO ][o.e.p.PluginsService     ] [node-1] loaded module [x-pack-watcher]</span><br><span class="line">[2020-03-01T12:03:34,662][INFO ][o.e.p.PluginsService     ] [node-1] no plugins loaded</span><br><span class="line">[2020-03-01T12:03:37,968][INFO ][o.e.x.s.a.s.FileRolesStore] [node-1] parsed [0] roles from file [/usr/elastic/elasticsearch/config/roles.yml]</span><br><span class="line">[2020-03-01T12:03:38,382][INFO ][o.e.x.m.p.l.CppLogMessageHandler] [node-1] [controller/2044] [Main.cc@110] controller (64 bit): Version 7.6.0 (Build 1c8cca13fa9631) Copyright (c) 2020 Elasticsearch BV</span><br><span class="line">[2020-03-01T12:03:38,870][DEBUG][o.e.a.ActionModule       ] [node-1] Using REST wrapper from plugin org.elasticsearch.xpack.security.Security</span><br><span class="line">[2020-03-01T12:03:38,999][INFO ][o.e.d.DiscoveryModule    ] [node-1] using discovery type [zen] and seed hosts providers [settings]</span><br><span class="line">[2020-03-01T12:03:39,805][INFO ][o.e.n.Node               ] [node-1] initialized</span><br><span class="line">[2020-03-01T12:03:39,805][INFO ][o.e.n.Node               ] [node-1] starting ...</span><br><span class="line">[2020-03-01T12:03:39,954][INFO ][o.e.t.TransportService   ] [node-1] publish_address &#123;192.168.237.11:9300&#125;, bound_addresses &#123;[::]:9300&#125;</span><br><span class="line">[2020-03-01T12:03:40,352][INFO ][o.e.b.BootstrapChecks    ] [node-1] bound or publishing to a non-loopback address, enforcing bootstrap checks</span><br><span class="line">[2020-03-01T12:03:40,380][INFO ][o.e.c.c.Coordinator      ] [node-1] cluster UUID [PKv57dWOS5OAazrBgqoLcQ]</span><br><span class="line">[2020-03-01T12:03:40,565][INFO ][o.e.c.s.MasterService    ] [node-1] elected-as-master ([1] nodes joined)[&#123;node-1&#125;&#123;2IBvVjP0QbeA-FDLFoLFFg&#125;&#123;kGzTwK3ZRLGujF_9zhpR9A&#125;&#123;192.168.237.11&#125;&#123;192.168.237.11:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=3954036736, xpack.installed=true, ml.max_open_jobs=20&#125; elect leader, _BECOME_MASTER_TASK_, _FINISH_ELECTION_], term: 9, version: 279, delta: master node changed &#123;previous [], current [&#123;node-1&#125;&#123;2IBvVjP0QbeA-FDLFoLFFg&#125;&#123;kGzTwK3ZRLGujF_9zhpR9A&#125;&#123;192.168.237.11&#125;&#123;192.168.237.11:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=3954036736, xpack.installed=true, ml.max_open_jobs=20&#125;]&#125;</span><br><span class="line">[2020-03-01T12:03:40,674][INFO ][o.e.c.s.ClusterApplierService] [node-1] master node changed &#123;previous [], current [&#123;node-1&#125;&#123;2IBvVjP0QbeA-FDLFoLFFg&#125;&#123;kGzTwK3ZRLGujF_9zhpR9A&#125;&#123;192.168.237.11&#125;&#123;192.168.237.11:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=3954036736, xpack.installed=true, ml.max_open_jobs=20&#125;]&#125;, term: 9, version: 279, reason: Publication&#123;term=9, version=279&#125;</span><br><span class="line">[2020-03-01T12:03:40,741][INFO ][o.e.h.AbstractHttpServerTransport] [node-1] publish_address &#123;192.168.237.11:9200&#125;, bound_addresses &#123;[::]:9200&#125;</span><br><span class="line">[2020-03-01T12:03:40,741][INFO ][o.e.n.Node               ] [node-1] started</span><br><span class="line">[2020-03-01T12:03:41,213][INFO ][o.e.l.LicenseService     ] [node-1] license [b7ab8f1c-3e13-45f0-a4d2-6f5f31a554a1] mode [basic] - valid</span><br><span class="line">[2020-03-01T12:03:41,214][INFO ][o.e.x.s.s.SecurityStatusChangeListener] [node-1] Active license is now [BASIC]; Security is disabled</span><br><span class="line">[2020-03-01T12:03:41,220][INFO ][o.e.g.GatewayService     ] [node-1] recovered [9] indices into cluster_state</span><br><span class="line">[2020-03-01T12:03:42,116][INFO ][o.e.c.r.a.AllocationService] [node-1] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[metricbeat-7.6.0][0]]]).</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里说明一下，有可能会碰到内存不足，因为elasticsearch的<strong>jvm.options</strong>中配置的内存参数为1g，如果你的虚拟机给的内存不够就会出问题<br>修改<strong>jvm.options</strong>中的虚拟机参数为合适的参数，然后就可以启动成功了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">-Xms1g</span></span><br><span class="line"><span class="string">-Xmx1g</span></span><br></pre></td></tr></table></figure>
<p>这里还需要修改liunx的环境配置参数，避免重新启动的时候报错：<br>vi 编辑 /etc/security/limits.conf，在末尾加上：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">*</span> <span class="string">soft</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="string">*</span> <span class="string">hard</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="string">*</span> <span class="string">soft</span> <span class="string">nproc</span> <span class="number">32000</span></span><br><span class="line"><span class="string">*</span> <span class="string">hard</span> <span class="string">nproc</span> <span class="number">32000</span></span><br><span class="line"><span class="string">*</span> <span class="string">hard</span> <span class="string">memlock</span> <span class="string">unlimited</span></span><br><span class="line"><span class="string">*</span> <span class="string">soft</span> <span class="string">memlock</span> <span class="string">unlimited</span></span><br></pre></td></tr></table></figure>
<p>vi 编辑 /etc/sysctl.conf，在末尾加上：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">vm.max_map_count=655360</span></span><br></pre></td></tr></table></figure>
<p>然后刷新配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@192</span> <span class="string">bin</span>]<span class="comment"># sysctl -p</span></span><br><span class="line"><span class="string">kernel.printk</span> <span class="string">=</span> <span class="number">5</span></span><br><span class="line"><span class="string">vm.max_map_count</span> <span class="string">=</span> <span class="number">655360</span></span><br><span class="line">[<span class="string">root@192</span> <span class="string">bin</span>]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再次启动，然后检查</p>
<p><img src="https://image.eelve.com/eblog/2020010301-5b565f99650d4acbb3ba464408dca641.png" alt="2020010301"><br><img src="https://image.eelve.com/eblog/2020030102-ff4ef388edeb4bb1b88ddf45df96543f.png" alt="2020030102"></p>
<hr>
<p>【<strong>后面的话</strong>】<br>后台启动</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./elasticsearch -d</span><br></pre></td></tr></table></figure>
<p>查看进程,这里的常用的命令可能不好使，我们可以使用下面的命令查找进程</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ jps</span><br><span class="line">2294 Jps</span><br><span class="line">2135 Elasticsearch</span><br><span class="line">[iio@192 bin]$ kill -9 2135</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Elasticsearch初体验(二)</title>
    <url>/posts/3867bacd.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】前面我们已经安装好了Elasticsearch，现在我们就来尝试简单的使用。</p>
<hr>
<h1 id="壹、Elasticsearch介绍"><a href="#壹、Elasticsearch介绍" class="headerlink" title="壹、Elasticsearch介绍"></a>壹、Elasticsearch介绍</h1><p><img src="https://image.eelve.com/eblog/2020010303-6acab887ee4441b488ee408c30359ab5.png" alt="2020010303"></p>
<p>Elasticsearch是整个<strong>Elastic Stack</strong>的核心。</p>
<p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p>
<p>通过 Elasticsearch，您能够执行及合并多种类型的搜索（结构化数据、非结构化数据、地理位置、指标），搜索方式随心而变。先从一个简单的问题出发，试试看能够从中发现些什么。找到与查询最匹配的 10 个文档是一回事。但如果面对的是十亿行日志，又该如何解读呢？Elasticsearch 聚合让您能够从大处着眼，探索数据的趋势和模式。</p>
<h1 id="贰、插件安装"><a href="#贰、插件安装" class="headerlink" title="贰、插件安装"></a>贰、插件安装</h1><p>由于ES官方并没有为ES提供界面管理工具，仅仅是提供了后台的服务。elasticsearch-head是一个为ES开发的一个页面客户端工具，其源码托管于GitHub，地址为：<br><a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a>。<br>安装方法也比较多：</p>
<pre><code>1.源码安装，通过npm run start启动
2.通过docker安装
3.通过chrome插件安装
4.通过ES的plugin方式安装
</code></pre>
<p>我这边就通过chrome插件的方式安装，在应用商店中搜索，然后安装即可，安装成功之后打开你会得到下面的页面</p>
<p><img src="https://image.eelve.com/eblog/2020030106-e64fe73ddd004fb1bd87885b30563d48.png" alt="2020030106"></p>
<p>然后连接集群，就可以进行操作了</p>
<p><img src="https://image.eelve.com/eblog/2020030107-079a29b224d14779999957304c279291.png" alt="2020030107"></p>
<pre><code>集群健康值
1.绿色：代表集群所有分片和副本都可用
2.黄色：代表集群中不是所有副本都可用，但是分片都可以用
3.红色： 代表集群中不是所有分片都可用
</code></pre>
<p>另外我的集群中出现了<strong>Unassigned</strong>，是因为我搭建的是单机版，而Elasticsearch默认会创建1个副本。</p>
<h1 id="叁、简单使用"><a href="#叁、简单使用" class="headerlink" title="叁、简单使用"></a>叁、简单使用</h1><h2 id="3-1-基本概念"><a href="#3-1-基本概念" class="headerlink" title="3.1 基本概念"></a>3.1 基本概念</h2><p><strong>索引</strong></p>
<pre><code>索引（index）是Elasticsearch对逻辑数据的逻辑存储，所以它可以分为更小的部分。

可以把索引看成关系型数据库的表，索引的结构是为快速有效的全文索引准备的，特别是它不存储原始值。

Elasticsearch可以把索引存放在一台机器或者分散在多台服务器上，每个索引有一或多个分片（shard），每个
分片可以有多个副本（replica）。
</code></pre>
<p><strong>文档</strong></p>
<pre><code>存储在Elasticsearch中的主要实体叫文档（document）。用关系型数据库来类比的话，一个文档相当于数据库
表中的一行记录。

Elasticsearch和MongoDB中的文档类似，都可以有不同的结构，但Elasticsearch的文档中，相同字段必须有相
同类型。

文档由多个字段组成，每个字段可能多次出现在一个文档里，这样的字段叫多值字段（multivalued）。
每个字段的类型，可以是文本、数值、日期等。字段类型也可以是复杂类型，一个字段包含其他子文档或者数
组。
</code></pre>
<p><strong>映射</strong></p>
<pre><code>所有文档写进索引之前都会先进行分析，如何将输入的文本分割为词条、哪些词条又会被过滤，这种行为叫做
映射（mapping）。一般由用户自己定义规则。
</code></pre>
<p><strong>文档类型</strong></p>
<pre><code>在Elasticsearch中，一个索引对象可以存储很多不同用途的对象。例如，一个博客应用程序可以保存文章和评
论。

每个文档可以有不同的结构。

不同的文档类型不能为相同的属性设置不同的类型。例如，在同一索引中的所有文档类型中，一个叫title的字段
必须具有相同的类型。
</code></pre>
<h2 id="3-2-RESTful-API"><a href="#3-2-RESTful-API" class="headerlink" title="3.2 RESTful API"></a>3.2 RESTful API</h2><pre><code>在Elasticsearch中，提供了功能丰富的RESTful API的操作，包括基本的CRUD、创建索引、删除索引等操作。
</code></pre>
<p>下面我就通过Postman来演示一遍</p>
<h3 id="3-2-1-创建非结构化索引"><a href="#3-2-1-创建非结构化索引" class="headerlink" title="3.2.1 创建非结构化索引"></a>3.2.1 创建非结构化索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建索引</span><br><span class="line">PUT &#x2F;eelve</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;2&quot;, #分片数</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;0&quot; #副本数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2020030108-491386349bf145df999db01f96dca5b7.png" alt="2020030108"><br><img src="https://image.eelve.com/eblog/2020030109-e2e0dbf0610e4c9e815507b3e08824e6.png" alt="2020030109"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#删除索引</span><br><span class="line">DELETE &#x2F;eelve</span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2020030110-0d0eae2e25ec4788b038d3066e0a34df.png" alt="2020030110"></p>
<h3 id="3-2-2-插入数据"><a href="#3-2-2-插入数据" class="headerlink" title="3.2.2 插入数据"></a>3.2.2 插入数据</h3><pre><code>URL规则：
POST /&#123;索引&#125;/&#123;类型&#125;/&#123;id&#125;
</code></pre>
<p>1、带id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;eelve&#x2F;user&#x2F;1001</span><br><span class="line">#数据</span><br><span class="line">&#123;</span><br><span class="line">	&quot;id&quot;:1001,</span><br><span class="line">	&quot;name&quot;:&quot;leo&quot;,</span><br><span class="line">	&quot;age&quot;:26,</span><br><span class="line">	&quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2020030111-8901ba31e0c841ea9f19b3b3fbf47745.png" alt="2020030111"><br><img src="https://image.eelve.com/eblog/2020030112-3b009a1840754659a01ff665fe545de8.png" alt="2020030112"></p>
<p>2、不带id </p>
<p><img src="https://image.eelve.com/eblog/2020030113-48589935a2ce456491006d43f0001194.png" alt="2020030113"><br><img src="https://image.eelve.com/eblog/2020030114-b2119fc6b17f46b998b9b1aed9be3481.png" alt="2020030114"></p>
<h3 id="3-2-3-更新数据"><a href="#3-2-3-更新数据" class="headerlink" title="3.2.3 更新数据"></a>3.2.3 更新数据</h3><pre><code>在Elasticsearch中，文档数据是不为修改的，但是可以通过覆盖的方式进行更新。
</code></pre>
<p>1、全部修改</p>
<p><img src="https://image.eelve.com/eblog/2020030115-40f1443a848f42d7bf0b1e4a7895315b.png" alt="2020030115"><br><img src="https://image.eelve.com/eblog/2020030116-a6d802f5b1d040088d02bcd97ed58840.png" alt="2020030116"></p>
<p>2、部分修改</p>
<p><img src="https://image.eelve.com/eblog/2020030117-7f32be33ca2b4f2796884f595f31c118.png" alt="2020030117"><br><img src="https://image.eelve.com/eblog/2020030118-69d2588cf500407c87744222d1b9f58a.png" alt="2020030118"></p>
<p>可以看到局部更新成功</p>
<h3 id="3-2-4-删除数据"><a href="#3-2-4-删除数据" class="headerlink" title="3.2.4 删除数据"></a>3.2.4 删除数据</h3><p><img src="https://image.eelve.com/eblog/2020030120-cf3c2d9526e94c559da3122114a23bea.png" alt="2020030120"><br><img src="https://image.eelve.com/eblog/2020030121-e5026bfd578247b585b0d1aa9f4f43e9.png" alt="2020030121"></p>
<p>数据删除成功之后不会马上删除，只是会打上那个删除标识，Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理。</p>
<h3 id="3-2-5-搜索数据"><a href="#3-2-5-搜索数据" class="headerlink" title="3.2.5 搜索数据"></a>3.2.5 搜索数据</h3><p>1、根据id搜索</p>
<p><img src="https://image.eelve.com/eblog/2020030123-d35bcdb8e1a34c599da2c6af06b5999c.png" alt="2020030123"></p>
<p>2、全部搜索</p>
<p><img src="https://image.eelve.com/eblog/2020030124-6dd8f7b0b6f64d43b78f007096a0266e.png" alt="2020030124"></p>
<p>3、关键词搜索</p>
<p><img src="https://image.eelve.com/eblog/2020030125-6496d651790a4eeaaf6ef01d89007434.png" alt="2020030125"></p>
<p>4、查询部分字段</p>
<p><img src="https://image.eelve.com/eblog/2020030128-39b83bc7128041ada8913de3d60d7f94.png" alt="2020030128"></p>
<p>5、分页查询</p>
<pre><code>和SQL使用 LIMIT 关键字返回只有一页的结果一样，Elasticsearch接受 from 和 size 参数：

size: 结果数，默认10
from: 跳过开始的结果数，默认0
</code></pre>
<p><img src="https://image.eelve.com/eblog/2020030129-6cfe8b9d5e3e4eabb08e850336caa524.png" alt="2020030129"></p>
<pre><code>应该当心分页太深或者一次请求太多的结果。结果在返回前会被排序。但是记住一个搜索请求常常涉及多个分片。每个分片生成自己排好序的结果，它们接着需要集中起来排序以确保整体排序正确。

在集群系统中深度分页
为了理解为什么深度分页是有问题的，让我们假设在一个有5个主分片的索引中搜索。当我们请求结果的第一页（结果1到10）时，每个分片产生自己最顶端10个结果然后返回它们给请求节点(requesting node)，
它再排序这所有的50个结果以选出顶端的10个结果。现在假设我们请求第1000页——结果10001到10010。工作方式都相同，不同的是每个分片都必须产生顶端的10010个结果。
然后请求节点排序这50050个结果并丢弃50040个！可以看到在分布式系统中，排序结果的花费随着分页的深入而成倍增长。这也是为什么网络搜索引擎中任何语句不能返回多于1000个结果的原因。
</code></pre>
<h3 id="3-2-6-DSL搜索"><a href="#3-2-6-DSL搜索" class="headerlink" title="3.2.6 DSL搜索"></a>3.2.6 DSL搜索</h3><pre><code>Elasticsearch提供丰富且灵活的查询语言叫做DSL查询(Query DSL),它允许你构建更加复杂、强大的查询。
DSL(Domain Specific Language特定领域语言)以JSON请求体的形式出现
</code></pre>
<p><img src="https://image.eelve.com/eblog/2020030126-fdc18d55a95b49608130225d3aa15d67.png" alt="2020030126"></p>
<p>如图我们查询了一个年龄大于10岁，性别为男性的数据</p>
<h3 id="3-2-7-聚合"><a href="#3-2-7-聚合" class="headerlink" title="3.2.7 聚合"></a>3.2.7 聚合</h3><pre><code>在Elasticsearch中，支持聚合操作，类似SQL中的group by操作。
</code></pre>
<p><img src="https://image.eelve.com/eblog/2020030127-dbc8906ff8e540c58e7cb598aabd35e9.png" alt="2020030127"></p>
<h3 id="3-2-8-bulk操作"><a href="#3-2-8-bulk操作" class="headerlink" title="3.2.8 _bulk操作"></a>3.2.8 _bulk操作</h3><pre><code>在Elasticsearch中，支持批量的插入、修改、删除操作，都是通过_bulk的api完成的。
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body &#125;\n</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body &#125;\n</span><br><span class="line">...</span><br><span class="line"># 注意每行最后必须有 \n</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1、批量插入</p>
<p><img src="https://image.eelve.com/eblog/2020030130-c69ed9ae775445ef90e13bfcf726efd5.png" alt="2020030130"><br><img src="https://image.eelve.com/eblog/2020030131-d32f2761eb464fb085b671a34b08ac0d.png" alt="2020030131"></p>
<p>2、批量删除</p>
<p><img src="https://image.eelve.com/eblog/2020030132-b483295fa7054414a91efcdfbdf689e0.png" alt="2020030132"><br><img src="https://image.eelve.com/eblog/2020030134-3433028e01d941e38d143f0f4f2a7bea.png" alt="2020030134"></p>
<p>3、批量删除</p>
<p><img src="https://image.eelve.com/eblog/2020030135-13028e1a58e64b82a3f4a8f1316160fb.png" alt="2020030135"><br><img src="https://image.eelve.com/eblog/2020030136-deeff4eb87f143ee95b33468a59a7883.png" alt="2020030136"></p>
<p>4、混合操作</p>
<p><img src="https://image.eelve.com/eblog/2020030137-486103db9fab4f16bb639e9ee13c0961.png" alt="2020030137"><br><img src="https://image.eelve.com/eblog/2020030138-dc89cd6f155c48b1a917072b6805c15e.png" alt="2020030138"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;took&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;errors&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;update&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;eelve&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;2002&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">7</span>,</span><br><span class="line">                <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;delete&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;eelve&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;2003&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">8</span>,</span><br><span class="line">                <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>整个批量请求需要被加载到接受我们请求节点的内存里，所以请求越大，给其它请求可用的内存就越小。有一个最佳的bulk请求大小。
超过这个大小，性能不再提升而且可能降低。

最佳大小，当然并不是一个固定的数字。它完全取决于你的硬件、你文档的大小和复杂度以及索引和搜索的负载。
幸运的是，这个最佳点(sweetspot)还是容易找到的：试着批量索引标准的文档，随着大小的增长，当性能开始降低，
说明你每个批次的大小太大了。开始的数量可以在1000~5000个文档之间，如果你的文档非常大，可以使用较小的批次。
通常着眼于你请求批次的物理大小是非常有用的。一千个1kB的文档和一千个1MB的文档大不相同。一个好的批次最好保持在5-15MB大小间。
</code></pre>
<h3 id="3-2-9-字段映射"><a href="#3-2-9-字段映射" class="headerlink" title="3.2.9 字段映射"></a>3.2.9 字段映射</h3><p>前面我们创建的索引以及插入数据，都是由Elasticsearch进行自动判断类型，有些时候我们是需要进行明确字段类型的，否则，自动判断的类型和实际需求是不相符的。</p>
<p>自动判断的规则如下：</p>
<table>
<thead>
<tr>
<th>SON type</th>
<th>Field type</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean:</td>
<td>true or false “boolean”</td>
</tr>
<tr>
<td>Whole number:</td>
<td>123 “long”</td>
</tr>
<tr>
<td>Floating point:</td>
<td>123.45 “double”</td>
</tr>
<tr>
<td>String, valid date:</td>
<td>“2014-09-15” “date”</td>
</tr>
<tr>
<td>String:</td>
<td>“foo bar” “string”</td>
</tr>
</tbody></table>
<p>Elasticsearch中支持的类型如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>表示的数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>string , text , keyword</td>
</tr>
<tr>
<td>Whole number:</td>
<td>byte , short , integer , long</td>
</tr>
<tr>
<td>Floating point:</td>
<td>float , double</td>
</tr>
<tr>
<td>Boolean</td>
<td>boolean</td>
</tr>
<tr>
<td>Date</td>
<td>date</td>
</tr>
</tbody></table>
<pre><code>string类型在ElasticSearch 旧版本中使用较多，从ElasticSearch 5.x开始不再支持string，由text和keyword类型替代。

text 类型，当一个字段是要被全文搜索的，比如Email内容、产品描述，应该使用text类型。设置text类型以后，字段内容会被分析，
在生成倒排索引以前，字符串会被分析器分成一个一个词项。text类型的字段不用于排序，很少用于聚合。

keyword类型适用于索引结构化的字段，比如email地址、主机名、状态码和标签。如果字段需要进行过滤(比如查找已发布博客中status属性为published的文章)、排序、聚合。
keyword类型的字段只能通过精确值搜索到。
</code></pre>
<p><img src="https://image.eelve.com/eblog/2020030140-8a169a5294044d41bcfbc531ffa262fb.png" alt="2020030140"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;mail&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2020030141-6749ff764e8f46c6a4a2a1e356c129de.png" alt="2020030141"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;iio&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;aliases&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;mail&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;creation_date&quot;</span>: <span class="string">&quot;1583052049836&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;uuid&quot;</span>: <span class="string">&quot;CFfnz0C0SnSkgceUONQNEA&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;created&quot;</span>: <span class="string">&quot;7060099&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;provided_name&quot;</span>: <span class="string">&quot;iio&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意的是7.x的版本我6.x的版本创建索引不一样，6.x还需要在properties外面用类型包裹，下面给一个示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;person&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;mail&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="肆、注意事项"><a href="#肆、注意事项" class="headerlink" title="肆、注意事项"></a>肆、注意事项</h1><p>注意版本差异，具体关注官方。我这边所演示的整个Elastic stack家族的版本都为7.6.0。另外批量操作的时候，如果有其中某一条执行失败的话，并不会影响其他执行正确的结果。</p>
<hr>
<p>【<strong>后面的话</strong>】记住Elasticsearch是整个<strong>Elastic Stack</strong>的核心。具有查询分析、高速度、可扩展性、相关度和弹性，后面我们还会具体实践。另外关于Elasticsearch的还有组合搜索，权重，分词等等还没有实践，等后面实践之后文章会继续更新，可能会写一篇关于Elasticsearch深度使用的文章。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Elasticsearch初体验(二)本地版</title>
    <url>/posts/1505cd3f.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】前面我们已经安装好了Elasticsearch，现在我们就来尝试简单的使用。</p>
<hr>
<h1 id="壹、Elasticsearch介绍"><a href="#壹、Elasticsearch介绍" class="headerlink" title="壹、Elasticsearch介绍"></a>壹、Elasticsearch介绍</h1><p><img src="https://eelve.com/upload/2020/3/2020010303-6acab887ee4441b488ee408c30359ab5.png" alt="2020010303"></p>
<p>Elasticsearch是整个<strong>Elastic Stack</strong>的核心。</p>
<p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p>
<p>通过 Elasticsearch，您能够执行及合并多种类型的搜索（结构化数据、非结构化数据、地理位置、指标），搜索方式随心而变。先从一个简单的问题出发，试试看能够从中发现些什么。找到与查询最匹配的 10 个文档是一回事。但如果面对的是十亿行日志，又该如何解读呢？Elasticsearch 聚合让您能够从大处着眼，探索数据的趋势和模式。</p>
<h1 id="贰、插件安装"><a href="#贰、插件安装" class="headerlink" title="贰、插件安装"></a>贰、插件安装</h1><p>由于ES官方并没有为ES提供界面管理工具，仅仅是提供了后台的服务。elasticsearch-head是一个为ES开发的一个页面客户端工具，其源码托管于GitHub，地址为：<br><a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a>。<br>安装方法也比较多：</p>
<pre><code>1.源码安装，通过npm run start启动
2.通过docker安装
3.通过chrome插件安装
4.通过ES的plugin方式安装
</code></pre>
<p>我这边就通过chrome插件的方式安装，在应用商店中搜索，然后安装即可，安装成功之后打开你会得到下面的页面</p>
<p><img src="https://eelve.com/upload/2020/3/2020030106-e64fe73ddd004fb1bd87885b30563d48.png" alt="2020030106"></p>
<p>然后连接集群，就可以进行操作了</p>
<p><img src="https://eelve.com/upload/2020/3/2020030107-079a29b224d14779999957304c279291.png" alt="2020030107"></p>
<pre><code>集群健康值
1.绿色：代表集群所有分片和副本都可用
2.黄色：代表集群中不是所有副本都可用，但是分片都可以用
3.红色： 代表集群中不是所有分片都可用
</code></pre>
<p>另外我的集群中出现了<strong>Unassigned</strong>，是因为我搭建的是单机版，而Elasticsearch默认会创建1个副本。</p>
<h1 id="叁、简单使用"><a href="#叁、简单使用" class="headerlink" title="叁、简单使用"></a>叁、简单使用</h1><h2 id="3-1-基本概念"><a href="#3-1-基本概念" class="headerlink" title="3.1 基本概念"></a>3.1 基本概念</h2><p><strong>索引</strong></p>
<pre><code>索引（index）是Elasticsearch对逻辑数据的逻辑存储，所以它可以分为更小的部分。

可以把索引看成关系型数据库的表，索引的结构是为快速有效的全文索引准备的，特别是它不存储原始值。

Elasticsearch可以把索引存放在一台机器或者分散在多台服务器上，每个索引有一或多个分片（shard），每个
分片可以有多个副本（replica）。
</code></pre>
<p><strong>文档</strong></p>
<pre><code>存储在Elasticsearch中的主要实体叫文档（document）。用关系型数据库来类比的话，一个文档相当于数据库
表中的一行记录。

Elasticsearch和MongoDB中的文档类似，都可以有不同的结构，但Elasticsearch的文档中，相同字段必须有相
同类型。

文档由多个字段组成，每个字段可能多次出现在一个文档里，这样的字段叫多值字段（multivalued）。
每个字段的类型，可以是文本、数值、日期等。字段类型也可以是复杂类型，一个字段包含其他子文档或者数
组。
</code></pre>
<p><strong>映射</strong></p>
<pre><code>所有文档写进索引之前都会先进行分析，如何将输入的文本分割为词条、哪些词条又会被过滤，这种行为叫做
映射（mapping）。一般由用户自己定义规则。
</code></pre>
<p><strong>文档类型</strong></p>
<pre><code>在Elasticsearch中，一个索引对象可以存储很多不同用途的对象。例如，一个博客应用程序可以保存文章和评
论。

每个文档可以有不同的结构。

不同的文档类型不能为相同的属性设置不同的类型。例如，在同一索引中的所有文档类型中，一个叫title的字段
必须具有相同的类型。
</code></pre>
<h2 id="3-2-RESTful-API"><a href="#3-2-RESTful-API" class="headerlink" title="3.2 RESTful API"></a>3.2 RESTful API</h2><pre><code>在Elasticsearch中，提供了功能丰富的RESTful API的操作，包括基本的CRUD、创建索引、删除索引等操作。
</code></pre>
<p>下面我就通过Postman来演示一遍</p>
<h3 id="3-2-1-创建非结构化索引"><a href="#3-2-1-创建非结构化索引" class="headerlink" title="3.2.1 创建非结构化索引"></a>3.2.1 创建非结构化索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建索引</span><br><span class="line">PUT &#x2F;eelve</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;2&quot;, #分片数</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;0&quot; #副本数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://eelve.com/upload/2020/3/2020030108-491386349bf145df999db01f96dca5b7.png" alt="2020030108"><br><img src="https://eelve.com/upload/2020/3/2020030109-e2e0dbf0610e4c9e815507b3e08824e6.png" alt="2020030109"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#删除索引</span><br><span class="line">DELETE &#x2F;eelve</span><br></pre></td></tr></table></figure>
<p><img src="https://eelve.com/upload/2020/3/2020030110-0d0eae2e25ec4788b038d3066e0a34df.png" alt="2020030110"></p>
<h3 id="3-2-2-插入数据"><a href="#3-2-2-插入数据" class="headerlink" title="3.2.2 插入数据"></a>3.2.2 插入数据</h3><pre><code>URL规则：
POST /&#123;索引&#125;/&#123;类型&#125;/&#123;id&#125;
</code></pre>
<p>1、带id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;eelve&#x2F;user&#x2F;1001</span><br><span class="line">#数据</span><br><span class="line">&#123;</span><br><span class="line">	&quot;id&quot;:1001,</span><br><span class="line">	&quot;name&quot;:&quot;leo&quot;,</span><br><span class="line">	&quot;age&quot;:26,</span><br><span class="line">	&quot;sex&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://eelve.com/upload/2020/3/2020030111-8901ba31e0c841ea9f19b3b3fbf47745.png" alt="2020030111"><br><img src="https://eelve.com/upload/2020/3/2020030112-3b009a1840754659a01ff665fe545de8.png" alt="2020030112"></p>
<p>2、不带id </p>
<p><img src="https://eelve.com/upload/2020/3/2020030113-48589935a2ce456491006d43f0001194.png" alt="2020030113"><br><img src="https://eelve.com/upload/2020/3/2020030114-b2119fc6b17f46b998b9b1aed9be3481.png" alt="2020030114"></p>
<h3 id="3-2-3-更新数据"><a href="#3-2-3-更新数据" class="headerlink" title="3.2.3 更新数据"></a>3.2.3 更新数据</h3><pre><code>在Elasticsearch中，文档数据是不为修改的，但是可以通过覆盖的方式进行更新。
</code></pre>
<p>1、全部修改</p>
<p><img src="https://eelve.com/upload/2020/3/2020030115-40f1443a848f42d7bf0b1e4a7895315b.png" alt="2020030115"><br><img src="https://eelve.com/upload/2020/3/2020030116-a6d802f5b1d040088d02bcd97ed58840.png" alt="2020030116"></p>
<p>2、部分修改</p>
<p><img src="https://eelve.com/upload/2020/3/2020030117-7f32be33ca2b4f2796884f595f31c118.png" alt="2020030117"><br><img src="https://eelve.com/upload/2020/3/2020030118-69d2588cf500407c87744222d1b9f58a.png" alt="2020030118"></p>
<p>可以看到局部更新成功</p>
<h3 id="3-2-4-删除数据"><a href="#3-2-4-删除数据" class="headerlink" title="3.2.4 删除数据"></a>3.2.4 删除数据</h3><p><img src="https://eelve.com/upload/2020/3/2020030120-cf3c2d9526e94c559da3122114a23bea.png" alt="2020030120"><br><img src="https://eelve.com/upload/2020/3/2020030121-e5026bfd578247b585b0d1aa9f4f43e9.png" alt="2020030121"></p>
<p>数据删除成功之后不会马上删除，只是会打上那个删除标识，Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理。</p>
<h3 id="3-2-5-搜索数据"><a href="#3-2-5-搜索数据" class="headerlink" title="3.2.5 搜索数据"></a>3.2.5 搜索数据</h3><p>1、根据id搜索</p>
<p><img src="https://eelve.com/upload/2020/3/2020030123-d35bcdb8e1a34c599da2c6af06b5999c.png" alt="2020030123"></p>
<p>2、全部搜索</p>
<p><img src="https://eelve.com/upload/2020/3/2020030124-6dd8f7b0b6f64d43b78f007096a0266e.png" alt="2020030124"></p>
<p>3、关键词搜索</p>
<p><img src="https://eelve.com/upload/2020/3/2020030125-6496d651790a4eeaaf6ef01d89007434.png" alt="2020030125"></p>
<p>4、查询部分字段</p>
<p><img src="https://eelve.com/upload/2020/3/2020030128-39b83bc7128041ada8913de3d60d7f94.png" alt="2020030128"></p>
<p>5、分页查询</p>
<pre><code>和SQL使用 LIMIT 关键字返回只有一页的结果一样，Elasticsearch接受 from 和 size 参数：

size: 结果数，默认10
from: 跳过开始的结果数，默认0
</code></pre>
<p><img src="https://eelve.com/upload/2020/3/2020030129-6cfe8b9d5e3e4eabb08e850336caa524.png" alt="2020030129"></p>
<pre><code>应该当心分页太深或者一次请求太多的结果。结果在返回前会被排序。但是记住一个搜索请求常常涉及多个分片。每个分片生成自己排好序的结果，它们接着需要集中起来排序以确保整体排序正确。

在集群系统中深度分页
为了理解为什么深度分页是有问题的，让我们假设在一个有5个主分片的索引中搜索。当我们请求结果的第一页（结果1到10）时，每个分片产生自己最顶端10个结果然后返回它们给请求节点(requesting node)，
它再排序这所有的50个结果以选出顶端的10个结果。现在假设我们请求第1000页——结果10001到10010。工作方式都相同，不同的是每个分片都必须产生顶端的10010个结果。
然后请求节点排序这50050个结果并丢弃50040个！可以看到在分布式系统中，排序结果的花费随着分页的深入而成倍增长。这也是为什么网络搜索引擎中任何语句不能返回多于1000个结果的原因。
</code></pre>
<h3 id="3-2-6-DSL搜索"><a href="#3-2-6-DSL搜索" class="headerlink" title="3.2.6 DSL搜索"></a>3.2.6 DSL搜索</h3><pre><code>Elasticsearch提供丰富且灵活的查询语言叫做DSL查询(Query DSL),它允许你构建更加复杂、强大的查询。
DSL(Domain Specific Language特定领域语言)以JSON请求体的形式出现
</code></pre>
<p><img src="https://eelve.com/upload/2020/3/2020030126-fdc18d55a95b49608130225d3aa15d67.png" alt="2020030126"></p>
<p>如图我们查询了一个年龄大于10岁，性别为男性的数据</p>
<h3 id="3-2-7-聚合"><a href="#3-2-7-聚合" class="headerlink" title="3.2.7 聚合"></a>3.2.7 聚合</h3><pre><code>在Elasticsearch中，支持聚合操作，类似SQL中的group by操作。
</code></pre>
<p><img src="https://eelve.com/upload/2020/3/2020030127-dbc8906ff8e540c58e7cb598aabd35e9.png" alt="2020030127"></p>
<h3 id="3-2-8-bulk操作"><a href="#3-2-8-bulk操作" class="headerlink" title="3.2.8 _bulk操作"></a>3.2.8 _bulk操作</h3><pre><code>在Elasticsearch中，支持批量的插入、修改、删除操作，都是通过_bulk的api完成的。
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body &#125;\n</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body &#125;\n</span><br><span class="line">...</span><br><span class="line"># 注意每行最后必须有 \n</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1、批量插入</p>
<p><img src="https://eelve.com/upload/2020/3/2020030130-c69ed9ae775445ef90e13bfcf726efd5.png" alt="2020030130"><br><img src="https://eelve.com/upload/2020/3/2020030131-d32f2761eb464fb085b671a34b08ac0d.png" alt="2020030131"></p>
<p>2、批量删除</p>
<p><img src="https://eelve.com/upload/2020/3/2020030132-b483295fa7054414a91efcdfbdf689e0.png" alt="2020030132"><br><img src="https://eelve.com/upload/2020/3/2020030134-3433028e01d941e38d143f0f4f2a7bea.png" alt="2020030134"></p>
<p>3、批量删除</p>
<p><img src="https://eelve.com/upload/2020/3/2020030135-13028e1a58e64b82a3f4a8f1316160fb.png" alt="2020030135"><br><img src="https://eelve.com/upload/2020/3/2020030136-deeff4eb87f143ee95b33468a59a7883.png" alt="2020030136"></p>
<p>4、混合操作</p>
<p><img src="https://eelve.com/upload/2020/3/2020030137-486103db9fab4f16bb639e9ee13c0961.png" alt="2020030137"><br><img src="https://eelve.com/upload/2020/3/2020030138-dc89cd6f155c48b1a917072b6805c15e.png" alt="2020030138"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;took&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;errors&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;update&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;eelve&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;2002&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">7</span>,</span><br><span class="line">                <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;delete&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;eelve&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;2003&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">8</span>,</span><br><span class="line">                <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>: <span class="number">200</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>整个批量请求需要被加载到接受我们请求节点的内存里，所以请求越大，给其它请求可用的内存就越小。有一个最佳的bulk请求大小。
超过这个大小，性能不再提升而且可能降低。

最佳大小，当然并不是一个固定的数字。它完全取决于你的硬件、你文档的大小和复杂度以及索引和搜索的负载。
幸运的是，这个最佳点(sweetspot)还是容易找到的：试着批量索引标准的文档，随着大小的增长，当性能开始降低，
说明你每个批次的大小太大了。开始的数量可以在1000~5000个文档之间，如果你的文档非常大，可以使用较小的批次。
通常着眼于你请求批次的物理大小是非常有用的。一千个1kB的文档和一千个1MB的文档大不相同。一个好的批次最好保持在5-15MB大小间。
</code></pre>
<h3 id="3-2-9-字段映射"><a href="#3-2-9-字段映射" class="headerlink" title="3.2.9 字段映射"></a>3.2.9 字段映射</h3><p>前面我们创建的索引以及插入数据，都是由Elasticsearch进行自动判断类型，有些时候我们是需要进行明确字段类型的，否则，自动判断的类型和实际需求是不相符的。</p>
<p>自动判断的规则如下：</p>
<table>
<thead>
<tr>
<th>SON type</th>
<th>Field type</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean:</td>
<td>true or false “boolean”</td>
</tr>
<tr>
<td>Whole number:</td>
<td>123 “long”</td>
</tr>
<tr>
<td>Floating point:</td>
<td>123.45 “double”</td>
</tr>
<tr>
<td>String, valid date:</td>
<td>“2014-09-15” “date”</td>
</tr>
<tr>
<td>String:</td>
<td>“foo bar” “string”</td>
</tr>
</tbody></table>
<p>Elasticsearch中支持的类型如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>表示的数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>string , text , keyword</td>
</tr>
<tr>
<td>Whole number:</td>
<td>byte , short , integer , long</td>
</tr>
<tr>
<td>Floating point:</td>
<td>float , double</td>
</tr>
<tr>
<td>Boolean</td>
<td>boolean</td>
</tr>
<tr>
<td>Date</td>
<td>date</td>
</tr>
</tbody></table>
<pre><code>string类型在ElasticSearch 旧版本中使用较多，从ElasticSearch 5.x开始不再支持string，由text和keyword类型替代。

text 类型，当一个字段是要被全文搜索的，比如Email内容、产品描述，应该使用text类型。设置text类型以后，字段内容会被分析，
在生成倒排索引以前，字符串会被分析器分成一个一个词项。text类型的字段不用于排序，很少用于聚合。

keyword类型适用于索引结构化的字段，比如email地址、主机名、状态码和标签。如果字段需要进行过滤(比如查找已发布博客中status属性为published的文章)、排序、聚合。
keyword类型的字段只能通过精确值搜索到。
</code></pre>
<p><img src="https://eelve.com/upload/2020/3/2020030140-8a169a5294044d41bcfbc531ffa262fb.png" alt="2020030140"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;mail&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://eelve.com/upload/2020/3/2020030141-6749ff764e8f46c6a4a2a1e356c129de.png" alt="2020030141"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;iio&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;aliases&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;mail&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;creation_date&quot;</span>: <span class="string">&quot;1583052049836&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;uuid&quot;</span>: <span class="string">&quot;CFfnz0C0SnSkgceUONQNEA&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;created&quot;</span>: <span class="string">&quot;7060099&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;provided_name&quot;</span>: <span class="string">&quot;iio&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意的是7.x的版本我6.x的版本创建索引不一样，6.x还需要在properties外面用类型包裹，下面给一个示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;person&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;mail&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="肆、注意事项"><a href="#肆、注意事项" class="headerlink" title="肆、注意事项"></a>肆、注意事项</h1><p>注意版本差异，具体关注官方。我这边所演示的整个Elastic stack家族的版本都为7.6.0。另外批量操作的时候，如果有其中某一条执行失败的话，并不会影响其他执行正确的结果。</p>
<hr>
<p>【<strong>后面的话</strong>】记住Elasticsearch是整个<strong>Elastic Stack</strong>的核心。具有查询分析、高速度、可扩展性、相关度和弹性，后面我们还会具体实践。另外关于Elasticsearch的还有组合搜索，权重，分词等等还没有实践，等后面实践之后文章会继续更新，可能会写一篇关于Elasticsearch深度使用的文章。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Logstash初体验</title>
    <url>/posts/e05eadb0.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前面已经安装好了Elasticsearch，今天就来对 Logstash](<a href="https://www.elastic.co/cn/logstash)%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%B8%8B%E5%88%9D%E6%AD%A5%E4%BD%93%E9%AA%8C%E3%80%82">https://www.elastic.co/cn/logstash)进行一下初步体验。</a></p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、Logstash介绍"><a href="#贰、Logstash介绍" class="headerlink" title="贰、Logstash介绍"></a>贰、Logstash介绍</h1><p><img src="https://image.eelve.com/eblog/illustration-logstash-header-55d54f588c3b4ba89da489277ca709dc.png" alt="illustration-logstash-header"></p>
<pre><code>Logstash 的主要作用是集中、转换和存储数据。是开源的服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中。

Logstash 能够动态地采集、转换和传输数据，不受格式或复杂度的影响。利用 Grok 从非结构化数据中派生出结构，从 IP 地址解码出地理坐标，匿名化或排除敏感字段，并简化整体处理过程。

Logstash 采集，还有更多输入、过滤器和输出
</code></pre>
<p><strong>输入：</strong> 采集各种样式、大小和来源的数据</p>
<p><img src="https://image.eelve.com/eblog/diagram-logstash-inputs-2825f9dced964c4abae8dcd1f3012261.svg" alt="diagram-logstash-inputs"></p>
<pre><code>数据往往以各种各样的形式，或分散或集中地存在于很多系统中。 Logstash 支持 各种输入选择 ，可以在同一时间从众多常用来源捕捉事件。能够以连续的流式传输方式，轻松地从您的日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据。 
</code></pre>
<p><strong>过滤器：</strong> 实时解析和转换数据</p>
<p><img src="https://image.eelve.com/eblog/diagram-logstash-filters-62adaf05398e48f688e1357503b43f81.svg" alt="diagram-logstash-filters"></p>
<pre><code>数据从源传输到存储库的过程中，Logstash 过滤器能够解析各个事件，识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松、更快速地分析和实现商业价值。

    利用 Grok 从非结构化数据中派生出结构
    从 IP 地址破译出地理坐标
    将 PII 数据匿名化，完全排除敏感字段
    简化整体处理，不受数据源、格式或架构的影响 

我们的过滤器库丰富多样，拥有无限可能。     
</code></pre>
<p><strong>输出：</strong> 选择您的存储库，导出您的数据</p>
<p><img src="https://image.eelve.com/eblog/diagram-logstash-outputs-fe56db1595444ddfafe48d62d5623627.svg" alt="diagram-logstash-outputs"></p>
<pre><code> 尽管 Elasticsearch 是我们的首选输出方向，能够为我们的搜索和分析带来无限可能，但它并非唯一选择。

Logstash 提供众多输出选择，您可以将数据发送到您要指定的地方，并且能够灵活地解锁众多下游用例。 
</code></pre>
<p><strong>可扩展：</strong> 以自己的方式创建和配置管道</p>
<pre><code>Logstash 采用可插拔框架，拥有 200 多个插件。您可以将不同的输入选择、过滤器和输出选择混合搭配、精心安排，让它们在管道中和谐地运行。

从自定义应用程序采集数据？没有看到所需的插件？Logstash 插件很容易构建。我们有一个极好的插件开发 API 和插件生成器，可帮助您开始创作并分享成果。
</code></pre>
<h1 id="叁、Logstash安装"><a href="#叁、Logstash安装" class="headerlink" title="叁、Logstash安装"></a>叁、Logstash安装</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p><a href="https://artifacts.elastic.co/downloads/logstash/logstash-7.6.0.tar.gz">logstash-7.6.0.tar.gz</a></p>
<hr>
<h2 id="3-2-解压logstash-7-6-0-tar-gz"><a href="#3-2-解压logstash-7-6-0-tar-gz" class="headerlink" title="3.2 解压logstash-7.6.0.tar.gz"></a>3.2 解压logstash-7.6.0.tar.gz</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf logstash-7.6.0.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="3-3-elasticsearch配置说明"><a href="#3-3-elasticsearch配置说明" class="headerlink" title="3.3 elasticsearch配置说明"></a>3.3 elasticsearch配置说明</h2><p>Logstash的配置有三部分，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123; #输入</span><br><span class="line">    stdin &#123; ... &#125; #标准输入</span><br><span class="line">&#125;</span><br><span class="line">    filter &#123; #过滤，对数据进行分割、截取等处理</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">output &#123; #输出</span><br><span class="line">    stdout &#123; ... &#125; #标准输出</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="肆、Logstash简单使用"><a href="#肆、Logstash简单使用" class="headerlink" title="肆、Logstash简单使用"></a>肆、Logstash简单使用</h1><h2 id="4-1-采集控制台日志"><a href="#4-1-采集控制台日志" class="headerlink" title="4.1 采集控制台日志"></a>4.1 采集控制台日志</h2><p>启动命令：./logstash -e ‘input { stdin { } } output { stdout {} }’</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span><br><span class="line">Sending Logstash logs to /usr/elastic/logstash/logs which is now configured via log4j2.properties</span><br><span class="line">[2020-03-01T18:00:48,316][WARN ][logstash.config.source.multilocal] Ignoring the &#x27;pipelines.yml&#x27; file because modules or command line options are specified</span><br><span class="line">[2020-03-01T18:00:48,495][INFO ][logstash.runner          ] Starting Logstash &#123;&quot;logstash.version&quot;=&gt;&quot;7.6.0&quot;&#125;</span><br><span class="line">[2020-03-01T18:00:50,395][INFO ][org.reflections.Reflections] Reflections took 48 ms to scan 1 urls, producing 20 keys and 40 values </span><br><span class="line">[2020-03-01T18:00:51,788][WARN ][org.logstash.instrument.metrics.gauge.LazyDelegatingGauge][main] A gauge metric of an unknown type (org.jruby.RubyArray) has been create for key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[2020-03-01T18:00:51,810][INFO ][logstash.javapipeline    ][main] Starting pipeline &#123;:pipeline_id=&gt;&quot;main&quot;, &quot;pipeline.workers&quot;=&gt;4, &quot;pipeline.batch.size&quot;=&gt;125, &quot;pipeline.batch.delay&quot;=&gt;50, &quot;pipeline.max_inflight&quot;=&gt;500, &quot;pipeline.sources&quot;=&gt;[&quot;config string&quot;], :thread=&gt;&quot;#&lt;Thread:0x3fa519f0 run&gt;&quot;&#125;</span><br><span class="line">[2020-03-01T18:00:52,795][INFO ][logstash.javapipeline    ][main] Pipeline started &#123;&quot;pipeline.id&quot;=&gt;&quot;main&quot;&#125;</span><br><span class="line">The stdin plugin is now waiting for input:</span><br><span class="line">[2020-03-01T18:00:52,892][INFO ][logstash.agent           ] Pipelines running &#123;:count=&gt;1, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[2020-03-01T18:00:53,277][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/usr/elastic/logstash/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:01:05.128Z,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:01:05.334Z,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:01:05.523Z,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">hello world</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;hello world&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:01:20.320Z,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-2-采集自定义日志"><a href="#4-2-采集自定义日志" class="headerlink" title="4.2 采集自定义日志"></a>4.2 采集自定义日志</h2><h3 id="4-2-1-日志结构"><a href="#4-2-1-日志结构" class="headerlink" title="4.2.1 日志结构"></a>4.2.1 日志结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-03-02 20:08:20|ERROR|数据库连接出错|参数：id&#x3D;1002</span><br></pre></td></tr></table></figure>
<p>可以看到，日志中的内容是使用“|”进行分割的，使用，我们在处理的时候，也需要对数据做分割处理。</p>
<h3 id="4-2-2-编写配置"><a href="#4-2-2-编写配置" class="headerlink" title="4.2.2 编写配置"></a>4.2.2 编写配置</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ vi ../config/logstash-diy.yml </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; &quot;/usr/elastic/logs/diy.log&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-2-3-启动测试"><a href="#4-2-3-启动测试" class="headerlink" title="4.2.3 启动测试"></a>4.2.3 启动测试</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./logstash -f ../config/logstash-diy.yml </span><br><span class="line">Sending Logstash logs to /usr/elastic/logstash/logs which is now configured via log4j2.properties</span><br><span class="line">[2020-03-01T18:15:06,549][WARN ][logstash.config.source.multilocal] Ignoring the &#x27;pipelines.yml&#x27; file because modules or command line options are specified</span><br><span class="line">[2020-03-01T18:15:06,682][INFO ][logstash.runner          ] Starting Logstash &#123;&quot;logstash.version&quot;=&gt;&quot;7.6.0&quot;&#125;</span><br><span class="line">[2020-03-01T18:15:08,737][INFO ][org.reflections.Reflections] Reflections took 38 ms to scan 1 urls, producing 20 keys and 40 values </span><br><span class="line">[2020-03-01T18:15:10,140][WARN ][org.logstash.instrument.metrics.gauge.LazyDelegatingGauge][main] A gauge metric of an unknown type (org.jruby.RubyArray) has been create for key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[2020-03-01T18:15:10,167][INFO ][logstash.javapipeline    ][main] Starting pipeline &#123;:pipeline_id=&gt;&quot;main&quot;, &quot;pipeline.workers&quot;=&gt;4, &quot;pipeline.batch.size&quot;=&gt;125, &quot;pipeline.batch.delay&quot;=&gt;50, &quot;pipeline.max_inflight&quot;=&gt;500, &quot;pipeline.sources&quot;=&gt;[&quot;/usr/elastic/logstash/config/logstash-diy.yml&quot;], :thread=&gt;&quot;#&lt;Thread:0x26d10ea9 run&gt;&quot;&#125;</span><br><span class="line">[2020-03-01T18:15:11,223][INFO ][logstash.inputs.file     ][main] No sincedb_path set, generating one based on the &quot;path&quot; setting &#123;:sincedb_path=&gt;&quot;/usr/elastic/logstash/data/plugins/inputs/file/.sincedb_b626b2bdb9f76816ac98ff32e97c96bf&quot;, :path=&gt;[&quot;/usr/elastic/logs/diy.log&quot;]&#125;</span><br><span class="line">[2020-03-01T18:15:11,266][INFO ][logstash.javapipeline    ][main] Pipeline started &#123;&quot;pipeline.id&quot;=&gt;&quot;main&quot;&#125;</span><br><span class="line">[2020-03-01T18:15:11,367][INFO ][filewatch.observingtail  ][main] START, creating Discoverer, Watch with file and sincedb collections</span><br><span class="line">[2020-03-01T18:15:11,367][INFO ][logstash.agent           ] Pipelines running &#123;:count=&gt;1, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[2020-03-01T18:15:11,703][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class="line">/usr/elastic/logstash/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">          &quot;path&quot; =&gt; &quot;/usr/elastic/logs/diy.log&quot;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:16:57.260Z,</span><br><span class="line">       &quot;message&quot; =&gt; [</span><br><span class="line">        [0] &quot;2020-03-02 20:08:20&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;数据库连接出错&quot;,</span><br><span class="line">        [3] &quot;参数：id=1002&quot;</span><br><span class="line">    ],</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后输出日志到diy.log文件中</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">echo &quot;20120-03-02 20:21:21|ERROR|读取数据出错|参数：id=1003&quot; &gt;&gt; diy.log</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          &quot;path&quot; =&gt; &quot;/usr/elastic/logs/diy.log&quot;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:17:11.442Z,</span><br><span class="line">       &quot;message&quot; =&gt; [</span><br><span class="line">        [0] &quot;20120-03-02 20:21:21&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;读取数据出错&quot;,</span><br><span class="line">        [3] &quot;参数：id=1003&quot;</span><br><span class="line">    ],</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到日志已经通过”|”被分割出来了。</p>
<h2 id="4-3-输出到Elasticsearch"><a href="#4-3-输出到Elasticsearch" class="headerlink" title="4.3 输出到Elasticsearch"></a>4.3 输出到Elasticsearch</h2><h3 id="4-3-1-编写配置"><a href="#4-3-1-编写配置" class="headerlink" title="4.3.1 编写配置"></a>4.3.1 编写配置</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ vi ../config/logstash-elastic.yml </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; &quot;/usr/elastic/logs/diy.log&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;192.168.237.11:9200&quot;]</span><br><span class="line">        index =&gt; &quot;elastic-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-启动测试"><a href="#4-3-2-启动测试" class="headerlink" title="4.3.2 启动测试"></a>4.3.2 启动测试</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./logstash -f ../config/logstash-elastic.yml </span><br><span class="line">Sending Logstash logs to /usr/elastic/logstash/logs which is now configured via log4j2.properties</span><br><span class="line">[2020-03-01T18:26:42,445][WARN ][logstash.config.source.multilocal] Ignoring the &#x27;pipelines.yml&#x27; file because modules or command line options are specified</span><br><span class="line">[2020-03-01T18:26:42,638][INFO ][logstash.runner          ] Starting Logstash &#123;&quot;logstash.version&quot;=&gt;&quot;7.6.0&quot;&#125;</span><br><span class="line">[2020-03-01T18:26:45,170][INFO ][org.reflections.Reflections] Reflections took 46 ms to scan 1 urls, producing 20 keys and 40 values </span><br><span class="line">[2020-03-01T18:26:47,179][INFO ][logstash.outputs.elasticsearch][main] Elasticsearch pool URLs updated &#123;:changes=&gt;&#123;:removed=&gt;[], :added=&gt;[http://192.168.237.11:9200/]&#125;&#125;</span><br><span class="line">[2020-03-01T18:26:47,487][WARN ][logstash.outputs.elasticsearch][main] Restored connection to ES instance &#123;:url=&gt;&quot;http://192.168.237.11:9200/&quot;&#125;</span><br><span class="line">[2020-03-01T18:26:47,553][INFO ][logstash.outputs.elasticsearch][main] ES Output version determined &#123;:es_version=&gt;7&#125;</span><br><span class="line">[2020-03-01T18:26:47,561][WARN ][logstash.outputs.elasticsearch][main] Detected a 6.x and above cluster: the `type` event field won&#x27;t be used to determine the document _type &#123;:es_version=&gt;7&#125;</span><br><span class="line">[2020-03-01T18:26:47,760][INFO ][logstash.outputs.elasticsearch][main] New Elasticsearch output &#123;:class=&gt;&quot;LogStash::Outputs::ElasticSearch&quot;, :hosts=&gt;[&quot;//192.168.237.11:9200&quot;]&#125;</span><br><span class="line">[2020-03-01T18:26:47,855][INFO ][logstash.outputs.elasticsearch][main] Using default mapping template</span><br><span class="line">[2020-03-01T18:26:47,900][WARN ][org.logstash.instrument.metrics.gauge.LazyDelegatingGauge][main] A gauge metric of an unknown type (org.jruby.specialized.RubyArrayOneObject) has been create for key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[2020-03-01T18:26:47,914][INFO ][logstash.javapipeline    ][main] Starting pipeline &#123;:pipeline_id=&gt;&quot;main&quot;, &quot;pipeline.workers&quot;=&gt;4, &quot;pipeline.batch.size&quot;=&gt;125, &quot;pipeline.batch.delay&quot;=&gt;50, &quot;pipeline.max_inflight&quot;=&gt;500, &quot;pipeline.sources&quot;=&gt;[&quot;/usr/elastic/logstash/config/logstash-elastic.yml&quot;], :thread=&gt;&quot;#&lt;Thread:0x77e7dd14 run&gt;&quot;&#125;</span><br><span class="line">[2020-03-01T18:26:48,011][INFO ][logstash.outputs.elasticsearch][main] Attempting to install template &#123;:manage_template=&gt;&#123;&quot;index_patterns&quot;=&gt;&quot;logstash-*&quot;, &quot;version&quot;=&gt;60001, &quot;settings&quot;=&gt;&#123;&quot;index.refresh_interval&quot;=&gt;&quot;5s&quot;, &quot;number_of_shards&quot;=&gt;1&#125;, &quot;mappings&quot;=&gt;&#123;&quot;dynamic_templates&quot;=&gt;[&#123;&quot;message_field&quot;=&gt;&#123;&quot;path_match&quot;=&gt;&quot;message&quot;, &quot;match_mapping_type&quot;=&gt;&quot;string&quot;, &quot;mapping&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;text&quot;, &quot;norms&quot;=&gt;false&#125;&#125;&#125;, &#123;&quot;string_fields&quot;=&gt;&#123;&quot;match&quot;=&gt;&quot;*&quot;, &quot;match_mapping_type&quot;=&gt;&quot;string&quot;, &quot;mapping&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;text&quot;, &quot;norms&quot;=&gt;false, &quot;fields&quot;=&gt;&#123;&quot;keyword&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;keyword&quot;, &quot;ignore_above&quot;=&gt;256&#125;&#125;&#125;&#125;&#125;], &quot;properties&quot;=&gt;&#123;&quot;@timestamp&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;date&quot;&#125;, &quot;@version&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;keyword&quot;&#125;, &quot;geoip&quot;=&gt;&#123;&quot;dynamic&quot;=&gt;true, &quot;properties&quot;=&gt;&#123;&quot;ip&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;ip&quot;&#125;, &quot;location&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;geo_point&quot;&#125;, &quot;latitude&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;half_float&quot;&#125;, &quot;longitude&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;half_float&quot;&#125;&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">[2020-03-01T18:26:49,458][INFO ][logstash.inputs.file     ][main] No sincedb_path set, generating one based on the &quot;path&quot; setting &#123;:sincedb_path=&gt;&quot;/usr/elastic/logstash/data/plugins/inputs/file/.sincedb_b626b2bdb9f76816ac98ff32e97c96bf&quot;, :path=&gt;[&quot;/usr/elastic/logs/diy.log&quot;]&#125;</span><br><span class="line">[2020-03-01T18:26:49,506][INFO ][logstash.javapipeline    ][main] Pipeline started &#123;&quot;pipeline.id&quot;=&gt;&quot;main&quot;&#125;</span><br><span class="line">[2020-03-01T18:26:49,600][INFO ][logstash.agent           ] Pipelines running &#123;:count=&gt;1, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[2020-03-01T18:26:49,622][INFO ][filewatch.observingtail  ][main] START, creating Discoverer, Watch with file and sincedb collections</span><br><span class="line">[2020-03-01T18:26:50,082][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class="line">/usr/elastic/logstash/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:27:13.467Z,</span><br><span class="line">          &quot;path&quot; =&gt; &quot;/usr/elastic/logs/diy.log&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; [</span><br><span class="line">        [0] &quot;20120-03-02 20:21:21&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;读取数据出错&quot;,</span><br><span class="line">        [3] &quot;参数：id=1003&quot;</span><br><span class="line">    ],</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2020030201-c786b611e3664d718a8bc7a24d556d09.png" alt="2020030201"></p>
<h2 id="4-3-停止服务"><a href="#4-3-停止服务" class="headerlink" title="4.3 停止服务"></a>4.3 停止服务</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 logs]$ jps</span><br><span class="line">7110 Logstash</span><br><span class="line">6794 Elasticsearch</span><br><span class="line">7183 Jps</span><br><span class="line">[iio@192 logs]$ kill -9 7110</span><br><span class="line">[iio@192 logs]$ kill -9 6794</span><br><span class="line">[iio@192 logs]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>后面的话</strong>】Logstash作为三大剑客，主要是采集和过滤，但是在现在采集公文部分被Beats家族取代，所以目前最重要的作用是过滤，但是也不是说不能采集了，只是相比于Beat来说效率更低而已。另外还有一点一个输入可以有多份输出,在4.3中也有应用,下面是主要的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123; #输入</span><br><span class="line">    stdin &#123; ... &#125; #标准输入</span><br><span class="line">&#125;</span><br><span class="line">filter &#123; #过滤，对数据进行分割、截取等处理</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">output &#123; #输出1</span><br><span class="line">    stdout &#123; ... &#125; #标准输出</span><br><span class="line"></span><br><span class="line">    elasticsearch &#123; #输出2</span><br><span class="line">        hosts &#x3D;&gt; [ &quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Logstash初体验本地版</title>
    <url>/posts/a101af4c.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前面已经安装好了Elasticsearch，今天就来对<a href="https://www.elastic.co/cn/logstash">Logstash</a>进行一下初步体验。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、Logstash介绍"><a href="#贰、Logstash介绍" class="headerlink" title="贰、Logstash介绍"></a>贰、Logstash介绍</h1><p><img src="https://eelve.com/upload/2020/3/illustration-logstash-header-55d54f588c3b4ba89da489277ca709dc.png" alt="illustration-logstash-header"></p>
<pre><code>Logstash 的主要作用是集中、转换和存储数据。是开源的服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到您最喜欢的“存储库”中。

Logstash 能够动态地采集、转换和传输数据，不受格式或复杂度的影响。利用 Grok 从非结构化数据中派生出结构，从 IP 地址解码出地理坐标，匿名化或排除敏感字段，并简化整体处理过程。

Logstash 采集，还有更多输入、过滤器和输出
</code></pre>
<p><strong>输入：</strong> 采集各种样式、大小和来源的数据</p>
<p><img src="https://eelve.com/upload/2020/3/diagram-logstash-inputs-2825f9dced964c4abae8dcd1f3012261.svg" alt="diagram-logstash-inputs"></p>
<pre><code>数据往往以各种各样的形式，或分散或集中地存在于很多系统中。 Logstash 支持 各种输入选择 ，可以在同一时间从众多常用来源捕捉事件。能够以连续的流式传输方式，轻松地从您的日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据。 
</code></pre>
<p><strong>过滤器：</strong> 实时解析和转换数据</p>
<p><img src="https://eelve.com/upload/2020/3/diagram-logstash-filters-62adaf05398e48f688e1357503b43f81.svg" alt="diagram-logstash-filters"></p>
<pre><code>数据从源传输到存储库的过程中，Logstash 过滤器能够解析各个事件，识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松、更快速地分析和实现商业价值。

    利用 Grok 从非结构化数据中派生出结构
    从 IP 地址破译出地理坐标
    将 PII 数据匿名化，完全排除敏感字段
    简化整体处理，不受数据源、格式或架构的影响 

我们的过滤器库丰富多样，拥有无限可能。     
</code></pre>
<p><strong>输出：</strong> 选择您的存储库，导出您的数据</p>
<p><img src="https://eelve.com/upload/2020/3/diagram-logstash-outputs-fe56db1595444ddfafe48d62d5623627.svg" alt="diagram-logstash-outputs"></p>
<pre><code> 尽管 Elasticsearch 是我们的首选输出方向，能够为我们的搜索和分析带来无限可能，但它并非唯一选择。

Logstash 提供众多输出选择，您可以将数据发送到您要指定的地方，并且能够灵活地解锁众多下游用例。 
</code></pre>
<p><strong>可扩展：</strong> 以自己的方式创建和配置管道</p>
<pre><code>Logstash 采用可插拔框架，拥有 200 多个插件。您可以将不同的输入选择、过滤器和输出选择混合搭配、精心安排，让它们在管道中和谐地运行。

从自定义应用程序采集数据？没有看到所需的插件？Logstash 插件很容易构建。我们有一个极好的插件开发 API 和插件生成器，可帮助您开始创作并分享成果。
</code></pre>
<h1 id="叁、Logstash安装"><a href="#叁、Logstash安装" class="headerlink" title="叁、Logstash安装"></a>叁、Logstash安装</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p><a href="https://artifacts.elastic.co/downloads/logstash/logstash-7.6.0.tar.gz">logstash-7.6.0.tar.gz</a></p>
<hr>
<h2 id="3-2-解压logstash-7-6-0-tar-gz"><a href="#3-2-解压logstash-7-6-0-tar-gz" class="headerlink" title="3.2 解压logstash-7.6.0.tar.gz"></a>3.2 解压logstash-7.6.0.tar.gz</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf logstash-7.6.0.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="3-3-elasticsearch配置说明"><a href="#3-3-elasticsearch配置说明" class="headerlink" title="3.3 elasticsearch配置说明"></a>3.3 elasticsearch配置说明</h2><p>Logstash的配置有三部分，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123; #输入</span><br><span class="line">    stdin &#123; ... &#125; #标准输入</span><br><span class="line">&#125;</span><br><span class="line">    filter &#123; #过滤，对数据进行分割、截取等处理</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">output &#123; #输出</span><br><span class="line">    stdout &#123; ... &#125; #标准输出</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="肆、Logstash简单使用"><a href="#肆、Logstash简单使用" class="headerlink" title="肆、Logstash简单使用"></a>肆、Logstash简单使用</h1><h2 id="4-1-采集控制台日志"><a href="#4-1-采集控制台日志" class="headerlink" title="4.1 采集控制台日志"></a>4.1 采集控制台日志</h2><p>启动命令：./logstash -e ‘input { stdin { } } output { stdout {} }’</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span><br><span class="line">Sending Logstash logs to /usr/elastic/logstash/logs which is now configured via log4j2.properties</span><br><span class="line">[2020-03-01T18:00:48,316][WARN ][logstash.config.source.multilocal] Ignoring the &#x27;pipelines.yml&#x27; file because modules or command line options are specified</span><br><span class="line">[2020-03-01T18:00:48,495][INFO ][logstash.runner          ] Starting Logstash &#123;&quot;logstash.version&quot;=&gt;&quot;7.6.0&quot;&#125;</span><br><span class="line">[2020-03-01T18:00:50,395][INFO ][org.reflections.Reflections] Reflections took 48 ms to scan 1 urls, producing 20 keys and 40 values </span><br><span class="line">[2020-03-01T18:00:51,788][WARN ][org.logstash.instrument.metrics.gauge.LazyDelegatingGauge][main] A gauge metric of an unknown type (org.jruby.RubyArray) has been create for key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[2020-03-01T18:00:51,810][INFO ][logstash.javapipeline    ][main] Starting pipeline &#123;:pipeline_id=&gt;&quot;main&quot;, &quot;pipeline.workers&quot;=&gt;4, &quot;pipeline.batch.size&quot;=&gt;125, &quot;pipeline.batch.delay&quot;=&gt;50, &quot;pipeline.max_inflight&quot;=&gt;500, &quot;pipeline.sources&quot;=&gt;[&quot;config string&quot;], :thread=&gt;&quot;#&lt;Thread:0x3fa519f0 run&gt;&quot;&#125;</span><br><span class="line">[2020-03-01T18:00:52,795][INFO ][logstash.javapipeline    ][main] Pipeline started &#123;&quot;pipeline.id&quot;=&gt;&quot;main&quot;&#125;</span><br><span class="line">The stdin plugin is now waiting for input:</span><br><span class="line">[2020-03-01T18:00:52,892][INFO ][logstash.agent           ] Pipelines running &#123;:count=&gt;1, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[2020-03-01T18:00:53,277][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/usr/elastic/logstash/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:01:05.128Z,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:01:05.334Z,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:01:05.523Z,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">hello world</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;hello world&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:01:20.320Z,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-2-采集自定义日志"><a href="#4-2-采集自定义日志" class="headerlink" title="4.2 采集自定义日志"></a>4.2 采集自定义日志</h2><h3 id="4-2-1-日志结构"><a href="#4-2-1-日志结构" class="headerlink" title="4.2.1 日志结构"></a>4.2.1 日志结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-03-02 20:08:20|ERROR|数据库连接出错|参数：id&#x3D;1002</span><br></pre></td></tr></table></figure>
<p>可以看到，日志中的内容是使用“|”进行分割的，使用，我们在处理的时候，也需要对数据做分割处理。</p>
<h3 id="4-2-2-编写配置"><a href="#4-2-2-编写配置" class="headerlink" title="4.2.2 编写配置"></a>4.2.2 编写配置</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ vi ../config/logstash-diy.yml </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; &quot;/usr/elastic/logs/diy.log&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-2-3-启动测试"><a href="#4-2-3-启动测试" class="headerlink" title="4.2.3 启动测试"></a>4.2.3 启动测试</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./logstash -f ../config/logstash-diy.yml </span><br><span class="line">Sending Logstash logs to /usr/elastic/logstash/logs which is now configured via log4j2.properties</span><br><span class="line">[2020-03-01T18:15:06,549][WARN ][logstash.config.source.multilocal] Ignoring the &#x27;pipelines.yml&#x27; file because modules or command line options are specified</span><br><span class="line">[2020-03-01T18:15:06,682][INFO ][logstash.runner          ] Starting Logstash &#123;&quot;logstash.version&quot;=&gt;&quot;7.6.0&quot;&#125;</span><br><span class="line">[2020-03-01T18:15:08,737][INFO ][org.reflections.Reflections] Reflections took 38 ms to scan 1 urls, producing 20 keys and 40 values </span><br><span class="line">[2020-03-01T18:15:10,140][WARN ][org.logstash.instrument.metrics.gauge.LazyDelegatingGauge][main] A gauge metric of an unknown type (org.jruby.RubyArray) has been create for key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[2020-03-01T18:15:10,167][INFO ][logstash.javapipeline    ][main] Starting pipeline &#123;:pipeline_id=&gt;&quot;main&quot;, &quot;pipeline.workers&quot;=&gt;4, &quot;pipeline.batch.size&quot;=&gt;125, &quot;pipeline.batch.delay&quot;=&gt;50, &quot;pipeline.max_inflight&quot;=&gt;500, &quot;pipeline.sources&quot;=&gt;[&quot;/usr/elastic/logstash/config/logstash-diy.yml&quot;], :thread=&gt;&quot;#&lt;Thread:0x26d10ea9 run&gt;&quot;&#125;</span><br><span class="line">[2020-03-01T18:15:11,223][INFO ][logstash.inputs.file     ][main] No sincedb_path set, generating one based on the &quot;path&quot; setting &#123;:sincedb_path=&gt;&quot;/usr/elastic/logstash/data/plugins/inputs/file/.sincedb_b626b2bdb9f76816ac98ff32e97c96bf&quot;, :path=&gt;[&quot;/usr/elastic/logs/diy.log&quot;]&#125;</span><br><span class="line">[2020-03-01T18:15:11,266][INFO ][logstash.javapipeline    ][main] Pipeline started &#123;&quot;pipeline.id&quot;=&gt;&quot;main&quot;&#125;</span><br><span class="line">[2020-03-01T18:15:11,367][INFO ][filewatch.observingtail  ][main] START, creating Discoverer, Watch with file and sincedb collections</span><br><span class="line">[2020-03-01T18:15:11,367][INFO ][logstash.agent           ] Pipelines running &#123;:count=&gt;1, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[2020-03-01T18:15:11,703][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class="line">/usr/elastic/logstash/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">          &quot;path&quot; =&gt; &quot;/usr/elastic/logs/diy.log&quot;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:16:57.260Z,</span><br><span class="line">       &quot;message&quot; =&gt; [</span><br><span class="line">        [0] &quot;2020-03-02 20:08:20&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;数据库连接出错&quot;,</span><br><span class="line">        [3] &quot;参数：id=1002&quot;</span><br><span class="line">    ],</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后输出日志到diy.log文件中</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">echo &quot;20120-03-02 20:21:21|ERROR|读取数据出错|参数：id=1003&quot; &gt;&gt; diy.log</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          &quot;path&quot; =&gt; &quot;/usr/elastic/logs/diy.log&quot;,</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:17:11.442Z,</span><br><span class="line">       &quot;message&quot; =&gt; [</span><br><span class="line">        [0] &quot;20120-03-02 20:21:21&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;读取数据出错&quot;,</span><br><span class="line">        [3] &quot;参数：id=1003&quot;</span><br><span class="line">    ],</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到日志已经通过”|”被分割出来了。</p>
<h2 id="4-3-输出到Elasticsearch"><a href="#4-3-输出到Elasticsearch" class="headerlink" title="4.3 输出到Elasticsearch"></a>4.3 输出到Elasticsearch</h2><h3 id="4-3-1-编写配置"><a href="#4-3-1-编写配置" class="headerlink" title="4.3.1 编写配置"></a>4.3.1 编写配置</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ vi ../config/logstash-elastic.yml </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; &quot;/usr/elastic/logs/diy.log&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;192.168.237.11:9200&quot;]</span><br><span class="line">        index =&gt; &quot;elastic-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-启动测试"><a href="#4-3-2-启动测试" class="headerlink" title="4.3.2 启动测试"></a>4.3.2 启动测试</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./logstash -f ../config/logstash-elastic.yml </span><br><span class="line">Sending Logstash logs to /usr/elastic/logstash/logs which is now configured via log4j2.properties</span><br><span class="line">[2020-03-01T18:26:42,445][WARN ][logstash.config.source.multilocal] Ignoring the &#x27;pipelines.yml&#x27; file because modules or command line options are specified</span><br><span class="line">[2020-03-01T18:26:42,638][INFO ][logstash.runner          ] Starting Logstash &#123;&quot;logstash.version&quot;=&gt;&quot;7.6.0&quot;&#125;</span><br><span class="line">[2020-03-01T18:26:45,170][INFO ][org.reflections.Reflections] Reflections took 46 ms to scan 1 urls, producing 20 keys and 40 values </span><br><span class="line">[2020-03-01T18:26:47,179][INFO ][logstash.outputs.elasticsearch][main] Elasticsearch pool URLs updated &#123;:changes=&gt;&#123;:removed=&gt;[], :added=&gt;[http://192.168.237.11:9200/]&#125;&#125;</span><br><span class="line">[2020-03-01T18:26:47,487][WARN ][logstash.outputs.elasticsearch][main] Restored connection to ES instance &#123;:url=&gt;&quot;http://192.168.237.11:9200/&quot;&#125;</span><br><span class="line">[2020-03-01T18:26:47,553][INFO ][logstash.outputs.elasticsearch][main] ES Output version determined &#123;:es_version=&gt;7&#125;</span><br><span class="line">[2020-03-01T18:26:47,561][WARN ][logstash.outputs.elasticsearch][main] Detected a 6.x and above cluster: the `type` event field won&#x27;t be used to determine the document _type &#123;:es_version=&gt;7&#125;</span><br><span class="line">[2020-03-01T18:26:47,760][INFO ][logstash.outputs.elasticsearch][main] New Elasticsearch output &#123;:class=&gt;&quot;LogStash::Outputs::ElasticSearch&quot;, :hosts=&gt;[&quot;//192.168.237.11:9200&quot;]&#125;</span><br><span class="line">[2020-03-01T18:26:47,855][INFO ][logstash.outputs.elasticsearch][main] Using default mapping template</span><br><span class="line">[2020-03-01T18:26:47,900][WARN ][org.logstash.instrument.metrics.gauge.LazyDelegatingGauge][main] A gauge metric of an unknown type (org.jruby.specialized.RubyArrayOneObject) has been create for key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[2020-03-01T18:26:47,914][INFO ][logstash.javapipeline    ][main] Starting pipeline &#123;:pipeline_id=&gt;&quot;main&quot;, &quot;pipeline.workers&quot;=&gt;4, &quot;pipeline.batch.size&quot;=&gt;125, &quot;pipeline.batch.delay&quot;=&gt;50, &quot;pipeline.max_inflight&quot;=&gt;500, &quot;pipeline.sources&quot;=&gt;[&quot;/usr/elastic/logstash/config/logstash-elastic.yml&quot;], :thread=&gt;&quot;#&lt;Thread:0x77e7dd14 run&gt;&quot;&#125;</span><br><span class="line">[2020-03-01T18:26:48,011][INFO ][logstash.outputs.elasticsearch][main] Attempting to install template &#123;:manage_template=&gt;&#123;&quot;index_patterns&quot;=&gt;&quot;logstash-*&quot;, &quot;version&quot;=&gt;60001, &quot;settings&quot;=&gt;&#123;&quot;index.refresh_interval&quot;=&gt;&quot;5s&quot;, &quot;number_of_shards&quot;=&gt;1&#125;, &quot;mappings&quot;=&gt;&#123;&quot;dynamic_templates&quot;=&gt;[&#123;&quot;message_field&quot;=&gt;&#123;&quot;path_match&quot;=&gt;&quot;message&quot;, &quot;match_mapping_type&quot;=&gt;&quot;string&quot;, &quot;mapping&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;text&quot;, &quot;norms&quot;=&gt;false&#125;&#125;&#125;, &#123;&quot;string_fields&quot;=&gt;&#123;&quot;match&quot;=&gt;&quot;*&quot;, &quot;match_mapping_type&quot;=&gt;&quot;string&quot;, &quot;mapping&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;text&quot;, &quot;norms&quot;=&gt;false, &quot;fields&quot;=&gt;&#123;&quot;keyword&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;keyword&quot;, &quot;ignore_above&quot;=&gt;256&#125;&#125;&#125;&#125;&#125;], &quot;properties&quot;=&gt;&#123;&quot;@timestamp&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;date&quot;&#125;, &quot;@version&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;keyword&quot;&#125;, &quot;geoip&quot;=&gt;&#123;&quot;dynamic&quot;=&gt;true, &quot;properties&quot;=&gt;&#123;&quot;ip&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;ip&quot;&#125;, &quot;location&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;geo_point&quot;&#125;, &quot;latitude&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;half_float&quot;&#125;, &quot;longitude&quot;=&gt;&#123;&quot;type&quot;=&gt;&quot;half_float&quot;&#125;&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">[2020-03-01T18:26:49,458][INFO ][logstash.inputs.file     ][main] No sincedb_path set, generating one based on the &quot;path&quot; setting &#123;:sincedb_path=&gt;&quot;/usr/elastic/logstash/data/plugins/inputs/file/.sincedb_b626b2bdb9f76816ac98ff32e97c96bf&quot;, :path=&gt;[&quot;/usr/elastic/logs/diy.log&quot;]&#125;</span><br><span class="line">[2020-03-01T18:26:49,506][INFO ][logstash.javapipeline    ][main] Pipeline started &#123;&quot;pipeline.id&quot;=&gt;&quot;main&quot;&#125;</span><br><span class="line">[2020-03-01T18:26:49,600][INFO ][logstash.agent           ] Pipelines running &#123;:count=&gt;1, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[2020-03-01T18:26:49,622][INFO ][filewatch.observingtail  ][main] START, creating Discoverer, Watch with file and sincedb collections</span><br><span class="line">[2020-03-01T18:26:50,082][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class="line">/usr/elastic/logstash/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2020-03-01T10:27:13.467Z,</span><br><span class="line">          &quot;path&quot; =&gt; &quot;/usr/elastic/logs/diy.log&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">       &quot;message&quot; =&gt; [</span><br><span class="line">        [0] &quot;20120-03-02 20:21:21&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;读取数据出错&quot;,</span><br><span class="line">        [3] &quot;参数：id=1003&quot;</span><br><span class="line">    ],</span><br><span class="line">          &quot;host&quot; =&gt; &quot;192.168.237.11&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://eelve.com/upload/2020/3/2020030201-c786b611e3664d718a8bc7a24d556d09.png" alt="2020030201"></p>
<h2 id="4-3-停止服务"><a href="#4-3-停止服务" class="headerlink" title="4.3 停止服务"></a>4.3 停止服务</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 logs]$ jps</span><br><span class="line">7110 Logstash</span><br><span class="line">6794 Elasticsearch</span><br><span class="line">7183 Jps</span><br><span class="line">[iio@192 logs]$ kill -9 7110</span><br><span class="line">[iio@192 logs]$ kill -9 6794</span><br><span class="line">[iio@192 logs]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>后面的话</strong>】Logstash作为三大剑客，主要是采集和过滤，但是在现在采集公文部分被Beats家族取代，所以目前最重要的作用是过滤，但是也不是说不能采集了，只是相比于Beat来说效率更低而已。另外还有一点一个输入可以有多份输出,在4.3中也有应用,下面是主要的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123; #输入</span><br><span class="line">    stdin &#123; ... &#125; #标准输入</span><br><span class="line">&#125;</span><br><span class="line">filter &#123; #过滤，对数据进行分割、截取等处理</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">output &#123; #输出1</span><br><span class="line">    stdout &#123; ... &#125; #标准输出</span><br><span class="line"></span><br><span class="line">    elasticsearch &#123; #输出2</span><br><span class="line">        hosts &#x3D;&gt; [ &quot;192.168.40.133:9200&quot;,&quot;192.168.40.134:9200&quot;,&quot;192.168.40.135:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Metricbeat初体验</title>
    <url>/posts/ea2474f9.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】<a href="https://eelve.com/posts/d1a5ff40.html">前面介绍了Elastic Stack的Beats家族</a>，并且<a href="https://eelve.com/posts/1d8b943d.html">体验了Filebeat</a>，接下来我们就继续来体验一下</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br><span class="line"><span class="attr">Kibana:</span> <span class="string">kibana-7.6.0</span></span><br><span class="line"><span class="string">MetricBeat：filebeat-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、MetricBeat介绍"><a href="#贰、MetricBeat介绍" class="headerlink" title="贰、MetricBeat介绍"></a>贰、MetricBeat介绍</h1><p>MetricBeat是一种轻量型指标采集器，用于从系统和服务收集指标。Metricbeat 能够以一种轻量型的方式，输送各种系统和服务统计数据，从 CPU 到内存，从 Redis 到 Nginx，不一而足。</p>
<ul>
<li>系统级监控，更简洁</li>
</ul>
<p><img src="https://image.eelve.com/eblog/screenshot-infrastructure-ui-d2c3e13f47f74d82a6f0f6c2799d94f8.png" alt="screenshot-infrastructure-ui"></p>
<ul>
<li><p>单个二进制文件提供多种模块</p>
<p>Metricbeat 提供多种内部模块，这些模块可从多项服务（诸如 Apache、Jolokia、NGINX、MongoDB、MySQL、PostgreSQL、Prometheus 等等）中收集指标。安装简单，完全零依赖性。只需在配置文件中启用您所需的模块即可。</p>
<p>而且，如果您没有看到要找的模块，还可以自己构建。以 Go 语言编写 Metricbeat 模块，过程十分简单。 </p>
<ul>
<li>系统</li>
</ul>
<p><img src="https://image.eelve.com/eblog/metricbeat-modules-system-7f76e2200cfb40089bb112f50aae710e.jpg" alt="metricbeat-modules-system"></p>
<ul>
<li>Docker</li>
</ul>
<p><img src="https://image.eelve.com/eblog/container-monitoring-screenshot-carousel-docker-908943a547964d11996a9775855235f0.jpg" alt="container-monitoring-screenshot-carousel-docker"></p>
<ul>
<li>MongoDB</li>
</ul>
<p><img src="https://image.eelve.com/eblog/metricbeat-modules-mongo-d5d719649a7a4e2a9bf9f1a984528efc.jpg" alt="metricbeat-modules-mongo"></p>
<ul>
<li>Kubernetes</li>
</ul>
<p><img src="https://image.eelve.com/eblog/container-monitoring-screenshot-carousel-kubernetes-0ee5a1fdacf74c3b82d12c81c5c14af1.jpg" alt="container-monitoring-screenshot-carousel-kubernetes"></p>
</li>
<li><p>容器就绪 </p>
<p>近来是不是所有工作都转移到了 Docker 中？通过 Elastic Stack，您能够轻松地监测容器。将 Metricbeat 部署到同一台主机上的一个单独容器后，它将收集与主机上运行的其他每一个容器相关的统计数据。在收集统计数据时，它直接从 proc 文件系统读取 cgroup 信息，这就意味着它无需特权即可访问 Docker API，并且同样适用于其他 Runtime。针对 Docker 的 Autodiscovery 让事情进一步简化，您只需指定一个条件即可开启 Metricbeat 模块。 </p>
</li>
<li><p>不错过任何检测信号</p>
<p>将指标通过假脱机传输方式输送至磁盘，这样您的数据管道再也不会错过任何一个数据点，即使发生中断（例如网络问题），也勿需担心。Metricbeat 会保留传入的数据，并在重新上线后将这些指标输送至 Elasticsearch 或 Logstash。 </p>
</li>
</ul>
<ul>
<li><p>输送至 Elasticsearch 或 Logstash。在 Kibana 中实现可视化。</p>
<p>Metricbeat 是 Elastic Stack 的一部分，因此能够与 Logstash、Elasticsearch 和 Kibana 无缝协作。无论您要使用 Logstash 转换或充实指标，还是在 Elasticsearch 中随意处理一些数据分析，亦或在 Kibana 中构建和分享仪表板，Metricbeat 都能轻松地将您的数据发送至最关键的地方。</p>
</li>
</ul>
<h1 id="叁-MetricBeat安装"><a href="#叁-MetricBeat安装" class="headerlink" title="叁 MetricBeat安装"></a>叁 MetricBeat安装</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p><a href="https://artifacts.elastic.co/downloads/beats/filebeat/metricBeat-7.6.0-linux-x86_64.tar.gz">metricBeat-7.6.0-linux-x86_64</a></p>
<h2 id="3-2-解压metricBeat-7-6-0-linux-x86-64"><a href="#3-2-解压metricBeat-7-6-0-linux-x86-64" class="headerlink" title="3.2 解压metricBeat-7.6.0-linux-x86_64"></a>3.2 解压metricBeat-7.6.0-linux-x86_64</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf metricBeat-7.6.0-linux-x86_64.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="3-3-使用Kibana展示Metricbeat系统指标"><a href="#3-3-使用Kibana展示Metricbeat系统指标" class="headerlink" title="3.3 使用Kibana展示Metricbeat系统指标"></a>3.3 使用Kibana展示Metricbeat系统指标</h2><ul>
<li>修改Metricbeat配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Array of hosts to connect to.</span></span><br><span class="line">  hosts: [&quot;http://192.168.237.11:9200&quot;]</span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 metricbeat]$ ./metricbeat -e</span><br></pre></td></tr></table></figure>
<ul>
<li>在Elasticsearch中查看采集的数据</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2020030707-906f151d4ab34f7c8bbcfea65d83f8e9.png" alt="2020030707"></p>
<ul>
<li>修改Metricbeat配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;192.168.237.11:5601&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>安装仪表盘</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">./metricbeat setup --dashboards</span><br></pre></td></tr></table></figure>
<ul>
<li>重启服务查看效果</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2020030708-ba77ee4e36c6478c8b816a314d730f80.png" alt="2020030708"><br><img src="https://image.eelve.com/eblog/2020030709-a40f0d5711fc4707a416e2c39bbbcb79.png" alt="2020030709"></p>
<p>到这里我们就监控了我们系统的指标，并且利用Kibana提供的仪表板做了图形化展示。</p>
<h2 id="3-4-使用Kibana展示Metricbeat采集nginx指标"><a href="#3-4-使用Kibana展示Metricbeat采集nginx指标" class="headerlink" title="3.4 使用Kibana展示Metricbeat采集nginx指标"></a>3.4 使用Kibana展示Metricbeat采集nginx指标</h2><ul>
<li><p>开启nginx的状态查询</p>
<p>在nginx中，需要开启状态查询，才能查询到指标数据。</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重新编译nginx</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">./nginx -V #查询版本信息</span><br><span class="line">nginx version: nginx/1.12.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx/ --with-http_stub_status_module</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置nginx</span></span><br><span class="line">vi nginx.conf</span><br><span class="line">location /nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.eelve.com/eblog/2020030710-267475b4b77648ccb8d57c0fece62055.png" alt="2020030710"></p>
<p>结果说明：</p>
<ul>
<li>Active connections：正在处理的活动连接数</li>
<li>server accepts handled requests<ul>
<li>第一个 server 表示Nginx启动到现在共处理了22个连接</li>
<li>第二个 accepts 表示Nginx启动到现在共成功创建 22 次握手</li>
<li>第三个 handled requests 表示总共处理了 193 次请求</li>
<li>请求丢失数 = 握手数 - 连接数 ，可以看出目前为止没有丢失请求</li>
</ul>
</li>
<li>Reading: 0 Writing: 1 Waiting: 2<ul>
<li>Reading：Nginx 读取到客户端的 Header 信息数</li>
<li>Writing：Nginx 返回给客户端 Header 信息数</li>
<li>Waiting：Nginx 已经处理完正在等候下一次请求指令的驻留链接（开启keep-alive的情况下，这个值等于 Active - (Reading+Writing)）</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>配置Nginx Module</p>
<p>默认Metricbeat之开启了system modules，所以我们这里要手动启用nginx modules</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">./metricbeat modules enable nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 metricbeat]$ ./metricbeat modules list</span><br><span class="line">Enabled:</span><br><span class="line">nginx</span><br><span class="line">system</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">activemq</span><br><span class="line">aerospike</span><br><span class="line">apache</span><br><span class="line">appsearch</span><br><span class="line">aws</span><br><span class="line">azure</span><br><span class="line">beat</span><br><span class="line">beat-xpack</span><br><span class="line">ceph</span><br><span class="line">cockroachdb</span><br><span class="line">consul</span><br><span class="line">coredns</span><br><span class="line">couchbase</span><br><span class="line">couchdb</span><br><span class="line">docker</span><br><span class="line">dropwizard</span><br><span class="line">elasticsearch</span><br><span class="line">elasticsearch-xpack</span><br><span class="line">envoyproxy</span><br><span class="line">etcd</span><br><span class="line">golang</span><br><span class="line">googlecloud</span><br><span class="line">graphite</span><br><span class="line">haproxy</span><br><span class="line">http</span><br><span class="line">jolokia</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">kibana-xpack</span><br><span class="line">kubernetes</span><br><span class="line">kvm</span><br><span class="line">logstash</span><br><span class="line">logstash-xpack</span><br><span class="line">memcached</span><br><span class="line">mongodb</span><br><span class="line">mssql</span><br><span class="line">munin</span><br><span class="line">mysql</span><br><span class="line">nats</span><br><span class="line">oracle</span><br><span class="line">php_fpm</span><br><span class="line">postgresql</span><br><span class="line">prometheus</span><br><span class="line">rabbitmq</span><br><span class="line">redis</span><br><span class="line">sql</span><br><span class="line">stan</span><br><span class="line">statsd</span><br><span class="line">tomcat</span><br><span class="line">traefik</span><br><span class="line">uwsgi</span><br><span class="line">vsphere</span><br><span class="line">windows</span><br><span class="line">zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改nginx modules的配置</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 modules.d]$ vi nginx.yml </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Module: nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Docs: https://www.elastic.co/guide/en/beats/metricbeat/7.6/metricbeat-module-nginx.html</span></span><br><span class="line"></span><br><span class="line">- module: nginx</span><br><span class="line"><span class="meta">  #</span><span class="bash">metricsets:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - stubstatus</span></span><br><span class="line">  period: 10s</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Nginx hosts</span></span><br><span class="line">  hosts: [&quot;http://192.168.237.11&quot;]</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Path to server status. Default server-status</span></span><br><span class="line">  server_status_path: &quot;nginx-status&quot; #配置的nginx状态访问地址</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash">username: <span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash">password: <span class="string">&quot;secret&quot;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>启动测试</p>
</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2020030711-c1217270b05241ca96fa42f063ba8d9f.png" alt="2020030711"><br><img src="https://image.eelve.com/eblog/2020030712-8ae5730e5301448b974d67545ff98e7a.png" alt="2020030712"></p>
<p>到这里我们采集的nginx的指标数据，并且利用Kibana安装的Metricbeatd的nginx仪表盘做了图形化展示。</p>
<h1 id="肆、Metricbeat组成"><a href="#肆、Metricbeat组成" class="headerlink" title="肆、Metricbeat组成"></a>肆、Metricbeat组成</h1><p>Metricbeat有2部分组成，一部分是Module，另一部分为Metricset。</p>
<ul>
<li><p>Module</p>
<p>收集的对象，如：mysql、redis、nginx、操作系统等；</p>
</li>
<li><p>Metricset</p>
<p>收集指标的集合，如：cpu、memory、network等；  </p>
</li>
</ul>
<hr>
<p>【<strong>后面的话</strong>】在本文中我们利用Metricbeat监控了系统和nginx的系统指标，并且做了图标化的展示。其他module的使用也类似，他们都是利用Metricbeat给被监控的机器放松状态指令，然后采集数据，再做图形化的展示。同时我们也看到Merticbeat也内置了很多的module，足够了我们日工作需要了。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Beats</tag>
        <tag>MetricBeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Metricbeat初体验本地版</title>
    <url>/posts/23e1db24.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】<a href="https://eelve.com/posts/d1a5ff40.html">前面介绍了Elastic Stack的Beats家族</a>，并且<a href="https://eelve.com/posts/1d8b943d.html">体验了Filebeat</a>，接下来我们就继续来体验一下</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br><span class="line"><span class="attr">Kibana:</span> <span class="string">kibana-7.6.0</span></span><br><span class="line"><span class="string">MetricBeat：filebeat-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、MetricBeat介绍"><a href="#贰、MetricBeat介绍" class="headerlink" title="贰、MetricBeat介绍"></a>贰、MetricBeat介绍</h1><p>MetricBeat是一种轻量型指标采集器，用于从系统和服务收集指标。Metricbeat 能够以一种轻量型的方式，输送各种系统和服务统计数据，从 CPU 到内存，从 Redis 到 Nginx，不一而足。</p>
<ul>
<li>系统级监控，更简洁</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/screenshot-infrastructure-ui-d2c3e13f47f74d82a6f0f6c2799d94f8.png" alt="screenshot-infrastructure-ui"></p>
<ul>
<li><p>单个二进制文件提供多种模块</p>
<p>Metricbeat 提供多种内部模块，这些模块可从多项服务（诸如 Apache、Jolokia、NGINX、MongoDB、MySQL、PostgreSQL、Prometheus 等等）中收集指标。安装简单，完全零依赖性。只需在配置文件中启用您所需的模块即可。</p>
<p>而且，如果您没有看到要找的模块，还可以自己构建。以 Go 语言编写 Metricbeat 模块，过程十分简单。 </p>
<ul>
<li>系统</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/metricbeat-modules-system-7f76e2200cfb40089bb112f50aae710e.jpg" alt="metricbeat-modules-system"></p>
<ul>
<li>Docker</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/container-monitoring-screenshot-carousel-docker-908943a547964d11996a9775855235f0.jpg" alt="container-monitoring-screenshot-carousel-docker"></p>
<ul>
<li>MongoDB</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/metricbeat-modules-mongo-d5d719649a7a4e2a9bf9f1a984528efc.jpg" alt="metricbeat-modules-mongo"></p>
<ul>
<li>Kubernetes</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/container-monitoring-screenshot-carousel-kubernetes-0ee5a1fdacf74c3b82d12c81c5c14af1.jpg" alt="container-monitoring-screenshot-carousel-kubernetes"></p>
</li>
<li><p>容器就绪 </p>
<p>近来是不是所有工作都转移到了 Docker 中？通过 Elastic Stack，您能够轻松地监测容器。将 Metricbeat 部署到同一台主机上的一个单独容器后，它将收集与主机上运行的其他每一个容器相关的统计数据。在收集统计数据时，它直接从 proc 文件系统读取 cgroup 信息，这就意味着它无需特权即可访问 Docker API，并且同样适用于其他 Runtime。针对 Docker 的 Autodiscovery 让事情进一步简化，您只需指定一个条件即可开启 Metricbeat 模块。 </p>
</li>
<li><p>不错过任何检测信号</p>
<p>将指标通过假脱机传输方式输送至磁盘，这样您的数据管道再也不会错过任何一个数据点，即使发生中断（例如网络问题），也勿需担心。Metricbeat 会保留传入的数据，并在重新上线后将这些指标输送至 Elasticsearch 或 Logstash。 </p>
</li>
</ul>
<ul>
<li><p>输送至 Elasticsearch 或 Logstash。在 Kibana 中实现可视化。</p>
<p>Metricbeat 是 Elastic Stack 的一部分，因此能够与 Logstash、Elasticsearch 和 Kibana 无缝协作。无论您要使用 Logstash 转换或充实指标，还是在 Elasticsearch 中随意处理一些数据分析，亦或在 Kibana 中构建和分享仪表板，Metricbeat 都能轻松地将您的数据发送至最关键的地方。</p>
</li>
</ul>
<h1 id="叁-MetricBeat安装"><a href="#叁-MetricBeat安装" class="headerlink" title="叁 MetricBeat安装"></a>叁 MetricBeat安装</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p><a href="https://artifacts.elastic.co/downloads/beats/filebeat/metricBeat-7.6.0-linux-x86_64.tar.gz">metricBeat-7.6.0-linux-x86_64</a></p>
<h2 id="3-2-解压metricBeat-7-6-0-linux-x86-64"><a href="#3-2-解压metricBeat-7-6-0-linux-x86-64" class="headerlink" title="3.2 解压metricBeat-7.6.0-linux-x86_64"></a>3.2 解压metricBeat-7.6.0-linux-x86_64</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf metricBeat-7.6.0-linux-x86_64.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="3-3-使用Kibana展示Metricbeat系统指标"><a href="#3-3-使用Kibana展示Metricbeat系统指标" class="headerlink" title="3.3 使用Kibana展示Metricbeat系统指标"></a>3.3 使用Kibana展示Metricbeat系统指标</h2><ul>
<li>修改Metricbeat配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Array of hosts to connect to.</span></span><br><span class="line">  hosts: [&quot;http://192.168.237.11:9200&quot;]</span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 metricbeat]$ ./metricbeat -e</span><br></pre></td></tr></table></figure>
<ul>
<li>在Elasticsearch中查看采集的数据</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/2020030707-906f151d4ab34f7c8bbcfea65d83f8e9.png" alt="2020030707"></p>
<ul>
<li>修改Metricbeat配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;192.168.237.11:5601&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>安装仪表盘</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">./metricbeat setup --dashboards</span><br></pre></td></tr></table></figure>
<ul>
<li>重启服务查看效果</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/2020030708-ba77ee4e36c6478c8b816a314d730f80.png" alt="2020030708"><br><img src="https://eelve.com/upload/2020/3/2020030709-a40f0d5711fc4707a416e2c39bbbcb79.png" alt="2020030709"></p>
<p>到这里我们就监控了我们系统的指标，并且利用Kibana提供的仪表板做了图形化展示。</p>
<h2 id="3-4-使用Kibana展示Metricbeat采集nginx指标"><a href="#3-4-使用Kibana展示Metricbeat采集nginx指标" class="headerlink" title="3.4 使用Kibana展示Metricbeat采集nginx指标"></a>3.4 使用Kibana展示Metricbeat采集nginx指标</h2><ul>
<li><p>开启nginx的状态查询</p>
<p>在nginx中，需要开启状态查询，才能查询到指标数据。</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重新编译nginx</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">./nginx -V #查询版本信息</span><br><span class="line">nginx version: nginx/1.12.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx/ --with-http_stub_status_module</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置nginx</span></span><br><span class="line">vi nginx.conf</span><br><span class="line">location /nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://eelve.com/upload/2020/3/2020030710-267475b4b77648ccb8d57c0fece62055.png" alt="2020030710"></p>
<p>结果说明：</p>
<ul>
<li>Active connections：正在处理的活动连接数</li>
<li>server accepts handled requests<ul>
<li>第一个 server 表示Nginx启动到现在共处理了22个连接</li>
<li>第二个 accepts 表示Nginx启动到现在共成功创建 22 次握手</li>
<li>第三个 handled requests 表示总共处理了 193 次请求</li>
<li>请求丢失数 = 握手数 - 连接数 ，可以看出目前为止没有丢失请求</li>
</ul>
</li>
<li>Reading: 0 Writing: 1 Waiting: 2<ul>
<li>Reading：Nginx 读取到客户端的 Header 信息数</li>
<li>Writing：Nginx 返回给客户端 Header 信息数</li>
<li>Waiting：Nginx 已经处理完正在等候下一次请求指令的驻留链接（开启keep-alive的情况下，这个值等于 Active - (Reading+Writing)）</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>配置Nginx Module</p>
<p>默认Metricbeat之开启了system modules，所以我们这里要手动启用nginx modules</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">./metricbeat modules enable nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 metricbeat]$ ./metricbeat modules list</span><br><span class="line">Enabled:</span><br><span class="line">nginx</span><br><span class="line">system</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">activemq</span><br><span class="line">aerospike</span><br><span class="line">apache</span><br><span class="line">appsearch</span><br><span class="line">aws</span><br><span class="line">azure</span><br><span class="line">beat</span><br><span class="line">beat-xpack</span><br><span class="line">ceph</span><br><span class="line">cockroachdb</span><br><span class="line">consul</span><br><span class="line">coredns</span><br><span class="line">couchbase</span><br><span class="line">couchdb</span><br><span class="line">docker</span><br><span class="line">dropwizard</span><br><span class="line">elasticsearch</span><br><span class="line">elasticsearch-xpack</span><br><span class="line">envoyproxy</span><br><span class="line">etcd</span><br><span class="line">golang</span><br><span class="line">googlecloud</span><br><span class="line">graphite</span><br><span class="line">haproxy</span><br><span class="line">http</span><br><span class="line">jolokia</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">kibana-xpack</span><br><span class="line">kubernetes</span><br><span class="line">kvm</span><br><span class="line">logstash</span><br><span class="line">logstash-xpack</span><br><span class="line">memcached</span><br><span class="line">mongodb</span><br><span class="line">mssql</span><br><span class="line">munin</span><br><span class="line">mysql</span><br><span class="line">nats</span><br><span class="line">oracle</span><br><span class="line">php_fpm</span><br><span class="line">postgresql</span><br><span class="line">prometheus</span><br><span class="line">rabbitmq</span><br><span class="line">redis</span><br><span class="line">sql</span><br><span class="line">stan</span><br><span class="line">statsd</span><br><span class="line">tomcat</span><br><span class="line">traefik</span><br><span class="line">uwsgi</span><br><span class="line">vsphere</span><br><span class="line">windows</span><br><span class="line">zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改nginx modules的配置</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 modules.d]$ vi nginx.yml </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Module: nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Docs: https://www.elastic.co/guide/en/beats/metricbeat/7.6/metricbeat-module-nginx.html</span></span><br><span class="line"></span><br><span class="line">- module: nginx</span><br><span class="line"><span class="meta">  #</span><span class="bash">metricsets:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - stubstatus</span></span><br><span class="line">  period: 10s</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Nginx hosts</span></span><br><span class="line">  hosts: [&quot;http://192.168.237.11&quot;]</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Path to server status. Default server-status</span></span><br><span class="line">  server_status_path: &quot;nginx-status&quot; #配置的nginx状态访问地址</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash">username: <span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash">password: <span class="string">&quot;secret&quot;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>启动测试</p>
</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/2020030711-c1217270b05241ca96fa42f063ba8d9f.png" alt="2020030711"><br><img src="https://eelve.com/upload/2020/3/2020030712-8ae5730e5301448b974d67545ff98e7a.png" alt="2020030712"></p>
<p>到这里我们采集的nginx的指标数据，并且利用Kibana安装的Metricbeatd的nginx仪表盘做了图形化展示。</p>
<h1 id="肆、Metricbeat组成"><a href="#肆、Metricbeat组成" class="headerlink" title="肆、Metricbeat组成"></a>肆、Metricbeat组成</h1><p>Metricbeat有2部分组成，一部分是Module，另一部分为Metricset。</p>
<ul>
<li><p>Module</p>
<p>收集的对象，如：mysql、redis、nginx、操作系统等；</p>
</li>
<li><p>Metricset</p>
<p>收集指标的集合，如：cpu、memory、network等；  </p>
</li>
</ul>
<hr>
<p>【<strong>后面的话</strong>】在本文中我们利用Metricbeat监控了系统和nginx的系统指标，并且做了图标化的展示。其他module的使用也类似，他们都是利用Metricbeat给被监控的机器放松状态指令，然后采集数据，再做图形化的展示。同时我们也看到Merticbeat也内置了很多的module，足够了我们日工作需要了。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之应用日志监控</title>
    <url>/posts/2266c12c.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前面我们已经介绍了<a href="https://eelve.com/posts/975621af.html">Elasticsearch</a>、<a href="https://eelve.com/posts/e05eadb0.html">Logstash</a>、<a href="https://eelve.com/posts/b84d7094.html">Kibana</a>和<a href="https://eelve.com/posts/d1a5ff40.html">Beats</a>，并且都对各个组件进行了初步体验。今天我们就来模拟一把日常使用，来收集一个我们自己的应用的日志，并使用Kibana展示。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br><span class="line"><span class="attr">Kibana:</span> <span class="string">kibana-7.6.0</span></span><br><span class="line"><span class="string">Filebeat：filebeat-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、自定义采集应用"><a href="#贰、自定义采集应用" class="headerlink" title="贰、自定义采集应用"></a>贰、自定义采集应用</h1><p>我们这里来模拟一个现在购物网站的使用，主要代码如下</p>
<ul>
<li>核心代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.elk.dashboardgenerate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.RandomUtils;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DashboardGenerateApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DashboardGenerateApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] VISIT = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;浏览页面&quot;</span>, <span class="string">&quot;评论商品&quot;</span>, <span class="string">&quot;加入收藏&quot;</span>, <span class="string">&quot;加入购物车&quot;</span>, <span class="string">&quot;提交订单&quot;</span>, <span class="string">&quot;使用优惠券&quot;</span>, <span class="string">&quot;领取优惠券&quot;</span>, <span class="string">&quot;搜索&quot;</span>, <span class="string">&quot;查看订单&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Long sleep = RandomUtils.nextLong(<span class="number">200</span>, <span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">            Thread.sleep(sleep);</span><br><span class="line">            Long maxUserId = <span class="number">9999L</span>;</span><br><span class="line">            Long userId = RandomUtils.nextLong(<span class="number">1</span>, maxUserId);</span><br><span class="line">            String visit = VISIT[RandomUtils.nextInt(<span class="number">0</span>, VISIT.length)];</span><br><span class="line">            DateTime now = <span class="keyword">new</span> DateTime();</span><br><span class="line">            <span class="keyword">int</span> maxHour = now.getHourOfDay();</span><br><span class="line">            <span class="keyword">int</span> maxMillis = now.getMinuteOfHour();</span><br><span class="line">            <span class="keyword">int</span> maxSeconds = now.getSecondOfMinute();</span><br><span class="line">            String date = now.plusHours(-(RandomUtils.nextInt(<span class="number">0</span>, maxHour)))</span><br><span class="line">                    .plusMinutes(-(RandomUtils.nextInt(<span class="number">0</span>, maxMillis)))</span><br><span class="line">                    .plusSeconds(-(RandomUtils.nextInt(<span class="number">0</span>, maxSeconds)))</span><br><span class="line">                    .toString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String result = <span class="string">&quot;IIO|&quot;</span> + userId + <span class="string">&quot;|&quot;</span> + visit + <span class="string">&quot;|&quot;</span> + date;</span><br><span class="line">            LOGGER.info(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>日志配置文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1,A2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%p] %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%c] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A2</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A2.File</span> = <span class="string">/iio/logs/app.log</span></span><br><span class="line"><span class="meta">log4j.appender.A2.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.A2.Threshold</span> = <span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.A2.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A2.layout.ConversionPattern</span> =<span class="string">[%p] %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%c] - %m%n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_221\bin\java.exe&quot; -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true &quot;-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.1\lib\idea_rt.jar=6396:C:\Program Files\JetBrains\IntelliJ IDEA 2019.1\bin&quot; -Dfile.encoding=UTF-8 -classpath &quot;C:\Program Files\Java\jdk1.8.0_221\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\rt.jar;D:\iio\dashboard-generate\target\classes;C:\Users\Chirius\.m2\repository\org\springframework\boot\spring-boot-starter\2.2.5.RELEASE\spring-boot-starter-2.2.5.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\boot\spring-boot\2.2.5.RELEASE\spring-boot-2.2.5.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-context\5.2.4.RELEASE\spring-context-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-aop\5.2.4.RELEASE\spring-aop-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-beans\5.2.4.RELEASE\spring-beans-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-expression\5.2.4.RELEASE\spring-expression-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.2.5.RELEASE\spring-boot-autoconfigure-2.2.5.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.2.5.RELEASE\spring-boot-starter-logging-2.2.5.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.12.1\log4j-to-slf4j-2.12.1.jar;C:\Users\Chirius\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar;C:\Users\Chirius\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\Chirius\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-core\5.2.4.RELEASE\spring-core-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-jcl\5.2.4.RELEASE\spring-jcl-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar;C:\Users\Chirius\.m2\repository\org\apache\commons\commons-lang3\3.3.2\commons-lang3-3.3.2.jar;C:\Users\Chirius\.m2\repository\joda-time\joda-time\2.9.9\joda-time-2.9.9.jar;C:\Users\Chirius\.m2\repository\org\slf4j\slf4j-log4j12\1.7.26\slf4j-log4j12-1.7.26.jar;C:\Users\Chirius\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\Chirius\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar&quot; com.eelve.elk.dashboardgenerate.DashboardGenerateApplication</span><br><span class="line">[INFO] 2020-03-14 21:06:09 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|4234|加入收藏|2020-03-14 04:04:03</span><br><span class="line">[INFO] 2020-03-14 21:06:11 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|6502|领取优惠券|2020-03-14 14:05:07</span><br><span class="line">[INFO] 2020-03-14 21:06:12 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|3694|加入购物车|2020-03-14 20:03:09</span><br><span class="line">[INFO] 2020-03-14 21:06:14 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|8112|使用优惠券|2020-03-14 12:06:02</span><br><span class="line">[INFO] 2020-03-14 21:06:14 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|3391|加入收藏|2020-03-14 02:01:05</span><br><span class="line">[INFO] 2020-03-14 21:06:17 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|3696|搜索|2020-03-14 04:06:05</span><br><span class="line">[INFO] 2020-03-14 21:06:18 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|6670|使用优惠券|2020-03-14 17:04:17</span><br><span class="line">[INFO] 2020-03-14 21:06:21 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|6646|搜索|2020-03-14 11:06:05</span><br><span class="line">[INFO] 2020-03-14 21:06:24 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|8227|使用优惠券|2020-03-14 12:06:24</span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们这里模拟了用户的操作，并记录到/iio/logs/app.log文件中。主要的业务流程为：APP-&gt;filebeat-&gt;logstash-&gt;elasticsearch-&gt;kibanan-&gt;User</p>
<p><img src="https://image.eelve.com/eblog/2020031400-c4c762ac3d134548bea4fb19e64088a6.png" alt="2020031400"></p>
<h1 id="叁、准备过程"><a href="#叁、准备过程" class="headerlink" title="叁、准备过程"></a>叁、准备过程</h1><h2 id="3-1-编写filebeat配置"><a href="#3-1-编写filebeat配置" class="headerlink" title="3.1 编写filebeat配置"></a>3.1 编写filebeat配置</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ vi dashboard.yml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /iio/logs/*.log</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;192.168.237.11:5044&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-2-编写logstash配置"><a href="#3-2-编写logstash配置" class="headerlink" title="3.2 编写logstash配置"></a>3.2 编写logstash配置</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 config]$ vi logstash-dashboard.yml </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; &quot;5044&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">       &quot;userId&quot; =&gt; &quot;%&#123;[message][1]&#125;&quot;</span><br><span class="line">       &quot;visit&quot; =&gt; &quot;%&#123;[message][2]&#125;&quot;</span><br><span class="line">       &quot;date&quot; =&gt; &quot;%&#123;[message][3]&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    convert =&gt; &#123;</span><br><span class="line">        &quot;userId&quot; =&gt; &quot;integer&quot;</span><br><span class="line">        &quot;visit&quot; =&gt; &quot;string&quot;</span><br><span class="line">        &quot;date&quot; =&gt; &quot;string&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;192.168.237.11:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-启动应用"><a href="#3-3-启动应用" class="headerlink" title="3.3 启动应用"></a>3.3 启动应用</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 home]# java -jar dashboard-generate-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-启动elasticsearch"><a href="#3-4-启动elasticsearch" class="headerlink" title="3.4 启动elasticsearch"></a>3.4 启动elasticsearch</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./elasticsearch</span><br></pre></td></tr></table></figure>
<h2 id="3-5-启动kibana"><a href="#3-5-启动kibana" class="headerlink" title="3.5 启动kibana"></a>3.5 启动kibana</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./kibana</span><br></pre></td></tr></table></figure>
<h2 id="3-6-启动logstash"><a href="#3-6-启动logstash" class="headerlink" title="3.6 启动logstash"></a>3.6 启动logstash</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./logstash -f /usr/elastic/logstash/config/logstash-dashboard.yml</span><br></pre></td></tr></table></figure>
<h2 id="3-7-启动filebeat"><a href="#3-7-启动filebeat" class="headerlink" title="3.7 启动filebeat"></a>3.7 启动filebeat</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ ./filebeat  -e -c dashboard.yml</span><br></pre></td></tr></table></figure>
<h2 id="3-8-查看采集的数据"><a href="#3-8-查看采集的数据" class="headerlink" title="3.8 查看采集的数据"></a>3.8 查看采集的数据</h2><p><img src="https://image.eelve.com/eblog/2020031401-66d588f9d78f4bf4b34b3d9d0f82001d.png" alt="2020031401"></p>
<h2 id="3-9-开始制作大屏"><a href="#3-9-开始制作大屏" class="headerlink" title="3.9 开始制作大屏"></a>3.9 开始制作大屏</h2><p><img src="https://image.eelve.com/eblog/2020031402-28114b868ca3470497782f558737d25e.png" alt="2020031402"><br><img src="https://image.eelve.com/eblog/2020031403-7b2ffa7f424b478781543ffb2b1b4207.png" alt="2020031403"><br><img src="https://image.eelve.com/eblog/2020031404-41d668eff3e247e7aa942d850e7775fa.png" alt="2020031404"><br><img src="https://image.eelve.com/eblog/2020031405-2aba46902b5f4495bfae81991385b60d.png" alt="2020031405"><br><img src="https://image.eelve.com/eblog/2020031406-8dbfc5fc883e46298da14ceb8e14348c.png" alt="2020031406"><br><img src="https://image.eelve.com/eblog/2020031407-cd57f9cb79b64ca6acaa2ba604e78511.png" alt="2020031407"></p>
<p>到这里我们可以看到就已经完成了对我们自定义数据的监控，然后还利用了Kibana做了图表化展示。</p>
<hr>
<p>【<strong>后面的话</strong>】在我们日常应用中，我们的日志需要按照某种规则产生，方便我们使用logstash进行过滤，然后做一些处理。也就是说我们在开发之前就应该想好日志生成的格式，然后设计好日志的处理方式。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之应用日志监控本地版</title>
    <url>/posts/cd48ff18.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前面我们已经介绍了<a href="https://eelve.com/posts/975621af.html">Elasticsearch</a>、<a href="https://eelve.com/posts/e05eadb0.html">Logstash</a>、<a href="https://eelve.com/posts/b84d7094.html">Kibana</a>和<a href="https://eelve.com/posts/d1a5ff40.html">Beats</a>，并且都对各个组件进行了初步体验。今天我们就来模拟一把日常使用，来收集一个我们自己的应用的日志，并使用Kibana展示。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br><span class="line"><span class="attr">Kibana:</span> <span class="string">kibana-7.6.0</span></span><br><span class="line"><span class="string">Filebeat：filebeat-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、自定义采集应用"><a href="#贰、自定义采集应用" class="headerlink" title="贰、自定义采集应用"></a>贰、自定义采集应用</h1><p>我们这里来模拟一个现在购物网站的使用，主要代码如下</p>
<ul>
<li>核心代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.elk.dashboardgenerate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.RandomUtils;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DashboardGenerateApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DashboardGenerateApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] VISIT = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;浏览页面&quot;</span>, <span class="string">&quot;评论商品&quot;</span>, <span class="string">&quot;加入收藏&quot;</span>, <span class="string">&quot;加入购物车&quot;</span>, <span class="string">&quot;提交订单&quot;</span>, <span class="string">&quot;使用优惠券&quot;</span>, <span class="string">&quot;领取优惠券&quot;</span>, <span class="string">&quot;搜索&quot;</span>, <span class="string">&quot;查看订单&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Long sleep = RandomUtils.nextLong(<span class="number">200</span>, <span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">            Thread.sleep(sleep);</span><br><span class="line">            Long maxUserId = <span class="number">9999L</span>;</span><br><span class="line">            Long userId = RandomUtils.nextLong(<span class="number">1</span>, maxUserId);</span><br><span class="line">            String visit = VISIT[RandomUtils.nextInt(<span class="number">0</span>, VISIT.length)];</span><br><span class="line">            DateTime now = <span class="keyword">new</span> DateTime();</span><br><span class="line">            <span class="keyword">int</span> maxHour = now.getHourOfDay();</span><br><span class="line">            <span class="keyword">int</span> maxMillis = now.getMinuteOfHour();</span><br><span class="line">            <span class="keyword">int</span> maxSeconds = now.getSecondOfMinute();</span><br><span class="line">            String date = now.plusHours(-(RandomUtils.nextInt(<span class="number">0</span>, maxHour)))</span><br><span class="line">                    .plusMinutes(-(RandomUtils.nextInt(<span class="number">0</span>, maxMillis)))</span><br><span class="line">                    .plusSeconds(-(RandomUtils.nextInt(<span class="number">0</span>, maxSeconds)))</span><br><span class="line">                    .toString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String result = <span class="string">&quot;IIO|&quot;</span> + userId + <span class="string">&quot;|&quot;</span> + visit + <span class="string">&quot;|&quot;</span> + date;</span><br><span class="line">            LOGGER.info(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>日志配置文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1,A2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%p] %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%c] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.A2</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A2.File</span> = <span class="string">/iio/logs/app.log</span></span><br><span class="line"><span class="meta">log4j.appender.A2.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.A2.Threshold</span> = <span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.A2.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A2.layout.ConversionPattern</span> =<span class="string">[%p] %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%c] - %m%n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_221\bin\java.exe&quot; -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true &quot;-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.1\lib\idea_rt.jar=6396:C:\Program Files\JetBrains\IntelliJ IDEA 2019.1\bin&quot; -Dfile.encoding=UTF-8 -classpath &quot;C:\Program Files\Java\jdk1.8.0_221\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\rt.jar;D:\iio\dashboard-generate\target\classes;C:\Users\Chirius\.m2\repository\org\springframework\boot\spring-boot-starter\2.2.5.RELEASE\spring-boot-starter-2.2.5.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\boot\spring-boot\2.2.5.RELEASE\spring-boot-2.2.5.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-context\5.2.4.RELEASE\spring-context-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-aop\5.2.4.RELEASE\spring-aop-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-beans\5.2.4.RELEASE\spring-beans-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-expression\5.2.4.RELEASE\spring-expression-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.2.5.RELEASE\spring-boot-autoconfigure-2.2.5.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.2.5.RELEASE\spring-boot-starter-logging-2.2.5.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.12.1\log4j-to-slf4j-2.12.1.jar;C:\Users\Chirius\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar;C:\Users\Chirius\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar;C:\Users\Chirius\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-core\5.2.4.RELEASE\spring-core-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\springframework\spring-jcl\5.2.4.RELEASE\spring-jcl-5.2.4.RELEASE.jar;C:\Users\Chirius\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar;C:\Users\Chirius\.m2\repository\org\apache\commons\commons-lang3\3.3.2\commons-lang3-3.3.2.jar;C:\Users\Chirius\.m2\repository\joda-time\joda-time\2.9.9\joda-time-2.9.9.jar;C:\Users\Chirius\.m2\repository\org\slf4j\slf4j-log4j12\1.7.26\slf4j-log4j12-1.7.26.jar;C:\Users\Chirius\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar;C:\Users\Chirius\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar&quot; com.eelve.elk.dashboardgenerate.DashboardGenerateApplication</span><br><span class="line">[INFO] 2020-03-14 21:06:09 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|4234|加入收藏|2020-03-14 04:04:03</span><br><span class="line">[INFO] 2020-03-14 21:06:11 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|6502|领取优惠券|2020-03-14 14:05:07</span><br><span class="line">[INFO] 2020-03-14 21:06:12 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|3694|加入购物车|2020-03-14 20:03:09</span><br><span class="line">[INFO] 2020-03-14 21:06:14 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|8112|使用优惠券|2020-03-14 12:06:02</span><br><span class="line">[INFO] 2020-03-14 21:06:14 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|3391|加入收藏|2020-03-14 02:01:05</span><br><span class="line">[INFO] 2020-03-14 21:06:17 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|3696|搜索|2020-03-14 04:06:05</span><br><span class="line">[INFO] 2020-03-14 21:06:18 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|6670|使用优惠券|2020-03-14 17:04:17</span><br><span class="line">[INFO] 2020-03-14 21:06:21 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|6646|搜索|2020-03-14 11:06:05</span><br><span class="line">[INFO] 2020-03-14 21:06:24 [com.eelve.elk.dashboardgenerate.DashboardGenerateApplication] - IIO|8227|使用优惠券|2020-03-14 12:06:24</span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们这里模拟了用户的操作，并记录到/iio/logs/app.log文件中。主要的业务流程为：APP-&gt;filebeat-&gt;logstash-&gt;elasticsearch-&gt;kibanan-&gt;User</p>
<p><img src="https://eelve.com/upload/2020/3/2020031400-c4c762ac3d134548bea4fb19e64088a6.png" alt="2020031400"></p>
<h1 id="叁、准备过程"><a href="#叁、准备过程" class="headerlink" title="叁、准备过程"></a>叁、准备过程</h1><h2 id="3-1-编写filebeat配置"><a href="#3-1-编写filebeat配置" class="headerlink" title="3.1 编写filebeat配置"></a>3.1 编写filebeat配置</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ vi dashboard.yml </span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /iio/logs/*.log</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;192.168.237.11:5044&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-2-编写logstash配置"><a href="#3-2-编写logstash配置" class="headerlink" title="3.2 编写logstash配置"></a>3.2 编写logstash配置</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 config]$ vi logstash-dashboard.yml </span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; &quot;5044&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">       &quot;userId&quot; =&gt; &quot;%&#123;[message][1]&#125;&quot;</span><br><span class="line">       &quot;visit&quot; =&gt; &quot;%&#123;[message][2]&#125;&quot;</span><br><span class="line">       &quot;date&quot; =&gt; &quot;%&#123;[message][3]&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    convert =&gt; &#123;</span><br><span class="line">        &quot;userId&quot; =&gt; &quot;integer&quot;</span><br><span class="line">        &quot;visit&quot; =&gt; &quot;string&quot;</span><br><span class="line">        &quot;date&quot; =&gt; &quot;string&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;192.168.237.11:9200&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-启动应用"><a href="#3-3-启动应用" class="headerlink" title="3.3 启动应用"></a>3.3 启动应用</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 home]# java -jar dashboard-generate-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-启动elasticsearch"><a href="#3-4-启动elasticsearch" class="headerlink" title="3.4 启动elasticsearch"></a>3.4 启动elasticsearch</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./elasticsearch</span><br></pre></td></tr></table></figure>
<h2 id="3-5-启动kibana"><a href="#3-5-启动kibana" class="headerlink" title="3.5 启动kibana"></a>3.5 启动kibana</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./kibana</span><br></pre></td></tr></table></figure>
<h2 id="3-6-启动logstash"><a href="#3-6-启动logstash" class="headerlink" title="3.6 启动logstash"></a>3.6 启动logstash</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./logstash -f /usr/elastic/logstash/config/logstash-dashboard.yml</span><br></pre></td></tr></table></figure>
<h2 id="3-7-启动filebeat"><a href="#3-7-启动filebeat" class="headerlink" title="3.7 启动filebeat"></a>3.7 启动filebeat</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ ./filebeat  -e -c dashboard.yml</span><br></pre></td></tr></table></figure>
<h2 id="3-8-查看采集的数据"><a href="#3-8-查看采集的数据" class="headerlink" title="3.8 查看采集的数据"></a>3.8 查看采集的数据</h2><p><img src="https://eelve.com/upload/2020/3/2020031401-66d588f9d78f4bf4b34b3d9d0f82001d.png" alt="2020031401"></p>
<h2 id="3-9-开始制作大屏"><a href="#3-9-开始制作大屏" class="headerlink" title="3.9 开始制作大屏"></a>3.9 开始制作大屏</h2><p><img src="https://eelve.com/upload/2020/3/2020031402-28114b868ca3470497782f558737d25e.png" alt="2020031402"><br><img src="https://eelve.com/upload/2020/3/2020031403-7b2ffa7f424b478781543ffb2b1b4207.png" alt="2020031403"><br><img src="https://eelve.com/upload/2020/3/2020031404-41d668eff3e247e7aa942d850e7775fa.png" alt="2020031404"><br><img src="https://eelve.com/upload/2020/3/2020031405-2aba46902b5f4495bfae81991385b60d.png" alt="2020031405"><br><img src="https://eelve.com/upload/2020/3/2020031406-8dbfc5fc883e46298da14ceb8e14348c.png" alt="2020031406"><br><img src="https://eelve.com/upload/2020/3/2020031407-cd57f9cb79b64ca6acaa2ba604e78511.png" alt="2020031407"></p>
<p>到这里我们可以看到就已经完成了对我们自定义数据的监控，然后还利用了Kibana做了图表化展示。</p>
<hr>
<p>【<strong>后面的话</strong>】在我们日常应用中，我们的日志需要按照某种规则产生，方便我们使用logstash进行过滤，然后做一些处理。也就是说我们在开发之前就应该想好日志生成的格式，然后设计好日志的处理方式。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之环境准备</title>
    <url>/posts/cdfa1d48.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】首先还是是简单说一下<a href="https://www.elastic.co/">Elastic Stack</a>技术栈吧。ELK = Elasticsearch, Logstash, Kibana 是一套实时数据收集，存储，索引，检索，统计分析及可视化的解决方案。最新版本已经改名为Elastic Stack，并新增了Beats项目。</p>
<p><img src="https://eelve.com/upload/2020/3/2020030104-b3bb574e37fd4c9a959c5b8ba383033c.png" alt="2020030104"><br><img src="https://eelve.com/upload/2020/3/2020030105-8644c0540b6041d9a726b0fdf31845a0.png" alt="2020030105"></p>
<p><strong>Elasticsearch</strong></p>
<pre><code>Elasticsearch 基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引
副本机制，restful风格接口，多数据源，自动搜索负载等。
</code></pre>
<p><strong>Logstash</strong></p>
<pre><code>Logstash 基于java，是一个开源的用于收集,分析和存储日志的工具。
</code></pre>
<p><strong>Kibana</strong></p>
<pre><code>Kibana 基于nodejs，也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的
Web 界面，可以汇总、分析和搜索重要数据日志。
</code></pre>
<p><strong>Beats</strong></p>
<pre><code>Beats是elastic公司开源的一款采集系统监控数据的代理agent，是在被监控服务器上以客户端形式运行的数据收集
器的统称，可以直接把数据发送给Elasticsearch或者通过Logstash发送给Elasticsearch，然后进行后续的数据分析活
动。
Beats由如下组成:
Packetbeat：是一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat嗅探服务器之间的流量，
解析应用层协议，并关联到消息的处理，其支 持ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、
Redis、MongoDB、Memcache等协议；
Filebeat：用于监控、收集服务器日志文件，其已取代 logstash forwarder；
Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB
MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务；
Winlogbeat：用于监控、收集Windows系统的日志信息；
</code></pre>
<p>但是很多用户还是用ELK来代替Elastic Stack，并且目前的最新版本已经来到了7.6.0，在后面的实践过程中如果没有特指的话，都会是基于最新版本的实践。下面来说一下我的环境，我本人的云服务器，性能不是很够，这边我的解决方案是用虚拟机来解决。所以在这篇文章中是主要介绍在VM中搭建linux服务器的，并且为了资源不浪费，我这边会做最小化安装。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、主要步骤"><a href="#贰、主要步骤" class="headerlink" title="贰、主要步骤"></a>贰、主要步骤</h1><pre><code>在网络中有很多安装的具体步骤，我子啊这里只是说一下容易出错的点。
</code></pre>
<h2 id="2-1-VM创建虚拟机"><a href="#2-1-VM创建虚拟机" class="headerlink" title="2.1 VM创建虚拟机"></a>2.1 VM创建虚拟机</h2><p><img src="https://eelve.com/upload/2020/2/2020022903-e627be2203d040a8aae53c43c767e582.png" alt="2020022903"><br><img src="https://eelve.com/upload/2020/2/2020022903-e627be2203d040a8aae53c43c767e582.png" alt="2020022903"><br><img src="https://eelve.com/upload/2020/2/2020022905-baf50368479142869e6d506e899f6623.png" alt="2020022905"><br><img src="https://eelve.com/upload/2020/2/2020022906-79511d7494064df9a76dbbb00a529757.png" alt="2020022906"><br><img src="https://eelve.com/upload/2020/2/2020022907-d16b584e859c43c794badd92ed116ccc.png" alt="2020022907"><br><img src="https://eelve.com/upload/2020/2/2020022911-e111cb9fe7d94935b0cd7b8613d6e278.png" alt="2020022911"></p>
<h2 id="2-2-安装Centos7"><a href="#2-2-安装Centos7" class="headerlink" title="2.2 安装Centos7"></a>2.2 安装Centos7</h2><p><img src="https://eelve.com/upload/2020/2/2020022913-34b2a693fd0e4cfa9c6484063bc3a00c.png" alt="2020022913"><br><img src="https://eelve.com/upload/2020/2/2020022914-8fb414bf521544518671a2da4fb142f1.png" alt="2020022914"><br><img src="https://eelve.com/upload/2020/2/2020022915-d2e5d18a228448709a81391ce595bcff.png" alt="2020022915"><br><img src="https://eelve.com/upload/2020/2/2020022916-1ca2096fd9c945a4bdc1da5ea0c6c898.png" alt="2020022916"><br><img src="https://eelve.com/upload/2020/2/2020022917-10884dc7ec5348eebb35f8682e627281.png" alt="2020022917"></p>
<h1 id="叁、注意事项"><a href="#叁、注意事项" class="headerlink" title="叁、注意事项"></a>叁、注意事项</h1><pre><code>以下几点是特别需要主要：静态网络映射，时钟同步，系统资源配置
</code></pre>
<h2 id="3-1-静态网络映射"><a href="#3-1-静态网络映射" class="headerlink" title="3.1 静态网络映射"></a>3.1 静态网络映射</h2><p>首先获取子网IP，子网掩码，和网关地址</p>
<p><img src="https://eelve.com/upload/2020/2/2020022918-006bef024d834c50bef94d415e3b3e05.png" alt="2020022918"><br><img src="https://eelve.com/upload/2020/2/2020022919-208c5c4049a847ff94be761f512e9dde.png" alt="2020022919"></p>
<p>在最小化安装的CentOS7中，ifconfig是不能使用的，查看网卡信息的命令是：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p><img src="https://eelve.com/upload/2020/2/2020022920-57cff54e5cde4ddd96079ae6172070ae.png" alt="2020022920"></p>
<p>其中“ens33”为网卡名称，根据得到网关和子网ip等修改IP地址等信息</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=2cce262f-99d8-485e-aa8e-f2493405715a</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.237.11</span><br><span class="line">GATEWAY=192.168.237.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=192.168.237.2</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改好后保存退出，并重启网络，测试网络是否连接正常：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 ~]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br><span class="line">[root@192 ~]# ping www.eelve.com</span><br><span class="line">PING www.eelve.com (47.98.209.166) 56(84) bytes of data.</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=1 ttl=128 time=38.1 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=2 ttl=128 time=38.7 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=3 ttl=128 time=39.4 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=4 ttl=128 time=51.3 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=5 ttl=128 time=38.1 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=6 ttl=128 time=37.9 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=7 ttl=128 time=44.5 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=8 ttl=128 time=37.7 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=9 ttl=128 time=37.9 ms</span><br><span class="line">^C</span><br><span class="line">--- www.eelve.com ping statistics ---</span><br><span class="line">9 packets transmitted, 9 received, 0% packet loss, time 9110ms</span><br><span class="line">rtt min/avg/max/mdev = 37.753/40.435/51.388/4.365 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>到了这里我们就可以使用XShell用配置的静态IP来连接服务器使用了</p>
<p><img src="https://eelve.com/upload/2020/2/2020022921-0f8c6a976821406081e228e76f359236.png" alt="2020022921"></p>
<h2 id="3-2-时钟同步"><a href="#3-2-时钟同步" class="headerlink" title="3.2 时钟同步"></a>3.2 时钟同步</h2><p>yum进行软件安装，软件安装过程中如遇到询问，一律选择y，ntp是时间同步命令</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">yum -y install ntp</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">ntpdate time1.aliyun.com</span><br></pre></td></tr></table></figure>
<p>然后就可以成功同步时间，然后查看</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 ~]# date</span><br><span class="line">Sat Feb 29 18:08:31 CST 2020</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-3-系统资源配置"><a href="#3-3-系统资源配置" class="headerlink" title="3.3 系统资源配置"></a>3.3 系统资源配置</h2><p>系统资源的话，主要是虚拟机安装，都可以方便修改，这边后期要安装Elastic Stack，最好是稍微调大一点，内存至少为2G，因为Elasticsearch和Kibana都是需要用到Java虚拟机的，尤其是你准备把这两个服务都安装在一台机器上的话。</p>
<hr>
<p>【<strong>最后的话</strong>】时钟同步，是一定要配置的，不然会造成之后Elastic Stack中的服务不可用，当然也不是真的不可用，你只是会在Kibana中看不到你的数据映射，因为默认Kibana的时间展示参数为最近15分钟，如果你的时间相差很远的话，就可能造成Elasticsearch中能采集数据，但是Kibana展示不出来，这个对于初学者来说会造成Kibana数据不能映射问题，这点在后面会做具体介绍的。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Linux</tag>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之环境准备本地版</title>
    <url>/posts/520ff9fc.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】首先还是是简单说一下<a href="https://www.elastic.co/">Elastic Stack</a>技术栈吧。ELK = Elasticsearch, Logstash, Kibana 是一套实时数据收集，存储，索引，检索，统计分析及可视化的解决方案。最新版本已经改名为Elastic Stack，并新增了Beats项目。</p>
<p><img src="https://image.eelve.com/eblog/2020030104-b3bb574e37fd4c9a959c5b8ba383033c.png" alt="2020030104"><br><img src="https://image.eelve.com/eblog/2020030105-8644c0540b6041d9a726b0fdf31845a0.png" alt="2020030105"></p>
<p><strong>Elasticsearch</strong></p>
<pre><code>Elasticsearch 基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引
副本机制，restful风格接口，多数据源，自动搜索负载等。
</code></pre>
<p><strong>Logstash</strong></p>
<pre><code>Logstash 基于java，是一个开源的用于收集,分析和存储日志的工具。
</code></pre>
<p><strong>Kibana</strong></p>
<pre><code>Kibana 基于nodejs，也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的
Web 界面，可以汇总、分析和搜索重要数据日志。
</code></pre>
<p><strong>Beats</strong></p>
<pre><code>Beats是elastic公司开源的一款采集系统监控数据的代理agent，是在被监控服务器上以客户端形式运行的数据收集
器的统称，可以直接把数据发送给Elasticsearch或者通过Logstash发送给Elasticsearch，然后进行后续的数据分析活
动。
Beats由如下组成:
Packetbeat：是一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat嗅探服务器之间的流量，
解析应用层协议，并关联到消息的处理，其支 持ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、
Redis、MongoDB、Memcache等协议；
Filebeat：用于监控、收集服务器日志文件，其已取代 logstash forwarder；
Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB
MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务；
Winlogbeat：用于监控、收集Windows系统的日志信息；
</code></pre>
<p>但是很多用户还是用ELK来代替Elastic Stack，并且目前的最新版本已经来到了7.6.0，在后面的实践过程中如果没有特指的话，都会是基于最新版本的实践。下面来说一下我的环境，我本人的云服务器，性能不是很够，这边我的解决方案是用虚拟机来解决。所以在这篇文章中是主要介绍在VM中搭建linux服务器的，并且为了资源不浪费，我这边会做最小化安装。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、主要步骤"><a href="#贰、主要步骤" class="headerlink" title="贰、主要步骤"></a>贰、主要步骤</h1><pre><code>在网络中有很多安装的具体步骤，我子啊这里只是说一下容易出错的点。
</code></pre>
<h2 id="2-1-VM创建虚拟机"><a href="#2-1-VM创建虚拟机" class="headerlink" title="2.1 VM创建虚拟机"></a>2.1 VM创建虚拟机</h2><p><img src="https://image.eelve.com/eblog/2020022903-e627be2203d040a8aae53c43c767e582.png" alt="2020022903"><br><img src="https://image.eelve.com/eblog/2020022903-e627be2203d040a8aae53c43c767e582.png" alt="2020022903"><br><img src="https://image.eelve.com/eblog/2020022905-baf50368479142869e6d506e899f6623.png" alt="2020022905"><br><img src="https://image.eelve.com/eblog/2020022906-79511d7494064df9a76dbbb00a529757.png" alt="2020022906"><br><img src="https://image.eelve.com/eblog/2020022907-d16b584e859c43c794badd92ed116ccc.png" alt="2020022907"><br><img src="https://image.eelve.com/eblog/2020022911-e111cb9fe7d94935b0cd7b8613d6e278.png" alt="2020022911"></p>
<h2 id="2-2-安装Centos7"><a href="#2-2-安装Centos7" class="headerlink" title="2.2 安装Centos7"></a>2.2 安装Centos7</h2><p><img src="https://image.eelve.com/eblog/2020022913-34b2a693fd0e4cfa9c6484063bc3a00c.png" alt="2020022913"><br><img src="https://image.eelve.com/eblog/2020022914-8fb414bf521544518671a2da4fb142f1.png" alt="2020022914"><br><img src="https://image.eelve.com/eblog/2020022915-d2e5d18a228448709a81391ce595bcff.png" alt="2020022915"><br><img src="https://image.eelve.com/eblog/2020022916-1ca2096fd9c945a4bdc1da5ea0c6c898.png" alt="2020022916"><br><img src="https://image.eelve.com/eblog/2020022917-10884dc7ec5348eebb35f8682e627281.png" alt="2020022917"></p>
<h1 id="叁、注意事项"><a href="#叁、注意事项" class="headerlink" title="叁、注意事项"></a>叁、注意事项</h1><pre><code>以下几点是特别需要主要：静态网络映射，时钟同步，系统资源配置
</code></pre>
<h2 id="3-1-静态网络映射"><a href="#3-1-静态网络映射" class="headerlink" title="3.1 静态网络映射"></a>3.1 静态网络映射</h2><p>首先获取子网IP，子网掩码，和网关地址</p>
<p><img src="https://image.eelve.com/eblog/2020022918-006bef024d834c50bef94d415e3b3e05.png" alt="2020022918"><br><img src="https://image.eelve.com/eblog/2020022919-208c5c4049a847ff94be761f512e9dde.png" alt="2020022919"></p>
<p>在最小化安装的CentOS7中，ifconfig是不能使用的，查看网卡信息的命令是：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2020022920-57cff54e5cde4ddd96079ae6172070ae.png" alt="2020022920"></p>
<p>其中“ens33”为网卡名称，根据得到网关和子网ip等修改IP地址等信息</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=2cce262f-99d8-485e-aa8e-f2493405715a</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.237.11</span><br><span class="line">GATEWAY=192.168.237.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=192.168.237.2</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改好后保存退出，并重启网络，测试网络是否连接正常：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 ~]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br><span class="line">[root@192 ~]# ping www.eelve.com</span><br><span class="line">PING www.eelve.com (47.98.209.166) 56(84) bytes of data.</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=1 ttl=128 time=38.1 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=2 ttl=128 time=38.7 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=3 ttl=128 time=39.4 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=4 ttl=128 time=51.3 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=5 ttl=128 time=38.1 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=6 ttl=128 time=37.9 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=7 ttl=128 time=44.5 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=8 ttl=128 time=37.7 ms</span><br><span class="line">64 bytes from 47.98.209.166 (47.98.209.166): icmp_seq=9 ttl=128 time=37.9 ms</span><br><span class="line">^C</span><br><span class="line">--- www.eelve.com ping statistics ---</span><br><span class="line">9 packets transmitted, 9 received, 0% packet loss, time 9110ms</span><br><span class="line">rtt min/avg/max/mdev = 37.753/40.435/51.388/4.365 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>到了这里我们就可以使用XShell用配置的静态IP来连接服务器使用了</p>
<p><img src="https://image.eelve.com/eblog/2020022921-0f8c6a976821406081e228e76f359236.png" alt="2020022921"></p>
<h2 id="3-2-时钟同步"><a href="#3-2-时钟同步" class="headerlink" title="3.2 时钟同步"></a>3.2 时钟同步</h2><p>yum进行软件安装，软件安装过程中如遇到询问，一律选择y，ntp是时间同步命令</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">yum -y install ntp</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">ntpdate time1.aliyun.com</span><br></pre></td></tr></table></figure>
<p>然后就可以成功同步时间，然后查看</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[root@192 ~]# date</span><br><span class="line">Sat Feb 29 18:08:31 CST 2020</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-3-系统资源配置"><a href="#3-3-系统资源配置" class="headerlink" title="3.3 系统资源配置"></a>3.3 系统资源配置</h2><p>系统资源的话，主要是虚拟机安装，都可以方便修改，这边后期要安装Elastic Stack，最好是稍微调大一点，内存至少为2G，因为Elasticsearch和Kibana都是需要用到Java虚拟机的，尤其是你准备把这两个服务都安装在一台机器上的话。</p>
<hr>
<p>【<strong>最后的话</strong>】时钟同步，是一定要配置的，不然会造成之后Elastic Stack中的服务不可用，当然也不是真的不可用，你只是会在Kibana中看不到你的数据映射，因为默认Kibana的时间展示参数为最近15分钟，如果你的时间相差很远的话，就可能造成Elasticsearch中能采集数据，但是Kibana展示不出来，这个对于初学者来说会造成Kibana数据不能映射问题，这点在后面会做具体介绍的。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo拯救计划</title>
    <url>/posts/7eb7357b.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】就在上个月底，Github遭受了中间人攻击，导致Github Pages的证书被篡改失效，而基于此的一众利用Github Pages生成博客全部都不能访问。鉴于“不能把鸡蛋放在同一个篮子里”的优秀理念，我决定给我的博客找一个新家。</p>
<h1 id="壹、第三方博客"><a href="#壹、第三方博客" class="headerlink" title="壹、第三方博客"></a>壹、第三方博客</h1><p>本人在有<a href="https://zzlve.win/">Github Pages生成的博客</a>之外，我还有拥有<a href="https://eelve.com/">Halo搭建的博客</a>。<a href="https://halo.run/">Halo</a>一个优秀的开源博客发布应用。</p>
<h1 id="贰、CloudFlare"><a href="#贰、CloudFlare" class="headerlink" title="贰、CloudFlare"></a>贰、CloudFlare</h1><p>我们可以利用CloudFlare，在Hexo外层套一层证书，进而不使用Github Pages的证书，来避免这个问题。目前我的博客就是使用的CloudFlare，其访问速度和Gihub Pages的Fastly Anycast节点速度差不多，都是比较慢。</p>
<h1 id="叁、Gitee-Coding-GitLab"><a href="#叁、Gitee-Coding-GitLab" class="headerlink" title="叁、Gitee/Coding/GitLab"></a>叁、Gitee/Coding/GitLab</h1><p>我们也可以使用其他托管平台提供的服务，主要就是你需要将你的源程序上传到对应的平台然后在上面发布，下面说一下优缺点：</p>
<ul>
<li><a href="https://eelve.gitee.io/">Gitee</a><ul>
<li>优点：<ul>
<li>1.支持HTTPS</li>
<li>2.上海腾讯云节点</li>
</ul>
</li>
<li>缺点<ul>
<li>自定义域名需要付费套餐（且域名需要备案）  </li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>Coding<ul>
<li>优点：<ul>
<li>1.可自定义域名</li>
<li>2.支持HTTPS</li>
<li>3.全球腾讯云新加坡CN2</li>
</ul>
</li>
<li>缺点<ul>
<li>1.不稳定</li>
<li>2.不能被百度爬虫收录</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>GitLab<ul>
<li>优点：<ul>
<li>1.可自定义域名，自定义证书</li>
<li>2.支持HTTPS，一键SSL配置</li>
<li>3.GitLab-CI集成</li>
<li>4.Fastly Anycast节点</li>
<li>5.与GitHub功能上差不多，自带的GitLab-Ci持续部署能有效地提高效率。</li>
</ul>
</li>
<li>缺点<ul>
<li>1.国内访问速度与GitHub相似</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="肆、Netlify"><a href="#肆、Netlify" class="headerlink" title="肆、Netlify"></a>肆、Netlify</h1><p>主要特点：</p>
<ul>
<li>1.可自定义域名</li>
<li>2.支持HTTPS HTTP/2 IPv6</li>
<li>3.自定义页面重定向，静态资源优化</li>
<li>4.DigitalOcean 美国纽约&amp;新加坡节点</li>
</ul>
<p>另外Netlify提供的服务应该算是最多的。自定义插入代码、打包和压缩js/css、压缩，处理图片、自动部署、提供Webhooks与API等功能。</p>
<p>我自己的实现：<a href="https://eelve.netlify.com/">南国薏米</a>。在我本地提交代码之后会自动触发，重新解析从而可以达到博客同步更新，在这一点上是和Github Pages更新是一样的。</p>
<h1 id="伍、ZEIT"><a href="#伍、ZEIT" class="headerlink" title="伍、ZEIT"></a>伍、ZEIT</h1><p>主要特点：</p>
<ul>
<li>1.可自定义域名，自定义证书（付费）</li>
<li>2.支持HTTPS</li>
<li>3.提供ServerLess服务</li>
<li>4.GCP&amp;AWS节点</li>
<li>5.国内电信联通走台湾（电信有些地区35段绕美国），移动走美国</li>
</ul>
<p>另外大陆速度不错，可使用 now.sh CLI或GitHub，GitLab，Bitbucket导入项目进行自动代码部署，提供ServerLess，会地总分配的*.now.sh域名，但免费额度的流量有点少，限量20G。</p>
<p>我自己的实现：<a href="https://eelve-github-io.now.sh/">南国薏米</a>。在我本地提交代码之后会自动触发，重新解析从而可以达到博客同步更新，在这一点上是和Github Pages更新是一样的。说实话我们完全可以将博客迁移，并且你之前开发Hexo的不走完全没有改变。另外你的Hexo是采用多分支管理：博客分支和源代码分支。如果你的源代码分支中包含主题子仓库的话，发布之后ZEIT是不能正常解析的，会丢失样式。如果为了解决我们可以配置ZEIT是解析我们Hexo博客分支就 可以了。</p>
<h1 id="陆、云存储"><a href="#陆、云存储" class="headerlink" title="陆、云存储"></a>陆、云存储</h1><p>我这里有一个利用又拍云实现的案例：<a href="https://image.eelve.com/">南国薏米</a>。我们可以在生成静态页面之后，将页面全部上传的控件中，然后在云存储中开启index首页，就可以正常访问了。这里我们还可以结合hexo的插件来使用：</p>
<p>安装插件</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-upyundeploy --save</span><br></pre></td></tr></table></figure>
<p>编辑根目录的_config.yml文件的deploy字段,配置又拍云存储的服务名称、操作员名称、操作员密码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">upyun</span></span><br><span class="line">    <span class="attr">serviceName:</span> <span class="string">服务名称</span></span><br><span class="line">    <span class="attr">operatorName:</span> <span class="string">操作员名称</span></span><br><span class="line">    <span class="attr">operatorPassword:</span> <span class="string">操作员密码</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/</span> <span class="string">上传目录(选填，默认为根目录)</span></span><br></pre></td></tr></table></figure>

<hr>
<p>【<strong>后面的话</strong>】以上列举的各种方法，叁、肆、伍、陆都是生成静态博客。其中我个人最推荐方案伍，不仅你的开放方式不会改变，另外还能得到比较好的访问速度，还可以被百度的爬虫抓取。另外如果有服务器也喜欢的折腾的话，可以使用地方法博客程序搭建，包括但不仅限于Halo。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>lifeme</category>
      </categories>
      <tags>
        <tag>lifeme</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyper-V和IDEA运行端口占用问题</title>
    <url>/posts/ba44fc9d.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】因为安装Windows版本的Docker环境，开启了Hyper-V。其结果是导致了IDEA在运行Tomcat的时候提示1099端口占用，经过探索之后成功找到了解决方案。</p>
<h1 id="壹、原因分析"><a href="#壹、原因分析" class="headerlink" title="壹、原因分析"></a>壹、原因分析</h1><p>首先我们可以查看一下我们系统默认的端口占用范围；</p>
<blockquote>
<p>netsh int ipv4 show dynamicport tcp</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18363.752]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;netsh int ipv4 show dynamicport tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 动态端口范围</span><br><span class="line">---------------------------------</span><br><span class="line">启动端口        : 1024</span><br><span class="line">端口数          : 13977</span><br></pre></td></tr></table></figure>
<p>我们可以看到Windows系统默认的tcp 动态端口范围为：1024~13977。当我们开启Hyper-V后，系统默认会分配给一些保留端口供Hyper-V使用：</p>
<blockquote>
<p>netsh interface ipv4 show excludedportrange protocol=tcp</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Chirius&gt;netsh interface ipv4 show excludedportrange protocol=tcp</span><br><span class="line">协议 tcp 端口排除范围</span><br><span class="line"> </span><br><span class="line">开始端口    结束端口</span><br><span class="line">----------    --------</span><br><span class="line">      1026        1125</span><br><span class="line">      1226        1325</span><br><span class="line">      1326        1425</span><br><span class="line">      1426        1525</span><br><span class="line">      1526        1625</span><br><span class="line">      2180        2279</span><br></pre></td></tr></table></figure>
<p>我们可以看到IDEA运行Tomcat需要JMX的<strong>1099</strong>端口刚好在端口排除范围中，这样就导致了IDEA需要使用1099端口是会被占用，这样你当然就不能运行了。</p>
<h1 id="贰、解决方法"><a href="#贰、解决方法" class="headerlink" title="贰、解决方法"></a>贰、解决方法</h1><p>使用管理员身份运行cmd，重置端口，然后重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Chirius&gt;netsh winsock reset</span><br></pre></td></tr></table></figure>
<p>这样你的tcp端口排除范围可能刚好不包含<strong>1099</strong>端口，这样你当然就可以用你的IDEA运行Tomcat应用了。但是你啥时候会出现就不得而知了。</p>
<h1 id="叁、终极解决"><a href="#叁、终极解决" class="headerlink" title="叁、终极解决"></a>叁、终极解决</h1><h2 id="3-1-关闭Hyper-V"><a href="#3-1-关闭Hyper-V" class="headerlink" title="3.1 关闭Hyper-V"></a>3.1 关闭Hyper-V</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18363.752]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;dism.exe /Online /Disable-Feature:Microsoft-Hyper-V</span><br></pre></td></tr></table></figure>
<p>或者采用传统方式，在控制面板的“程序和功能”中，找到“Windows功能”，取消Hyper-V的勾选。这两种方法都会要求重启。</p>
<h2 id="3-2-修改动态端口范围"><a href="#3-2-修改动态端口范围" class="headerlink" title="3.2 修改动态端口范围"></a>3.2 修改动态端口范围</h2><p>使用管理员身份运行cmd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;netsh int ipv4 <span class="built_in">set</span> dynamicport tcp start=49152 num=16383</span><br><span class="line">确定。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;netsh int ipv4 <span class="built_in">set</span> dynamicport udp start=49152 num=16383</span><br><span class="line">确定。</span><br></pre></td></tr></table></figure>
<p>然后检查结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Chirius&gt;netsh int ipv4 show dynamicport tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 动态端口范围</span><br><span class="line">---------------------------------</span><br><span class="line">启动端口        : 49152</span><br><span class="line">端口数          : 16383</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18363.752]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;netsh interface ipv4 show excludedportrange protocol=tcp</span><br><span class="line"></span><br><span class="line">协议 tcp 端口排除范围</span><br><span class="line"></span><br><span class="line">开始端口    结束端口</span><br><span class="line">----------    --------</span><br><span class="line">      5357        5357</span><br><span class="line">     49702       49801</span><br><span class="line">     49802       49901</span><br><span class="line">     49902       50001</span><br><span class="line">     50051       50051     *</span><br><span class="line">     50052       50151</span><br><span class="line">     50152       50251</span><br><span class="line">     50252       50351</span><br><span class="line">     50352       50451</span><br><span class="line">     50465       50564</span><br><span class="line">     50911       51010</span><br><span class="line"></span><br><span class="line">* - 管理的端口排除。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-开启Hyper-V"><a href="#3-3-开启Hyper-V" class="headerlink" title="3.3 开启Hyper-V"></a>3.3 开启Hyper-V</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</span><br><span class="line"></span><br><span class="line">部署映像服务和管理工具</span><br><span class="line">版本: 10.0.18362.1</span><br><span class="line"></span><br><span class="line">映像版本: 10.0.18363.752</span><br><span class="line"></span><br><span class="line">启用一个或多个功能</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">操作成功完成。</span><br><span class="line">重新启动 Windows 以完成该操作。</span><br><span class="line">是否立即重新启动计算机? (Y/N)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2020041101-3b9aed15aec84b7e9a0bd3d122c54170.png" alt="开启Hyper-V"></p>
<p>或者采用传统方式，在控制面板的“程序和功能”中，找到“Windows功能”，取消Hyper-V的勾选。这两种方法都会要求重启。</p>
<p>【<strong>后面的话</strong>】使用终极解决方案解决之后，你会发现你的IDEA又可以正常运行了。另外这里说一个单独排除端口的命令，后面可能会用到：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=50051 numberofports=1</span><br></pre></td></tr></table></figure>
<p>使用上面的命令之后我们就可以单独排除某个端口了，保障改端口不会被其他应用占用。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Hyper-V</category>
      </categories>
      <tags>
        <tag>yper-V</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>No PostCSS Config found in ...报错解决</title>
    <url>/posts/46db808f.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】日前本人将本地项目上传GitHub之后，然后再clone到本地，运行时报错：Error: No PostCSS Config found in…</p>
<hr>
<p>项目在本地打包运行的时候不报错，上传到 GitHub 之后，再 clone 到本地，执行安装依赖命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure>
<p>安装完依赖之后再执行编译命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>这个时候居然报错了，纳尼？以为是Github代码的问题，就重新操作两遍，依然还是报错。于是开始搜索解决办法，在项目根目录新建postcss.config.js文件，并对postcss进行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123; </span><br><span class="line">  plugins: &#123; </span><br><span class="line">    &#39;autoprefixer&#39;: &#123;browsers: &#39;last 5 version&#39;&#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后测试，果然好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>项目在本地运行时本来不报错的，但是为什么上传到 GitHub 之后，再 clone 下来，再运行就得单独写一个 postcss.config.js 的文件并配置一下呢？</p>
<p>在npm上查到的postcss配置在webpack.config.js，postcss.config.js是针对webpack3.0做的特殊处理</p>
<p>【小贴士】如果在国内执行npm install很慢的话，可以安装cnpm命令，使用淘宝镜像，速度贼快。cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm即可。但是cnpm 的仓库只是 npm 仓库的一个拷贝，它不承担 publish 工作，所以你用 cnpm publish 命令会执行失败的，另外不仅是 publish 会执行失败，其它的需要注册用户(npm adduser)、或者修改 package 状态等命令都无法用 cnpm。</p>
<hr>
<p><a href="http://npm.taobao.org/">淘宝 NPM 镜像</a>：这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel进阶之基本原理</title>
    <url>/posts/950c5430.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/posts/d2ca763d.html">Sentinel入门指北</a> 中简单介绍了一下<code>Sentinel</code>，今天就来具体说一下<code>Sentinel</code>的基本原理。</p>
<hr>
<h1 id="壹、概述"><a href="#壹、概述" class="headerlink" title="壹、概述"></a>壹、概述</h1><p>在 <code>Sentinel</code> 里面，所有的资源都对应一个资源名称以及一个 <code>Entry</code>。<code>Entry</code> 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 <code>API</code> 显式创建；每一个 <code>Entry</code> 创建的时候，同时也会创建一系列功能插槽（slot chain）。这些插槽有不同的职责，例如:</p>
<ul>
<li><code>NodeSelectorSlot</code> 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级； </li>
<li><code>ClusterBuilderSlot</code> 则用于存储资源的统计信息以及调用者信息，例如该资源的 <code>RT</code>, <code>QPS</code>, <code>thread count</code> 等等，这些信息将用作为多维度限流，降级的依据；</li>
<li><code>StatisticSlot</code> 则用于记录、统计不同纬度的 <code>runtime</code> 指标监控信息；</li>
<li><code>FlowSlot</code> 则用于根据预设的限流规则以及前面 <code>slot</code> 统计的状态，来进行流量控制；</li>
<li><code>AuthoritySlot</code> 则根据配置的黑白名单和调用来源信息，来做黑白名单控制；</li>
<li><code>DegradeSlot</code> 则通过统计信息以及预设的规则，来做熔断降级；</li>
<li><code>SystemSlot</code> 则通过系统的状态，例如 <code>load1</code> 等，来控制总的入口流量；</li>
</ul>
<p>总体的框架如下:</p>
<p><img src="https://image.eelve.com/eblog/2021053001.png" alt="总体框架图"></p>
<p><code>Sentinel</code> 将 <code>ProcessorSlot</code> 作为 <code>SPI</code> 接口进行扩展（1.7.2 版本以前 <code>SlotChainBuilder</code> 作为 <code>SPI</code>），使得 <code>Slot Chain</code> 具备了扩展的能力。您可以自行加入自定义的 <code>slot</code> 并编排 <code>slot</code> 间的顺序，从而可以给 <code>Sentinel</code> 添加自定义的功能。</p>
<p><img src="https://image.eelve.com/eblog/2021053002.png" alt="自定义处理流程"></p>
<p>下面介绍一下各个 <code>slot</code> 的功能。</p>
<h2 id="1-1、NodeSelectorSlot"><a href="#1-1、NodeSelectorSlot" class="headerlink" title="1.1、NodeSelectorSlot"></a>1.1、NodeSelectorSlot</h2><p>这个 <code>slot</code> 主要负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContextUtil.enter(<span class="string">&quot;entrance1&quot;</span>, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">Entry nodeA = SphU.entry(<span class="string">&quot;nodeA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (nodeA != <span class="keyword">null</span>) &#123;</span><br><span class="line">   nodeA.exit();</span><br><span class="line">&#125;</span><br><span class="line">ContextUtil.exit();</span><br></pre></td></tr></table></figure>
<p>上述代码通过 <code>ContextUtil.enter()</code> 创建了一个名为 <code>entrance1</code> 的上下文，同时指定调用发起者为 <code>appA</code>；接着通过 <code>SphU.entry()</code>请求一个 <code>token</code>，如果该方法顺利执行没有抛 <code>BlockException</code>，表明 <code>token</code> 请求成功。</p>
<p>以上代码将在内存中生成以下结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> machine-root</span><br><span class="line">           &#x2F;     </span><br><span class="line">          &#x2F;</span><br><span class="line">   EntranceNode1</span><br><span class="line">        &#x2F;</span><br><span class="line">       &#x2F;   </span><br><span class="line">DefaultNode(nodeA)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：每个 <code>DefaultNode</code> 由资源 <code>ID</code> 和输入名称来标识。换句话说，一个资源 <code>ID</code> 可以有多个不同入口的 <code>DefaultNode</code>。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContextUtil.enter(<span class="string">&quot;entrance1&quot;</span>, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">Entry nodeA = SphU.entry(<span class="string">&quot;nodeA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (nodeA != <span class="keyword">null</span>) &#123;</span><br><span class="line">  nodeA.exit();</span><br><span class="line">&#125;</span><br><span class="line">ContextUtil.exit();</span><br><span class="line"></span><br><span class="line">ContextUtil.enter(<span class="string">&quot;entrance2&quot;</span>, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">nodeA = SphU.entry(<span class="string">&quot;nodeA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (nodeA != <span class="keyword">null</span>) &#123;</span><br><span class="line">  nodeA.exit();</span><br><span class="line">&#125;</span><br><span class="line">ContextUtil.exit();</span><br></pre></td></tr></table></figure>
<p>以上代码将在内存中生成以下结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">            machine-root</span><br><span class="line">            &#x2F;         \</span><br><span class="line">           &#x2F;           \</span><br><span class="line">   EntranceNode1   EntranceNode2</span><br><span class="line">         &#x2F;               \</span><br><span class="line">        &#x2F;                 \</span><br><span class="line">DefaultNode(nodeA)   DefaultNode(nodeA)</span><br></pre></td></tr></table></figure>
<p>上面的结构可以通过调用 <code>curl http://localhost:8719/tree?type=root</code> 来显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EntranceNode: machine-root(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line">-EntranceNode1: Entrance1(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line">--nodeA(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line">-EntranceNode2: Entrance1(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line">--nodeA(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line"></span><br><span class="line">t:threadNum  pq:passQps  bq:blockedQps  tq:totalQps  rt:averageRt  prq: passRequestQps 1mp:1m-passed 1mb:1m-blocked 1mt:1m-total</span><br></pre></td></tr></table></figure>
<h2 id="1-2、ClusterBuilderSlot"><a href="#1-2、ClusterBuilderSlot" class="headerlink" title="1.2、ClusterBuilderSlot"></a>1.2、ClusterBuilderSlot</h2><p>此插槽用于构建资源的 <code>ClusterNode</code> 以及调用来源节点。<code>ClusterNode</code> 保持资源运行统计信息（响应时间、QPS、block 数目、线程数、异常数等）以及原始调用者统计信息列表。来源调用者的名字由 <code>ContextUtil.enter(contextName，origin)</code> 中的 <code>origin</code> 标记。可通过如下命令查看某个资源不同调用者的访问情况：<code>curl http://localhost:8719/origin?id=caller</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id: nodeA</span><br><span class="line">idx origin  threadNum passedQps blockedQps totalQps aRt   1m-passed 1m-blocked 1m-total </span><br><span class="line">1   caller1 0         0         0          0        0     0         0          0        </span><br><span class="line">2   caller2 0         0         0          0        0     0         0          0      </span><br></pre></td></tr></table></figure>
<h2 id="1-3、StatisticSlot"><a href="#1-3、StatisticSlot" class="headerlink" title="1.3、StatisticSlot"></a>1.3、StatisticSlot</h2><p><code>StatisticSlot</code> 是 <code>Sentinel</code> 的核心功能插槽之一，用于统计实时的调用数据。</p>
<ul>
<li><code>clusterNode</code>：资源唯一标识的 <code>ClusterNode</code> 的 <code>runtime</code> 统计 </li>
<li><code>origin</code>：根据来自不同调用者的统计信息</li>
<li><code>defaultnode</code>: 根据上下文条目名称和资源 <code>ID</code> 的 <code>runtime</code> 统计</li>
<li>入口的统计</li>
</ul>
<p><code>Sentinel</code> 底层采用高性能的滑动窗口数据结构 <code>LeapArray</code> 来统计实时的秒级指标数据，可以很好地支撑写多于读的高并发场景。</p>
<p><img src="https://image.eelve.com/eblog/2021053003.png" alt="滑动窗口"></p>
<h2 id="1-4、FlowSlot"><a href="#1-4、FlowSlot" class="headerlink" title="1.4、FlowSlot"></a>1.4、FlowSlot</h2><p>这个 <code>slot</code> 主要根据预设的资源的统计信息，按照固定的次序，依次生效。如果一个资源对应两条或者多条流控规则，则会根据如下次序依次检验，直到全部通过或者有一个规则生效为止:</p>
<ul>
<li>指定应用生效的规则，即针对调用方限流的；</li>
<li>调用方为 other 的规则；</li>
<li>调用方为 default 的规则。</li>
</ul>
<h2 id="1-5、DegradeSlot"><a href="#1-5、DegradeSlot" class="headerlink" title="1.5、DegradeSlot"></a>1.5、DegradeSlot</h2><p>这个 <code>slot</code> 主要针对资源的平均响应时间（RT）以及异常比率，来决定资源是否在接下来的时间被自动熔断掉。</p>
<h2 id="1-6、SystemSlot"><a href="#1-6、SystemSlot" class="headerlink" title="1.6、SystemSlot"></a>1.6、SystemSlot</h2><p>这个 <code>slot</code> 会根据对于当前系统的整体情况，对入口资源的调用进行动态调配。其原理是让入口的流量和当前系统的预计容量达到一个动态平衡。</p>
<p>注意系统规则只对入口流量起作用（调用类型为 <code>EntryType.IN</code>），对出口流量无效。可通过 <code>SphU.entry(res, entryType)</code> 指定调用类型，如果不指定，默认是<code>EntryType.OUT</code>。</p>
<h1 id="贰、-核心类解析"><a href="#贰、-核心类解析" class="headerlink" title="贰、 核心类解析"></a>贰、 核心类解析</h1><h2 id="2-1、ProcessorSlotChain"><a href="#2-1、ProcessorSlotChain" class="headerlink" title="2.1、ProcessorSlotChain"></a>2.1、ProcessorSlotChain</h2><p><code>Sentinel</code> 的核心骨架，将不同的 <code>Slot</code> 按照顺序串在一起（责任链模式），从而将不同的功能（限流、降级、系统保护）组合在一起。<code>slot chain</code> 其实可以分为两部分：统计数据构建部分（statistic）和判断部分（rule checking）。核心结构：</p>
<p><img src="https://image.eelve.com/eblog/2021053001.png" alt="总体框架图"></p>
<p>目前的设计是 <code>one slot chain per resource</code>，因为某些 <code>slot</code> 是 <code>per resource</code> 的（比如 <code>NodeSelectorSlot</code>）。</p>
<h2 id="2-2、Context"><a href="#2-2、Context" class="headerlink" title="2.2、Context"></a>2.2、Context</h2><p><code>Context</code> 代表调用链路上下文，贯穿一次调用链路中的所有 <code>Entry</code>。<code>Context</code> 维持着入口节点（entranceNode）、本次调用链路的 <code>curNode</code>、调用来源（origin）等信息。<code>Context</code> 名称即为调用链路入口名称。</p>
<p><code>Context</code> 维持的方式：通过 <code>ThreadLocal</code> 传递，只有在入口 <code>enter</code> 的时候生效。由于 <code>Context</code> 是通过 <code>ThreadLocal</code> 传递的，因此对于异步调用链路，线程切换的时候会丢掉 <code>Context</code>，因此需要手动通过 <code>ContextUtil.runOnContext(context, f)</code> 来变换 <code>context</code>。</p>
<h2 id="2-3、Entry"><a href="#2-3、Entry" class="headerlink" title="2.3、Entry"></a>2.3、Entry</h2><p>每一次资源调用都会创建一个 <code>Entry</code>。<code>Entry</code> 包含了资源名、curNode（当前统计节点）、originNode（来源统计节点）等信息。</p>
<p><code>CtEntry</code> 为普通的 <code>Entry</code>，在调用 <code>SphU.entry(xxx)</code> 的时候创建。特性：<code>Linked entry within current context（内部维护着 parent 和 child）</code></p>
<p>需要注意的一点：<code>CtEntry</code> 构造函数中会做调用链的变换，即将当前 <code>Entry</code> 接到传入 <code>Context</code> 的调用链路上（setUpEntryFor）。</p>
<p>资源调用结束时需要 <code>entry.exit()</code>。<code>exit</code> 操作会过一遍 <code>slot chain exit</code>，恢复调用栈，<code>exit context</code> 然后清空 <code>entry</code> 中的 <code>context</code> 防止重复调用。</p>
<h2 id="2-4、Node"><a href="#2-4、Node" class="headerlink" title="2.4、Node"></a>2.4、Node</h2><p><code>Sentinel</code> 里面的各种种类的统计节点：</p>
<ul>
<li><code>StatisticNode</code>：最为基础的统计节点，包含秒级和分钟级两个滑动窗口结构。</li>
<li><code>DefaultNode</code>：链路节点，用于统计调用链路上某个资源的数据，维持树状结构。</li>
<li><code>ClusterNode</code>：簇点，用于统计每个资源全局的数据（不区分调用链路），以及存放该资源的按来源区分的调用数据（类型为 <code>StatisticNode</code>）。特别地，<code>Constants.ENTRY_NODE</code> 节点用于统计全局的入口资源数据。</li>
<li><code>EntranceNode</code>：入口节点，特殊的链路节点，对应某个 <code>Context</code> 入口的所有调用数据。<code>Constants.ROOT</code> 节点也是入口节点。</li>
</ul>
<p>构建的时机：</p>
<ul>
<li><code>EntranceNode</code>：在 <code>ContextUtil.enter(xxx)</code> 的时候就创建了，然后塞到 <code>Context</code> 里面。</li>
<li><code>NodeSelectorSlot</code>：根据 <code>context</code> 创建 <code>DefaultNode</code>，然后 <code>set curNode to context</code>。</li>
<li><code>ClusterBuilderSlot</code>：首先根据 <code>resourceName</code> 创建 <code>ClusterNode</code>，并且 <code>set clusterNode to defaultNode</code>；然后再根据 <code>origin</code> 创建来源节点（类型为 <code>StatisticNode</code>），并且 <code>set originNode to curEntry</code>。</li>
</ul>
<p>几种 <code>Node</code> 的维度（数目）：</p>
<ul>
<li><code>ClusterNode</code> 的维度是 <code>resource</code></li>
<li><code>DefaultNode</code> 的维度是 <code>resource * context</code>，存在每个 <code>NodeSelectorSlot</code> 的 <code>map</code> 里面</li>
<li><code>EntranceNode</code> 的维度是 <code>context</code>，存在 <code>ContextUtil</code> 类的 <code>contextNameNodeMap</code> 里面</li>
<li>来源节点（类型为 <code>StatisticNode</code>）的维度是 <code>resource * origin</code>，存在每个 <code>ClusterNode</code> 的 <code>originCountMap</code> 里面</li>
</ul>
<h2 id="2-5、StatisticSlot"><a href="#2-5、StatisticSlot" class="headerlink" title="2.5、StatisticSlot"></a>2.5、StatisticSlot</h2><p><code>StatisticSlot</code> 是 <code>Sentinel</code> 最为重要的类之一，用于根据规则判断结果进行相应的统计操作。</p>
<p><code>entry</code> 的时候：依次执行后面的判断 <code>slot</code>。每个 <code>slot</code> 触发流控的话会抛出异常（<code>BlockException</code> 的子类）。若有 BlockException 抛出，则记录 block 数据；若无异常抛出则算作可通过（pass），记录 pass 数据。</p>
<p><code>exit</code> 的时候：若无 <code>error（无论是业务异常还是流控异常）</code>，记录 <code>complete（success）</code>以及 <code>RT</code>，线程数<code>-1</code>。</p>
<p>记录数据的维度：线程数<code>+1</code>、记录当前 <code>DefaultNode</code> 数据、记录对应的 <code>originNode</code> 数据（若存在 <code>origin</code>）、累计 <code>IN</code> 统计数据（若流量类型为 <code>IN</code>）。</p>
<hr>
<p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践自定义调用链的源码</a> 。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel进阶之来源访问控制</title>
    <url>/posts/3e0a90e5.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前面几篇文章中简单介绍了一下<code>Sentinel</code>的功能都是针对所有的请求资源，今天就来继续说一下<code>Sentinel</code>的来源访问控制。</p>
<hr>
<h1 id="壹、概述"><a href="#壹、概述" class="headerlink" title="壹、概述"></a>壹、概述</h1><p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 <code>Sentinel</code> 的黑白名单控制的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p>
<blockquote>
<p>调用方信息通过 <code>ContextUtil.enter(resourceName, origin)</code> 方法中的 <code>origin</code> 参数传入。</p>
</blockquote>
<h1 id="贰、规则配置"><a href="#贰、规则配置" class="headerlink" title="贰、规则配置"></a>贰、规则配置</h1><p>黑白名单规则（<code>AuthorityRule</code>）非常简单，主要有以下配置项：</p>
<ul>
<li><code>resource</code>：资源名，即限流规则的作用对象</li>
<li><code>limitApp</code>：对应的黑名单/白名单，不同 <code>origin</code> 用 , 分隔，如 <code>appA</code>,<code>appB</code></li>
<li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li>
</ul>
<h1 id="叁、示例"><a href="#叁、示例" class="headerlink" title="叁、示例"></a>叁、示例</h1><p>比如我们希望控制对资源 <code>test</code> 的访问设置白名单，只有来源为 <code>appA</code> 和 <code>appB</code> 的请求才可通过，则可以配置如下白名单规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorityDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESOURCE_NAME = <span class="string">&quot;testABC&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========Testing for black list========&quot;</span>);</span><br><span class="line">        initBlackRules();</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appB&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appC&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========Testing for white list========&quot;</span>);</span><br><span class="line">        initWhiteRules();</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appB&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appC&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFor</span><span class="params">(<span class="comment">/*@NonNull*/</span> String resource, <span class="comment">/*@NonNull*/</span> String origin)</span> </span>&#123;</span><br><span class="line">        ContextUtil.enter(resource, origin);</span><br><span class="line">        Entry entry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            entry = SphU.entry(resource);</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;Passed for resource %s, origin is %s&quot;</span>, resource, origin));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">            System.err.println(String.format(<span class="string">&quot;Blocked for resource %s, origin is %s&quot;</span>, resource, origin));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                entry.exit();</span><br><span class="line">            &#125;</span><br><span class="line">            ContextUtil.exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initWhiteRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorityRule rule = <span class="keyword">new</span> AuthorityRule();</span><br><span class="line">        rule.setResource(RESOURCE_NAME);</span><br><span class="line">        rule.setStrategy(RuleConstant.AUTHORITY_WHITE);</span><br><span class="line">        rule.setLimitApp(<span class="string">&quot;appA,appE&quot;</span>);</span><br><span class="line">        AuthorityRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initBlackRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorityRule rule = <span class="keyword">new</span> AuthorityRule();</span><br><span class="line">        rule.setResource(RESOURCE_NAME);</span><br><span class="line">        rule.setStrategy(RuleConstant.AUTHORITY_BLACK);</span><br><span class="line">        rule.setLimitApp(<span class="string">&quot;appA,appB&quot;</span>);</span><br><span class="line">        AuthorityRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="肆、SpringBoot中的使用"><a href="#肆、SpringBoot中的使用" class="headerlink" title="肆、SpringBoot中的使用"></a>肆、SpringBoot中的使用</h1><h2 id="4-1、限制来源token"><a href="#4-1、限制来源token" class="headerlink" title="4.1、限制来源token"></a>4.1、限制来源token</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelRequestParserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestOriginParser <span class="title">requestOriginParser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (httpServletRequest -&gt; httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-1、限制来源请求地址"><a href="#4-1、限制来源请求地址" class="headerlink" title="4.1、限制来源请求地址"></a>4.1、限制来源请求地址</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelRequestParserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestOriginParser <span class="title">requestOriginParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (httpServletRequest -&gt; httpServletRequest.getRemoteAddr());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践自定义调用链的源码</a> 。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel进阶之热点参数限流</title>
    <url>/posts/9115052e.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前面几篇文章中简单介绍了一下<code>Sentinel</code>的功能都是针对接口的，今天就来继续说一下Sentinel的热点参数限流。</p>
<hr>
<h1 id="壹、概览"><a href="#壹、概览" class="headerlink" title="壹、概览"></a>壹、概览</h1><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 <code>Top K</code> 数据，并对其访问进行限制。比如：</p>
<ul>
<li>商品 <code>ID</code> 为参数，统计一段时间内最常购买的商品 <code>ID</code> 并进行限制</li>
<li>用户 <code>ID</code> 为参数，针对一段时间内频繁访问的用户 <code>ID</code> 进行限制</li>
</ul>
<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>
<p><img src="https://image.eelve.com/eblog/2021083001.png" alt="sentinel-hot-param-overview"></p>
<p><code>Sentinel</code> 利用 <code>LRU</code> 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。</p>
<h1 id="贰、基本使用"><a href="#贰、基本使用" class="headerlink" title="贰、基本使用"></a>贰、基本使用</h1><p>要使用热点参数限流功能，需要引入以下依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-parameter-flow-control&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;x.y.z&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>然后为对应的资源配置热点参数限流规则，并在 <code>entry</code> 的时候传入相应的参数，即可使热点参数限流生效。</p>
<blockquote>
<p>注：若自行扩展并注册了自己实现的 <code>SlotChainBuilder</code>，并希望使用热点参数限流功能，则可以在 <code>chain</code> 里面合适的地方插入 <code>ParamFlowSlot</code>。</p>
</blockquote>
<p>那么如何传入对应的参数以便 <code>Sentinel</code> 统计呢？我们可以通过 <code>SphU</code> 类里面几个 <code>entry</code> 重载方法来传入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Entry <span class="title">entry</span><span class="params">(String name, EntryType type, <span class="keyword">int</span> count, Object... args)</span> <span class="keyword">throws</span> BlockException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Entry <span class="title">entry</span><span class="params">(Method method, EntryType type, <span class="keyword">int</span> count, Object... args)</span> <span class="keyword">throws</span> BlockException</span></span><br></pre></td></tr></table></figure>
<p>其中最后的一串 <code>args</code> 就是要传入的参数，有多个就按照次序依次传入。比如要传入两个参数 <code>paramA</code> 和 <code>paramB</code>，则可以：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// paramA in index 0, paramB in index 1.</span></span><br><span class="line"><span class="comment">// 若需要配置例外项或者使用集群维度流控，则传入的参数只支持基本类型。</span></span><br><span class="line">SphU.entry(resourceName, EntryType.IN, <span class="number">1</span>, paramA, paramB);</span><br></pre></td></tr></table></figure>
<p><code>注意</code>：若 <code>entry</code> 的时候传入了热点参数，那么 <code>exit</code> 的时候也一定要带上对应的参数（<code>exit(count, args)</code>），否则可能会有统计错误。正确的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    entry = SphU.entry(resourceName, EntryType.IN, <span class="number">1</span>, paramA, paramB);</span><br><span class="line">    <span class="comment">// Your logic here.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">    <span class="comment">// Handle request rejection.</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        entry.exit(<span class="number">1</span>, paramA, paramB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 <code>@SentinelResource</code> 注解方式定义的资源，若注解作用的方法上有参数，<code>Sentinel</code> 会将它们作为参数传入 <code>SphU.entry(res, args)</code>。比如以下的方法里面 <code>uid</code> 和 <code>type</code> 会分别作为第一个和第二个参数传入 <code>Sentinel API</code>，从而可以用于热点规则判断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;myMethod&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">doSomething</span><span class="params">(String uid, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// some logic here...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="叁、热点参数规则"><a href="#叁、热点参数规则" class="headerlink" title="叁、热点参数规则"></a>叁、热点参数规则</h1><p>热点参数规则（<code>ParamFlowRule</code>）类似于流量控制规则（<code>FlowRule</code>）：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名，必填</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>限流阈值，必填</td>
<td></td>
</tr>
<tr>
<td>grade</td>
<td>限流模式</td>
<td>QPS 模式</td>
</tr>
<tr>
<td>durationInSec</td>
<td>统计窗口时间长度（单位为秒），1.6.0 版本开始支持</td>
<td>1s</td>
</tr>
<tr>
<td>controlBehavior</td>
<td>流控效果（支持快速失败和匀速排队模式），1.6.0 版本开始支持</td>
<td>快速失败</td>
</tr>
<tr>
<td>maxQueueingTimeMs</td>
<td>最大排队等待时长（仅在匀速排队模式生效），1.6.0 版本开始支持</td>
<td>0ms</td>
</tr>
<tr>
<td>paramIdx</td>
<td>热点参数的索引，必填，对应 SphU.entry(xxx, args) 中的参数索引位置</td>
<td></td>
</tr>
<tr>
<td>paramFlowItemList</td>
<td>参数例外项，可以针对指定的参数值单独设置限流阈值，不受前面 count 阈值的限制。仅支持基本类型和字符串类型</td>
<td></td>
</tr>
<tr>
<td>clusterMode</td>
<td>是否是集群参数流控规则</td>
<td>false</td>
</tr>
<tr>
<td>clusterConfig</td>
<td>集群流控相关配置</td>
<td></td>
</tr>
</tbody></table>
<p>我们可以通过 <code>ParamFlowRuleManager</code> 的 <code>loadRules</code> 方法更新热点参数规则，下面是一个示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParamFlowRule rule = <span class="keyword">new</span> ParamFlowRule(resourceName)</span><br><span class="line">    .setParamIdx(<span class="number">0</span>)</span><br><span class="line">    .setCount(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 针对 int 类型的参数 PARAM_B，单独设置限流 QPS 阈值为 10，而不是全局的阈值 5.</span></span><br><span class="line">ParamFlowItem item = <span class="keyword">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))</span><br><span class="line">    .setClassType(<span class="keyword">int</span>.class.getName())</span><br><span class="line">    .setCount(<span class="number">10</span>);</span><br><span class="line">rule.setParamFlowItemList(Collections.singletonList(item));</span><br><span class="line"></span><br><span class="line">ParamFlowRuleManager.loadRules(Collections.singletonList(rule));</span><br></pre></td></tr></table></figure>
<h1 id="肆、示例"><a href="#肆、示例" class="headerlink" title="肆、示例"></a>肆、示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamFlowQpsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_A = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_B = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_C = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_D = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Here we prepare different parameters to validate flow control by parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] PARAMS = <span class="keyword">new</span> Integer[] &#123;PARAM_A, PARAM_B, PARAM_C, PARAM_D&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESOURCE_KEY = <span class="string">&quot;resA&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initParamFlowRules();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line">        ParamFlowQpsRunner&lt;Integer&gt; runner = <span class="keyword">new</span> ParamFlowQpsRunner&lt;&gt;(PARAMS, RESOURCE_KEY, threadCount, <span class="number">120</span>);</span><br><span class="line">        runner.tick();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        runner.simulateTraffic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initParamFlowRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// QPS mode, threshold is 5 for every frequent &quot;hot spot&quot; parameter in index 0 (the first arg).</span></span><br><span class="line">        ParamFlowRule rule = <span class="keyword">new</span> ParamFlowRule(RESOURCE_KEY)</span><br><span class="line">            .setParamIdx(<span class="number">0</span>)</span><br><span class="line">            .setGrade(RuleConstant.FLOW_GRADE_QPS)</span><br><span class="line">            <span class="comment">//.setDurationInSec(3)</span></span><br><span class="line">            <span class="comment">//.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER)</span></span><br><span class="line">            <span class="comment">//.setMaxQueueingTimeMs(600)</span></span><br><span class="line">            .setCount(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can set threshold count for specific parameter value individually.</span></span><br><span class="line">        <span class="comment">// Here we add an exception item. That means: QPS threshold of entries with parameter `PARAM_B` (type: int)</span></span><br><span class="line">        <span class="comment">// in index 0 will be 10, rather than the global threshold (5).</span></span><br><span class="line">        ParamFlowItem item = <span class="keyword">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))</span><br><span class="line">            .setClassType(<span class="keyword">int</span>.class.getName())</span><br><span class="line">            .setCount(<span class="number">10</span>);</span><br><span class="line">        rule.setParamFlowItemList(Collections.singletonList(item));</span><br><span class="line">        ParamFlowRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel进阶之熔断降级</title>
    <url>/posts/b6bfdc75.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/posts/2c2378a.html">Sentinel进阶之流量</a> 中简单介绍了一下<code>Sentinel</code>的流量控制，今天就来继续说一下Sentinel的熔断降级。</p>
<hr>
<h1 id="壹、概述"><a href="#壹、概述" class="headerlink" title="壹、概述"></a>壹、概述</h1><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p>
<p><img src="https://image.eelve.com/eblog/service-chain.png" alt="服务调用链"></p>
<p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<code>弱依赖服务调用</code>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p>
<blockquote>
<p>Sentinel 1.8.0 及以上版本对熔断降级特性进行了全新的改进升级，我们可以选择最新版本体验降级规则熔断。</p>
</blockquote>
<h1 id="贰、熔断策略"><a href="#贰、熔断策略" class="headerlink" title="贰、熔断策略"></a>贰、熔断策略</h1><p>Sentinel 提供以下几种熔断策略：</p>
<ul>
<li>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 <code>RT</code>（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求响应时间小于设置的慢调用 <code>RT</code> 则结束熔断，若大于设置的慢调用 <code>RT</code> 则会再次被熔断。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SlowRatioCircuitBreakerDemo &#123;</span><br><span class="line"></span><br><span class="line">  private static final String KEY &#x3D; &quot;some_method&quot;;</span><br><span class="line"></span><br><span class="line">  private static volatile boolean stop &#x3D; false;</span><br><span class="line">  private static int seconds &#x3D; 120;</span><br><span class="line"></span><br><span class="line">  private static AtomicInteger total &#x3D; new AtomicInteger();</span><br><span class="line">  private static AtomicInteger pass &#x3D; new AtomicInteger();</span><br><span class="line">  private static AtomicInteger block &#x3D; new AtomicInteger();</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) throws Exception &#123;</span><br><span class="line">      initDegradeRule();</span><br><span class="line">      registerStateChangeObserver();</span><br><span class="line">      startTick();</span><br><span class="line"></span><br><span class="line">      int concurrency &#x3D; 8;</span><br><span class="line">      for (int i &#x3D; 0; i &lt; concurrency; i++) &#123;</span><br><span class="line">          Thread entryThread &#x3D; new Thread(() -&gt; &#123;</span><br><span class="line">              while (true) &#123;</span><br><span class="line">                  Entry entry &#x3D; null;</span><br><span class="line">                  try &#123;</span><br><span class="line">                      entry &#x3D; SphU.entry(KEY);</span><br><span class="line">                      pass.incrementAndGet();</span><br><span class="line">                      &#x2F;&#x2F; RT: [40ms, 60ms)</span><br><span class="line">                      sleep(ThreadLocalRandom.current().nextInt(40, 60));</span><br><span class="line">                  &#125; catch (BlockException e) &#123;</span><br><span class="line">                      block.incrementAndGet();</span><br><span class="line">                      sleep(ThreadLocalRandom.current().nextInt(5, 10));</span><br><span class="line">                  &#125; finally &#123;</span><br><span class="line">                      total.incrementAndGet();</span><br><span class="line">                      if (entry !&#x3D; null) &#123;</span><br><span class="line">                          entry.exit();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          entryThread.setName(&quot;sentinel-simulate-traffic-task-&quot; + i);</span><br><span class="line">          entryThread.start();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static void registerStateChangeObserver() &#123;</span><br><span class="line">      EventObserverRegistry.getInstance().addStateChangeObserver(&quot;logging&quot;,</span><br><span class="line">          (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class="line">              if (newState &#x3D;&#x3D; State.OPEN) &#123;</span><br><span class="line">                  System.err.println(String.format(&quot;%s -&gt; OPEN at %d, snapshotValue&#x3D;%.2f&quot;, prevState.name(),</span><br><span class="line">                      TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  System.err.println(String.format(&quot;%s -&gt; %s at %d&quot;, prevState.name(), newState.name(),</span><br><span class="line">                      TimeUtil.currentTimeMillis()));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static void initDegradeRule() &#123;</span><br><span class="line">      List&lt;DegradeRule&gt; rules &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">      DegradeRule rule &#x3D; new DegradeRule(KEY)</span><br><span class="line">          .setGrade(CircuitBreakerStrategy.SLOW_REQUEST_RATIO.getType())</span><br><span class="line">          &#x2F;&#x2F; Max allowed response time</span><br><span class="line">          .setCount(50)</span><br><span class="line">          &#x2F;&#x2F; Retry timeout (in second)</span><br><span class="line">          .setTimeWindow(10)</span><br><span class="line">          &#x2F;&#x2F; Circuit breaker opens when slow request ratio &gt; 60%</span><br><span class="line">          .setSlowRatioThreshold(0.6)</span><br><span class="line">          .setMinRequestAmount(100)</span><br><span class="line">          .setStatIntervalMs(20000);</span><br><span class="line">      rules.add(rule);</span><br><span class="line"></span><br><span class="line">      DegradeRuleManager.loadRules(rules);</span><br><span class="line">      System.out.println(&quot;Degrade rule loaded: &quot; + rules);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static void sleep(int timeMs) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          TimeUnit.MILLISECONDS.sleep(timeMs);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          &#x2F;&#x2F; ignore</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static void startTick() &#123;</span><br><span class="line">      Thread timer &#x3D; new Thread(new TimerTask());</span><br><span class="line">      timer.setName(&quot;sentinel-timer-tick-task&quot;);</span><br><span class="line">      timer.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static class TimerTask implements Runnable &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public void run() &#123;</span><br><span class="line">          long start &#x3D; System.currentTimeMillis();</span><br><span class="line">          System.out.println(&quot;Begin to run! Go go go!&quot;);</span><br><span class="line">          System.out.println(&quot;See corresponding metrics.log for accurate statistic data&quot;);</span><br><span class="line"></span><br><span class="line">          long oldTotal &#x3D; 0;</span><br><span class="line">          long oldPass &#x3D; 0;</span><br><span class="line">          long oldBlock &#x3D; 0;</span><br><span class="line"></span><br><span class="line">          while (!stop) &#123;</span><br><span class="line">              sleep(1000);</span><br><span class="line"></span><br><span class="line">              long globalTotal &#x3D; total.get();</span><br><span class="line">              long oneSecondTotal &#x3D; globalTotal - oldTotal;</span><br><span class="line">              oldTotal &#x3D; globalTotal;</span><br><span class="line"></span><br><span class="line">              long globalPass &#x3D; pass.get();</span><br><span class="line">              long oneSecondPass &#x3D; globalPass - oldPass;</span><br><span class="line">              oldPass &#x3D; globalPass;</span><br><span class="line"></span><br><span class="line">              long globalBlock &#x3D; block.get();</span><br><span class="line">              long oneSecondBlock &#x3D; globalBlock - oldBlock;</span><br><span class="line">              oldBlock &#x3D; globalBlock;</span><br><span class="line"></span><br><span class="line">              System.out.println(TimeUtil.currentTimeMillis() + &quot;, total:&quot; + oneSecondTotal</span><br><span class="line">                  + &quot;, pass:&quot; + oneSecondPass + &quot;, block:&quot; + oneSecondBlock);</span><br><span class="line"></span><br><span class="line">              if (seconds-- &lt;&#x3D; 0) &#123;</span><br><span class="line">                  stop &#x3D; true;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          long cost &#x3D; System.currentTimeMillis() - start;</span><br><span class="line">          System.out.println(&quot;time cost: &quot; + cost + &quot; ms&quot;);</span><br><span class="line">          System.out.println(&quot;total: &quot; + total.get() + &quot;, pass:&quot; + pass.get()</span><br><span class="line">              + &quot;, block:&quot; + block.get());</span><br><span class="line">          System.exit(0);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 <code>0% - 100%</code>。</li>
<li>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>
</ul>
<p>注意异常降级仅针对业务异常，对 <code>Sentinel</code> 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  entry = SphU.entry(resource);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write your biz code here.</span></span><br><span class="line">  <span class="comment">// &lt;&lt;BIZ CODE&gt;&gt;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!BlockException.isBlockException(t)) &#123;</span><br><span class="line">    Tracer.trace(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">    entry.exit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>开源整合模块，如 <code>Sentinel Dubbo Adapter</code>, <code>Sentinel Web Servlet Filter</code> 或 <code>@SentinelResource</code> 注解会自动统计业务异常，无需手动调用。但是如果你的程序发生异常的异常被处理过，或者异常时并不会抛出异常，则需要你自己手动调用 <code>Tracer.trace(ex)</code> 来记录业务异常。否则你的<code>异常比例</code>和<code>异常数</code>将不会生效。</p>
</blockquote>
<h1 id="叁、熔断降级规则说明"><a href="#叁、熔断降级规则说明" class="headerlink" title="叁、熔断降级规则说明"></a>叁、熔断降级规则说明</h1><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名，即规则的作用对象</td>
<td></td>
</tr>
<tr>
<td>grade</td>
<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>
<td>慢调用比例</td>
</tr>
<tr>
<td>count</td>
<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>
<td></td>
</tr>
<tr>
<td>timeWindow</td>
<td>熔断时长，单位为 s</td>
<td></td>
</tr>
<tr>
<td>minRequestAmount</td>
<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>
<td>5</td>
</tr>
<tr>
<td>statIntervalMs</td>
<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>
<td>1000 ms</td>
</tr>
<tr>
<td>slowRatioThreshold</td>
<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>
<td></td>
</tr>
</tbody></table>
<h1 id="肆、熔断器事件监听"><a href="#肆、熔断器事件监听" class="headerlink" title="肆、熔断器事件监听"></a>肆、熔断器事件监听</h1><p><code>Sentinel</code> 支持注册自定义的事件监听器监听熔断器状态变换事件（state change event）。示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EventObserverRegistry.getInstance().addStateChangeObserver(<span class="string">&quot;logging&quot;</span>,</span><br><span class="line">    (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (newState == State.OPEN) &#123;</span><br><span class="line">            <span class="comment">// 变换至 OPEN state 时会携带触发时的值</span></span><br><span class="line">            System.err.println(String.format(<span class="string">&quot;%s -&gt; OPEN at %d, snapshotValue=%.2f&quot;</span>, prevState.name(),</span><br><span class="line">                TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(String.format(<span class="string">&quot;%s -&gt; %s at %d&quot;</span>, prevState.name(), newState.name(),</span><br><span class="line">                TimeUtil.currentTimeMillis()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>
<p>另外在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p>
<p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>DegradeRule</code> 的校验方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public static boolean isValidRule(DegradeRule rule) &#123;</span><br><span class="line">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class="line">        &amp;&amp; rule.getCount() &gt;&#x3D; 0 &amp;&amp; rule.getTimeWindow() &gt; 0;</span><br><span class="line">    if (!baseValid) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (rule.getMinRequestAmount() &lt;&#x3D; 0 || rule.getStatIntervalMs() &lt;&#x3D; 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (rule.getGrade()) &#123;</span><br><span class="line">        case RuleConstant.DEGRADE_GRADE_RT:</span><br><span class="line">            return rule.getSlowRatioThreshold() &gt;&#x3D; 0 &amp;&amp; rule.getSlowRatioThreshold() &lt;&#x3D; 1;</span><br><span class="line">        case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class="line">            return rule.getCount() &lt;&#x3D; 1;</span><br><span class="line">        case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class="line">            return true;</span><br><span class="line">        default:</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel进阶之系统自适应保护</title>
    <url>/posts/97e25d71.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/posts/b6bfdc75.html">Sentinel进阶之熔断降级</a> 中简单介绍了一下<code>Sentinel</code>的流量控制，今天就来继续说一下Sentinel的系统自适应保护。</p>
<hr>
<h1 id="壹、概述"><a href="#壹、概述" class="headerlink" title="壹、概述"></a>壹、概述</h1><p>Sentinel 系统自适应保护从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<h1 id="贰、背景"><a href="#贰、背景" class="headerlink" title="贰、背景"></a>贰、背景</h1><p>在开始之前，先回顾一下 <code>Sentinel</code> 做系统自适应保护的目的：</p>
<ul>
<li>保证系统不被拖垮</li>
<li>在系统稳定的前提下，保持系统的吞吐量</li>
</ul>
<p>长期以来，系统自适应保护的思路是根据硬指标，即系统的负载 (load1) 来做系统过载保护。当系统负载高于某个阈值，就禁止或者减少流量的进入；当load开始好转，则恢复流量的进入。这个思路给我们带来了不可避免的两个问题：</p>
<ul>
<li>load 是一个“果”，如果根据 load 的情况来调节流量的通过率，那么就始终有延迟性。也就意味着通过率的任何调整，都会过一段时间才能看到效果。当前通过率是使load恶化的一个动作，那么也至少要过 1 秒之后才能观测到；同理，如果当前通过率调整是让 <code>load</code> 好转的一个动作，也需要1秒之后才能继续调整，这样就浪费了系统的处理能力。所以我们看到的曲线，总是会有抖动。</li>
<li>恢复慢。想象一下这样的一个场景（真实），出现了这样一个问题，下游应用不可靠，导致应用RT很高，从而load到了一个很高的点。过了一段时间之后下游应用恢复了，应用RT也相应减少。这个时候，其实应该大幅度增大流量的通过率；但是由于这个时候 <code>load</code> 仍然很高，通过率的恢复仍然不高。</li>
</ul>
<p><code>TCP BBR</code> 的思想给了我们一个很大的启发。我们应该根据系统能够处理的请求，和允许进来的请求，来做平衡，而不是根据一个间接的指标（系统 load）来做限流。最终我们追求的目标是 <code>在系统不被拖垮的情况下，提高系统的吞吐率，而不是 load 一定要到低于某个阈值</code>。如果我们还是按照固有的思维，超过特定的 load 就禁止流量进入，系统 load 恢复就放开流量，这样做的结果是无论我们怎么调参数，调比例，都是按照果来调节因，都无法取得良好的效果。</p>
<p><code>Sentinel</code> 在系统自适应保护的做法是，用 load1 作为启动控制流量的值，而允许通过的流量由处理请求的能力，即请求的响应时间以及当前系统正在处理的请求速率来决定。</p>
<h1 id="叁、系统规则"><a href="#叁、系统规则" class="headerlink" title="叁、系统规则"></a>叁、系统规则</h1><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体Load、RT、入口QPS 和线程数四个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<p>系统保护规则是应用整体维度的，而不是资源维度的，并且<code>仅对入口流量生效</code>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>
<p>系统规则支持以下的阈值类型：</p>
<ul>
<li><code>Load</code>（仅对 <code>Linux/Unix-like</code> 机器生效）：当系统 <code>load1</code> 超过阈值，且系统当前的并发线程数超过系统容量时才会触发系统保护。系统容量由系统的 <code>maxQps * minRt</code> 计算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li>
<li><code>CPU usage</code>（1.5.0+ 版本）：当系统 <code>CPU</code> 使用率超过阈值即触发系统保护（取值范围 <code>0.0-1.0</code>）。</li>
<li><code>RT</code>：当单台机器上所有入口流量的<code>平均RT</code> 达到阈值即触发系统保护，单位是毫秒。</li>
<li><code>线程数</code>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>
<li><code>入口 QPS</code>：当单台机器上所有入口流量的 <code>QPS</code> 达到阈值即触发系统保护。</li>
</ul>
<h1 id="肆、原理"><a href="#肆、原理" class="headerlink" title="肆、原理"></a>肆、原理</h1><p>先用经典图来镇楼:</p>
<p><img src="https://image.eelve.com/eblog/system-load.png" alt="系统load"></p>
<p>我们把系统处理请求的过程想象为一个水管，到来的请求是往这个水管灌水，当系统处理顺畅的时候，请求不需要排队，直接从水管中穿过，这个请求的RT是最短的；反之，当请求堆积的时候，那么处理请求的时间则会变为：排队时间 + 最短处理时间。</p>
<ul>
<li>推论一: 如果我们能够保证水管里的水量，能够让水顺畅的流动，则不会增加排队的请求；也就是说，这个时候的系统负载不会进一步恶化。</li>
</ul>
<p>我们用 T 来表示(水管内部的水量)，用RT来表示请求的处理时间，用P来表示进来的请求数，那么一个请求从进入水管道到从水管出来，这个水管会存在 <code>P * RT</code>　个请求。换一句话来说，当 <code>T ≈ QPS * Avg(RT)</code> 的时候，我们可以认为系统的处理能力和允许进入的请求个数达到了平衡，系统的负载不会进一步恶化。</p>
<p>接下来的问题是，水管的水位是可以达到了一个平衡点，但是这个平衡点只能保证水管的水位不再继续增高，但是还面临一个问题，就是在达到平衡点之前，这个水管里已经堆积了多少水。如果之前水管的水已经在一个量级了，那么这个时候系统允许通过的水量可能只能缓慢通过，RT会大，之前堆积在水管里的水会滞留；反之，如果之前的水管水位偏低，那么又会浪费了系统的处理能力。</p>
<ul>
<li>推论二:　当保持入口的流量是水管出来的流量的最大的值的时候，可以最大利用水管的处理能力。</li>
</ul>
<p>然而，和 TCP BBR 的不一样的地方在于，还需要用一个系统负载的值（load1）来激发这套机制启动。</p>
<blockquote>
<p>这种系统自适应算法对于低 load 的请求，它的效果是一个“兜底”的角色。<code>对于不是应用本身造成的 load 高的情况（如其它进程导致的不稳定的情况），效果不明显</code>。</p>
</blockquote>
<h1 id="伍、示例"><a href="#伍、示例" class="headerlink" title="伍、示例"></a>伍、示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemGuardDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger pass = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger block = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger total = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threadCount = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> seconds = <span class="number">60</span> + <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        tick();</span><br><span class="line">        initSystemRule();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            Thread entryThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        Entry entry = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            entry = SphU.entry(<span class="string">&quot;methodA&quot;</span>, EntryType.IN);</span><br><span class="line">                            pass.incrementAndGet();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                <span class="comment">// ignore</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (BlockException e1) &#123;</span><br><span class="line">                            block.incrementAndGet();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                <span class="comment">// ignore</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                            <span class="comment">// biz exception</span></span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            total.incrementAndGet();</span><br><span class="line">                            <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                entry.exit();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            entryThread.setName(<span class="string">&quot;working-thread&quot;</span>);</span><br><span class="line">            entryThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initSystemRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SystemRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;SystemRule&gt;();</span><br><span class="line">        SystemRule rule = <span class="keyword">new</span> SystemRule();</span><br><span class="line">        <span class="comment">// max load is 3</span></span><br><span class="line">        rule.setHighestSystemLoad(<span class="number">3.0</span>);</span><br><span class="line">        <span class="comment">// max cpu usage is 60%</span></span><br><span class="line">        rule.setHighestCpuUsage(<span class="number">0.6</span>);</span><br><span class="line">        <span class="comment">// max avg rt of all request is 10 ms</span></span><br><span class="line">        rule.setAvgRt(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// max total qps is 20</span></span><br><span class="line">        rule.setQps(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// max parallel working thread is 10</span></span><br><span class="line">        rule.setMaxThread(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        rules.add(rule);</span><br><span class="line">        SystemRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread timer = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TimerTask());</span><br><span class="line">        timer.setName(<span class="string">&quot;sentinel-timer-task&quot;</span>);</span><br><span class="line">        timer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;begin to statistic!!!&quot;</span>);</span><br><span class="line">            <span class="keyword">long</span> oldTotal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> oldPass = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> oldBlock = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> globalTotal = total.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondTotal = globalTotal - oldTotal;</span><br><span class="line">                oldTotal = globalTotal;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> globalPass = pass.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondPass = globalPass - oldPass;</span><br><span class="line">                oldPass = globalPass;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> globalBlock = block.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondBlock = globalBlock - oldBlock;</span><br><span class="line">                oldBlock = globalBlock;</span><br><span class="line"></span><br><span class="line">                System.out.println(seconds + <span class="string">&quot;, &quot;</span> + TimeUtil.currentTimeMillis() + <span class="string">&quot;, total:&quot;</span></span><br><span class="line">                    + oneSecondTotal + <span class="string">&quot;, pass:&quot;</span></span><br><span class="line">                    + oneSecondPass + <span class="string">&quot;, block:&quot;</span> + oneSecondBlock);</span><br><span class="line">                <span class="keyword">if</span> (seconds-- &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    stop = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel进阶之集群流量控制</title>
    <url>/posts/318cbe59.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前面几篇文章中简单介绍了一下<code>Sentinel</code>的功能都是针对单机的，今天就来继续说一下Sentinel的集群流量控制。</p>
<hr>
<h1 id="壹、集群流控介绍"><a href="#壹、集群流控介绍" class="headerlink" title="壹、集群流控介绍"></a>壹、集群流控介绍</h1><h2 id="1-1、介绍"><a href="#1-1、介绍" class="headerlink" title="1.1、介绍"></a>1.1、介绍</h2><p>为什么要使用集群流控呢？假设我们希望给某个用户限制调用某个 API 的总 QPS 为 50，但机器数可能很多（比如有 100 台）。这时候我们很自然地就想到，找一个 server 来专门来统计总的调用量，其它的实例都与这台 server 通信来判断是否可以调用。这就是最基础的集群流控的方式。</p>
<p>另外集群流控还可以解决流量不均匀导致总体限流效果不佳的问题。假设集群中有 10 台机器，我们给每台机器设置单机限流阈值为 10 QPS，理想情况下整个集群的限流阈值就为 100 QPS。不过实际情况下流量到每台机器可能会不均匀，会导致总量没有到的情况下某些机器就开始限流。因此仅靠单机维度去限制的话会无法精确地限制总体流量。而集群流控可以精确地控制整个集群的调用总量，结合单机限流兜底，可以更好地发挥流量控制的效果。</p>
<p>集群流控中共有两种身份：</p>
<ul>
<li>Token Client：集群流控客户端，用于向所属 Token Server 通信请求 token。集群限流服务端会返回给客户端结果，决定是否限流。</li>
<li>Token Server：即集群流控服务端，处理来自 Token Client 的请求，根据配置的集群规则判断是否应该发放 token（是否允许通过）。</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2021071001.png" alt="结构示意图"></p>
<h2 id="1-2、模块结构"><a href="#1-2、模块结构" class="headerlink" title="1.2、模块结构"></a>1.2、模块结构</h2><p>Sentinel 1.4.0 开始引入了集群流控模块，主要包含以下几部分：</p>
<ul>
<li><code>sentinel-cluster-common-default</code>: 公共模块，包含公共接口和实体</li>
<li><code>sentinel-cluster-client-default</code>: 默认集群流控 client 模块，使用 Netty 进行通信，提供接口方便序列化协议扩展</li>
<li><code>sentinel-cluster-server-default</code>: 默认集群流控 server 模块，使用 Netty 进行通信，提供接口方便序列化协议扩展；同时提供扩展接口对接规则判断的具体实现（TokenService），默认实现是复用 sentinel-core 的相关逻辑</li>
</ul>
<blockquote>
<p>注意：集群流控模块要求 JDK 版本最低为 1.7。</p>
</blockquote>
<h1 id="贰、集群流控规则"><a href="#贰、集群流控规则" class="headerlink" title="贰、集群流控规则"></a>贰、集群流控规则</h1><p><code>FlowRule</code>添加了两个字段用于集群限流相关配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> clusterMode; <span class="comment">// 标识是否为集群限流配置</span></span><br><span class="line"><span class="keyword">private</span> ClusterFlowConfig clusterConfig; <span class="comment">// 集群限流相关配置项</span></span><br></pre></td></tr></table></figure>
<p>其中用一个专门的 <code>ClusterFlowConfig</code> 代表集群限流相关配置项，以与现有规则配置项分开：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局唯一的规则 ID，由集群限流管控端分配.</span></span><br><span class="line"><span class="keyword">private</span> Long flowId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阈值模式，默认（0）为单机均摊，1 为全局阈值.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> thresholdType = ClusterRuleConstant.FLOW_THRESHOLD_AVG_LOCAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> strategy = ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 client 连接失败或通信失败时，是否退化到本地的限流模式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> fallbackToLocalWhenFail = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>flowId</code> 代表全局唯一的规则 <code>ID</code>，<code>Sentinel</code> 集群限流服务端通过此 <code>ID</code> 来区分各个规则，因此务必保持全局唯一。一般 <code>flowId</code> 由统一的管控端进行分配，或写入至 <code>DB</code> 时生成。</li>
<li><code>thresholdType</code> 代表集群限流阈值模式。其中单机均摊模式下配置的阈值等同于单机能够承受的限额，<code>token server</code> 会根据客户端对应的 <code>namespace</code>（默认为 <code>project.name</code> 定义的应用名）下的连接数来计算总的阈值（比如独立模式下有 3 个 client 连接到了 token server，然后配的单机均摊阈值为 10，则计算出的集群总量就为 30）；而全局模式下配置的阈值等同于整个集群的总阈值。</li>
</ul>
<p><code>ParamFlowRule</code> 热点参数限流相关的集群配置与 <code>FlowRule</code> 相似。</p>
<h1 id="叁、集群流控配置"><a href="#叁、集群流控配置" class="headerlink" title="叁、集群流控配置"></a>叁、集群流控配置</h1><h2 id="3-1、配置方式"><a href="#3-1、配置方式" class="headerlink" title="3.1、配置方式"></a>3.1、配置方式</h2><blockquote>
<p>在集群流控的场景下，推荐使用动态规则源来动态地管理规则。</p>
</blockquote>
<p>对于客户端，按照原有的方式来向 FlowRuleManager 和 ParamFlowRuleManager 注册动态规则源，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleDataSource = <span class="keyword">new</span> NacosDataSource&lt;&gt;(remoteAddress, groupId, dataId, parser);</span><br><span class="line">FlowRuleManager.register2Property(flowRuleDataSource.getProperty());</span><br></pre></td></tr></table></figure>
<p>对于集群流控 <code>token server</code>，由于集群限流服务端有作用域（namespace）的概念，因此我们需要注册一个自动根据 <code>namespace</code> 生成动态规则源的 <code>PropertySupplier</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Supplier 类型：接受 namespace，返回生成的动态规则源，类型为 SentinelProperty&lt;List&lt;FlowRule&gt;&gt;</span></span><br><span class="line"><span class="comment">// ClusterFlowRuleManager 针对集群限流规则，ClusterParamFlowRuleManager 针对集群热点规则，配置方式类似</span></span><br><span class="line">ClusterFlowRuleManager.setPropertySupplier(namespace -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SomeDataSource(namespace).getProperty();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后每当集群限流服务端 <code>namespace set</code> 产生变更时，<code>Sentinel</code> 会自动针对新加入的 <code>namespace</code> 生成动态规则源并进行自动监听，并删除旧的不需要的规则源。</p>
<h2 id="3-2、集群限流服务端"><a href="#3-2、集群限流服务端" class="headerlink" title="3.2、集群限流服务端"></a>3.2、集群限流服务端</h2><p>要想使用集群限流服务端，必须引入集群限流 server 相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-cluster-server-default&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-3、启动方式"><a href="#3-3、启动方式" class="headerlink" title="3.3、启动方式"></a>3.3、启动方式</h2><p><code>Sentinel</code> 集群限流服务端有两种启动方式：</p>
<ul>
<li>独立模式（Alone），即作为独立的 <code>token server</code> 进程启动，独立部署，隔离性好，但是需要额外的部署操作。独立模式适合作为 <code>Global Rate Limiter</code> 给集群提供流控服务。</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2021071002.png" alt="独立模式"></p>
<ul>
<li>嵌入模式（Embedded），即作为内置的 <code>token server</code> 与服务在同一进程中启动。在此模式下，集群中各个实例都是对等的，<code>token server</code> 和 <code>client</code> 可以随时进行转变，因此无需单独部署，灵活性比较好。但是隔离性不佳，需要限制 <code>token server</code> 的总 <code>QPS</code>，防止影响应用本身。嵌入模式适合某个应用集群内部的流控。</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2021071003.png" alt="嵌入模式"></p>
<p>我们可以使用 <code>API</code> 将在 <code>embedded</code> 模式下转换集群流控身份：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;&lt;ip&gt;:&lt;port&gt;&#x2F;setClusterMode?mode&#x3D;&lt;xxx&gt;</span><br></pre></td></tr></table></figure>
<p>其中 <code>mode</code> 为 <code>0</code> 代表 <code>client</code>，<code>1</code> 代表 <code>server</code>，<code>-1</code> 代表关闭。注意应用端需要引入集群限流客户端或服务端的相应依赖。</p>
<p>在独立模式下，我们可以直接创建对应的 <code>ClusterTokenServer</code> 实例并在 <code>main</code> 函数中通过 <code>start</code> 方法启动 <code>Token Server</code>。</p>
<h2 id="3-4、属性配置"><a href="#3-4、属性配置" class="headerlink" title="3.4、属性配置"></a>3.4、属性配置</h2><p>集群限流服务端注册动态配置源来动态地进行配置。配置类型有以下几种：</p>
<ul>
<li><code>namespace set</code>: 集群限流服务端服务的作用域（命名空间），可以设置为自己服务的应用名。集群限流 <code>client</code> 在连接到 <code>token server</code> 后会上报自己的命名空间（默认为 <code>project.name</code> 配置的应用名），<code>token server</code> 会根据上报的命名空间名称统计连接数。</li>
<li><code>transport config</code>: 集群限流服务端通信相关配置，如 <code>server port</code></li>
<li><code>flow config</code>: 集群限流服务端限流相关配置，如滑动窗口统计时长、格子数目、最大允许总 QPS等</li>
</ul>
<p>我们可以通过 <code>ClusterServerConfigManager</code> 的各个 <code>registerXxxProperty</code> 方法来注册相关的配置源。</p>
<p>从 <code>1.4.1</code> 版本开始，<code>Sentinel</code> 支持给 <code>token server</code> 配置最大允许的总 <code>QPS（maxAllowedQps）</code>，来对 <code>token server</code> 的资源使用进行限制，防止在嵌入模式下影响应用本身。</p>
<p>下图是Token Server 分配配置的示意图：</p>
<p><img src="https://image.eelve.com/eblog/2021071004.png" alt="Token Server分配配置"></p>
<h1 id="肆、扩展接口"><a href="#肆、扩展接口" class="headerlink" title="肆、扩展接口"></a>肆、扩展接口</h1><p><img src="https://image.eelve.com/eblog/2021071005.png" alt="整体扩展架构"></p>
<h2 id="4-1、通用扩展接口"><a href="#4-1、通用扩展接口" class="headerlink" title="4.1、通用扩展接口"></a>4.1、通用扩展接口</h2><p>以下通用接口位于 <code>sentinel-core</code> 中：</p>
<ul>
<li>TokenService: 集群限流功能接口，server / client 均可复用 </li>
<li>ClusterTokenClient: 集群限流功能客户端</li>
<li>ClusterTokenServer: 集群限流服务端接口</li>
<li>EmbeddedClusterTokenServer: 集群限流服务端接口（embedded 模式）</li>
</ul>
<p>以下通用接口位于 <code>sentinel-cluster-common-default</code>:</p>
<ul>
<li>EntityWriter</li>
<li>EntityDecoder</li>
</ul>
<h2 id="4-2、Client-扩展接口"><a href="#4-2、Client-扩展接口" class="headerlink" title="4.2、Client 扩展接口"></a>4.2、Client 扩展接口</h2><p>集群流控 <code>Client</code> 端通信相关扩展接口：</p>
<ul>
<li>ClusterTransportClient：集群限流通信客户端</li>
<li>RequestEntityWriter</li>
<li>ResponseEntityDecoder</li>
</ul>
<h2 id="4-3、Server-扩展接口"><a href="#4-3、Server-扩展接口" class="headerlink" title="4.3、Server 扩展接口"></a>4.3、Server 扩展接口</h2><p>集群流控 <code>Server</code> 端通信相关扩展接口：</p>
<ul>
<li>ResponseEntityWriter</li>
<li>RequestEntityDecoder</li>
</ul>
<p>集群流控 <code>Server</code> 端请求处理扩展接口：</p>
<ul>
<li>RequestProcessor: 请求处理接口 (request -&gt; response)</li>
</ul>
<hr>
<p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Admin 的使用本地版</title>
    <url>/posts/426f984a.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】Spring Boot Actuator 提供了对单个 Spring Boot 应用的监控，信息包含应用状态、内存、线程、堆栈等，比较全面的监控了 Spring Boot 应用的整个生命周期。但是这样监控也有一些问题：第一，所有的监控都需要调用固定的接口来查看，如果全面查看应用状态需要调用很多接口，并且接口返回的 JSON 信息不方便运营人员理解；第二，如果 Spring Boot 应用集群非常大，每个应用都需要调用不同的接口来查看监控信息，操作非常繁琐低效。在这样的背景下，就诞生了另外一个开源软件：<strong>Spring Boot Admin</strong>。</p>
<hr>
<h1 id="壹、什么是Spring-Boot-Admin"><a href="#壹、什么是Spring-Boot-Admin" class="headerlink" title="壹、什么是Spring Boot Admin"></a>壹、什么是Spring Boot Admin</h1><p>Spring Boot Admin 是一个管理和监控 Spring Boot 应用程序的开源软件，每个应用都认为是一个客户端，通过 HTTP 或者使用 Eureka 注册到 admin server 中进行展示，Spring Boot Admin UI 部分使用 Vue.js 将数据展示在前端。</p>
<p>Spring Boot Admin 是一个针对 Spring Boot 的 Actuator 接口进行 UI 美化封装的监控工具，它可以在列表中浏览所有被监控 spring-boot 项目的基本信息、详细的 Health 信息、内存信息、JVM 信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改 logger 的 level。</p>
<p>值得注意的是 Spring Boot Admin 并不是 Spring Boot 官方出品的开源软件，但是其软件质量和使用广泛度都非常的高，并且 Spring Boot Admin 会及时随着 Spring Boot 的更新而更新，当 Spring Boot 推出 2.X 版本时 Spring Boot Admin 也及时进行了更新。</p>
<p>Spring Boot Admin 2.x 不仅是跟着支持了 Spring Boot 2.x，还在 1.x 的基础上进行了大量的更新和优化:</p>
<pre><code>重新规划了项目依赖包，让项目中更方便的集成 Spring Boot Admin
1.x 前端使用了 Angular.js，2.x 使用 Vue 对界面进行了重写，界面美观度提升幅度非常高
提供了支持 Spring Cloud 的组件
其他更新，具体参考：Changes with 2.x
</code></pre>
<p>Spring Boot Admin 分为服务端和客户端，服务端其实就是一个监控后台用来汇总展示所有的监控信息，客户端就是我们的应用，使用时需要先启动服务端，在启动客户端的时候打开 Actuator 的接口，并指向服务端的地址，这样服务端会定时读取相关信息以达到监控的目的。</p>
<hr>
<p>接下来演示如何使用 Spring Boot Admin 对 Spring Boot 应用进行监控。</p>
<h1 id="贰、监控单体应用"><a href="#贰、监控单体应用" class="headerlink" title="贰、监控单体应用"></a>贰、监控单体应用</h1><p>先给大家展示如何使用 Spring Boot Admin 监控单个 Spring Boot 应用。</p>
<h2 id="Admin-Server-端"><a href="#Admin-Server-端" class="headerlink" title="Admin Server 端"></a>Admin Server 端</h2><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p><strong>2.x 下只需要添加此一个包即可，其他组件会自动依赖添加。</strong></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>server.port=8000</p>
<p>服务端设置端口为：8000。</p>
<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(AdminServerApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>完成上面三步之后，启动服务端，访问网址 <a href="http://localhost:8000/">http://localhost:8000</a> 可以看到以下界面：<br><img src="https://eelve.com/upload/2019/8/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png" alt="监控页面"><br>因为刚启动没有应用，因此显示：No applications registered.，同时根据上图也可以看出 applications 页面会展示项目的应用数、实例数和状态三个信息。</p>
<p>接下来我们构建一个客户端，并注册到服务端。</p>
<h2 id="Admin-Client-端"><a href="#Admin-Client-端" class="headerlink" title="Admin Client 端"></a>Admin Client 端</h2><h2 id="项目依赖-1"><a href="#项目依赖-1" class="headerlink" title="项目依赖"></a>项目依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<p><strong>添加 spring-boot-starter-web 是为了使应用处于启动状态，spring-boot-admin-starter-client 会自动添加 Actuator 相关依赖。</strong></p>
<h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">Admin Client</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.url</span>=<span class="string">http://localhost:8000  </span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure>
<pre><code>spring.boot.admin.client.url 配置 Admin Server 的地址
management.endpoints.web.exposure.include=* 打开客户端 Actuator 的监控
</code></pre>
<h3 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminClientApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(AdminClientApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成之后，启动 Client 端，Admin 服务端会自动检查到客户端的变化，并展示其应用：<br><img src="https://eelve.com/upload/2019/8/82-1b588fee05794b2d94a2f578ba805fbb.png" alt="结果"><br>页面会展示被监控的服务列表，点击项目名称会进入此应用的详细监控信息：<br><img src="https://eelve.com/upload/2019/8/83-d685df514a0e44b1bd45e5b6bd1a9e64.png" alt="详情"><br>通过上图可以看出，Spring Boot Admin 以图形化的形式展示了应用的各项信息，这些信息大多都来自于 <strong>Spring Boot Actuator</strong> 提供的接口。利用图形化的形式很容易看到应用的各项参数变化，甚至有些页面还可以进行一些操作，比如改变打印日志的级别等。</p>
<h3 id="点击-journal-页面可以看到应用状态变化的历史过程："><a href="#点击-journal-页面可以看到应用状态变化的历史过程：" class="headerlink" title="点击 journal 页面可以看到应用状态变化的历史过程："></a>点击 journal 页面可以看到应用状态变化的历史过程：</h3><p><img src="https://eelve.com/upload/2019/8/84-fa96d9eee75d47d599f55e27533664e4.png" alt="journal"></p>
<h3 id="点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。"><a href="#点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。" class="headerlink" title="点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。"></a>点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。</h3><p><img src="https://eelve.com/upload/2019/8/85-c42df15785a14110b7532b20afee8ca1.png" alt="wallboard "></p>
<h1 id="叁、监控微服务"><a href="#叁、监控微服务" class="headerlink" title="叁、监控微服务"></a>叁、监控微服务</h1><p>如果我们使用的是单个 Spring Boot 应用，就需要在每一个被监控的应用中配置 Admin Server 的地址信息；如果应用都注册在 Eureka 中就不需要再对每个应用进行配置，Spring Boot Admin 会自动从注册中心抓取应用的相关信息。</p>
<p>如果使用了 Spring Cloud 的服务发现功能，就不需要再单独添加 Admin Client 客户端，仅仅需要 Spring Boot Server，其他内容会自动进行配置。</p>
<p>接下来以 Eureka 作为服务发现的示例来进行演示，实际上也可以使用 Consul 或者 Zookeeper。</p>
<p>（1）服务端和客户端添加 spring-cloud-starter-eureka 到包依赖中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>（2）启动类添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootAdminApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityPermitAllConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            http.authorizeRequests().anyRequest().permitAll()  </span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用类 <strong>SecurityPermitAllConfig</strong> 关闭了安全验证。</p>
<p>（3）在客户端中配置服务发现的地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span>   </span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">leaseRenewalIntervalInSeconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">health-check-url-path:</span> <span class="string">/actuator/health</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">startup:</span> <span class="string">$&#123;random.int&#125;</span>    <span class="comment">#needed to trigger info and endpoint update after restart</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registryFetchIntervalSeconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>  </span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure>
<p><strong>Spring Cloud</strong> 提供了示例代码可以参考这里：<a href="https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka/">spring-boot-admin-sample-eureka</a>。</p>
<p>重启启动服务端和客户端之后，访问服务端的相关地址就可以看到监控页面了。</p>
<h1 id="肆、安全控制"><a href="#肆、安全控制" class="headerlink" title="肆、安全控制"></a>肆、安全控制</h1><p><strong>Spring Boot Admin</strong> 后台有很多的敏感信息和操作，如果公司不做权限控制可能会影响到公司系统的安全性。Spring Boot Admin 也考虑到了这个因素，可以利用前面的 Spring Security 做安全访问控制，在 spring-boot-admin-server 上进行改造。</p>
<p>（1）添加 Spring Boot Security 依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>（2）添加安全访问控制</p>
<p>和前面的 Security 配置一样，给项目添加访问控制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String adminContextPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// @formatter:off</span></span><br><span class="line">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">        successHandler.setTargetUrlParameter(<span class="string">&quot;redirectTo&quot;</span>);</span><br><span class="line">        successHandler.setDefaultTargetUrl(adminContextPath + <span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            .antMatchers(adminContextPath + <span class="string">&quot;/assets/**&quot;</span>).permitAll() </span><br><span class="line">            .antMatchers(adminContextPath + <span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">            .anyRequest().authenticated() </span><br><span class="line">            .and()</span><br><span class="line">        .formLogin().loginPage(adminContextPath + <span class="string">&quot;/login&quot;</span>).successHandler(successHandler).and() </span><br><span class="line">        .logout().logoutUrl(adminContextPath + <span class="string">&quot;/logout&quot;</span>).and()</span><br><span class="line">        .httpBasic().and() </span><br><span class="line">        .csrf()</span><br><span class="line">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class="line">            .ignoringAntMatchers(</span><br><span class="line">                adminContextPath + <span class="string">&quot;/instances&quot;</span>,   </span><br><span class="line">                adminContextPath + <span class="string">&quot;/actuator/**&quot;</span>  </span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    antMatchers(adminContextPath + <span class="string">&quot;/assets/**&quot;</span>).permitAll() 所有静态内容不做安全验证</span><br><span class="line">    anyRequest().authenticated() 其他请求均需要验证</span><br><span class="line">    formLogin() 配置登录</span><br><span class="line">    logout() 配置登出</span><br><span class="line">    httpBasic() 支持 HTTP，引导 Spring Boot Admin 客户端注册</span><br><span class="line">    csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 打开跨站点请求保护 Cookies</span><br><span class="line">    adminContextPath + <span class="string">&quot;/instances&quot;</span> 取消跨站点请求保护 <span class="string">&quot;/instances&quot;</span>，方便 Admin 客户端注册</span><br><span class="line">    adminContextPath + <span class="string">&quot;/actuator/** &quot;</span> 取消跨站点请求保护 <span class="string">&quot;/actuator/**&quot;</span>，可以让 Admin 监控到 Actuator 的相关接口</span><br></pre></td></tr></table></figure>
<p>然后可以给 security 设置一个用户名和密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.security.user.name&#x3D;admin</span><br><span class="line">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>
<p>配置完成之后重启 Admin Server 端，访问网址 <a href="http://localhost:8000/">http://localhost:8000</a> 就会发现需要一个登录的用户名和密码了。<br><img src="https://eelve.com/upload/2019/8/86-dc4b6d05194a4c9786383189c6378f26.png" alt="Admin Server"><br>使用刚才设置的用户名和密码登录之后，发现注册到 Server 端的服务数成为 0 了，这是客户端统一也需要配置帐户名和密码信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.security.user.name&#x3D;admin</span><br><span class="line">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>
<p>配置完成之后重新启动，在服务端就又可以查看监控到的应用了。</p>
<h1 id="伍、其他方式"><a href="#伍、其他方式" class="headerlink" title="伍、其他方式"></a>伍、其他方式</h1><p>如果 Actuator 的端口被使用 HTTP 认证保护，那么 Spring Boot Admin Server 访问的时候需要凭证信息，这时候可以使用 metadata 的方式对账户和密码进行配置。</p>
<h2 id="直接使用客户端注册的方式："><a href="#直接使用客户端注册的方式：" class="headerlink" title="直接使用客户端注册的方式："></a>直接使用客户端注册的方式：</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.boot.admin.client:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line">        <span class="attr">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-Eureka-进行注册的方式："><a href="#使用-Eureka-进行注册的方式：" class="headerlink" title="使用 Eureka 进行注册的方式："></a>使用 Eureka 进行注册的方式：</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line">      <span class="attr">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>
<p>Eureka 中的 metadataMap 是专门用来存放一些自定义的数据，当注册中心或者其他服务需要此服务的某些配置时可以在 metadataMap 里取。实际上，每个 instance 都有各自的 metadataMap，map 中存放着需要用到的属性。例如，上面配置中的 eureka.instance.metadata-map.user.name，当这个服务成功注册到 Eureka 上，Spring Boot Admin 就会拿到这个 instance，进而拿到 metadataMap 里的属性，然后放入请求头，向此服务发送请求，访问此服务的 Actuator 开放的端点。</p>
<h1 id="陆、邮件告警"><a href="#陆、邮件告警" class="headerlink" title="陆、邮件告警"></a>陆、邮件告警</h1><p>Spring Boot Admin 将微服务中所有应用信息在后台进行了展示，非常方便我们对微服务整体的监控和治理。但是我们的运营人员也不可能一天 24 小时盯着监控后台，因此如果服务有异常的时候，有对应的邮件告警就太好了，其实 Spring Boot Admin 也给出了支持。</p>
<p>我们对上面的示例项目 spring-boot-admin-server 进行改造。</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="增加了邮件发送的-starter-包。"><a href="#增加了邮件发送的-starter-包。" class="headerlink" title="增加了邮件发送的 starter 包。"></a>增加了邮件发送的 starter 包。</h2><h3 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">xxx</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.boot.admin.notify.mail.from</span>=<span class="string">yyyy@qq.com</span></span><br><span class="line"><span class="meta">spring.boot.admin.notify.mail.to</span>=<span class="string">zzz@qq.com</span></span><br></pre></td></tr></table></figure>
<p><strong>在配置文件中添加邮件发送相关信息：邮件的发送者、接受者、协议、移动授权码等</strong>。</p>
<p>配置完成后，重新启动项目 spring-boot-admin-server，这样 Admin Server 就具备了邮件告警的功能，默认情况下 Admin Server 对 Eureka 中的服务上下线都进行了监控，当服务上下线的时候我们就会收到相应的告警邮件。</p>
<p>当然这只是最基本的邮件监控，在实际的使用过程中，需要根据情况对邮件告警内容进行自定义，比如监控堆内存的使用情况，当到达一定比例的时候进行告警等。</p>
<p>【写在后面的话】Spring Boot Admin 解决了我们对大规模 Spring Boot 应用监控的需求，Spring Boot Admin 充分利用了 Actuator 开放的相关接口，采用优秀的图形界面将这些信息进行了展示，方便我们更加直观的查看集群中应用的状态。Spring Boot Admin 不仅可以监控单个 Spring Boot 应用，也可以结合 Spring Cloud 监控注册到服务中心的所有应用状态，再结合报警系统的使用就可以随时感知到应用的状态变化。在实际工作中 Spring Boot Admin 是我们在后期运营中频繁用到的一个组件，应该作为重点关注。</p>
<hr>
<p>最后是一个用http方式监听的demo：<a href="https://github.com/eelve/springbootadmin">Spring Boot Admin使用http连接server端</a></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Admin 的使用</title>
    <url>/posts/ea40c175.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】Spring Boot Actuator 提供了对单个 Spring Boot 应用的监控，信息包含应用状态、内存、线程、堆栈等，比较全面的监控了 Spring Boot 应用的整个生命周期。但是这样监控也有一些问题：第一，所有的监控都需要调用固定的接口来查看，如果全面查看应用状态需要调用很多接口，并且接口返回的 JSON 信息不方便运营人员理解；第二，如果 Spring Boot 应用集群非常大，每个应用都需要调用不同的接口来查看监控信息，操作非常繁琐低效。在这样的背景下，就诞生了另外一个开源软件：<strong>Spring Boot Admin</strong>。</p>
<hr>
<h1 id="壹、什么是Spring-Boot-Admin"><a href="#壹、什么是Spring-Boot-Admin" class="headerlink" title="壹、什么是Spring Boot Admin"></a>壹、什么是Spring Boot Admin</h1><p>Spring Boot Admin 是一个管理和监控 Spring Boot 应用程序的开源软件，每个应用都认为是一个客户端，通过 HTTP 或者使用 Eureka 注册到 admin server 中进行展示，Spring Boot Admin UI 部分使用 Vue.js 将数据展示在前端。</p>
<p>Spring Boot Admin 是一个针对 Spring Boot 的 Actuator 接口进行 UI 美化封装的监控工具，它可以在列表中浏览所有被监控 spring-boot 项目的基本信息、详细的 Health 信息、内存信息、JVM 信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改 logger 的 level。</p>
<p>值得注意的是 Spring Boot Admin 并不是 Spring Boot 官方出品的开源软件，但是其软件质量和使用广泛度都非常的高，并且 Spring Boot Admin 会及时随着 Spring Boot 的更新而更新，当 Spring Boot 推出 2.X 版本时 Spring Boot Admin 也及时进行了更新。</p>
<p>Spring Boot Admin 2.x 不仅是跟着支持了 Spring Boot 2.x，还在 1.x 的基础上进行了大量的更新和优化:</p>
<pre><code>重新规划了项目依赖包，让项目中更方便的集成 Spring Boot Admin
1.x 前端使用了 Angular.js，2.x 使用 Vue 对界面进行了重写，界面美观度提升幅度非常高
提供了支持 Spring Cloud 的组件
其他更新，具体参考：Changes with 2.x
</code></pre>
<p>Spring Boot Admin 分为服务端和客户端，服务端其实就是一个监控后台用来汇总展示所有的监控信息，客户端就是我们的应用，使用时需要先启动服务端，在启动客户端的时候打开 Actuator 的接口，并指向服务端的地址，这样服务端会定时读取相关信息以达到监控的目的。</p>
<hr>
<p>接下来演示如何使用 Spring Boot Admin 对 Spring Boot 应用进行监控。</p>
<h1 id="贰、监控单体应用"><a href="#贰、监控单体应用" class="headerlink" title="贰、监控单体应用"></a>贰、监控单体应用</h1><p>先给大家展示如何使用 Spring Boot Admin 监控单个 Spring Boot 应用。</p>
<h2 id="Admin-Server-端"><a href="#Admin-Server-端" class="headerlink" title="Admin Server 端"></a>Admin Server 端</h2><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p><strong>2.x 下只需要添加此一个包即可，其他组件会自动依赖添加。</strong></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>server.port=8000</p>
<p>服务端设置端口为：8000。</p>
<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(AdminServerApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>完成上面三步之后，启动服务端，访问网址 <a href="http://localhost:8000/">http://localhost:8000</a> 可以看到以下界面：<br><img src="https://image.eelve.com/eblog/81-1f39bf9d2ba5497a8bdfa151df35bbd8.png" alt="监控页面"><br>因为刚启动没有应用，因此显示：No applications registered.，同时根据上图也可以看出 applications 页面会展示项目的应用数、实例数和状态三个信息。</p>
<p>接下来我们构建一个客户端，并注册到服务端。</p>
<h2 id="Admin-Client-端"><a href="#Admin-Client-端" class="headerlink" title="Admin Client 端"></a>Admin Client 端</h2><h2 id="项目依赖-1"><a href="#项目依赖-1" class="headerlink" title="项目依赖"></a>项目依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<p><strong>添加 spring-boot-starter-web 是为了使应用处于启动状态，spring-boot-admin-starter-client 会自动添加 Actuator 相关依赖。</strong></p>
<h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">Admin Client</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.url</span>=<span class="string">http://localhost:8000  </span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure>
<pre><code>spring.boot.admin.client.url 配置 Admin Server 的地址
management.endpoints.web.exposure.include=* 打开客户端 Actuator 的监控
</code></pre>
<h3 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminClientApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(AdminClientApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成之后，启动 Client 端，Admin 服务端会自动检查到客户端的变化，并展示其应用：<br><img src="https://image.eelve.com/eblog/82-1b588fee05794b2d94a2f578ba805fbb.png" alt="结果"><br>页面会展示被监控的服务列表，点击项目名称会进入此应用的详细监控信息：<br><img src="https://image.eelve.com/eblog/83-d685df514a0e44b1bd45e5b6bd1a9e64.png" alt="详情"><br>通过上图可以看出，Spring Boot Admin 以图形化的形式展示了应用的各项信息，这些信息大多都来自于 <strong>Spring Boot Actuator</strong> 提供的接口。利用图形化的形式很容易看到应用的各项参数变化，甚至有些页面还可以进行一些操作，比如改变打印日志的级别等。</p>
<h3 id="点击-journal-页面可以看到应用状态变化的历史过程："><a href="#点击-journal-页面可以看到应用状态变化的历史过程：" class="headerlink" title="点击 journal 页面可以看到应用状态变化的历史过程："></a>点击 journal 页面可以看到应用状态变化的历史过程：</h3><p><img src="https://image.eelve.com/eblog/84-fa96d9eee75d47d599f55e27533664e4.png" alt="journal"></p>
<h3 id="点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。"><a href="#点击第一个菜单-wallboard-可以以更形象的方式查看应用数量启动的时间等。" class="headerlink" title="点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。"></a>点击第一个菜单 wallboard 可以以更形象的方式查看应用数量启动的时间等。</h3><p><img src="https://image.eelve.com/eblog/85-c42df15785a14110b7532b20afee8ca1.png" alt="wallboard "></p>
<h1 id="叁、监控微服务"><a href="#叁、监控微服务" class="headerlink" title="叁、监控微服务"></a>叁、监控微服务</h1><p>如果我们使用的是单个 Spring Boot 应用，就需要在每一个被监控的应用中配置 Admin Server 的地址信息；如果应用都注册在 Eureka 中就不需要再对每个应用进行配置，Spring Boot Admin 会自动从注册中心抓取应用的相关信息。</p>
<p>如果使用了 Spring Cloud 的服务发现功能，就不需要再单独添加 Admin Client 客户端，仅仅需要 Spring Boot Server，其他内容会自动进行配置。</p>
<p>接下来以 Eureka 作为服务发现的示例来进行演示，实际上也可以使用 Consul 或者 Zookeeper。</p>
<p>（1）服务端和客户端添加 spring-cloud-starter-eureka 到包依赖中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>（2）启动类添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootAdminApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityPermitAllConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            http.authorizeRequests().anyRequest().permitAll()  </span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用类 <strong>SecurityPermitAllConfig</strong> 关闭了安全验证。</p>
<p>（3）在客户端中配置服务发现的地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span>   </span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">leaseRenewalIntervalInSeconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">health-check-url-path:</span> <span class="string">/actuator/health</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">startup:</span> <span class="string">$&#123;random.int&#125;</span>    <span class="comment">#needed to trigger info and endpoint update after restart</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registryFetchIntervalSeconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>  </span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure>
<p><strong>Spring Cloud</strong> 提供了示例代码可以参考这里：<a href="https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka/">spring-boot-admin-sample-eureka</a>。</p>
<p>重启启动服务端和客户端之后，访问服务端的相关地址就可以看到监控页面了。</p>
<h1 id="肆、安全控制"><a href="#肆、安全控制" class="headerlink" title="肆、安全控制"></a>肆、安全控制</h1><p><strong>Spring Boot Admin</strong> 后台有很多的敏感信息和操作，如果公司不做权限控制可能会影响到公司系统的安全性。Spring Boot Admin 也考虑到了这个因素，可以利用前面的 Spring Security 做安全访问控制，在 spring-boot-admin-server 上进行改造。</p>
<p>（1）添加 Spring Boot Security 依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>（2）添加安全访问控制</p>
<p>和前面的 Security 配置一样，给项目添加访问控制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String adminContextPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// @formatter:off</span></span><br><span class="line">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">        successHandler.setTargetUrlParameter(<span class="string">&quot;redirectTo&quot;</span>);</span><br><span class="line">        successHandler.setDefaultTargetUrl(adminContextPath + <span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            .antMatchers(adminContextPath + <span class="string">&quot;/assets/**&quot;</span>).permitAll() </span><br><span class="line">            .antMatchers(adminContextPath + <span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">            .anyRequest().authenticated() </span><br><span class="line">            .and()</span><br><span class="line">        .formLogin().loginPage(adminContextPath + <span class="string">&quot;/login&quot;</span>).successHandler(successHandler).and() </span><br><span class="line">        .logout().logoutUrl(adminContextPath + <span class="string">&quot;/logout&quot;</span>).and()</span><br><span class="line">        .httpBasic().and() </span><br><span class="line">        .csrf()</span><br><span class="line">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())  </span><br><span class="line">            .ignoringAntMatchers(</span><br><span class="line">                adminContextPath + <span class="string">&quot;/instances&quot;</span>,   </span><br><span class="line">                adminContextPath + <span class="string">&quot;/actuator/**&quot;</span>  </span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    antMatchers(adminContextPath + <span class="string">&quot;/assets/**&quot;</span>).permitAll() 所有静态内容不做安全验证</span><br><span class="line">    anyRequest().authenticated() 其他请求均需要验证</span><br><span class="line">    formLogin() 配置登录</span><br><span class="line">    logout() 配置登出</span><br><span class="line">    httpBasic() 支持 HTTP，引导 Spring Boot Admin 客户端注册</span><br><span class="line">    csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) 打开跨站点请求保护 Cookies</span><br><span class="line">    adminContextPath + <span class="string">&quot;/instances&quot;</span> 取消跨站点请求保护 <span class="string">&quot;/instances&quot;</span>，方便 Admin 客户端注册</span><br><span class="line">    adminContextPath + <span class="string">&quot;/actuator/** &quot;</span> 取消跨站点请求保护 <span class="string">&quot;/actuator/**&quot;</span>，可以让 Admin 监控到 Actuator 的相关接口</span><br></pre></td></tr></table></figure>
<p>然后可以给 security 设置一个用户名和密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.security.user.name&#x3D;admin</span><br><span class="line">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>
<p>配置完成之后重启 Admin Server 端，访问网址 <a href="http://localhost:8000/">http://localhost:8000</a> 就会发现需要一个登录的用户名和密码了。<br><img src="https://image.eelve.com/eblog/86-dc4b6d05194a4c9786383189c6378f26.png" alt="Admin Server"><br>使用刚才设置的用户名和密码登录之后，发现注册到 Server 端的服务数成为 0 了，这是客户端统一也需要配置帐户名和密码信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.security.user.name&#x3D;admin</span><br><span class="line">spring.security.user.password&#x3D;admin</span><br></pre></td></tr></table></figure>
<p>配置完成之后重新启动，在服务端就又可以查看监控到的应用了。</p>
<h1 id="伍、其他方式"><a href="#伍、其他方式" class="headerlink" title="伍、其他方式"></a>伍、其他方式</h1><p>如果 Actuator 的端口被使用 HTTP 认证保护，那么 Spring Boot Admin Server 访问的时候需要凭证信息，这时候可以使用 metadata 的方式对账户和密码进行配置。</p>
<h2 id="直接使用客户端注册的方式："><a href="#直接使用客户端注册的方式：" class="headerlink" title="直接使用客户端注册的方式："></a>直接使用客户端注册的方式：</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.boot.admin.client:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line">        <span class="attr">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-Eureka-进行注册的方式："><a href="#使用-Eureka-进行注册的方式：" class="headerlink" title="使用 Eureka 进行注册的方式："></a>使用 Eureka 进行注册的方式：</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line">      <span class="attr">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure>
<p>Eureka 中的 metadataMap 是专门用来存放一些自定义的数据，当注册中心或者其他服务需要此服务的某些配置时可以在 metadataMap 里取。实际上，每个 instance 都有各自的 metadataMap，map 中存放着需要用到的属性。例如，上面配置中的 eureka.instance.metadata-map.user.name，当这个服务成功注册到 Eureka 上，Spring Boot Admin 就会拿到这个 instance，进而拿到 metadataMap 里的属性，然后放入请求头，向此服务发送请求，访问此服务的 Actuator 开放的端点。</p>
<h1 id="陆、邮件告警"><a href="#陆、邮件告警" class="headerlink" title="陆、邮件告警"></a>陆、邮件告警</h1><p>Spring Boot Admin 将微服务中所有应用信息在后台进行了展示，非常方便我们对微服务整体的监控和治理。但是我们的运营人员也不可能一天 24 小时盯着监控后台，因此如果服务有异常的时候，有对应的邮件告警就太好了，其实 Spring Boot Admin 也给出了支持。</p>
<p>我们对上面的示例项目 spring-boot-admin-server 进行改造。</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="增加了邮件发送的-starter-包。"><a href="#增加了邮件发送的-starter-包。" class="headerlink" title="增加了邮件发送的 starter 包。"></a>增加了邮件发送的 starter 包。</h2><h3 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">xxx</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.boot.admin.notify.mail.from</span>=<span class="string">yyyy@qq.com</span></span><br><span class="line"><span class="meta">spring.boot.admin.notify.mail.to</span>=<span class="string">zzz@qq.com</span></span><br></pre></td></tr></table></figure>
<p><strong>在配置文件中添加邮件发送相关信息：邮件的发送者、接受者、协议、移动授权码等</strong>。</p>
<p>配置完成后，重新启动项目 spring-boot-admin-server，这样 Admin Server 就具备了邮件告警的功能，默认情况下 Admin Server 对 Eureka 中的服务上下线都进行了监控，当服务上下线的时候我们就会收到相应的告警邮件。</p>
<p>当然这只是最基本的邮件监控，在实际的使用过程中，需要根据情况对邮件告警内容进行自定义，比如监控堆内存的使用情况，当到达一定比例的时候进行告警等。</p>
<p>【写在后面的话】Spring Boot Admin 解决了我们对大规模 Spring Boot 应用监控的需求，Spring Boot Admin 充分利用了 Actuator 开放的相关接口，采用优秀的图形界面将这些信息进行了展示，方便我们更加直观的查看集群中应用的状态。Spring Boot Admin 不仅可以监控单个 Spring Boot 应用，也可以结合 Spring Cloud 监控注册到服务中心的所有应用状态，再结合报警系统的使用就可以随时感知到应用的状态变化。在实际工作中 Spring Boot Admin 是我们在后期运营中频繁用到的一个组件，应该作为重点关注。</p>
<hr>
<p>最后是一个用http方式监听的demo：<a href="https://github.com/eelve/springbootadmin">Spring Boot Admin使用http连接server端</a></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>springboot-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自定义Starter</title>
    <url>/posts/12f1a581.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在使用SpringBoot的日常开发过程中，我们不可避免的要封装一些自己的Starter，今天这篇文章就来讨论一下怎么自定义一个Starter，本文会封装一个短信发送能力的Starter,使用<a href="https://office.ucpaas.com/about/index.html">云之讯</a>的SDK。</p>
<hr>
<h1 id="壹、命名规范"><a href="#壹、命名规范" class="headerlink" title="壹、命名规范"></a>壹、命名规范</h1><p>官方的约定主要有一个命名的约定：在maven中，groupId代表着姓氏，artifactId代表着名字。Spring Boot也是有一个命名的建议的。groupId不要用官方的org.springframework.boot而要用你自己独特的。对于artifactId的命名，Spring Boot官方建议非官方的Starter命名格式遵循 xxxx-spring-boot-starter ，例如 mybatis-spring-boot-starter 。官方starter会遵循spring-boot-starter-xxxx ,例如spring-boot-starter-web 。很多开源starter作者会忽略这种约定，显得不够“专业“。</p>
<h1 id="贰、新建工程"><a href="#贰、新建工程" class="headerlink" title="贰、新建工程"></a>贰、新建工程</h1><p>新建一个<strong>sms-spring-boot-starter</strong>工程，pom依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--封装Starter核心依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非必需,该依赖作用是在使用IDEA编写配置文件有代码提示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok 插件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为要使用RestTemplate和转换Json，所以引入这两个依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.61<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="叁、Properties配置"><a href="#叁、Properties配置" class="headerlink" title="叁、Properties配置"></a>叁、Properties配置</h1><p>一般配置参数都是在Spring Boot 的application.yml中。我们会定义一个前缀标识来作为名称空间隔离各个组件的参数。对应的组件会定义一个XXXXProperties 来自动装配这些参数。自动装配的机制基于@ConfigurationProperties注解，请注意一定要显式声明你配置的前缀标识（prefix）。所以这里我们新建<strong>SmsProperties</strong>类，可以配置信息通过配置项名称映射成实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ucpaassms-config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line">    <span class="keyword">private</span> String accountSid;</span><br><span class="line">    <span class="keyword">private</span> String authToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里我们可以将配置文件中前缀为<strong>ucpaassms-config</strong>的配置，映射到<strong>SmsProperties</strong>类中。在将来使用时只需要在application.yml中加入上面对应SmsProperties的配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ucpaassms-config:</span></span><br><span class="line">  <span class="attr">account-sid:</span>  <span class="string">//这里填写平台获取的ID和KEY</span></span><br><span class="line">  <span class="attr">auth-token:</span>   <span class="string">//这里填写平台获取的ID和KEY</span></span><br><span class="line">  <span class="attr">appid:</span>        <span class="string">//这里填写平台获取的ID和KEY</span></span><br></pre></td></tr></table></figure>
<h1 id="肆、定义业务实现类"><a href="#肆、定义业务实现类" class="headerlink" title="肆、定义业务实现类"></a>肆、定义业务实现类</h1><p>拿到配置后，接下来就是根据配置来初始化我们的功能接口。这里我们新建<strong>SmsService</strong>，用来提供具体业务逻辑处理能力</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line">    <span class="keyword">private</span> String accountSid;</span><br><span class="line">    <span class="keyword">private</span> String authToken;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsService</span><span class="params">(SmsProperties smsProperties)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.appid = smsProperties.getAppid();</span><br><span class="line">       <span class="keyword">this</span>.accountSid = smsProperties.getAccountSid();</span><br><span class="line">       <span class="keyword">this</span>.authToken = smsProperties.getAuthToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单独发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendSMS</span><span class="params">(SendSMSDTO sendSMSDTO)</span></span>&#123;</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;sid&quot;</span>, accountSid);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;token&quot;</span>, authToken);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;appid&quot;</span>, appid);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;templateid&quot;</span>, sendSMSDTO.getTemplateid());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;param&quot;</span>, sendSMSDTO.getParam());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;mobile&quot;</span>, sendSMSDTO.getMobile());</span><br><span class="line">        <span class="keyword">if</span> (sendSMSDTO.getUid()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            jsonObject.put(<span class="string">&quot;uid&quot;</span>,sendSMSDTO.getUid());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            jsonObject.put(<span class="string">&quot;uid&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String json = JSONObject.toJSONString(jsonObject);</span><br><span class="line">        <span class="comment">//使用restTemplate进行访问远程Http服务</span></span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">        HttpEntity&lt;String&gt; httpEntity = <span class="keyword">new</span> HttpEntity&lt;String&gt;(json, headers);</span><br><span class="line">        String result = restTemplate.postForObject(ENUM_SMSAPI_URL.SENDSMS.getUrl(), httpEntity, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群体发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendBatchSMS</span><span class="params">(SendSMSDTO sendSMSDTO)</span></span>&#123;</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;sid&quot;</span>, accountSid);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;token&quot;</span>, authToken);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;appid&quot;</span>, appid);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;templateid&quot;</span>, sendSMSDTO.getTemplateid());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;param&quot;</span>, sendSMSDTO.getParam());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;mobile&quot;</span>, sendSMSDTO.getMobile());</span><br><span class="line">        <span class="keyword">if</span> (sendSMSDTO.getUid()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            jsonObject.put(<span class="string">&quot;uid&quot;</span>,sendSMSDTO.getUid());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            jsonObject.put(<span class="string">&quot;uid&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String json = JSONObject.toJSONString(jsonObject);</span><br><span class="line">        <span class="comment">//使用restTemplate进行访问远程Http服务</span></span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">        HttpEntity&lt;String&gt; httpEntity = <span class="keyword">new</span> HttpEntity&lt;String&gt;(json, headers);</span><br><span class="line">        String result = restTemplate.postForObject(ENUM_SMSAPI_URL.SENDBATCHSMS.getUrl(), httpEntity, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="伍、定义配置类"><a href="#伍、定义配置类" class="headerlink" title="伍、定义配置类"></a>伍、定义配置类</h1><p>功能接口实现完后我们会编写一个自动配置类 SmsAutoConfiguration 。除了@Configuration注解外，@EnableConfigurationProperties会帮助我们将我们的配置类SmsProperties加载进来。然后将我们需要暴露的功能接口声明为Spring Bean暴露给Spring Boot应用。这里我们新建<strong>SmsAutoConfiguration</strong>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//注释使类成为bean的工厂</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SmsProperties.class)</span> <span class="comment">//使@ConfigurationProperties注解生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SmsService <span class="title">getBean</span><span class="params">(SmsProperties smsProperties)</span></span>&#123;</span><br><span class="line">        SmsService smsService = <span class="keyword">new</span> SmsService(smsProperties);</span><br><span class="line">        <span class="keyword">return</span> smsService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="陆、自动装配"><a href="#陆、自动装配" class="headerlink" title="陆、自动装配"></a>陆、自动装配</h1><p>这里会用到类似java的SPI机制。在资源包下新建META-INF/spring.factories写入SmsAutoConfiguration全限定名。这样在starter组件集成入Spring Boot应用时就可以被应用捕捉到。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;com.eelve.sms.starter.config.SmsAutoConfiguration</span><br></pre></td></tr></table></figure>
<p>这里还有另外一种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(SmsAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableSMS &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样我们使用EnableSMS注解，就可以使用能力了</span></span><br></pre></td></tr></table></figure>
<p>到这里我们的自定义配置就可以完成了，然后就可以上传仓库，提供给第三方使用了。</p>
<h1 id="柒、测试"><a href="#柒、测试" class="headerlink" title="柒、测试"></a>柒、测试</h1><h2 id="7-1-加入sms-spring-boot-starter短信依赖"><a href="#7-1-加入sms-spring-boot-starter短信依赖" class="headerlink" title="7.1 加入sms-spring-boot-starter短信依赖"></a>7.1 加入<strong>sms-spring-boot-starter</strong>短信依赖</h2><h2 id="7-2-编写配置"><a href="#7-2-编写配置" class="headerlink" title="7.2 编写配置"></a>7.2 编写配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ucpaassms-config:</span></span><br><span class="line">  <span class="attr">account-sid:</span>  <span class="string">//这里填写平台获取的ID和KEY</span></span><br><span class="line">  <span class="attr">auth-token:</span>   <span class="string">//这里填写平台获取的ID和KEY</span></span><br><span class="line">  <span class="attr">appid:</span>        <span class="string">//这里填写平台获取的ID和KEY</span></span><br></pre></td></tr></table></figure>
<h2 id="7-3-编写测试类"><a href="#7-3-编写测试类" class="headerlink" title="7.3 编写测试类"></a>7.3 编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.ucpaassms.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.sms.starter.SmsService;</span><br><span class="line"><span class="keyword">import</span> com.eelve.sms.starter.dto.SendSMSDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/sendsmsTest&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendsmsTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建传输类设置参数</span></span><br><span class="line">        SendSMSDTO sendSMSDTO  = <span class="keyword">new</span> SendSMSDTO();</span><br><span class="line">        sendSMSDTO.setMobile(<span class="string">&quot;18888888888&quot;</span>);     <span class="comment">//手机号</span></span><br><span class="line">        sendSMSDTO.setTemplateid(<span class="string">&quot;55555&quot;</span>); <span class="comment">//模板</span></span><br><span class="line">        sendSMSDTO.setParam(<span class="string">&quot;9999&quot;</span>);      <span class="comment">//参数</span></span><br><span class="line">        <span class="keyword">return</span> smsService.sendSMS(sendSMSDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行，访问<a href="http://localhost:8080/sms/sendsmsTest">http://localhost:8080/sms/sendsmsTest</a>,就可以收到发送的短信了</p>
<pre><code>【蔚然山庄】尊敬的用户，敬请关注我们的后续活动。
</code></pre>
<hr>
<p>【<strong>后面的话</strong>】</p>
<p>在引入自己封装的Starter的时候,有的人会报错xxxx类的bean没有找到问题,是因为@SpringBootApplication扫描包的范围是启动类所在同级包和子包,但是不包括第三方的jar包.如果需要扫描maven依赖添加的Jar,我们就要单独使用@ComponentScan注解扫描包.<br>针对这种情况解决方式有两种:</p>
<p>第一种:是你封装的Starter项目下父级包名称和测试项目的父级包名一样,例如这两个项目包名都叫com.eelve,这样可以不使用@ComponentScan注解,很显然这样做有局限性,不推荐.</p>
<p>第二种:是可以单独使用@ComponentScan注解扫描第三方包,但是这里一定要注意@SpringBootApplication注解等价于默认属性使用@Configuration+@EnableAutoConfiguration+@ComponentScan,如果@SpringBootApplication和@ComponentScan注解同时存在，那么@SpringBootApplication注解中@ComponentScan的扫描范围会被覆盖,所以单独使用@ComponentScan的话,必须在该注解上配置项目需要扫描的包的所有范围,即项目包路径+依赖包路径.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/**</span></span><br><span class="line"> <span class="string">*</span> <span class="string">@ComponentScan注解扫描多个包下示例</span></span><br><span class="line"> <span class="string">*/</span></span><br><span class="line"><span class="string">@ComponentScan(&#123;&quot;com.test&quot;,&quot;sms.test&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<p>另外具体实现可以参考我的项目：<a href="https://github.com/eelve/ucpaas-spring-boot-starter">ucpaas-spring-boot-starter</a></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Admin</title>
    <url>/posts/4aa299c4.html</url>
    <content><![CDATA[<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Eureka</title>
    <url>/posts/cef2acbf.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】SpringCloud为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等。它配置简单，上手快，而且生态成熟，便于应用。但是它对SpringBoot有很强的依赖，需要有一定基础，但是SpringBoot俩小时就可以入门。另外对于“微服务架构” 不了解的话，可以通过搜索引擎搜索“微服务架构”了解下。另外这是SpringCloud的版本为<strong>Greenwich.SR2</strong>，JDK版本为<strong>1.8</strong>，SpringBoot的版本为<strong>2.1.7.RELEASE</strong>。</p>
<hr>
<h1 id="壹、新建父工程"><a href="#壹、新建父工程" class="headerlink" title="壹、新建父工程"></a>壹、新建父工程</h1><ul>
<li>新建一个Maven父工程lovincloud，便于版本管理，然后删除src文件夹</li>
<li>添加pom依赖和SpringCloud和SpringBoot的版本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;lovincloud&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.SR2&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<h1 id="贰、添加一个注册中心"><a href="#贰、添加一个注册中心" class="headerlink" title="贰、添加一个注册中心"></a>贰、添加一个注册中心</h1><p>在这里，我们需要用的的组件上Spring Cloud Netflix的Eureka ,eureka是一个服务注册和发现模块。</p>
<ul>
<li>新建一个子工程<strong>lovin-eureka-server</strong>作为服务的注册中心</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;eurekaserver&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;eureka服务端&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后在启动类上添加@EnableEurekaServer注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinEurekaServerApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 16:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinEurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinEurekaServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。eureka server的配置文件appication.yml：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">naem:</span> <span class="string">lovineurkaserver</span>  <span class="comment"># 服务模块名称</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span>  <span class="comment"># 设置的eureka端口号</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>   <span class="comment"># 设置eureka的主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span>  <span class="comment">#表示是否将自己注册到Eureka Server，默认为true。由于当前应用就是Eureka Server，故而设置为false</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span>  <span class="comment">#表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，故而设置为false</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>   <span class="comment">#Eureka server地址，查询服务和注册服务都需要依赖这个地址，多个地址可用逗号（英文的）分割</span></span><br></pre></td></tr></table></figure>
<h1 id="叁、添加一个服务消费端"><a href="#叁、添加一个服务消费端" class="headerlink" title="叁、添加一个服务消费端"></a>叁、添加一个服务消费端</h1><ul>
<li>新建一个子工程<strong>lovin-eureka-server</strong>作为服务的注册中心</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;eurekaclient&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;eureka的一个消费端&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后在启动类上添加@EnableEurekaClient注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinEurekaClientApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 16:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinEurekaClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinEurekaClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后我们需要连接到服务端，具体配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovineurkaclient</span>     <span class="comment"># 服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8881/eureka/</span>   <span class="comment"># 注册到的eureka服务地址</span></span><br></pre></td></tr></table></figure>
<ul>
<li>新建一个Controller写一个测试接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.lovin.config.ServerConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> HelloController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO应用默认访问接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 16:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ServerConfig serverConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverConfig.getUrl()+<span class="string">&quot;###&quot;</span>+ HelloController.class.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="肆、分别启动注册中心的服务端和客户端"><a href="#肆、分别启动注册中心的服务端和客户端" class="headerlink" title="肆、分别启动注册中心的服务端和客户端"></a>肆、分别启动注册中心的服务端和客户端</h1><p>访问localhost:8881查看结果</p>
<p><img src="https://eelve.com/upload/2019/8/192201-a1bae0c08fdc4e848f41093d643ff0cb.png" alt="注册中心"></p>
<p>到这里我们可以已经看到已经成功将客户端注册到服务端了，然后我们访问测试接口</p>
<p><img src="https://eelve.com/upload/2019/8/192202-b3bb342983db481f9ad86239e8859e41.png" alt="192202"></p>
<p>可以看到已经访问成功，至此Eureka的搭建已经完成。</p>
<h1 id="伍、加入安全配置"><a href="#伍、加入安全配置" class="headerlink" title="伍、加入安全配置"></a>伍、加入安全配置</h1><p>在互联网中我们一般都会考虑安全性，尤其是管理服务的注册中心，所以我们可以用<strong>spring-boot-starter-security</strong>来做安全限制</p>
<ul>
<li>给<strong>lovin-eureka-server</strong>添加<strong>spring-boot-starter-security</strong>的pom依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改配置文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">naem:</span> <span class="string">lovineurkaserver</span>  <span class="comment"># 服务模块名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span>  <span class="comment"># 设置的eureka端口号</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>   <span class="comment"># 设置eureka的主机地址</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">user.name:</span> <span class="string">$&#123;security.user.name&#125;</span></span><br><span class="line">      <span class="attr">user.password:</span> <span class="string">$&#123;security.user.password&#125;</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span>  <span class="comment">#表示是否将自己注册到Eureka Server，默认为true。由于当前应用就是Eureka Server，故而设置为false</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span>  <span class="comment">#表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，故而设置为false</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;spring.security.user.name&#125;:$&#123;spring.security.user.password&#125;@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>   <span class="comment">#Eureka server地址，查询服务和注册服务都需要依赖这个地址，多个地址可用逗号（英文的）分割</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加security配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/16 14:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/css/**&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>给<strong>lovin-eureka-client</strong>添加<strong>spring-boot-starter-security</strong>的pom依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改yaml配置文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovineurkaclient</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注册到的eureka服务地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">leaseRenewalIntervalInSeconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">health-check-url-path:</span> <span class="string">/actuator/health</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">user.name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">user.password:</span> <span class="string">lovin</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加security配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/16 14:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>另外为了测试多客服端注册，我们可以修改再给客户端新建一个配置文件，然后开启IDEA的多节点运行，如下图所示勾选<strong>Allow parallel run</strong></li>
</ul>
<p><img src="https://eelve.com/upload/2019/8/192203-4b74b03a3b3647f5a2c607c61e3a089e.png" alt="192203"></p>
<ul>
<li>然后为了区分是哪个节点的请求我们可以添加获取端口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.context.WebServerInitializedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ServerConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/18 12:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span>  <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">WebServerInitializedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InetAddress address = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            address = InetAddress.getLocalHost();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://&quot;</span>+address.getHostAddress() +<span class="string">&quot;:&quot;</span>+<span class="keyword">this</span>.serverPort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(WebServerInitializedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverPort = event.getWebServer().getPort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后我们一次重启服务端和两个客户端，这个时候我们访问<br><a href="http://localhost:8881/">http://localhost:8881/</a></li>
</ul>
<p><img src="https://eelve.com/upload/2019/8/192205-5a91bb3e4bf5415e8e43817428f0c50c.png" alt="192205"></p>
<p>可以看到，这里已经让我们输入用户名和密码了，说明<strong>spring-boot-starter-security</strong>已经配置成功，这时我们输入配置的用户名:lovin和密码:lovin</p>
<p><img src="https://eelve.com/upload/2019/8/192204-6274036a13d34d1a849bb78c95494349.png" alt="192204"><br>这里我们可以看到已经成功了，那么到这里Eureka的配置已经全部成功了。</p>
<ul>
<li><a href="https://github.com/lovinstudio/lovincloud">最后的最后是本博客的源码,欢迎关注这一套SpringCloud的实践</a></li>
</ul>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Feign</title>
    <url>/posts/d9b4a7e3.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】书接上文，本文的某些知识依赖我的第一篇SpringCLoud的文章：<a href="https://eelve.com/posts/cef2acbf.html">SpringCloud之Eureka</a>，如果没有看过可以先移步去看一下。另外在微服务架构中，业务都会被拆分成一个个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。上一篇文章已经讲过<a href="https://eelve.com/posts/d4b47d90.html">ribbon+rest</a>这种方式了，这一片博文主要讲feign的应用。</p>
<hr>
<h1 id="壹、Feign的简介"><a href="#壹、Feign的简介" class="headerlink" title="壹、Feign的简介"></a>壹、Feign的简介</h1><p>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。</p>
<p>简而言之：</p>
<ul>
<li>Feign 采用的是基于接口的注解</li>
<li>Feign 整合了ribbon</li>
</ul>
<h1 id="贰、准备工作"><a href="#贰、准备工作" class="headerlink" title="贰、准备工作"></a>贰、准备工作</h1><p>新建一个feign子工程<strong>lovin-feign-client</strong>，用于后面的操作。下面是主要的pom依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-feign-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;lovinfeignclient&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;feignclient测试&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.4.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里为了安全，我这里还是添加<strong>spring-boot-starter-security</strong><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8806</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovinfeignclient</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注册到的eureka服务地址</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>配置<strong>spring-boot-starter-security</strong>，这里为了方便我这里放开所有请求<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/16 14:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在主类上添加**@EnableFeignClients<strong>和</strong>@EnableHystrix** ，当然也需要注册到注册中心：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinFeignClientApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 17:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinFeignClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinFeignClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>添加一个远程调用的服务端<strong>FeignRemoteService</strong>，并且配置feign调用信息：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.lovin.hystrix.FeignRemoteServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FeignRemoteService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 17:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;lovineurkaclient&quot;,fallback = FeignRemoteServiceImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignRemoteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>添加熔断器调用方法：新建<strong>FeignRemoteServiceImpl</strong>实现<strong>FeignRemoteService</strong>接口：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.hystrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.lovin.service.FeignRemoteService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FeignRemoteServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 17:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignRemoteServiceImpl</span> <span class="keyword">implements</span> <span class="title">FeignRemoteService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hystrix起作用了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>最后新建<strong>FeignController</strong>，来消费服务：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.lovin.service.FeignRemoteService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FeignController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 17:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FeignRemoteService feignRemoteService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/getHello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignRemoteService.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="叁、启动测试"><a href="#叁、启动测试" class="headerlink" title="叁、启动测试"></a>叁、启动测试</h1></li>
<li>依次启动eureka的服务端和两个客户端，以及新建的lovin-feign-client<br><img src="https://i.loli.net/2019/08/23/oJn64HIfmOiVgEP.png" alt="我们可以看到服务已经全部启动成功"><br>我们可以看到服务已经全部启动成功</li>
<li>然后访问<a href="http://localhost:8806/getHello">http://localhost:8806/getHello</a><br><img src="https://i.loli.net/2019/08/23/4bcgtQXkzpM8Pa5.png" alt="我们可以看到已经可以通过feign调到我们建立的eureka客户端了"><br>我们可以看到已经可以通过feign调到我们建立的eureka客户端了</li>
<li>再次请求接口观察返回<br><img src="https://i.loli.net/2019/08/23/2XluV6WkwLZFhMp.png" alt="我们可以看到我们调到了通过feign调用ribbon负载的另外一个接口"><br>我们可以看到我们调到了通过feign调用ribbon负载的另外一个接口了，到这里我们就已经弄好了一个简单的ribbon负载。</li>
</ul>
<h1 id="肆、添加Hystrix-Dashboard断路器监控"><a href="#肆、添加Hystrix-Dashboard断路器监控" class="headerlink" title="肆、添加Hystrix Dashboard断路器监控"></a>肆、添加Hystrix Dashboard断路器监控</h1><ul>
<li>添加需要的pom依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li>在主类上添加**@EnableHystrixDashboard<strong>，开启断路器监控，并且配置</strong>HystrixMetricsStreamServlet**<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinFeignClientApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 17:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinFeignClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinFeignClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>访问<a href="http://localhost:8806/hystrix">http://localhost:8806/hystrix</a><br><img src="https://i.loli.net/2019/08/23/eNHrkInUTGaA9jy.png" alt="首页"><br>这里我们通过首页可以看到：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认的集群监控：通过URL http:&#x2F;&#x2F;turbine-hostname:port&#x2F;turbine.stream开启，实现对默认集群的监控。</span><br><span class="line">指定的集群监控：通过URL http:&#x2F;&#x2F;turbine-hostname:port&#x2F;turbine.stream?cluster&#x3D;[clusterName]开启，实现对clusterName的监控。</span><br><span class="line">单体应用监控：通过URL http:&#x2F;&#x2F;hystrix-app:port&#x2F;hystrix.stream开启，实现对某个具体的服务监控</span><br></pre></td></tr></table></figure></li>
<li>添加监控模式查看详情，这里选择第三个单体应用</li>
</ul>
<p><img src="https://i.loli.net/2019/08/23/MF4lAGB7p8EXuOm.png" alt="添加监控接口"><br><img src="https://i.loli.net/2019/08/23/y1IqLFz2DbjZUNo.png" alt="监控详情"><br>这样我们就完成了熔断器的监控，当然具体含义有待下一步深究。</p>
<h1 id="伍、网络架构"><a href="#伍、网络架构" class="headerlink" title="伍、网络架构"></a>伍、网络架构</h1><ul>
<li>我们可以看到我们调用的服务不再是像再上一篇文章中的直接访问对应的服务，而是通过feign的Ribbon的负载均衡的去调用的，而且这里说明一点，Ribbon的默认机制是轮询。<br><img src="https://i.loli.net/2019/08/23/7oVYzxTwDEvWfPg.png" alt="目前的网络架构"></li>
</ul>
<hr>
<ul>
<li><a href="https://github.com/lovinstudio/lovincloud">最后的最后是本博客的源码,欢迎关注这一套SpringCloud的实践</a></li>
</ul>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Gateway</title>
    <url>/posts/356f84b4.html</url>
    <content><![CDATA[<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Log</title>
    <url>/posts/55017a0f.html</url>
    <content><![CDATA[<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Ribbon</title>
    <url>/posts/d4b47d90.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】书接上文，本文的某些知识依赖我的上一篇文章：<a href="https://eelve.com/posts/cef2acbf.html">SpringCloud之Eureka</a>，如果没有看过可以先移步去看一下。另外在微服务架构中，业务都会被拆分成一个个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。在这一篇文章首先讲解下基于ribbon+rest。</p>
<hr>
<h1 id="壹、Ribbon简介"><a href="#壹、Ribbon简介" class="headerlink" title="壹、Ribbon简介"></a>壹、Ribbon简介</h1><ul>
<li><p>ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。Feign默认集成了ribbon。</p>
</li>
<li><p>ribbon 已经默认实现了这些配置bean：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">IClientConfig ribbonClientConfig: DefaultClientConfigImpl</span><br><span class="line"></span><br><span class="line">IRule ribbonRule: ZoneAvoidanceRule</span><br><span class="line"></span><br><span class="line">IPing ribbonPing: NoOpPing</span><br><span class="line"></span><br><span class="line">ServerList ribbonServerList: ConfigurationBasedServerList</span><br><span class="line"></span><br><span class="line">ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter</span><br><span class="line"></span><br><span class="line">ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer</span><br></pre></td></tr></table></figure>
<h1 id="贰、准备工作"><a href="#贰、准备工作" class="headerlink" title="贰、准备工作"></a>贰、准备工作</h1><ul>
<li>新建一个ribbon子工程<strong>lovin-ribbon-client</strong>，用于后面的操作。下面是主要的pom依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-ribbon-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;ribbonclient&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;ribbon的client&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里为了安全，我这里还是添加<strong>spring-boot-starter-security</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8805</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovinribbonclient</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注册到的eureka服务地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置<strong>spring-boot-starter-security</strong>，这里为了方便我这里放开所有请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/16 14:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后向程序的ioc容器中注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinRibbonClientApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 16:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinRibbonClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinRibbonClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后编写一个<strong>HelloService</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> HelloService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 17:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里的**lovineurkaclient**是我上一篇文章新建的eureka客户端的名称</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://lovineurkaclient/hello&quot;</span>,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>再编写一个<strong>HelloController</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.lovin.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> HelloController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 17:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.getHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="叁、启动测试"><a href="#叁、启动测试" class="headerlink" title="叁、启动测试"></a>叁、启动测试</h1><ul>
<li>依次启动eureka的服务端和两个客户端，以及新建的lovin-ribbon-client</li>
</ul>
<p><img src="https://i.loli.net/2019/08/23/pa1X8eByNhltP4C.png" alt="我们可以看到服务已经全部启动成功"></p>
<p>我们可以看到服务已经全部启动成功</p>
<ul>
<li>然后访问<a href="http://localhost:8805/hello">http://localhost:8805/hello</a></li>
</ul>
<p><img src="https://i.loli.net/2019/08/23/TXoNiuvYhGO9Hc3.png" alt="我们可以看到已经可以通过ribbon调到我们建立的eureka客户端了"></p>
<p>我们可以看到已经可以通过ribbon调到我们建立的eureka客户端了</p>
<ul>
<li>再次请求接口观察返回</li>
</ul>
<p><img src="https://i.loli.net/2019/08/23/o9Cm2LgBXb4qjF5.png" alt="我们可以看到我们调到了通过ribbon负载的另外一个接口"></p>
<p>我们可以看到我们调到了通过ribbon负载的另外一个接口了，到这里我们就已经弄好了一个简单的ribbon负载。</p>
<h1 id="肆、网络架构"><a href="#肆、网络架构" class="headerlink" title="肆、网络架构"></a>肆、网络架构</h1><ul>
<li>我们可以看到我们调用的服务不再是像再上一篇文章中的直接访问对应的服务，而是通过Ribbon的负载均衡的去调用的，而且这里说明一点，Ribbon的默认机制是轮询。</li>
</ul>
<p><img src="https://i.loli.net/2019/08/23/nlmiVsEUfvh1u6M.png" alt="目前的网络架构"></p>
<hr>
<ul>
<li><a href="https://github.com/lovinstudio/lovincloud">最后的最后是本博客的源码,欢迎关注这一套SpringCloud的实践</a></li>
</ul>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Sleuth</title>
    <url>/posts/13e3c2a6.html</url>
    <content><![CDATA[<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Turbine</title>
    <url>/posts/6ca84189.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】书接上文，本文的某些知识依赖我的上一篇SpringCLoud的文章：<a href="https://eelve.com/posts/d9b4a7e3.html">SpringCloud之Feign</a>，如果没有看过可以先移步去看一下。前文提到了hystrix的应用，以及hystrix的监控，当时我们在实际生产过程中往往会在多个服务中或者说网关集群中使用hystrix，这样我们来监控的是否再去分别查看当时的每个应用的话，效率就会显得很低下呢，这里我们就要用的上文提到的集群监控了。</p>
<hr>
<h1 id="壹、Turbine的简介"><a href="#壹、Turbine的简介" class="headerlink" title="壹、Turbine的简介"></a>壹、Turbine的简介</h1><p>看单个的Hystrix Dashboard的数据并没有什么多大的价值，要想看这个系统的Hystrix Dashboard数据就需要用到Hystrix Turbine。Hystrix Turbine将每个服务Hystrix Dashboard数据进行了整合。Hystrix Turbine的使用非常简单，只需要引入相应的依赖和加上注解和配置就可以了。<br>简而言之：Turbine就是聚合监控多个Hystrix Dashboard的数据。</p>
<h1 id="贰、准备工作"><a href="#贰、准备工作" class="headerlink" title="贰、准备工作"></a>贰、准备工作</h1><p>新建一个feign子工程<strong>lovin-cloud-turbine</strong>，用于后面的操作。下面是主要的pom依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-cloud-turbine&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;lovincloudturbine&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;turbine监控&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.6&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-turbine&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.4.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-netflix-turbine&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-turbine-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.4.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里为了安全，我这里还是添加<strong>spring-boot-starter-security</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8808</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovincloudturbine</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注册到的eureka服务地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">leaseRenewalIntervalInSeconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">health-check-url-path:</span> <span class="string">/actuator/health</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">user.name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">user.password:</span> <span class="string">lovin</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">aggregator:</span></span><br><span class="line">    <span class="attr">clusterConfig:</span> <span class="string">default</span>   <span class="comment"># 指定聚合哪些集群，多个使用&quot;,&quot;分割，默认为default。可使用http://.../turbine.stream?cluster=&#123;clusterConfig之一&#125;访问</span></span><br><span class="line">  <span class="attr">appConfig:</span> <span class="string">lovinfeignclient,lovinribbonclient</span>  <span class="comment">### 配置Eureka中的serviceId列表，表明监控哪些服务</span></span><br><span class="line">  <span class="attr">clusterNameExpression:</span> <span class="string">new</span> <span class="string">String(&quot;default&quot;)</span></span><br><span class="line">  <span class="comment"># 1. clusterNameExpression指定集群名称，默认表达式appName；此时：turbine.aggregator.clusterConfig需要配置想要监控的应用名称</span></span><br><span class="line">  <span class="comment"># 2. 当clusterNameExpression: default时，turbine.aggregator.clusterConfig可以不写，因为默认就是default</span></span><br><span class="line">  <span class="comment"># 3. 当clusterNameExpression: metadata[&#x27;cluster&#x27;]时，假设想要监控的应用配置了eureka.instance.metadata-map.cluster: ABC，则需要配置，同时turbine.aggregator.clusterConfig: ABC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置<strong>spring-boot-starter-security</strong>，这里为了方便我这里放开所有请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/16 14:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在主类上添加**@EnableTurbine**，当然也需要注册到注册中心：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.stream.EnableTurbineStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinCloudTurbineApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/25 17:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinCloudTurbineApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinCloudTurbineApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>改造<strong>lovin-feign-client</strong>，使之变成集群，添加第二份配置文件</li>
</ul>
<h1 id="叁、启动测试"><a href="#叁、启动测试" class="headerlink" title="叁、启动测试"></a>叁、启动测试</h1><ul>
<li>依次启动eureka的服务端和两个客户端，以及lovin-feign-client、lovin-ribbon-client和新建的lovin-cloud-turbine</li>
</ul>
<p><img src="https://i.loli.net/2019/08/29/vu2FUKwmbC5fYJh.png" alt="我们可以看到服务已经全部启动成功"></p>
<p>我们可以看到服务已经全部启动成功</p>
<ul>
<li>然后访问几次<a href="http://localhost:8806/getHello%E5%92%8Chttp://localhost:8805/hello%E4%BD%BF%E4%B9%8B%E4%BA%A7%E7%94%9F%E7%86%94%E6%96%AD%E5%99%A8%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%84%B6%E5%90%8E%E8%AE%BF%E9%97%AEhttp://localhost:8806/hystrix%E6%8C%89%E7%85%A7%E6%8F%90%E7%A4%BA%E9%80%89%E6%8B%A9%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7">http://localhost:8806/getHello和http://localhost:8805/hello使之产生熔断器数据，然后访问http://localhost:8806/hystrix按照提示选择第一个集群监控</a></li>
</ul>
<p><img src="https://i.loli.net/2019/08/29/DKpRu24dqCHvUXk.png" alt="选择聚合监控"><br><img src="https://i.loli.net/2019/08/29/3T2wrPNCjulspLe.png" alt="查看详情"></p>
<h1 id="肆、消息队列来做到异步监控"><a href="#肆、消息队列来做到异步监控" class="headerlink" title="肆、消息队列来做到异步监控"></a>肆、消息队列来做到异步监控</h1><h2 id="turbine服务端修改"><a href="#turbine服务端修改" class="headerlink" title="turbine服务端修改"></a>turbine服务端修改</h2><ul>
<li>修改pom依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.6&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-turbine&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.4.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-netflix-turbine&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-turbine-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.4.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到这里主要引入了spring-cloud-starter-turbine-amqp依赖，它实际上就是包装了spring-cloud-starter-turbine-stream和pring-cloud-starter-stream-rabbit。</p>
<ul>
<li>添加连接rabbitmq配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在应用主类中使用@EnableTurbineStream注解来启用Turbine Stream的配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.stream.EnableTurbineStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinCloudTurbineApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/25 17:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableTurbineStream</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinCloudTurbineApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinCloudTurbineApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对服务消费者进行修改"><a href="#对服务消费者进行修改" class="headerlink" title="对服务消费者进行修改"></a>对服务消费者进行修改</h3><ul>
<li>添加<strong>spring-cloud-netflix-hystrix-amqp</strong>依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-netflix-hystrix-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.4.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加连接rabbitmq配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>
<h2 id="然后重启服务之后，就可以再次看到监控详情"><a href="#然后重启服务之后，就可以再次看到监控详情" class="headerlink" title="然后重启服务之后，就可以再次看到监控详情"></a>然后重启服务之后，就可以再次看到监控详情</h2><p><img src="https://i.loli.net/2019/08/29/vu2FUKwmbC5fYJh.png" alt="注册中心"><br><img src="https://i.loli.net/2019/08/29/3T2wrPNCjulspLe.png" alt="聚合监控结果"></p>
<h1 id="伍、监控数据流图"><a href="#伍、监控数据流图" class="headerlink" title="伍、监控数据流图"></a>伍、监控数据流图</h1><ul>
<li>我们可以看到我们调用的服务不再是像再上一篇文章中的直接访问对应的服务，而是通过feign的Ribbon的负载均衡的去调用的，而且这里说明一点，Ribbon的默认机制是轮询。</li>
</ul>
<ol>
<li>直接使用Turbine监控</li>
</ol>
<p><img src="https://i.loli.net/2019/08/29/Km1RT8CdOEkoGcP.png" alt="直接使用Turbine监控"></p>
<ol start="2">
<li>使用RabbitMQ异步监控</li>
</ol>
<p><img src="https://i.loli.net/2019/08/29/DCNFkm3qP5LQWJ7.png" alt="使用RabbitMQ异步监控"></p>
<ul>
<li>其中后者更能做到和业务解耦</li>
</ul>
<hr>
<h1 id="陆、Turbine详解"><a href="#陆、Turbine详解" class="headerlink" title="陆、Turbine详解"></a>陆、Turbine详解</h1><p><img src="https://i.loli.net/2019/08/29/9gsuzRBxWqj8HJw.png" alt="监控图示"></p>
<ul>
<li>我们可以在监控信息的左上部分找到两个重要的图形信息：一个实心圆和一条曲线。</li>
</ul>
<p>1、实心圆：共有两种含义。它通过颜色的变化代表了实例的健康程度，如下图所示，它的健康度从绿色、黄色、橙色、红色递减。该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，我们就可以在大量的实例中快速的发现故障实例和高压力实例。</p>
<p>2、曲线：用来记录2分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。</p>
<hr>
<ul>
<li><a href="https://github.com/lovinstudio/lovincloud">最后的最后是本博客的源码,欢迎关注这一套SpringCloud的实践</a></li>
</ul>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Turbine</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Zuul</title>
    <url>/posts/1adb8023.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】书接上文，前面已经讲过了SpringCloud的注册中心Eureka、Ribbon和Feign等等，如果有不清楚的也可以去看看我的<a href="https://eelve.com/tags/springcloud#blog">微服务系列文章</a>。这篇文章我要说的是微服务中的网关。</p>
<hr>
<h1 id="壹、Zuul的简介"><a href="#壹、Zuul的简介" class="headerlink" title="壹、Zuul的简介"></a>壹、Zuul的简介</h1><p>Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。</p>
<p>zuul有以下功能：</p>
<pre><code>Authentication
Insights
Stress Testing
Canary Testing
Dynamic Routing
Service Migration
Load Shedding
Security
Static Response handling
Active/Active traffic management
</code></pre>
<h1 id="贰、准备工作"><a href="#贰、准备工作" class="headerlink" title="贰、准备工作"></a>贰、准备工作</h1><p>新建一个feign子工程<strong>lovin-cloud-zuul</strong>，用于后面的操作。下面是主要的pom依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-cloud-zuul&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;lovincloudzuul&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;zuul&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-zuul&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.4.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里为了安全，我这里还是添加<strong>spring-boot-starter-security</strong>，同时配置路由规则发送/api-ribbon/打头开始的服务转发到lovinribbonclient而发送/api-feign/打头的服务转发到lovinfeignclient，可以看出这里是配置相应的路由规则。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8882</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovincloudzuul</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">api-ribbon:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-ribbon/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">lovinribbonclient</span></span><br><span class="line">    <span class="attr">api-feign:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-feign/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">lovinfeignclient</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注册到的eureka服务地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">leaseRenewalIntervalInSeconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">health-check-url-path:</span> <span class="string">/actuator/health</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">user.name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">user.password:</span> <span class="string">lovin</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置<strong>spring-boot-starter-security</strong>，这里为了方便我这里放开所有请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebSecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/18 12:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在主类上添加**@EnableZuulProxy** ，当然也需要注册到注册中心：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinEurekaClientApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 16:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinCloudZuulApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinCloudZuulApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里为了方便测试，这里配置相应的过滤规则：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/18 12:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中。</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        log.info(String.format(<span class="string">&quot;%s &gt;&gt;&gt; %s&quot;</span>, request.getMethod(), request.getRequestURL().toString()));</span><br><span class="line">        Object accessToken = request.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(accessToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token is empty&quot;</span>);</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ctx.getResponse().getWriter().write(<span class="string">&quot;token is empty&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!accessToken.equals(<span class="string">&quot;lovin&quot;</span>))&#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token is not correct&quot;</span>);</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">403</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ctx.getResponse().getWriter().write(<span class="string">&quot;token is not correct&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filterType：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：</span><br><span class="line">    pre：路由之前</span><br><span class="line">    routing：路由之时</span><br><span class="line">    post： 路由之后</span><br><span class="line">    error：发送错误调用</span><br><span class="line">filterOrder：过滤的顺序</span><br><span class="line">shouldFilter：这里可以写逻辑判断，是否要过滤，本文true,永远过滤。</span><br><span class="line">run：过滤器的具体逻辑。可用很复杂，包括查sql，nosql去判断该请求到底有没有权限访问。</span><br></pre></td></tr></table></figure>
<h1 id="叁、启动测试"><a href="#叁、启动测试" class="headerlink" title="叁、启动测试"></a>叁、启动测试</h1><ul>
<li><p>依次启动eureka的服务端和两个客户端和lovin-feign-client、lovin-ribbon-client，以及新建的lovin-cloud-zuul</p>
</li>
<li><p>然后访问<a href="http://localhost:8882/api-feign/getHello%E5%92%8Chttp://localhost:8882/api-ribbon/hello%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%B8%A6%E4%B8%8Atoken%E8%AE%BF%E9%97%AE%E6%9D%A5%E9%AA%8C%E8%AF%81%E8%BF%87%E6%BB%A4%E5%99%A8">http://localhost:8882/api-feign/getHello和http://localhost:8882/api-ribbon/hello，然后我们可以带上token访问来验证过滤器</a></p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/08/29/469cLCIQ5bqBYW3.png" alt="zuul网关转发结果"><br><img src="https://i.loli.net/2019/08/29/RH3YL1d4AErNkmD.png" alt="zuul网关转发结果"><br><img src="https://i.loli.net/2019/08/29/DcRArv7pPim2Un8.png" alt="zuul网关转发结果"><br><img src="https://i.loli.net/2019/08/29/PGxQ2aNMTrwBSp4.png" alt="zuul网关转发结果"><br><img src="https://i.loli.net/2019/08/29/Aiwtnp2hmP54TBk.png" alt="zuul网关转发结果"><br><img src="https://i.loli.net/2019/08/29/KPVOL8F1fQ62Dbc.png" alt="zuul网关转发结果"><br><img src="https://i.loli.net/2019/08/29/vPWgiHhFTkY42Nw.png" alt="zuul网关转发结果"><br><img src="https://i.loli.net/2019/08/29/4HB1qdz3YpQiAcj.png" alt="zuul网关转发结果"></p>
<h1 id="肆、网络架构"><a href="#肆、网络架构" class="headerlink" title="肆、网络架构"></a>肆、网络架构</h1><ul>
<li>我们可以看到我们调用的服务不再是像再上一篇文章中的直接访问对应的服务，而是通过feign的Ribbon的负载均衡的去调用的，而且这里说明一点，Ribbon的默认机制是轮询。<br><img src="https://i.loli.net/2019/08/29/8TRhYSej5afF9Cs.png" alt="目前的网络架构"></li>
</ul>
<hr>
<ul>
<li><a href="https://github.com/lovinstudio/lovincloud">最后的最后是本博客的源码,欢迎关注这一套SpringCloud的实践</a></li>
</ul>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之消息总线</title>
    <url>/posts/eba16952.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】书接上文<a href="https://eelve.com/posts/f1275148.html">SpringCloud之Config</a>，如果没有看过可以先移步去看一下。在上一篇文章中提到了配置刷新的问题，如果需要刷新配置就需要客户端执行<strong>refresh</strong>，我们可以利用<strong>webhook</strong>的机制每次提交代码发送请求来刷新客户端，当客户端越来越多的时候，需要每个客户端都执行一遍，这种方案就不太适合了。使用Spring Cloud Bus可以完美解决这一问题。</p>
<hr>
<h1 id="壹、Spring-Cloud-Bus的简介"><a href="#壹、Spring-Cloud-Bus的简介" class="headerlink" title="壹、Spring Cloud Bus的简介"></a>壹、Spring Cloud Bus的简介</h1><p>Spring cloud bus通过轻量消息代理连接各个分布的节点。这会用在广播状态的变化（例如配置变化）或者其他的消息指令。Spring bus的一个核心思想是通过分布式的启动器对spring boot应用进行扩展，也可以用来建立一个多个应用之间的通信频道。目前唯一实现的方式是用AMQP消息代理作为通道，同样特性的设置（有些取决于通道的设置）在更多通道的文档中。</p>
<h1 id="贰、解决方案"><a href="#贰、解决方案" class="headerlink" title="贰、解决方案"></a>贰、解决方案</h1><h2 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h2><ul>
<li>Spring cloud bus被国内很多都翻译为消息总线，也挺形象的。大家可以将它理解为管理和传播所有分布式项目中的消息既可，其实本质是利用了MQ的广播机制在分布式的系统中传播消息，目前常用的有Kafka和RabbitMQ。利用bus的机制可以做很多的事情，其中配置中心客户端刷新就是典型的应用场景之一，我们用一张图来描述bus在配置中心使用的机制。</li>
</ul>
<p><img src="https://i.loli.net/2019/08/30/efY37U8EdqP2VNA.png" alt="方案一流程图"></p>
<p>根据此图我们可以看出利用Spring Cloud Bus做配置更新的步骤:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、提交代码触发post给客户端A发送&#x2F;actuator&#x2F;bus-refresh</span><br><span class="line">2、客户端A接收到请求从Server端更新配置并且发送给Spring Cloud Bus</span><br><span class="line">3、Spring Cloud bus接到消息并通知给其它客户端</span><br><span class="line">4、其它客户端接收到通知，请求Server端获取最新配置</span><br><span class="line">5、全部客户端均获取到最新的配置</span><br></pre></td></tr></table></figure>
<h2 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h2><ul>
<li><p>在方案一中我们已经到达了利用消息总线触发一个客户端/actuator/bus-refresh,而刷新所有客户端的配置的目的。但这种方式并不优雅。原因如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打破了微服务的职责单一性。微服务本身是业务模块，它本不应该承担配置刷新的职责。</span><br><span class="line">破坏了微服务各节点的对等性。</span><br><span class="line">有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就不得不修改WebHook的配置。</span><br></pre></td></tr></table></figure>
<p> 因此我们将方案一的架构模式稍微改变一下</p>
<p><img src="https://i.loli.net/2019/08/30/If9PwxiMWRo7mZC.png" alt="方案二流程图"></p>
<p>这时Spring Cloud Bus做配置更新步骤如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、提交代码触发post请求给bus&#x2F;refresh</span><br><span class="line">2、server端接收到请求并发送给Spring Cloud Bus</span><br><span class="line">3、Spring Cloud bus接到消息并通知给其它客户端</span><br><span class="line">4、其它客户端接收到通知，请求Server端获取最新配置</span><br><span class="line">5、全部客户端均获取到最新的配置</span><br></pre></td></tr></table></figure>
<p>下面我们就采用方案二来改造我们的工程，这样的话我们在server端的代码做一些改动，来支持bus/refresh</p>
<h1 id="叁、改造服务端"><a href="#叁、改造服务端" class="headerlink" title="叁、改造服务端"></a>叁、改造服务端</h1></li>
</ul>
<ul>
<li>改造上文的config的服务端子工程<strong>lovin-config-server</strong>，添加RabbitMQ的依赖。下面是改造后的主要的pom依赖:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-config-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;lovinconfigserver&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;配置服务端&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.6&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加rabbitmq的连接配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8886</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovinconfigserver</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/lovinstudio/lovincloud</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">lovin-config-repo</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注册到的eureka服务地址</span></span><br></pre></td></tr></table></figure>

<h1 id="肆、改造配置客户端"><a href="#肆、改造配置客户端" class="headerlink" title="肆、改造配置客户端"></a>肆、改造配置客户端</h1><ul>
<li>改造上文的config的服务端子工程<strong>lovin-config-client</strong>，添加RabbitMQ的依赖。下面是改造后的主要的pom依赖:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-config-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;lovinconfigclient&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;配置消费端&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.6&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;spring-cloud-config-server&lt;&#x2F;artifactId&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;&#x2F;dependency&gt;--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加连接rabbitmq的相关配置</li>
</ul>
<ol>
<li>修改<strong>bootstrap.yml</strong>添加连接rabbitmq的配置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8807</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovinconfigclient</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line"><span class="comment">#eureka:</span></span><br><span class="line"><span class="comment">#  client:</span></span><br><span class="line"><span class="comment">#    serviceUrl:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://lovin:lovin@localhost:8881/eureka/   # 注册到的eureka服务地址</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改<strong>application.yml</strong>开启消息跟踪</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin-config</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment">#uri: http://localhost:8886/</span></span><br><span class="line">      <span class="comment">#label: master</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">lovinconfigserver</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">trace:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注意在高可用的时候需要见注册中心配置移到该文件中，在application.yml中见会读取不到配置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="伍、启动测试"><a href="#伍、启动测试" class="headerlink" title="伍、启动测试"></a>伍、启动测试</h1><ul>
<li><p>1.首先依次启动lovin-eureka-server、lovin-econfig-server、lovin-econfig-client</p>
</li>
<li><p>2.查看lovin-econfig-server查询配置</p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/08/30/dQinHZMc5LARPGu.png" alt="查看lovin-econfig-server查询配置"></p>
<ul>
<li>3.查看lovin-econfig-client查询配置</li>
</ul>
<p><img src="https://i.loli.net/2019/08/30/3i1ELfl6buBnvqm.png" alt="查看lovin-econfig-client查询配置"></p>
<ul>
<li>4.修改配置，并提交见token的值由lovin改为lovinupdate</li>
</ul>
<p><img src="https://i.loli.net/2019/08/30/FQblZJdPM3eTDj7.png" alt="修改token"></p>
<ul>
<li>5.再次查看lovin-econfig-server查询配置</li>
</ul>
<p><img src="https://i.loli.net/2019/08/30/DfESYQXoy4bp3sw.png" alt="再次查询服务端"></p>
<ul>
<li>6.再次查看lovin-econfig-client查询配置</li>
</ul>
<p><img src="https://i.loli.net/2019/08/30/YUCThEAD3Mlvkxg.png" alt="再次查询客户端"></p>
<ul>
<li>7.刷新消息总线</li>
</ul>
<p>由于api变更，url由老版本的/bus/refresh变为actuator/bus-refresh</p>
<p><img src="https://i.loli.net/2019/08/30/2qcYG5hDRwX1L9d.png" alt="属性消息总线"></p>
<ul>
<li>8.再次查看lovin-econfig-client查询配置</li>
</ul>
<p><img src="https://i.loli.net/2019/08/30/Rq1jtT5cVfdZlP6.png" alt="再次查看客户端配置"></p>
<p>我们可以看到已经刷新成功，至此消息总线配置已经完成</p>
<h1 id="陆、局部刷新"><a href="#陆、局部刷新" class="headerlink" title="陆、局部刷新"></a>陆、局部刷新</h1><p>某些场景下（例如灰度发布），我们可能只想刷新部分微服务的配置，此时可通过/actuator/bus-refresh端点的destination参数来定位要刷新的应用程序。</p>
<ul>
<li>例如：/actuator/bus-refresh?destination=customers:8000，这样消息总线上的微服务实例就会根据destination参数的值来判断是否需要要刷新。其中，customers:8000指的是各个微服务的ApplicationContext ID。destination参数也可以用来定位特定的微服务。</li>
<li>例如：/actuator/bus-refresh?destination=customers:**，这样就可以触发customers微服务所有实例的配置刷新。</li>
</ul>
<hr>
<ul>
<li><a href="https://github.com/lovinstudio/lovincloud">最后的最后是本博客的源码,欢迎关注这一套SpringCloud的实践</a></li>
</ul>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Bus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之漫谈微服务</title>
    <url>/posts/7807c440.html</url>
    <content><![CDATA[<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat中URI不支持特殊字符解决方案</title>
    <url>/posts/98316a6b.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】最近开发过程中遇到一个<code>Tomcat</code>中<code>IllegalArgumentException</code>的报错，所以在这里记录一下。</p>
<h1 id="壹、错误现象"><a href="#壹、错误现象" class="headerlink" title="壹、错误现象"></a>壹、错误现象</h1><p>在用Get请求是当URL中包含特殊字符，比如：<code>&lt;</code>、<code>&gt;</code>、<code>(</code>、<code>)</code>、<code>&#123;</code>、<code>&#125;</code>、<code>|</code>等时，Tomcat会报出以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986</span><br><span class="line">    at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:476) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:687) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_161]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_161]</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748) [na:1.8.0_161]</span><br></pre></td></tr></table></figure>
<h1 id="贰、故障原因"><a href="#贰、故障原因" class="headerlink" title="贰、故障原因"></a>贰、故障原因</h1><p>因为Tomcat严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ])。传入的参数中有”{“不在RFC3986中的保留字段中，所以会报参数异常错。而且这个错误你在应用中处理不到，因为根本都还没有进入应用，在Tomcat中就已经报错了，而且就连你在Tomcat中配置错误页面也没有用。</p>
<h1 id="叁、解决方案"><a href="#叁、解决方案" class="headerlink" title="叁、解决方案"></a>叁、解决方案</h1><h2 id="3-1、定义requestTargetAllow属性"><a href="#3-1、定义requestTargetAllow属性" class="headerlink" title="3.1、定义requestTargetAllow属性"></a>3.1、定义requestTargetAllow属性</h2><p>Tomcat 7.0.76, 8.0.42, 8.5.12 这些版本之后可以定义requestTargetAllow 属性来允许禁止的字符。在tomcat的 catalina.properties文件中添加这一句：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">tomcat.util.http.parser.HttpParser.requestTargetAllow</span>=<span class="string">|&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2、修复server-xml配置文件"><a href="#3-2、修复server-xml配置文件" class="headerlink" title="3.2、修复server.xml配置文件"></a>3.2、修复server.xml配置文件</h2><p>如果某些版本的Tomcat已经参照<code>3.1</code>中的方法修改之后，还是不生效的话。从官网的文档中我们可以查看到如下提示：tomcat.util.http.parser.HttpParser. requestTargetAllow(This system property is deprecated. Use the relaxedPathChars and relaxedQueryChars attributes of the Connector instead)</p>
<p>所有我们在Tomcat配置文件中：$CATALINA_HOME/conf/server.xml添加<code>relaxedQueryChars</code>属性添加到Connector元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">relaxedQueryChars</span>=<span class="string">&quot;[]|&#123;&#125;^<span class="symbol">&amp;#x5c;</span><span class="symbol">&amp;#x60;</span><span class="symbol">&amp;quot;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;gt;</span>&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3、Springboot修改方法"><a href="#3-3、Springboot修改方法" class="headerlink" title="3.3、Springboot修改方法"></a>3.3、Springboot修改方法</h2><p>在SpringBootApplication的的main方法中增加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;tomcat.util.http.parser.HttpParser.requestTargetAllow&quot;</span>,<span class="string">&quot;|&#123;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>另外在Springboot 2.0 之后的版本，可以自定义<code>WebServerFactoryCustomizer</code>，添加特殊字符的支持：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2019/2/18 17:41.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ethan</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * java.lang.IllegalArgumentException:</span></span><br><span class="line"><span class="comment"> *  Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortalTomcatWebServerCustomizer</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">TomcatServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(TomcatServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">        factory.addConnectorCustomizers(connector -&gt; connector.setAttribute(<span class="string">&quot;relaxedQueryChars&quot;</span>, <span class="string">&quot;&#123;&#125;[]|&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2中体验Redis的布隆过滤器</title>
    <url>/posts/95571c44.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】前面已经安装了<a href="https://eelve.com/posts/22fec071.html">WSL2</a> ，最近准备研究一下Redis的布隆过滤器，现在就先搭建一下环境。</p>
<hr>
<h1 id="壹、准备环境"><a href="#壹、准备环境" class="headerlink" title="壹、准备环境"></a>壹、准备环境</h1><ul>
<li>WSL：WSL2</li>
<li>Docker: Docker for Windows <code>Use the WSL 2 based engine</code></li>
</ul>
<h1 id="贰、安装过程"><a href="#贰、安装过程" class="headerlink" title="贰、安装过程"></a>贰、安装过程</h1><h2 id="2-1-前情资讯"><a href="#2-1-前情资讯" class="headerlink" title="2.1 前情资讯"></a>2.1 前情资讯</h2><p><code>Redis v4.0</code>之后有了 <code>Module（模块/插件）</code>功能，<code>Redis Modules</code>让 <code>Redis</code> 可以使用外部模块扩展其功能 。布隆过滤器就是其中的<code>Module</code>。详情可以查看<code>Redis</code>官方对 <code>Redis Modules</code>的介绍 ：<a href="https://redis.io/modules">https://redis.io/modules</a></p>
<p>另外，官网推荐了一个<code>RedisBloom</code>作为<code>Redis</code>布隆过滤器的<code>Module</code>,地址：<a href="https://github.com/RedisBloom/RedisBloom">https://github.com/RedisBloom/RedisBloom</a>. 其他还有：</p>
<ul>
<li>redis-lua-scaling-bloom-filter （lua 脚本实现）：<a href="https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter">https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter</a></li>
<li>pyreBloom（Python中的快速Redis 布隆过滤器） ：<a href="https://github.com/seomoz/pyreBloom">https://github.com/seomoz/pyreBloom</a></li>
<li>……</li>
</ul>
<p><code>RedisBloom</code>提供了多种语言的客户端支持，包括：<code>Python</code>、<code>Java</code>、<code>JavaScript</code> 和 <code>PHP</code>。</p>
<h2 id="2-2-Docker安装"><a href="#2-2-Docker安装" class="headerlink" title="2.2 Docker安装"></a>2.2 Docker安装</h2><p>如果我们需要体验<code>Redis</code>中的布隆过滤器非常简单，通过 Docker 就可以了！这里我们使用这个仓库下的镜像：<a href="https://hub.docker.com/r/redislabs/rebloom/">https://hub.docker.com/r/redislabs/rebloom/</a></p>
<p>下面是具体命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ docker run -p 9379:6379 --name redis-redisbloom redislabs/rebloom:latest</span><br><span class="line">1:C 15 Aug 2020 03:26:02.860 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">1:C 15 Aug 2020 03:26:02.860 <span class="comment"># Redis version=6.0.5, bits=64, commit=00000000, modified=0, pid=1, just started</span></span><br><span class="line">1:C 15 Aug 2020 03:26:02.860 <span class="comment"># Configuration loaded</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 * Running mode=standalone, port=6379.</span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 <span class="comment"># Server initialized</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.864 * Module <span class="string">&#x27;bf&#x27;</span> loaded from /usr/lib/redis/modules/redisbloom.so</span><br><span class="line">1:M 15 Aug 2020 03:26:02.864 * Ready to accept connections</span><br><span class="line">^C1:signal-handler (1597462093) Received SIGINT scheduling shutdown...</span><br><span class="line">1:M 15 Aug 2020 03:28:13.217 <span class="comment"># User requested shutdown...</span></span><br><span class="line">1:M 15 Aug 2020 03:28:13.217 <span class="comment"># Redis is now ready to exit, bye bye...</span></span><br></pre></td></tr></table></figure>
<p>根据提示修改内存参数等，注意使用root用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ <span class="built_in">cd</span> ~</span><br><span class="line">cc@Chirius:~$ su root</span><br><span class="line">Password:</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># vi /etc/sysctl.conf</span></span><br><span class="line">root@Chirius:/home/cc<span class="comment"># sysctl vm.overcommit_memory=1</span></span><br><span class="line">vm.overcommit_memory = 1</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class="line">root@Chirius:/home/cc<span class="comment"># ll /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class="line">-rw-r--r-- 1 root root 4096 Aug 15 11:30 /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># cat /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class="line">always madvise [never]</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># ll /etc/rc.local</span></span><br><span class="line">ls: cannot access <span class="string">&#x27;/etc/rc.local&#x27;</span>: No such file or directory</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># vi /etc/rc.local</span></span><br><span class="line">root@Chirius:/home/cc<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>然后再重启容器，就可以启动成功了，然后进行体验</p>
<h1 id="叁、布隆过滤器体验"><a href="#叁、布隆过滤器体验" class="headerlink" title="叁、布隆过滤器体验"></a>叁、布隆过滤器体验</h1><h2 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h2><blockquote>
<p>注意： key:布隆过滤器的名称，item : 添加的元素。</p>
</blockquote>
<ul>
<li><code>BF.ADD</code>：将元素添加到布隆过滤器中，如果该过滤器尚不存在，则创建该过滤器。格式：<code>BF.ADD &#123;key&#125; &#123;item&#125;</code>。</li>
<li><code>BF.MADD</code>: 将一个或多个元素添加到“布隆过滤器”中，并创建一个尚不存在的过滤器。该命令的操作方式BF.ADD与之相同，只不过它允许多个输入并返回多个值。格式：<code>BF.MADD &#123;key&#125; &#123;item&#125; [item ...]</code>。</li>
<li><code>**BF.EXISTS **</code>: 确定元素是否在布隆过滤器中存在。格式：<code>BF.EXISTS &#123;key&#125; &#123;item&#125;</code>。</li>
<li><code>BF.MEXISTS</code>： 确定一个或者多个元素是否在布隆过滤器中存在格式：<code>BF.MEXISTS &#123;key&#125; &#123;item&#125; [item ...]</code>。</li>
</ul>
<p>另外，<code>BF.RESERVE</code>命令需要单独介绍一下：</p>
<p>这个命令的格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BF.RESERVE &#123;key&#125; &#123;error_rate&#125; &#123;capacity&#125; [EXPANSION expansion] 。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面简单介绍一下每个参数的具体含义：</p>
<ul>
<li><code>key</code>：布隆过滤器的名称</li>
<li><code>error_rate</code>:误报的期望概率。这应该是介于0到1之间的十进制值。例如，对于期望的误报率0.1％（1000中为1），<code>error_rate</code>应该设置为0.001。该数字越接近零，则每个项目的内存消耗越大，并且每个操作的CPU使用率越高。</li>
<li><code>capacity</code>: 过滤器的容量。当实际存储的元素个数超过这个值之后，性能将开始下降。实际的降级将取决于超出限制的程度。随着过滤器元素数量呈指数增长，性能将线性下降。</li>
</ul>
<p>可选参数：</p>
<ul>
<li>expansion：如果创建了一个新的子过滤器，则其大小将是当前过滤器的大小乘以<code>expansion</code>。默认扩展值为2。这意味着每个后续子过滤器将是前一个子过滤器的两倍。</li>
</ul>
<h2 id="3-2-体验"><a href="#3-2-体验" class="headerlink" title="3.2 体验"></a>3.2 体验</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ docker <span class="built_in">exec</span> -it redis-redisbloom bash</span><br><span class="line">root@9cc653f9411a:/data<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; BF.ADD mine zzl</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BF.ADD mine llo</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BF.ADD mine iio</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BF.EXISTS mine super</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BF.EXISTS mine iio</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BF.EXISTS mine zzl</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>【<strong>后面的话</strong>】布隆过滤器主要用来解决<code>缓存穿透(大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层)</code>。一般MySQL 默认的最大连接数在 150 左右，这个可以通过<code>show variables like &#39;%max_connections%&#39;;</code>命令来查看。最大连接数一个还只是一个指标，cpu，内存，磁盘，网络等无力条件都是其运行指标，这些指标都会限制其并发能力！所以，一般<code>3000</code>个并发请求就能打死大部分数据库了。布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在与海量数据中。我们需要的就是判断<code>key</code>是否合法。具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，我会先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走具体的业务的流程。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL，Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2初体验</title>
    <url>/posts/22fec071.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】前面已经对<a href="https://eelve.com/posts/f42ecfec.html">WSL初体验</a> ，今天就将升级为WSL2，并且前面已经对<a href="https://eelve.com/posts/f42ecfec.html">WSL初体验</a> ，今天就将升级为WSL2，并且在WSL2使用xrdp实现图形桌面。</p>
<hr>
<h1 id="壹、WSL升级为WSL2"><a href="#壹、WSL升级为WSL2" class="headerlink" title="壹、WSL升级为WSL2"></a>壹、WSL升级为WSL2</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-version Ubuntu-18.04 2</span><br></pre></td></tr></table></figure>
<p>其中<code>Ubuntu-18.04</code>为你安装的WSL的发行版本，可以通过<code> wsl -l -v</code>来查看安装的WSL的发行版本详细信息。</p>
<p>另外我在升级的过程中遇到了<code>WSL 2 需要更新其内核组件</code>问题。解决方法也很简单，<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel">从微软下载WSL2 Linux内核的升级包</a>, 下载完成之后直接一路安装即可，之后WSL2就可以成功升级了。</p>
<p>最后如果想要将默认的WSL发行版设置成WSL2，可以使用下面命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>
<h1 id="贰、安装图形化桌面"><a href="#贰、安装图形化桌面" class="headerlink" title="贰、安装图形化桌面"></a>贰、安装图形化桌面</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>先更新,再安装<code>xfce4</code>和<code>xrdp</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install -y xfce4 xrdp</span><br></pre></td></tr></table></figure>
<h2 id="2-2-修改xrdp默认端口"><a href="#2-2-修改xrdp默认端口" class="headerlink" title="2.2 修改xrdp默认端口"></a>2.2 修改xrdp默认端口</h2><p>由于<code>xrdp</code>安装好后默认配置使用的是和Windows远程桌面相同的<code>3389</code> 端口,为了防止和Windows系统远程桌面冲突,建议修改成其他的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/xrdp/xrdp.ini</span><br><span class="line"><span class="comment"># 修改下面这一行,将默认的3389改成其他端口即可</span></span><br><span class="line">port=13389</span><br></pre></td></tr></table></figure>
<h2 id="2-3-为当前用户指定登录session类型"><a href="#2-3-为当前用户指定登录session类型" class="headerlink" title="2.3 为当前用户指定登录session类型"></a>2.3 为当前用户指定登录session类型</h2><pre><code>注意这一步很重要,如果不设置的话会导致后面远程桌面连接上闪退
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.xsession</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入下面内容(就一行)</span></span><br><span class="line">xfce4-session</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.4 启动xrdp</span></span><br><span class="line"></span><br><span class="line">由于WSL2里面不能用`systemd`,所以需要手动启动</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ sudo /etc/init.d/xrdp start</span><br></pre></td></tr></table></figure>
<h1 id="叁、远程访问"><a href="#叁、远程访问" class="headerlink" title="叁、远程访问"></a>叁、远程访问</h1><p>在Windows系统中运行mstsc命令打开远程桌面连接,地址输入localhost:13389</p>
<pre><code>注意这里的端口号应当与上面修改配置中一致
</code></pre>
<p><img src="https://image.eelve.com/eblog/2020071901-6f2b76d2c58f4213950f820ef05f85d8.png" alt="2020071901"><br><img src="https://image.eelve.com/eblog/2020071902-c42b474dc5374bda9f576619a491b1ed.png" alt="2020071902"></p>
<p>输入linux系统的用户名和密码，就可以登陆成功了</p>
<p><img src="https://image.eelve.com/eblog/2020071903-b7632286a2c648bdac1d0a92585612a3.png" alt="2020071903"></p>
<p>【<strong>后面的话</strong>】如果在日常使用中遇到WSL异常，一般为网络端口占用问题导致，一般可以通过重置网络修复，使用管理员身份运行cmd，重置端口，然后重启：<code>netsh winsock reset</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">参考的对象类型不支持尝试的操作。</span><br><span class="line"></span><br><span class="line">[已退出进程，代码为 4294967295]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.19041.388]</span><br><span class="line">(c) 2020 Microsoft Corporation. 保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;netsh winsock reset</span><br><span class="line"></span><br><span class="line">成功地重置 Winsock 目录。</span><br><span class="line">你必须重新启动计算机才能完成重置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL，Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL初体验</title>
    <url>/posts/f42ecfec.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】WSL是Windows Subsystem for Linux的缩写，今天就来体验一把。</p>
<hr>
<h1 id="壹、安装WSL"><a href="#壹、安装WSL" class="headerlink" title="壹、安装WSL"></a>壹、安装WSL</h1><h2 id="1-1-启用或关闭Windows功能"><a href="#1-1-启用或关闭Windows功能" class="headerlink" title="1.1 启用或关闭Windows功能"></a>1.1 启用或关闭Windows功能</h2><p>在搜索栏中搜索并打开“启用或关闭Windows功能”，勾选“适用于Linux的Windows子系统”项。只有开启这项设置才能正常安装WSL。然后按照提示稍后重启。</p>
<h2 id="1-2-安装子系统"><a href="#1-2-安装子系统" class="headerlink" title="1.2 安装子系统"></a>1.2 安装子系统</h2><p>在微软应用商店搜索 Linux，可以看到一系列 Linux 发行版，根据自己需要选择适合自己的发行版，这里我选用 Ubuntu 18.04 LTS。等待下载完成后启动 Ubuntu 18.04 LTS，等待安装完成，输入账户和密码，我们便得到了一个 Linux 环境了。</p>
<p><img src="https://image.eelve.com/eblog/2020041102-b3495d5d24fa4514b2e5293ded3cd61e.png" alt="2020041102"></p>
<h1 id="贰、使用技巧"><a href="#贰、使用技巧" class="headerlink" title="贰、使用技巧"></a>贰、使用技巧</h1><h2 id="2-1使用其他命令行工具"><a href="#2-1使用其他命令行工具" class="headerlink" title="2.1使用其他命令行工具"></a>2.1使用其他命令行工具</h2><p>为什么不推荐自带的命令行呢？因为不支撑复制，这样你就只用手敲各种命令了。这里我推荐Windows Terminal，然后在Windows Terminal中键入<code>WSL</code>,就可以进入命令行了或者直接选择<code>Ubuntu 18.04</code>。</p>
<p><img src="https://image.eelve.com/eblog/2020041104-617b46212475414ba2a4fd754bb395a8.png" alt="2020041104"><br><img src="https://image.eelve.com/eblog/2020041103-dd423936b8d348039cac18e3dd41db08.png" alt="2020041103"></p>
<h2 id="2-2-更改源"><a href="#2-2-更改源" class="headerlink" title="2.2 更改源"></a>2.2 更改源</h2><p>Ubuntu 默认的 apt 源是国外的源，实在是太慢了，这里换成阿里云的源。</p>
<h3 id="2-2-1-首先复制源文件备份，便于以后恢复"><a href="#2-2-1-首先复制源文件备份，便于以后恢复" class="headerlink" title="2.2.1 首先复制源文件备份，便于以后恢复"></a>2.2.1 首先复制源文件备份，便于以后恢复</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-查看版本信息"><a href="#2-2-2-查看版本信息" class="headerlink" title="2.2.2 查看版本信息"></a>2.2.2 查看版本信息</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ lsb_release -c</span><br><span class="line">Codename:       bionic</span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-编辑源文件"><a href="#2-2-3-编辑源文件" class="headerlink" title="2.2.3 编辑源文件"></a>2.2.3 编辑源文件</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<h3 id="2-2-4-根据-Ubuntu-版本号，添加相应内容："><a href="#2-2-4-根据-Ubuntu-版本号，添加相应内容：" class="headerlink" title="2.2.4 根据 Ubuntu 版本号，添加相应内容："></a>2.2.4 根据 Ubuntu 版本号，添加相应内容：</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>然后保存退出</p>
<h3 id="2-2-5-升级系统"><a href="#2-2-5-升级系统" class="headerlink" title="2.2.5 升级系统"></a>2.2.5 升级系统</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ sudo apt-get update</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<h1 id="叁、WSL-文件位置"><a href="#叁、WSL-文件位置" class="headerlink" title="叁、WSL 文件位置"></a>叁、WSL 文件位置</h1><p>如果想在 Linux 查看其他分区，WSL 将其它盘符挂载在 /mnt 下。</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cc@Chirius:/$ cd mnt</span><br><span class="line">cc@Chirius:/mnt$ ls</span><br><span class="line">c  d</span><br><span class="line">cc@Chirius:/mnt$ pwd</span><br><span class="line">/mnt</span><br></pre></td></tr></table></figure>
<p>如果想在 Windows 下查看 WSL 文件位置，文件位置在：C:\Users\用户名\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs 下。</p>
<p>我们还可以在资源管理器中键入<code>\\wsl$</code></p>
<p><img src="https://image.eelve.com/eblog/2020041105-c34cdd30c9b24c6e879114f45880091b.png" alt="2020041105"></p>
<p>然后我们还可以添加网络位置</p>
<p><img src="https://image.eelve.com/eblog/2020041106-564ce889eb8843fe8687d63a2f81fece.png" alt="2020041106"></p>
<h1 id="肆、添加root密码"><a href="#肆、添加root密码" class="headerlink" title="肆、添加root密码"></a>肆、添加root密码</h1><p>由于默认进入子系统之后是你添加的用户，当你需要root权限是可以通过<code>sudo</code>加上相应的命令解决。那还有另外一种方法：设置一个root用户的密码，然后切换到root用户去执行相应的命令。下面就说一下在子系统中设置root用户密码：</p>
<p>首先需要Windows管理员身份运行<code>cmd</code>或者<code>PowerShell</code>，然后执行下面命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\Users\Chirius&gt; wsl</span><br><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ sudo passwd root</span><br><span class="line">[sudo] password <span class="keyword">for</span> cc:</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ su root</span><br><span class="line">Password:</span><br><span class="line">root@Chirius:/mnt/c/Users/Chirius<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到就已经可以切换到root用户了。</p>
<p>【<strong>后面的话</strong>】在Windows2004版本中会发布WSL2，后面再来继续体验。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL，Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop安装解决之道</title>
    <url>/posts/fd78ed5d.html</url>
    <content><![CDATA[<h1 id="壹、故障现象"><a href="#壹、故障现象" class="headerlink" title="壹、故障现象"></a>壹、故障现象</h1><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18362.239]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;hadoop version</span><br><span class="line">系统找不到指定的路径。</span><br><span class="line">Error: JAVA_HOME is incorrectly set.</span><br><span class="line">       Please update C:\dhc_hlk\hadoop-2.8.5\etc\hadoop\hadoop-env.cmd</span><br><span class="line">&#x27;-Xmx512m&#x27; 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"> </span><br><span class="line">C:\Users\Chirius&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="贰、尝试解决"><a href="#贰、尝试解决" class="headerlink" title="贰、尝试解决"></a>贰、尝试解决</h1><p>首先，本人遇见上述错的先决条件是：在安装jdk时，使用的是jdk的默认安装路径 C:\Program Files\Java\jdk1.xxxx ，然后在Windows电脑上解压安装本地hadoop，正确配置hadoop的系统环境变量$HADOOP_HOME及$HADOOP_HOME/etc/hadoop/hadoop-env.cmd文件的java安装路径前提下，报了上图中的这个错</p>
<p>报错分析：</p>
<p>在Windows中安装jdk时，如果是安装在C:\Program Files\Java\jdk1.8.0_161路径下，如果需要在其他组件中配置java的环境时，因为C:\Program Files是Windows系统的系统盘，可能在某些场合下访问的时候，必须以Windows管理员的身份去访问，例如：我们在Windows中解压安装了hadoop，那么需要在$HADOOP_HOME/etc/hadoop/hadoop-env.cmd文件中手动修改java的安装路径，即：set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_161</p>
<p><img src="https://image.eelve.com/eblog/hadop01-636e38ae52254d1aacef36d96b72de8c.png" alt="hadop01"></p>
<p>而我们的jdk安装在jdk的默认安装路径下，所以该文件路径有可能需要管理员访问权限才可以访问，所以如果像上图中这样配置会导致hadoop安装失败，失败的原因则是未检测到jdk环境，才会报<strong>Error: JAVA_HOME is incorrectly set.</strong></p>
<h1 id="叁、解决方法"><a href="#叁、解决方法" class="headerlink" title="叁、解决方法"></a>叁、解决方法</h1><p>将$HADOOP_HOME/etc/hadoop/hadoop-env.cmd文件中的 set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_161 修改为 set JAVA_HOME=C:\PROGRA~1\Java\jdk1.8.0_161 保存，然后重新在cmd窗口输入 hadoop version 命令，即可成功！<br><img src="https://image.eelve.com/eblog/hadoop02-67b5b5e127a046e69b18eab65b062949.png" alt="hadoop02"></p>
<p>注意：在$HADOOP_HOME/etc/hadoop/hadoop-env.cmd文件中的这一行 set JAVA_HOME=C:\PROGRA~1\Java\jdk1.8.0_161 中不能有空格！</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18362.239]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;hadoop version</span><br><span class="line">Hadoop 2.7.3</span><br><span class="line">Subversion https://git-wip-us.apache.org/repos/asf/hadoop.git -r baa91f7c6bc9cb92be5982de4719c1c8af91ccff</span><br><span class="line">Compiled by root on 2016-08-18T01:41Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From source with checksum 2e4ce5f957ea4db193bce3734ff29ff4</span><br><span class="line">This command was run using /D:/Seven/ways/hadoop-2.7.3/share/hadoop/common/hadoop-common-2.7.3.jar</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop安装解决之道本地版</title>
    <url>/posts/50c016fe.html</url>
    <content><![CDATA[<h1 id="壹、故障现象"><a href="#壹、故障现象" class="headerlink" title="壹、故障现象"></a>壹、故障现象</h1><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18362.239]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;hadoop version</span><br><span class="line">系统找不到指定的路径。</span><br><span class="line">Error: JAVA_HOME is incorrectly set.</span><br><span class="line">       Please update C:\dhc_hlk\hadoop-2.8.5\etc\hadoop\hadoop-env.cmd</span><br><span class="line">&#x27;-Xmx512m&#x27; 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br><span class="line"> </span><br><span class="line">C:\Users\Chirius&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="贰、尝试解决"><a href="#贰、尝试解决" class="headerlink" title="贰、尝试解决"></a>贰、尝试解决</h1><p>首先，本人遇见上述错的先决条件是：在安装jdk时，使用的是jdk的默认安装路径 C:\Program Files\Java\jdk1.xxxx ，然后在Windows电脑上解压安装本地hadoop，正确配置hadoop的系统环境变量$HADOOP_HOME及$HADOOP_HOME/etc/hadoop/hadoop-env.cmd文件的java安装路径前提下，报了上图中的这个错</p>
<p>报错分析：</p>
<p>在Windows中安装jdk时，如果是安装在C:\Program Files\Java\jdk1.8.0_161路径下，如果需要在其他组件中配置java的环境时，因为C:\Program Files是Windows系统的系统盘，可能在某些场合下访问的时候，必须以Windows管理员的身份去访问，例如：我们在Windows中解压安装了hadoop，那么需要在$HADOOP_HOME/etc/hadoop/hadoop-env.cmd文件中手动修改java的安装路径，即：set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_161</p>
<p><img src="https://eelve.com/upload/2019/7/hadop01-636e38ae52254d1aacef36d96b72de8c.png" alt="hadop01"></p>
<p>而我们的jdk安装在jdk的默认安装路径下，所以该文件路径有可能需要管理员访问权限才可以访问，所以如果像上图中这样配置会导致hadoop安装失败，失败的原因则是未检测到jdk环境，才会报<strong>Error: JAVA_HOME is incorrectly set.</strong></p>
<h1 id="叁、解决方法"><a href="#叁、解决方法" class="headerlink" title="叁、解决方法"></a>叁、解决方法</h1><p>将$HADOOP_HOME/etc/hadoop/hadoop-env.cmd文件中的 set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_161 修改为 set JAVA_HOME=C:\PROGRA~1\Java\jdk1.8.0_161 保存，然后重新在cmd窗口输入 hadoop version 命令，即可成功！<br><img src="https://eelve.com/upload/2019/7/hadoop02-67b5b5e127a046e69b18eab65b062949.png" alt="hadoop02"></p>
<p>注意：在$HADOOP_HOME/etc/hadoop/hadoop-env.cmd文件中的这一行 set JAVA_HOME=C:\PROGRA~1\Java\jdk1.8.0_161 中不能有空格！</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18362.239]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;hadoop version</span><br><span class="line">Hadoop 2.7.3</span><br><span class="line">Subversion https://git-wip-us.apache.org/repos/asf/hadoop.git -r baa91f7c6bc9cb92be5982de4719c1c8af91ccff</span><br><span class="line">Compiled by root on 2016-08-18T01:41Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From source with checksum 2e4ce5f957ea4db193bce3734ff29ff4</span><br><span class="line">This command was run using /D:/Seven/ways/hadoop-2.7.3/share/hadoop/common/hadoop-common-2.7.3.jar</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-starter-quartz集群实践</title>
    <url>/posts/d8e19a44.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】由于项目需要，需要一个定时任务集群，故此有了这个spring-boot-starter-quartz集群的实践。springboot的版本为：2.1.6.RELEASE；quartz的版本为：2.3.1.假如这里一共有两个定时任务的节点，它们的代码完全一样。</p>
<hr>
<h1 id="壹-jar包依赖"><a href="#壹-jar包依赖" class="headerlink" title="壹.jar包依赖"></a>壹.jar包依赖</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>这里选择将定时任务的数据入库，避免数据直接存在内存中，因应用重启造成的数据丢失和做集群控制。</p>
<h1 id="贰、项目配置"><a href="#贰、项目配置" class="headerlink" title="贰、项目配置"></a>贰、项目配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">context-path:</span> <span class="string">/lovin</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/training?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span> <span class="comment">#数据库方式</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">never</span> <span class="comment">#不初始化表结构</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">scheduler:</span></span><br><span class="line">            <span class="attr">instanceId:</span> <span class="string">AUTO</span> <span class="comment">#默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span></span><br><span class="line">            <span class="comment">#instanceName: clusteredScheduler #quartzScheduler</span></span><br><span class="line">          <span class="attr">jobStore:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span> <span class="comment">#持久化配置</span></span><br><span class="line">            <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span> <span class="comment">#我们仅为数据库制作了特定于数据库的代理</span></span><br><span class="line">            <span class="attr">useProperties:</span> <span class="literal">false</span> <span class="comment">#以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。</span></span><br><span class="line">            <span class="attr">tablePrefix:</span> <span class="string">qrtz_</span>  <span class="comment">#数据库表前缀</span></span><br><span class="line">            <span class="attr">misfireThreshold:</span> <span class="number">60000</span> <span class="comment">#在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。</span></span><br><span class="line">            <span class="attr">clusterCheckinInterval:</span> <span class="number">5000</span> <span class="comment">#设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span></span><br><span class="line">            <span class="attr">isClustered:</span> <span class="literal">true</span> <span class="comment">#打开群集功能</span></span><br><span class="line">          <span class="attr">threadPool:</span> <span class="comment">#连接池</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>这里需要注意的是两个节点的端口号应该不一致，避免冲突</strong></p>
<h1 id="叁、实现一个Job"><a href="#叁、实现一个Job" class="headerlink" title="叁、实现一个Job"></a>叁、实现一个Job</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Job</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">        <span class="comment">// 业务逻辑 ...</span></span><br><span class="line">        log.info(<span class="string">&quot;------springbootquartzonejob执行&quot;</span>+jobDataMap.get(<span class="string">&quot;name&quot;</span>).toString()+<span class="string">&quot;###############&quot;</span>+jobExecutionContext.getTrigger());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>其中的日志输出是为了便于观察任务执行情况</strong></p>
<h1 id="肆、封装定时任务操作"><a href="#肆、封装定时任务操作" class="headerlink" title="肆、封装定时任务操作"></a>肆、封装定时任务操作</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobClass</span></span><br><span class="line"><span class="comment">     *            任务实现类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     *            任务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     *            任务组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTime</span></span><br><span class="line"><span class="comment">     *            时间表达式 (这是每隔多少秒为一次任务)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTimes</span></span><br><span class="line"><span class="comment">     *            运行的次数 （&lt;0:表示不限次数）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobData</span></span><br><span class="line"><span class="comment">     *            参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, <span class="keyword">int</span> jobTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">int</span> jobTimes, Map jobData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 任务名称和组构成任务key</span></span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 设置job参数</span></span><br><span class="line">            <span class="keyword">if</span>(jobData!= <span class="keyword">null</span> &amp;&amp; jobData.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用simpleTrigger规则</span></span><br><span class="line">            Trigger trigger = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (jobTimes &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">                        .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">1</span>).withIntervalInSeconds(jobTime))</span><br><span class="line">                        .startNow().build();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trigger = TriggerBuilder</span><br><span class="line">                        .newTrigger().withIdentity(jobName, jobGroupName).withSchedule(SimpleScheduleBuilder</span><br><span class="line">                                .repeatSecondlyForever(<span class="number">1</span>).withIntervalInSeconds(jobTime).withRepeatCount(jobTimes))</span><br><span class="line">                        .startNow().build();</span><br><span class="line">            &#125;</span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobClass</span></span><br><span class="line"><span class="comment">     *            任务实现类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     *            任务名称(建议唯一)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     *            任务组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTime</span></span><br><span class="line"><span class="comment">     *            时间表达式 （如：0/5 * * * * ? ）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobData</span></span><br><span class="line"><span class="comment">     *            参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, String jobTime, Map jobData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建jobDetail实例，绑定Job实现类</span></span><br><span class="line">            <span class="comment">// 指明job的名称，所在组的名称，以及绑定job类</span></span><br><span class="line">            <span class="comment">// 任务名称和组构成任务key</span></span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 设置job参数</span></span><br><span class="line">            <span class="keyword">if</span>(jobData!= <span class="keyword">null</span> &amp;&amp; jobData.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 定义调度触发规则</span></span><br><span class="line">            <span class="comment">// 使用cornTrigger规则</span></span><br><span class="line">            <span class="comment">// 触发器key</span></span><br><span class="line">            Trigger trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">                    .startAt(DateBuilder.futureDate(<span class="number">1</span>, IntervalUnit.SECOND))</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).startNow().build();</span><br><span class="line">            <span class="comment">// 把作业和触发器注册到任务调度中</span></span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改 一个job的 时间表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateJob</span><span class="params">(String jobName, String jobGroupName, String jobTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class="line">            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line">            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).build();</span><br><span class="line">            <span class="comment">// 重启触发器</span></span><br><span class="line">            scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     *            任务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     *            任务组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.deleteJob(<span class="keyword">new</span> JobKey(jobName, jobGroupName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.pauseJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.resumeJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 立即执行一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAJobNow</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.triggerJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有计划中的任务列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllJob() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GroupMatcher&lt;JobKey&gt; matcher = GroupMatcher.anyJobGroup();</span><br><span class="line">            Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(matcher);</span><br><span class="line">            jobList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (JobKey jobKey : jobKeys) &#123;</span><br><span class="line">                List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class="line">                <span class="keyword">for</span> (Trigger trigger : triggers) &#123;</span><br><span class="line">                    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class="line">                    map.put(<span class="string">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class="line">                    map.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class="line">                    Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">                    map.put(<span class="string">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class="line">                    <span class="keyword">if</span> (trigger <span class="keyword">instanceof</span> CronTrigger) &#123;</span><br><span class="line">                        CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">                        String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">                        map.put(<span class="string">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class="line">                    &#125;</span><br><span class="line">                    jobList.add(map);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jobList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有正在运行的job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryRunJob() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;JobExecutionContext&gt; executingJobs = scheduler.getCurrentlyExecutingJobs();</span><br><span class="line">            jobList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;(executingJobs.size());</span><br><span class="line">            <span class="keyword">for</span> (JobExecutionContext executingJob : executingJobs) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">                JobDetail jobDetail = executingJob.getJobDetail();</span><br><span class="line">                JobKey jobKey = jobDetail.getKey();</span><br><span class="line">                Trigger trigger = executingJob.getTrigger();</span><br><span class="line">                map.put(<span class="string">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class="line">                map.put(<span class="string">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class="line">                map.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class="line">                Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">                map.put(<span class="string">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class="line">                <span class="keyword">if</span> (trigger <span class="keyword">instanceof</span> CronTrigger) &#123;</span><br><span class="line">                    CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">                    String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">                    map.put(<span class="string">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class="line">                &#125;</span><br><span class="line">                jobList.add(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jobList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="陆、初始化任务"><a href="#陆、初始化任务" class="headerlink" title="陆、初始化任务"></a>陆、初始化任务</h1><p>这里不准备给用户用web界面来配置定时任务，故此采用<strong>CommandLineRunner</strong>来子啊应用初始化的时候来初始化任务。只需要实现CommandLineRunner的run()方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        quartzService.deleteJob(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        quartzService.addJob(Job.class, <span class="string">&quot;job&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;0 * * * * ?&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        quartzService.deleteJob(<span class="string">&quot;job2&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        quartzService.addJob(Job.class, <span class="string">&quot;job2&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;10 * * * * ?&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        quartzService.deleteJob(<span class="string">&quot;job3&quot;</span>, <span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        quartzService.addJob(Job.class, <span class="string">&quot;job3&quot;</span>, <span class="string">&quot;test2&quot;</span>, <span class="string">&quot;15 * * * * ?&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="柒、测试验证"><a href="#柒、测试验证" class="headerlink" title="柒、测试验证"></a>柒、测试验证</h1><p>分别夏侯启动两个应用，然后观察任务执行，以及在运行过程中杀死某个服务，来观察定时任务的执行。<br><img src="https://image.eelve.com/eblog/1-a8a710a578ad47a8afc8ace72f3cbd7c.png" alt="SpringbootquartzoneApplication"><br><img src="https://image.eelve.com/eblog/2-db731d38c3ed4b4b8123482c9b3ef28d.png" alt="SpringbootquartztwoApplication"></p>
<p>【<strong>写在后面的话</strong>】下面给出的是所需要脚本的连接地址：<a href="http://www.quartz-scheduler.org/downloads/">脚本下载地址</a>，另外这边又一个自己实现的<a href="https://github.com/eelve/springbootquartzs.git">demo</a></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-starter-quartz集群实践本地版</title>
    <url>/posts/db07dd37.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】由于项目需要，需要一个定时任务集群，故此有了这个spring-boot-starter-quartz集群的实践。springboot的版本为：2.1.6.RELEASE；quartz的版本为：2.3.1.假如这里一共有两个定时任务的节点，它们的代码完全一样。</p>
<hr>
<h1 id="壹-jar包依赖"><a href="#壹-jar包依赖" class="headerlink" title="壹.jar包依赖"></a>壹.jar包依赖</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>这里选择将定时任务的数据入库，避免数据直接存在内存中，因应用重启造成的数据丢失和做集群控制。</p>
<h1 id="贰、项目配置"><a href="#贰、项目配置" class="headerlink" title="贰、项目配置"></a>贰、项目配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">context-path:</span> <span class="string">/lovin</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/training?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span> <span class="comment">#数据库方式</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">never</span> <span class="comment">#不初始化表结构</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">scheduler:</span></span><br><span class="line">            <span class="attr">instanceId:</span> <span class="string">AUTO</span> <span class="comment">#默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span></span><br><span class="line">            <span class="comment">#instanceName: clusteredScheduler #quartzScheduler</span></span><br><span class="line">          <span class="attr">jobStore:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span> <span class="comment">#持久化配置</span></span><br><span class="line">            <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span> <span class="comment">#我们仅为数据库制作了特定于数据库的代理</span></span><br><span class="line">            <span class="attr">useProperties:</span> <span class="literal">false</span> <span class="comment">#以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。</span></span><br><span class="line">            <span class="attr">tablePrefix:</span> <span class="string">qrtz_</span>  <span class="comment">#数据库表前缀</span></span><br><span class="line">            <span class="attr">misfireThreshold:</span> <span class="number">60000</span> <span class="comment">#在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。</span></span><br><span class="line">            <span class="attr">clusterCheckinInterval:</span> <span class="number">5000</span> <span class="comment">#设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span></span><br><span class="line">            <span class="attr">isClustered:</span> <span class="literal">true</span> <span class="comment">#打开群集功能</span></span><br><span class="line">          <span class="attr">threadPool:</span> <span class="comment">#连接池</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>这里需要注意的是两个节点的端口号应该不一致，避免冲突</strong></p>
<h1 id="叁、实现一个Job"><a href="#叁、实现一个Job" class="headerlink" title="叁、实现一个Job"></a>叁、实现一个Job</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Job</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">        <span class="comment">// 业务逻辑 ...</span></span><br><span class="line">        log.info(<span class="string">&quot;------springbootquartzonejob执行&quot;</span>+jobDataMap.get(<span class="string">&quot;name&quot;</span>).toString()+<span class="string">&quot;###############&quot;</span>+jobExecutionContext.getTrigger());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>其中的日志输出是为了便于观察任务执行情况</strong></p>
<h1 id="肆、封装定时任务操作"><a href="#肆、封装定时任务操作" class="headerlink" title="肆、封装定时任务操作"></a>肆、封装定时任务操作</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobClass</span></span><br><span class="line"><span class="comment">     *            任务实现类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     *            任务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     *            任务组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTime</span></span><br><span class="line"><span class="comment">     *            时间表达式 (这是每隔多少秒为一次任务)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTimes</span></span><br><span class="line"><span class="comment">     *            运行的次数 （&lt;0:表示不限次数）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobData</span></span><br><span class="line"><span class="comment">     *            参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, <span class="keyword">int</span> jobTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">int</span> jobTimes, Map jobData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 任务名称和组构成任务key</span></span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 设置job参数</span></span><br><span class="line">            <span class="keyword">if</span>(jobData!= <span class="keyword">null</span> &amp;&amp; jobData.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用simpleTrigger规则</span></span><br><span class="line">            Trigger trigger = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (jobTimes &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">                        .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">1</span>).withIntervalInSeconds(jobTime))</span><br><span class="line">                        .startNow().build();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trigger = TriggerBuilder</span><br><span class="line">                        .newTrigger().withIdentity(jobName, jobGroupName).withSchedule(SimpleScheduleBuilder</span><br><span class="line">                                .repeatSecondlyForever(<span class="number">1</span>).withIntervalInSeconds(jobTime).withRepeatCount(jobTimes))</span><br><span class="line">                        .startNow().build();</span><br><span class="line">            &#125;</span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobClass</span></span><br><span class="line"><span class="comment">     *            任务实现类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     *            任务名称(建议唯一)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     *            任务组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTime</span></span><br><span class="line"><span class="comment">     *            时间表达式 （如：0/5 * * * * ? ）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobData</span></span><br><span class="line"><span class="comment">     *            参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Class&lt;? extends QuartzJobBean&gt; jobClass, String jobName, String jobGroupName, String jobTime, Map jobData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建jobDetail实例，绑定Job实现类</span></span><br><span class="line">            <span class="comment">// 指明job的名称，所在组的名称，以及绑定job类</span></span><br><span class="line">            <span class="comment">// 任务名称和组构成任务key</span></span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 设置job参数</span></span><br><span class="line">            <span class="keyword">if</span>(jobData!= <span class="keyword">null</span> &amp;&amp; jobData.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                jobDetail.getJobDataMap().putAll(jobData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 定义调度触发规则</span></span><br><span class="line">            <span class="comment">// 使用cornTrigger规则</span></span><br><span class="line">            <span class="comment">// 触发器key</span></span><br><span class="line">            Trigger trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">                    .startAt(DateBuilder.futureDate(<span class="number">1</span>, IntervalUnit.SECOND))</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).startNow().build();</span><br><span class="line">            <span class="comment">// 把作业和触发器注册到任务调度中</span></span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改 一个job的 时间表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateJob</span><span class="params">(String jobName, String jobGroupName, String jobTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class="line">            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line">            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).build();</span><br><span class="line">            <span class="comment">// 重启触发器</span></span><br><span class="line">            scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     *            任务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     *            任务组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.deleteJob(<span class="keyword">new</span> JobKey(jobName, jobGroupName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.pauseJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.resumeJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 立即执行一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAJobNow</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.triggerJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有计划中的任务列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllJob() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GroupMatcher&lt;JobKey&gt; matcher = GroupMatcher.anyJobGroup();</span><br><span class="line">            Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(matcher);</span><br><span class="line">            jobList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (JobKey jobKey : jobKeys) &#123;</span><br><span class="line">                List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class="line">                <span class="keyword">for</span> (Trigger trigger : triggers) &#123;</span><br><span class="line">                    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class="line">                    map.put(<span class="string">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class="line">                    map.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class="line">                    Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">                    map.put(<span class="string">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class="line">                    <span class="keyword">if</span> (trigger <span class="keyword">instanceof</span> CronTrigger) &#123;</span><br><span class="line">                        CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">                        String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">                        map.put(<span class="string">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class="line">                    &#125;</span><br><span class="line">                    jobList.add(map);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jobList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有正在运行的job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryRunJob() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;JobExecutionContext&gt; executingJobs = scheduler.getCurrentlyExecutingJobs();</span><br><span class="line">            jobList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;(executingJobs.size());</span><br><span class="line">            <span class="keyword">for</span> (JobExecutionContext executingJob : executingJobs) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">                JobDetail jobDetail = executingJob.getJobDetail();</span><br><span class="line">                JobKey jobKey = jobDetail.getKey();</span><br><span class="line">                Trigger trigger = executingJob.getTrigger();</span><br><span class="line">                map.put(<span class="string">&quot;jobName&quot;</span>, jobKey.getName());</span><br><span class="line">                map.put(<span class="string">&quot;jobGroupName&quot;</span>, jobKey.getGroup());</span><br><span class="line">                map.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;触发器:&quot;</span> + trigger.getKey());</span><br><span class="line">                Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">                map.put(<span class="string">&quot;jobStatus&quot;</span>, triggerState.name());</span><br><span class="line">                <span class="keyword">if</span> (trigger <span class="keyword">instanceof</span> CronTrigger) &#123;</span><br><span class="line">                    CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">                    String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">                    map.put(<span class="string">&quot;jobTime&quot;</span>, cronExpression);</span><br><span class="line">                &#125;</span><br><span class="line">                jobList.add(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jobList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="陆、初始化任务"><a href="#陆、初始化任务" class="headerlink" title="陆、初始化任务"></a>陆、初始化任务</h1><p>这里不准备给用户用web界面来配置定时任务，故此采用<strong>CommandLineRunner</strong>来子啊应用初始化的时候来初始化任务。只需要实现CommandLineRunner的run()方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        quartzService.deleteJob(<span class="string">&quot;job&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        quartzService.addJob(Job.class, <span class="string">&quot;job&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;0 * * * * ?&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        quartzService.deleteJob(<span class="string">&quot;job2&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        quartzService.addJob(Job.class, <span class="string">&quot;job2&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;10 * * * * ?&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        quartzService.deleteJob(<span class="string">&quot;job3&quot;</span>, <span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        quartzService.addJob(Job.class, <span class="string">&quot;job3&quot;</span>, <span class="string">&quot;test2&quot;</span>, <span class="string">&quot;15 * * * * ?&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="柒、测试验证"><a href="#柒、测试验证" class="headerlink" title="柒、测试验证"></a>柒、测试验证</h1><p>分别夏侯启动两个应用，然后观察任务执行，以及在运行过程中杀死某个服务，来观察定时任务的执行。<br><img src="https://eelve.com/upload/2019/8/1-a8a710a578ad47a8afc8ace72f3cbd7c.png" alt="SpringbootquartzoneApplication"><br><img src="https://eelve.com/upload/2019/8/2-db731d38c3ed4b4b8123482c9b3ef28d.png" alt="SpringbootquartztwoApplication"></p>
<p>【<strong>写在后面的话</strong>】下面给出的是所需要脚本的连接地址：<a href="http://www.quartz-scheduler.org/downloads/">脚本下载地址</a>，另外这边又一个自己实现的<a href="https://github.com/eelve/springbootquartzs.git">demo</a></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+jsp打jar问题</title>
    <url>/posts/15728d5a.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】最近做了一个项目，项目是springboot+jsp结构的，但是在发布生产环境的时候又需要用maven打成jar包，但是一开始的默认配置都不成功。下面的文章就是具体的解决过程。</p>
<hr>
<h1 id="壹、项目结构"><a href="#壹、项目结构" class="headerlink" title="壹、项目结构"></a>壹、项目结构</h1><p><img src="https://image.eelve.com/eblog/O$VVNDUD1GCU8FT%5DQH5Z@TM-23f04197a92d4a5db24b6e3fb656b7c1.png" alt="项目结构"></p>
<h1 id="贰、异常现象"><a href="#贰、异常现象" class="headerlink" title="贰、异常现象"></a>贰、异常现象</h1><p>使用的JDK为1.8，springboot版本为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打成的jar只包含class文件，没有见资源文件引入。<br><img src="https://image.eelve.com/eblog/20190713-90f9d3c88e4940de8c8faaa0b2d4ec7c.png" alt="没有包含resourse的编译结果"></p>
<h1 id="叁、解决办法"><a href="#叁、解决办法" class="headerlink" title="叁、解决办法"></a>叁、解决办法</h1><h2 id="1-添加资源路径的映射"><a href="#1-添加资源路径的映射" class="headerlink" title="1. 添加资源路径的映射"></a>1. 添加资源路径的映射</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 开启过滤，用指定的参数替换directory下的文件中的参数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        **/*.java</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-修改maven编译版本为1-4-2"><a href="#2-修改maven编译版本为1-4-2" class="headerlink" title="2. 修改maven编译版本为1.4.2"></a>2. 修改maven编译版本为1.4.2</h2><p>只有使用这个版本打jar包才能解析jsp</p>
<h2 id="3-设置mainClass"><a href="#3-设置mainClass" class="headerlink" title="3. 设置mainClass"></a>3. 设置mainClass</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maven插件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.gt.LaysshApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-添加视图配置（可选）"><a href="#4-添加视图配置（可选）" class="headerlink" title="4. 添加视图配置（可选）"></a>4. 添加视图配置（可选）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line"></span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure>
<p>下面给出一个比较完整的maven编译配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 开启过滤，用指定的参数替换directory下的文件中的参数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        **/*.java</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maven插件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.gt.MyApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面就是修改编译配置之后的结果</p>
<p><img src="https://image.eelve.com/eblog/201907192-13a348f78e4c4d1cb0b6485cf535dfbe.png" alt="正确的结果"></p>
<hr>
<p>【写在后面的话】现代的模板解析引擎已经有了这么多了，为什么不试一下<strong>thymeleaf</strong>，但是在最近的项目中碰到了th:src标签不解析的问题，目前还不清楚具体原因，而且相同的写法在其他页面都生效，真是怪异啊。鉴于目前还是又很多人使用springboot+jsp来进行开发，但是因为使用IDEA工具创建的SpringBoot项目本身是没有webapp目录的。如果我们想要添加webapp目录的话，可以手动添加。下面就简单的来说一下配置过程。</p>
<hr>
<h2 id="1-点开项目结构管理，点击IDEA右上角的Project-Structure"><a href="#1-点开项目结构管理，点击IDEA右上角的Project-Structure" class="headerlink" title="1.点开项目结构管理，点击IDEA右上角的Project Structure"></a>1.点开项目结构管理，点击IDEA右上角的Project Structure</h2><p><img src="https://image.eelve.com/eblog/201907193-7d050c6d01c1449f999bb49a5c11fda8.png" alt="Project Structure"></p>
<h2 id="2-先点击下图中的-号，再点击Web"><a href="#2-先点击下图中的-号，再点击Web" class="headerlink" title="2.先点击下图中的+号，再点击Web"></a>2.先点击下图中的+号，再点击Web</h2><p><img src="https://image.eelve.com/eblog/2019071904-f795ae6044024bafbd02136c86fbfbda.png" alt="2019071904"></p>
<h2 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h2><p>下图是修改配置前的默认配置<br><img src="https://image.eelve.com/eblog/20190705-bb62a58b15d24b098aa2db949d18de32.png" alt="修改前的配置"><br>下面将webapp配置到传统的main目录下<br><img src="https://image.eelve.com/eblog/2019071906-d580c788cbd94ff7ba7cb43d70fb5ebb.png" alt="修改后的配置"><br><img src="https://image.eelve.com/eblog/2019071906-4c565cc7039a4ed7b0dff2044d3e1bae.png" alt="配置Artifacts"><br><img src="https://image.eelve.com/eblog/2019071907-1a3c18ec66514327b6f5b635dfde0f67.png" alt="最后的配置成功的结果"></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>jsp</tag>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+jsp打jar问题本地版</title>
    <url>/posts/ba2d1d2d.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】最近做了一个项目，项目是springboot+jsp结构的，但是在发布生产环境的时候又需要用maven打成jar包，但是一开始的默认配置都不成功。下面的文章就是具体的解决过程。</p>
<hr>
<h1 id="壹、项目结构"><a href="#壹、项目结构" class="headerlink" title="壹、项目结构"></a>壹、项目结构</h1><p><img src="https://eelve.com/upload/2019/7/O$VVNDUD1GCU8FT%5DQH5Z@TM-23f04197a92d4a5db24b6e3fb656b7c1.png" alt="项目结构"></p>
<h1 id="贰、异常现象"><a href="#贰、异常现象" class="headerlink" title="贰、异常现象"></a>贰、异常现象</h1><p>使用的JDK为1.8，springboot版本为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打成的jar只包含class文件，没有见资源文件引入。<br><img src="https://eelve.com/upload/2019/7/20190713-90f9d3c88e4940de8c8faaa0b2d4ec7c.png" alt="没有包含resourse的编译结果"></p>
<h1 id="叁、解决办法"><a href="#叁、解决办法" class="headerlink" title="叁、解决办法"></a>叁、解决办法</h1><h2 id="1-添加资源路径的映射"><a href="#1-添加资源路径的映射" class="headerlink" title="1. 添加资源路径的映射"></a>1. 添加资源路径的映射</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 开启过滤，用指定的参数替换directory下的文件中的参数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        **/*.java</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-修改maven编译版本为1-4-2"><a href="#2-修改maven编译版本为1-4-2" class="headerlink" title="2. 修改maven编译版本为1.4.2"></a>2. 修改maven编译版本为1.4.2</h2><p>只有使用这个版本打jar包才能解析jsp</p>
<h2 id="3-设置mainClass"><a href="#3-设置mainClass" class="headerlink" title="3. 设置mainClass"></a>3. 设置mainClass</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maven插件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.gt.LaysshApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-添加视图配置（可选）"><a href="#4-添加视图配置（可选）" class="headerlink" title="4. 添加视图配置（可选）"></a>4. 添加视图配置（可选）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line"></span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure>
<p>下面给出一个比较完整的maven编译配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 开启过滤，用指定的参数替换directory下的文件中的参数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        **/*.java</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maven插件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.gt.MyApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面就是修改编译配置之后的结果</p>
<p><img src="https://eelve.com/upload/2019/7/201907192-13a348f78e4c4d1cb0b6485cf535dfbe.png" alt="正确的结果"></p>
<hr>
<p>【写在后面的话】现代的模板解析引擎已经有了这么多了，为什么不试一下<strong>thymeleaf</strong>，但是在最近的项目中碰到了th:src标签不解析的问题，目前还不清楚具体原因，而且相同的写法在其他页面都生效，真是怪异啊。鉴于目前还是又很多人使用springboot+jsp来进行开发，但是因为使用IDEA工具创建的SpringBoot项目本身是没有webapp目录的。如果我们想要添加webapp目录的话，可以手动添加。下面就简单的来说一下配置过程。</p>
<hr>
<h2 id="1-点开项目结构管理，点击IDEA右上角的Project-Structure"><a href="#1-点开项目结构管理，点击IDEA右上角的Project-Structure" class="headerlink" title="1.点开项目结构管理，点击IDEA右上角的Project Structure"></a>1.点开项目结构管理，点击IDEA右上角的Project Structure</h2><p><img src="https://eelve.com/upload/2019/7/201907193-7d050c6d01c1449f999bb49a5c11fda8.png" alt="Project Structure"></p>
<h2 id="2-先点击下图中的-号，再点击Web"><a href="#2-先点击下图中的-号，再点击Web" class="headerlink" title="2.先点击下图中的+号，再点击Web"></a>2.先点击下图中的+号，再点击Web</h2><p><img src="https://eelve.com/upload/2019/7/2019071904-f795ae6044024bafbd02136c86fbfbda.png" alt="2019071904"></p>
<h2 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h2><p>下图是修改配置前的默认配置<br><img src="https://eelve.com/upload/2019/7/20190705-bb62a58b15d24b098aa2db949d18de32.png" alt="修改前的配置"><br>下面将webapp配置到传统的main目录下<br><img src="https://eelve.com/upload/2019/7/2019071906-d580c788cbd94ff7ba7cb43d70fb5ebb.png" alt="修改后的配置"><br><img src="https://eelve.com/upload/2019/7/2019071906-4c565cc7039a4ed7b0dff2044d3e1bae.png" alt="配置Artifacts"><br><img src="https://eelve.com/upload/2019/7/2019071907-1a3c18ec66514327b6f5b635dfde0f67.png" alt="最后的配置成功的结果"></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot打可执行war包</title>
    <url>/posts/4f6f7726.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】最近做了一个Springboot项目，但是最后需要打成WAR包在容器中部署，下面就简单记录一下。</p>
<hr>
<h1 id="壹、修改pom文件"><a href="#壹、修改pom文件" class="headerlink" title="壹、修改pom文件"></a>壹、修改pom文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eelve<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-war<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 嵌入式tomcat相关jar将被放入到WEB-INF\lib-provided下 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、修改启动类"><a href="#贰、修改启动类" class="headerlink" title="贰、修改启动类"></a>贰、修改启动类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.springboot.war;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootWarApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> application.sources(SpringbootWarApplication.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SpringbootWarApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>后面的话</strong>】使用maven打包(clean package)，生成的war包可以用于传统的部署方式（外部tomcat），也可以直接使用java -jar 的方式运行。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>九月面试总结</title>
    <url>/posts/3326b4d8.html</url>
    <content><![CDATA[<hr>
<p>【<strong>前情提要</strong>】最近参加了几次面试，面试的感受是简历上写的东西一定是都烂熟于心，另外知识要成体系，引导面试官跟着你走，而不是被面试官牵着走。另外hr最常问的一个问题是：你为什么从上一份工作离职。下面简单记录一下我碰到的面试题。</p>
<hr>
<h1 id="Question-List"><a href="#Question-List" class="headerlink" title="Question List"></a>Question List</h1><ul>
<li>1.ArrayList和LinkedList区别</li>
<li>2.Object主要方法</li>
<li>3.实现线程的方法</li>
<li>4.线程池核心参数和模型</li>
<li>5.JUC</li>
<li>6.HashMap为啥不安全</li>
<li>7.CurrentHashMap怎么保证安全</li>
<li>8.为什么会有线程不安全问题，有那些保证线程同步的方法</li>
<li>9.说一说synchronized</li>
<li>10.说一说Java内存模型</li>
<li>11.volatile作用那些</li>
<li>12.@Autowired 和@Resource区别</li>
<li>13.springboot是怎么启动的</li>
<li>14.怎么解决循环依赖</li>
<li>15.什么是Aop，有那些方式实现</li>
<li>16.动态代理有那些，分别怎么实现</li>
<li>17.怎么自定义注解</li>
<li>18.什么是双亲委派</li>
<li>19.类加载机制</li>
<li>20.辣鸡回收算法，以及有那些回收器</li>
<li>21.B树和B+树，为啥MySQL用</li>
<li>22.怎么优化慢SQL</li>
<li>23.MySQL事物隔离级别，和MVVC怎么保障幻读和脏读</li>
<li>24.项目为什么用MQ，怎么解决使用MQ产生的问题</li>
<li>25.Redis持久化机制</li>
<li>26.redis淘汰策略</li>
<li>27.redis怎么保障双写一致</li>
<li>28.怎么保障分布式事物</li>
<li>29.为什么是三次握手四次挥手</li>
<li>30.Https是怎么保障安全的</li>
<li>31.还有些算法的</li>
<li>32.穿插项目问</li>
<li>33.String源码考察，intern方法</li>
<li>34.Object源码考察</li>
<li>35.Thread源码考察，线程顺序执行等等</li>
<li>36.ThreadLocal内存泄露问题考察</li>
<li>37.类初始化考察，new，克隆，反序列化</li>
<li>38.Spring MVC设计模式</li>
<li>39.JVM调优策略</li>
</ul>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>interview</category>
      </categories>
      <tags>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Jasypt对SpringBoot配置文件加密</title>
    <url>/posts/a34aa1f3.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>在日前安全形势越来越严重的情况下，让我意识到在项目中存在一个我们经常忽略的漏洞，那就是我们的项目的配置文件中配置信息的安全，尤其是数据库连接的用户名和密码的安全。所以这里我们就需要对数据库的用户名和密码进行加密，这也是本文的由来。本文采用Jasypt对Spring Boot配置文件加密的相关方法，其实呢，也还有其他方案，具体的会在后面的相关文章中说明。</p>
<h1 id="引入jasypt"><a href="#引入jasypt" class="headerlink" title="引入jasypt"></a><strong>引入jasypt</strong></h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="1-生成要加密的字符串"><a href="#1-生成要加密的字符串" class="headerlink" title="1.生成要加密的字符串"></a><strong>1.生成要加密的字符串</strong></h1><h2 id="1-1-将数据库的用户名和密码进行加密"><a href="#1-1-将数据库的用户名和密码进行加密" class="headerlink" title="1.1 将数据库的用户名和密码进行加密"></a>1.1 将数据库的用户名和密码进行加密</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BasicTextEncryptor textEncryptor = <span class="keyword">new</span> BasicTextEncryptor();</span><br><span class="line">        <span class="comment">//加密所需的salt(盐)</span></span><br><span class="line">        textEncryptor.setPassword(<span class="string">&quot;1Qaz0oKm&quot;</span>);</span><br><span class="line">        <span class="comment">//要加密的数据（数据库的用户名或密码）</span></span><br><span class="line">        String username = textEncryptor.encrypt(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        String password = textEncryptor.encrypt(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line">        System.out.println(<span class="string">&quot;password:&quot;</span>+password);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出信息</strong></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">username:NZmLHOOHX0SEjc285iG9YQ==</span><br><span class="line">password:1JByM5wu5o+9H1Ba2o++Pg==</span><br><span class="line">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#x27;applicationTaskExecutor&#x27;</span><br><span class="line">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#x27;default&#x27;</span><br><span class="line">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2019-06-14 14:55:49.878  INFO 8904 --- [       Thread-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure>
<h2 id="1-2-或者使用Maven下载好的jar包加密-Maven-org-jasypt-jasypt-2-0-0-jasypt-2-0-0-jar"><a href="#1-2-或者使用Maven下载好的jar包加密-Maven-org-jasypt-jasypt-2-0-0-jasypt-2-0-0-jar" class="headerlink" title="1.2. 或者使用Maven下载好的jar包加密\Maven\org\jasypt\jasypt\2.0.0\jasypt-2.0.0.jar"></a>1.2. 或者使用Maven下载好的jar包加密\Maven\org\jasypt\jasypt\2.0.0\jasypt-2.0.0.jar</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">java -cp jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI password=1Qaz0oKm algorithm=PBEWithMD5AndDES input=root</span><br></pre></td></tr></table></figure>
<p><strong>输出信息</strong></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">----ENVIRONMENT-----------------</span><br><span class="line">Runtime: Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 25.171-b11</span><br><span class="line"></span><br><span class="line">----ARGUMENTS-------------------</span><br><span class="line">input: root</span><br><span class="line">algorithm: PBEWithMD5AndDES</span><br><span class="line">password: 1Qaz0oKm </span><br><span class="line"></span><br><span class="line">----OUTPUT----------------------</span><br><span class="line">NZmLHOOHX0SEjc285iG9YQ==</span><br></pre></td></tr></table></figure>
<p>拷贝-OUTPUT-下的结果即可</p>
<h1 id="2-配置properties文件"><a href="#2-配置properties文件" class="headerlink" title="2.配置properties文件"></a><strong>2.配置properties文件</strong></h1><p>将生成的加密串配置ENC(加密串)到application.properties中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ENC(GHK23XVFNHoQQ97vIW523Q==)</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(aTKef0XcG05Cfzao92EqqQ==)</span></span><br><span class="line">    <span class="attr">data-username:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MYSQL</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">1Qaz0oKm</span> <span class="comment">#加密所需的salt(盐)</span></span><br><span class="line">    <span class="comment">#algorithm: PBEWithMD5AndDES   # 默认加密方式PBEWithMD5AndDES,可以更改为PBEWithMD5AndTripleDES</span></span><br></pre></td></tr></table></figure>
<p><strong>加密方式对应的类为BasicTextEncryptor和StrongTextEncryptor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StandardPBEStringEncryptor encryptor = <span class="keyword">new</span> StandardPBEStringEncryptor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicTextEncryptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.encryptor.setAlgorithm(<span class="string">&quot;PBEWithMD5AndDES&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StandardPBEStringEncryptor encryptor = <span class="keyword">new</span> StandardPBEStringEncryptor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrongTextEncryptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.encryptor.setAlgorithm(<span class="string">&quot;PBEWithMD5AndTripleDES&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/springbootjasypydiagrams-3a7616cc841c4f7583fc7173e32aaab4.png" alt="图片.png"></p>
<h1 id="3-部署时配置salt-盐-值"><a href="#3-部署时配置salt-盐-值" class="headerlink" title="3.部署时配置salt(盐)值"></a><strong>3.部署时配置salt(盐)值</strong></h1><p><strong>1. 为了防止salt(盐)泄露,反解出密码.可以在项目部署的时候使用命令传入salt(盐)值</strong></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">java -jar -Djasypt.encryptor.password=1Qaz0oKm xxx.jar</span><br></pre></td></tr></table></figure>
<p><strong>2. 或者在服务器的环境变量里配置,进一步提高安全性</strong></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">打开/etc/profile文件</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">文件末尾插入</span><br><span class="line">export JASYPT_PASSWORD = G0CvDz7oJn6</span><br><span class="line"></span><br><span class="line">编译 </span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">运行 </span><br><span class="line">java -jar -Djasypt.encryptor.password=$&#123;JASYPT_PASSWORD&#125; xxx.jar</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/eelve/jasypt">下面是一个我自己的具体实现：https://github.com/eelve/jasypt，使用Jasypt对数据库用信息加密后，可以成功连接上数据库</a><br><img src="https://image.eelve.com/eblog/springbootjasypyresult-5f2ef70fe5124f5595a48b341807f2c3.png" alt="图片.png"></p>
<p><a href="https://github.com/ulisesbocchio/jasypt-spring-boot">官方地址：https://github.com/ulisesbocchio/jasypt-spring-boot</a></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>jasypt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Jasypt对SpringBoot配置文件加密本地版</title>
    <url>/posts/bec45de.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>在日前安全形势越来越严重的情况下，让我意识到在项目中存在一个我们经常忽略的漏洞，那就是我们的项目的配置文件中配置信息的安全，尤其是数据库连接的用户名和密码的安全。所以这里我们就需要对数据库的用户名和密码进行加密，这也是本文的由来。本文采用Jasypt对Spring Boot配置文件加密的相关方法，其实呢，也还有其他方案，具体的会在后面的相关文章中说明。</p>
<h1 id="引入jasypt"><a href="#引入jasypt" class="headerlink" title="引入jasypt"></a><strong>引入jasypt</strong></h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="1-生成要加密的字符串"><a href="#1-生成要加密的字符串" class="headerlink" title="1.生成要加密的字符串"></a><strong>1.生成要加密的字符串</strong></h1><h2 id="1-1-将数据库的用户名和密码进行加密"><a href="#1-1-将数据库的用户名和密码进行加密" class="headerlink" title="1.1 将数据库的用户名和密码进行加密"></a>1.1 将数据库的用户名和密码进行加密</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BasicTextEncryptor textEncryptor = <span class="keyword">new</span> BasicTextEncryptor();</span><br><span class="line">        <span class="comment">//加密所需的salt(盐)</span></span><br><span class="line">        textEncryptor.setPassword(<span class="string">&quot;1Qaz0oKm&quot;</span>);</span><br><span class="line">        <span class="comment">//要加密的数据（数据库的用户名或密码）</span></span><br><span class="line">        String username = textEncryptor.encrypt(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        String password = textEncryptor.encrypt(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line">        System.out.println(<span class="string">&quot;password:&quot;</span>+password);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出信息</strong></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">username:NZmLHOOHX0SEjc285iG9YQ==</span><br><span class="line">password:1JByM5wu5o+9H1Ba2o++Pg==</span><br><span class="line">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#x27;applicationTaskExecutor&#x27;</span><br><span class="line">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#x27;default&#x27;</span><br><span class="line">2019-06-14 14:55:49.863  INFO 8904 --- [       Thread-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2019-06-14 14:55:49.878  INFO 8904 --- [       Thread-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure>
<h2 id="1-2-或者使用Maven下载好的jar包加密-Maven-org-jasypt-jasypt-2-0-0-jasypt-2-0-0-jar"><a href="#1-2-或者使用Maven下载好的jar包加密-Maven-org-jasypt-jasypt-2-0-0-jasypt-2-0-0-jar" class="headerlink" title="1.2. 或者使用Maven下载好的jar包加密\Maven\org\jasypt\jasypt\2.0.0\jasypt-2.0.0.jar"></a>1.2. 或者使用Maven下载好的jar包加密\Maven\org\jasypt\jasypt\2.0.0\jasypt-2.0.0.jar</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">java -cp jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI password=1Qaz0oKm algorithm=PBEWithMD5AndDES input=root</span><br></pre></td></tr></table></figure>
<p><strong>输出信息</strong></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">----ENVIRONMENT-----------------</span><br><span class="line">Runtime: Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 25.171-b11</span><br><span class="line"></span><br><span class="line">----ARGUMENTS-------------------</span><br><span class="line">input: root</span><br><span class="line">algorithm: PBEWithMD5AndDES</span><br><span class="line">password: 1Qaz0oKm </span><br><span class="line"></span><br><span class="line">----OUTPUT----------------------</span><br><span class="line">NZmLHOOHX0SEjc285iG9YQ==</span><br></pre></td></tr></table></figure>
<p>拷贝-OUTPUT-下的结果即可</p>
<h1 id="2-配置properties文件"><a href="#2-配置properties文件" class="headerlink" title="2.配置properties文件"></a><strong>2.配置properties文件</strong></h1><p>将生成的加密串配置ENC(加密串)到application.properties中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ENC(GHK23XVFNHoQQ97vIW523Q==)</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(aTKef0XcG05Cfzao92EqqQ==)</span></span><br><span class="line">    <span class="attr">data-username:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MYSQL</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">1Qaz0oKm</span> <span class="comment">#加密所需的salt(盐)</span></span><br><span class="line">    <span class="comment">#algorithm: PBEWithMD5AndDES   # 默认加密方式PBEWithMD5AndDES,可以更改为PBEWithMD5AndTripleDES</span></span><br></pre></td></tr></table></figure>
<p><strong>加密方式对应的类为BasicTextEncryptor和StrongTextEncryptor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StandardPBEStringEncryptor encryptor = <span class="keyword">new</span> StandardPBEStringEncryptor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicTextEncryptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.encryptor.setAlgorithm(<span class="string">&quot;PBEWithMD5AndDES&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StandardPBEStringEncryptor encryptor = <span class="keyword">new</span> StandardPBEStringEncryptor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrongTextEncryptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.encryptor.setAlgorithm(<span class="string">&quot;PBEWithMD5AndTripleDES&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://eelve.com/upload/2019/6/springbootjasypydiagrams-3a7616cc841c4f7583fc7173e32aaab4.png" alt="图片.png"></p>
<h1 id="3-部署时配置salt-盐-值"><a href="#3-部署时配置salt-盐-值" class="headerlink" title="3.部署时配置salt(盐)值"></a><strong>3.部署时配置salt(盐)值</strong></h1><p><strong>1. 为了防止salt(盐)泄露,反解出密码.可以在项目部署的时候使用命令传入salt(盐)值</strong></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">java -jar -Djasypt.encryptor.password=1Qaz0oKm xxx.jar</span><br></pre></td></tr></table></figure>
<p><strong>2. 或者在服务器的环境变量里配置,进一步提高安全性</strong></p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">打开/etc/profile文件</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">文件末尾插入</span><br><span class="line">export JASYPT_PASSWORD = G0CvDz7oJn6</span><br><span class="line"></span><br><span class="line">编译 </span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">运行 </span><br><span class="line">java -jar -Djasypt.encryptor.password=$&#123;JASYPT_PASSWORD&#125; xxx.jar</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/eelve/jasypt">下面是一个我自己的具体实现：https://github.com/eelve/jasypt，使用Jasypt对数据库用信息加密后，可以成功连接上数据库</a><br><img src="https://eelve.com/upload/2019/6/springbootjasypyresult-5f2ef70fe5124f5595a48b341807f2c3.png" alt="图片.png"></p>
<p><a href="https://github.com/ulisesbocchio/jasypt-spring-boot">官方地址：https://github.com/ulisesbocchio/jasypt-spring-boot</a></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Guava实现限流</title>
    <url>/posts/17d40800.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】前面说过目前几种比较常见的限流的中间件，Sentinel、Hystrix和resilience4j，也提到过自己实现限流功能，今天就基于Guava实现一哈限流功能。</p>
<h1 id="壹、Guava介绍"><a href="#壹、Guava介绍" class="headerlink" title="壹、Guava介绍"></a>壹、Guava介绍</h1><p><a href="https://github.com/google/guava">Guava</a> 是一种基于开源的Java库，其中包含谷歌正在由他们很多项目使用的很多核心库。这个库是为了方便编码，并减少编码错误。这个库提供用于集合，缓存，支持原语，并发性，常见注解，字符串处理，I/O和验证的实用方法。</p>
<p><a href="https://github.com/google/guava">Guava</a> 的好处</p>
<ul>
<li>标准化 - Guava库是由谷歌托管。 </li>
<li>高效 - 可靠，快速和有效的扩展JAVA标准库</li>
<li>优化 -Guava库经过高度的优化。</li>
<li>函数式编程 -增加JAVA功能和处理能力。</li>
<li>实用程序 - 提供了经常需要在应用程序开发的许多实用程序类。</li>
<li>验证 -提供标准的故障安全验证机制。</li>
<li>最佳实践 - 强调最佳的做法。</li>
</ul>
<p>下面就使用<a href="https://github.com/google/guava">Guava</a> 中提供的并发相关的工具中的<code>RateLimiter</code>来实现一个限流的功能。</p>
<h1 id="贰、引入依赖"><a href="#贰、引入依赖" class="headerlink" title="贰、引入依赖"></a>贰、引入依赖</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;30.0-jre&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h1 id="叁、拦截器方式实现"><a href="#叁、拦截器方式实现" class="headerlink" title="叁、拦截器方式实现"></a>叁、拦截器方式实现</h1><h2 id="3-1、-定义接口"><a href="#3-1、-定义接口" class="headerlink" title="3.1、 定义接口"></a>3.1、 定义接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">allInfos</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;param-----&gt;&quot;</span> + num);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(num*<span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 3 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad whitch 3&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 5 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ProgramException(<span class="string">&quot;something bad whitch 5&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 7 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ProgramException | InterruptedException exception) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2、-添加拦截器"><a href="#3-2、-添加拦截器" class="headerlink" title="3.2、 添加拦截器"></a>3.2、 添加拦截器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.guava.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.guava.vo.JsonResult;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RateLimiterInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/11 12:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RateLimiter rateLimiter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过构造函数初始化限速器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RateLimiterInterceptor</span><span class="params">(RateLimiter rateLimiter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.rateLimiter = rateLimiter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.rateLimiter.tryAcquire()) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 成功获取到令牌</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取失败，直接响应“错误信息”</span></span><br><span class="line"><span class="comment">         * 也可以通过抛出异常，通过全全局异常处理器响应客户端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        response.setCharacterEncoding(StandardCharsets.UTF_8.name());</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        response.getWriter().write(JsonResult.error().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.guava.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.guava.aspect.RateLimiterInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebMvcConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/11 12:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * get接口，1秒钟生成1个令牌，也就是1秒中允许一个人访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> RateLimiterInterceptor(RateLimiter.create(<span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS)))</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/get&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过上面的代码我们就可用对<code>/get</code>接口实现限流了，但是也有明显的缺点，就是规则被写死，所以下面我们通过注解方式实现。</p>
</blockquote>
<h1 id="肆、使用注解实现"><a href="#肆、使用注解实现" class="headerlink" title="肆、使用注解实现"></a>肆、使用注解实现</h1><h2 id="4-1、定义注解"><a href="#4-1、定义注解" class="headerlink" title="4.1、定义注解"></a>4.1、定义注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.guava.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/1112:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyRateLimiter &#123;</span><br><span class="line">    <span class="keyword">int</span> NOT_LIMITED = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 资源名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * qps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">qps</span><span class="params">()</span> <span class="keyword">default</span> NOT_LIMITED</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取令牌超时时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行超时时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">executeTimeout</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行超时时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">executeTimeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-2、添加通知"><a href="#4-2、添加通知" class="headerlink" title="4.2、添加通知"></a>4.2、添加通知</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.guava.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.guava.annotation.MyRateLimiter;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.guava.exception.BaseException;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RateLimiterAspect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/11 12:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRateLimiterAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String, RateLimiter&gt; RATE_LIMITER_CACHE = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.eelve.limiting.guava.annotation.MyRateLimiter)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyRateLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;MyRateLimit()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pointcut</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object obj =<span class="keyword">null</span>;</span><br><span class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        <span class="comment">// 通过 AnnotationUtils.findAnnotation 获取 RateLimiter 注解</span></span><br><span class="line">        MyRateLimiter myRateLimiter = AnnotationUtils.findAnnotation(method, MyRateLimiter.class);</span><br><span class="line">        <span class="keyword">if</span> (myRateLimiter != <span class="keyword">null</span> &amp;&amp; myRateLimiter.qps() &gt; MyRateLimiter.NOT_LIMITED) &#123;</span><br><span class="line">            <span class="keyword">double</span> qps = myRateLimiter.qps();</span><br><span class="line">            String name = myRateLimiter.name();</span><br><span class="line">            <span class="keyword">int</span> executeTimeout = myRateLimiter.executeTimeout();</span><br><span class="line">            <span class="keyword">if</span>(Objects.isNull(name))&#123;</span><br><span class="line">                name = method.getName();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (RATE_LIMITER_CACHE.get(name) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 初始化 QPS</span></span><br><span class="line">                RATE_LIMITER_CACHE.put(name, RateLimiter.create(qps));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;【&#123;&#125;】的QPS设置为: &#123;&#125;&quot;</span>, method.getName(), RATE_LIMITER_CACHE.get(name).getRate());</span><br><span class="line">            Long start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 尝试获取令牌</span></span><br><span class="line">            <span class="keyword">if</span> (RATE_LIMITER_CACHE.get(method.getName()) != <span class="keyword">null</span> &amp;&amp; !RATE_LIMITER_CACHE.get(method.getName()).tryAcquire(myRateLimiter.timeout(), myRateLimiter.timeUnit())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;请求频繁，请稍后再试~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            obj = point.proceed();</span><br><span class="line"></span><br><span class="line">            Long end = System.currentTimeMillis();</span><br><span class="line">            Long executeTime = end - start;</span><br><span class="line">            <span class="keyword">if</span>((end - start) &gt;  executeTimeout)&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;请求超时，请稍后再试~&quot;</span> + (end - start));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;请求超时，请稍后再试~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-3、使用"><a href="#4-3、使用" class="headerlink" title="4.3、使用"></a>4.3、使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启限流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MyRateLimiter(qps = 2.0, timeout = 1)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/rateLimiter&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">rateLimiter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;param-----&gt;&quot;</span> + num);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(num);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;【rateLimiter】被执行了。。。。。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> JsonResult.ok(<span class="string">&quot;你不能总是看到我，快速刷新我看一下！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过上面的代码我们就实现了零活的通过注解的方式实现了限流功能，并且我们还可以在<code>Around</code>通知的时候灵活实现。包括过滤某些异常等等。</p>
</blockquote>
<hr>
<p>【<strong>后面的话</strong>】除了前面我们使用的<code>RateLimiter</code>之外，<code>Guava</code>还提供了专门针对超时的<code>SimpleTimeLimiter</code>组件，有兴趣的也可以尝试一下。另外以上的源码都可用在 <a href="https://github.com/eelve/limiting/tree/master/guava">limiting</a> 中找到。</p>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>limiting</category>
      </categories>
      <tags>
        <tag>limiting</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis实现简单的限流</title>
    <url>/posts/6da55b80.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】前面说过目前几种比较常见的限流的中间件，Sentinel、Hystrix和resilience4j，也提到过自己实现限流功能，今天就基于Redis实现一哈限流功能。</p>
<h1 id="壹、Redis实现限流介绍"><a href="#壹、Redis实现限流介绍" class="headerlink" title="壹、Redis实现限流介绍"></a>壹、Redis实现限流介绍</h1><p>前面说过基于Guava的限流的解决方案，但是这个方案只适用于单体应用，所以这边我们就可用借助第三方中间件来实现，这里就使用Redis来实现，进一步实现集群限流的功能。主要参考Redis官方的伪代码：<a href="https://redis.io/commands/incr">https://redis.io/commands/incr</a></p>
<h1 id="贰、基于Redis的setnx的操作"><a href="#贰、基于Redis的setnx的操作" class="headerlink" title="贰、基于Redis的setnx的操作"></a>贰、基于Redis的setnx的操作</h1><p>我们在使用Redis的分布式锁的时候，大家都知道是依靠了setnx的指令，在CAS（Compare and swap）的操作的时候，同时给指定的key设置了过期实践（expire），我们在限流的主要目的就是为了在单位时间内，有且仅有N数量的请求能够访问我的代码程序。所以依靠setnx可以很轻松的做到这方面的功能。</p>
<p>比如我们需要在10秒内限定20个请求，那么我们在setnx的时候可以设置过期时间10，当请求的setnx数量达到20时候即达到了限流效果。代码比较简单就不做展示了。</p>
<p>当然这种做法的弊端是很多的，比如当统计1-10秒的时候，无法统计2-11秒之内，如果需要统计N秒内的M个请求，那么我们的Redis中需要保持N个key等等问题。</p>
<h1 id="叁、基于Redis的数据结构zset"><a href="#叁、基于Redis的数据结构zset" class="headerlink" title="叁、基于Redis的数据结构zset"></a>叁、基于Redis的数据结构zset</h1><p>其实限流涉及的最主要的就是滑动窗口，上面也提到1-10怎么变成2-11。其实也就是起始值和末端值都各+1即可。</p>
<p>而我们如果用Redis的list数据结构可以轻而易举的实现该功能，我们可以将请求打造成一个zset数组，当每一次请求进来的时候，value保持唯一，可以用UUID生成，而score可以用当前时间戳表示，因为score我们可以用来计算当前时间戳之内有多少的请求数量。而zset数据结构也提供了range方法让我们可以很轻易的获取到2个时间戳内有多少请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">limitFlow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Long currentTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">    System.out.println(currentTime);</span><br><span class="line">    <span class="keyword">if</span>(redisTemplate.hasKey(<span class="string">&quot;limit&quot;</span>)) &#123;</span><br><span class="line">        Integer count = redisTemplate.opsForZSet().rangeByScore(<span class="string">&quot;limit&quot;</span>, currentTime -  intervalTime, currentTime).size();        <span class="comment">// intervalTime是限流的时间 </span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="keyword">null</span> &amp;&amp; count &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.ok(<span class="string">&quot;每分钟最多只能访问5次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    redisTemplate.opsForZSet().add(<span class="string">&quot;limit&quot;</span>,UUID.randomUUID().toString(),currentTime);</span><br><span class="line">    <span class="keyword">return</span> Response.ok(<span class="string">&quot;访问成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上述代码可以做到滑动窗口的效果，并且能保证每N秒内至多M个请求，缺点就是zset的数据结构会越来越大。实现方式相对也是比较简单的。</p>
<h1 id="肆、基于Redis的令牌桶算法"><a href="#肆、基于Redis的令牌桶算法" class="headerlink" title="肆、基于Redis的令牌桶算法"></a>肆、基于Redis的令牌桶算法</h1><p>令牌桶算法提及到输入速率和输出速率，当输出速率大于输入速率，那么就是超出流量限制了。也就是说我们每访问一次请求的时候，可以从Redis中获取一个令牌，如果拿到令牌了，那就说明没超出限制，而如果拿不到，则结果相反。</p>
<p>依靠上述的思想，我们可以结合Redis的List数据结构很轻易的做到这样的代码，只是简单实现依靠List的leftPop来获取令牌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出令牌</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">limitFlow2</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">    Object result = redisTemplate.opsForList().leftPop(<span class="string">&quot;limit_list&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Response.ok(<span class="string">&quot;当前令牌桶中无令牌&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Response.ok(articleDescription2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再依靠Java的定时任务，定时往List中rightPush令牌，当然令牌也需要唯一性，所以我这里还是用UUID进行了生成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 10S的速率往令牌桶中添加UUID，只为保证唯一性</span></span><br><span class="line"><span class="meta">@Scheduled(fixedDelay = 10_000,initialDelay = 0)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntervalTimeTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    redisTemplate.opsForList().rightPush(<span class="string">&quot;limit_list&quot;</span>,UUID.randomUUID().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>limiting</category>
      </categories>
      <tags>
        <tag>limiting</tag>
      </tags>
  </entry>
  <entry>
    <title>双仓库同步代码</title>
    <url>/posts/ce08b5ef.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】在最近的工作中，涉及到把一份代码同时上传到两个git仓库，下面是简单的记录。</p>
<hr>
<h1 id="壹、准备工作"><a href="#壹、准备工作" class="headerlink" title="壹、准备工作"></a>壹、准备工作</h1><p>分别在Github和Gitee平台上配置SSH公钥，便于使用git协议拉取和提交推送代码的时候需要输入密码。 </p>
<h1 id="贰、拉取代码"><a href="#贰、拉取代码" class="headerlink" title="贰、拉取代码"></a>贰、拉取代码</h1><p>我这里以我的<a href="git@github.com:eelve/fly.git">git@github.com:eelve/fly.git</a>仓库为示例来说明。使用工具或者命令拉取<a href="git@github.com:eelve/fly.git">git@github.com:eelve/fly.git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:eelve/fly.git</span><br></pre></td></tr></table></figure>
<h1 id="叁、修改配置文件"><a href="#叁、修改配置文件" class="headerlink" title="叁、修改配置文件"></a>叁、修改配置文件</h1><p>进入拉取的仓库文件夹下，找到<code>.git</code>的隐藏文件夹，打开<code>config</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = <span class="literal">false</span></span><br><span class="line">	bare = <span class="literal">false</span></span><br><span class="line">	logallrefupdates = <span class="literal">true</span></span><br><span class="line">	symlinks = <span class="literal">false</span></span><br><span class="line">	ignorecase = <span class="literal">true</span></span><br><span class="line">[submodule]</span><br><span class="line">	active = .</span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">	url = git@github.com:eelve/fly.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">&quot;master&quot;</span>]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/master</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改成如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = <span class="literal">false</span></span><br><span class="line">	bare = <span class="literal">false</span></span><br><span class="line">	logallrefupdates = <span class="literal">true</span></span><br><span class="line">	symlinks = <span class="literal">false</span></span><br><span class="line">	ignorecase = <span class="literal">true</span></span><br><span class="line">[submodule]</span><br><span class="line">	active = .</span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">	url = git@github.com:eelve/fly.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">	url = git@gitee.com:eelve/fly.git</span><br><span class="line">[branch <span class="string">&quot;master&quot;</span>]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/master</span><br><span class="line">[remote <span class="string">&quot;gitee&quot;</span>]</span><br><span class="line">	url = git@gitee.com:eelve/fly.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/github/*</span><br></pre></td></tr></table></figure>
<p>添加一个remote远程仓库，并添加远程仓库地址，修改的部分如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url = git@gitee.com:eelve/fly.git</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[remote <span class="string">&quot;gitee&quot;</span>]</span><br><span class="line">	url = git@gitee.com:eelve/fly.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/github/*</span><br></pre></td></tr></table></figure>
<h1 id="肆、推送测试"><a href="#肆、推送测试" class="headerlink" title="肆、推送测试"></a>肆、推送测试</h1><p>使用其他工具或者执行<code>git push</code>命令推送，我这里没有其他分支我这里就省略了分支名称等等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>然后查看gitee上面的仓库，可以看到，就已经成功推送上去了。</p>
<p><img src="https://image.eelve.com/eblog/202004301-c3fd0726d60e4564baf69f2f541e53e3.png" alt="202004301"><br><img src="https://image.eelve.com/eblog/202004302-b29f20125242462faf4dee47d0b7d8a0.png" alt="202004302"></p>
<hr>
<p>【<strong>后面的话</strong>】完成上述工作之后，就能够做到一次推送，两个仓库都有代码了。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>安装yarn实况</title>
    <url>/posts/d14c2ee7.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】最近在gayhub上面得到一个开源项目，遂准备研究一下源码，当然第一步就是要把项目运行起来。然后看了一下技术栈，发现包管理工具是使用yarn，以前也听说过yarn但是也没有具体使用过，只知道是facebook发布的包管理程序。</p>
<h1 id="壹、安装"><a href="#壹、安装" class="headerlink" title="壹、安装"></a>壹、安装</h1><p>1.下载node.js，使用npm安装 </p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install -g yarn </span><br><span class="line">查看版本：yarn --version</span><br></pre></td></tr></table></figure>
<p>2.安装node.js,下载yarn的安装程序: </p>
<p><a href="https://yarnpkg.com/en/docs/install#windows-stable"> 提供一个.msi文件，在运行时将引导您在Windows上安装Yarn</a></p>
<p>3.Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可 </p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org -g </span><br><span class="line">yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="贰、踩坑时刻"><a href="#贰、踩坑时刻" class="headerlink" title="贰、踩坑时刻"></a>贰、踩坑时刻</h1><p>1.yarn使用时候报错信息：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will exit.</span><br></pre></td></tr></table></figure>
<p>2.检测yarn版本 yarn version</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">D:\Seven\ways\hadoop-2.7.3&gt;yarn version  ok</span><br><span class="line">Hadoop 2.7.3</span><br><span class="line">Subversion https://git-wip-us.apache.org/repos/asf/hadoop.git -r b3fe56402d908019d99af1f1f4fc65cb1d1436a2</span><br><span class="line">Compiled by jdu on 2017-12-05T03:43Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From source with checksum 9ff4856d824e983fa510d3f843e3f19d</span><br><span class="line">This command was run using /D:/Seven/ways/hadoop-2.7.3/share/hadoop/common/hadoop-common-2.7.3.jar</span><br></pre></td></tr></table></figure>
<p>3.检测yarn版本 yarn –version 报错</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">D:\Seven\ways\hadoop-2.7.3&gt;yarn --version</span><br><span class="line">Unrecognized option: --version</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will exit.</span><br></pre></td></tr></table></figure>
<p>4.安装依赖包  报错</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">D:\Seven\ways\hadoop-2.7.3&gt;yarn install</span><br><span class="line">错误: 找不到或无法加载主类 install</span><br></pre></td></tr></table></figure>
<p>5.最后没办法重新下载windows安装包<a href="https://yarnpkg.com/en/docs/install#windows-stable"> 提供一个.msi文件，在运行时将引导您在Windows上安装Yarn</a></p>
<p>安装 -&gt; 测试 -&gt; 报错 -&gt; 检测原因 -&gt; 没有配置环境变量 -&gt; 继续报错,检测原因 -&gt; java安装环境中有默认的yarn -&gt; 环境变量配置在它前面</p>
<p>6.测试</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18362.239]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;yarn --version</span><br><span class="line">1.17.3</span><br><span class="line"></span><br><span class="line">C:\Users\Chirius&gt;</span><br></pre></td></tr></table></figure>


<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么优雅的使用hexo</title>
    <url>/posts/152670fd.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】在使用<a href="https://hexo.io/zh-cn/">hexo</a>搭建自己的个人博客前，我一直使用<a href="https://halo.run/">Halo</a>来搭建自己的博客。但是还是决定用hexo再搭建一个博客，主要是为了让自己在Github上留下自己的印记。</p>
<hr>
<p>关于hexo的基础使用知识我在这里就不做过多的介绍了，如果是在是不知道可以看以下<a href="https://hexo.io/zh-cn/docs/">官方文档</a>。我这里主要说一下怎么用Github保存博客源代码和生成的网站代码。</p>
<ul>
<li>1.新建一个分支用来保存博客源代码，并且设为默认分支，如下图所示<br><img src="https://image.eelve.com/eblog/20200223011-1816538384854e64bb090740d8ea0621.png" alt="20200223011"></li>
<li>2.执行hexo d -g上传博客内容</li>
<li>3.使用git命令提交源代码到eblog分支</li>
<li>*这样当你换电脑或者重新构建项目的时候就可以从github拉去代码就可以进行继续编写了，是不是很方便**</li>
</ul>
<hr>
<p>【<strong>小贴士</strong>】常用hexo插件</p>
<ul>
<li>1.permalink_pinyin,将文章标题中的汉字转为拼音，有利于SEO<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>2.hexo-generator-cname,避免每次提交之后都要重新配置博客域名的工作<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置保存CNAME的插件</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-cname</span></span><br></pre></td></tr></table></figure></li>
<li>3.提交博客之前最好可以预览一遍，一般出现样式不正确之后，记得使用hexo clean命令哦</li>
</ul>
<hr>
<p>最后附上一个我的博客的基本配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">南国薏米</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">南国不须收薏苡,百年终竟是芭蕉。</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">human</span> <span class="string">being,who</span> <span class="string">loves</span> <span class="string">football</span> <span class="string">and</span> <span class="string">music.</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">南国薏米</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Chillo</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://zzlve.win</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/eelve/eelve.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置保存CNAME的插件</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-cname</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么优雅的使用hexo</title>
    <url>/posts/152670fd.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】在使用<a href="https://hexo.io/zh-cn/">hexo</a>搭建自己的个人博客前，我一直使用<a href="https://halo.run/">Halo</a>来搭建自己的博客。但是还是决定用hexo再搭建一个博客，主要是为了让自己在Github上留下自己的印记。</p>
<hr>
<p>关于hexo的基础使用知识我在这里就不做过多的介绍了，如果是在是不知道可以看以下<a href="https://hexo.io/zh-cn/docs/">官方文档</a>。我这里主要说一下怎么用Github保存博客源代码和生成的网站代码。</p>
<ul>
<li>1.新建一个分支用来保存博客源代码，并且设为默认分支，如下图所示<br><img src="https://eelve.com/upload/2020/2/20200223011-1816538384854e64bb090740d8ea0621.png" alt="20200223011"></li>
<li>2.执行hexo d -g上传博客内容</li>
<li>3.使用git命令提交源代码到eblog分支</li>
<li>*这样当你换电脑或者重新构建项目的时候就可以从github拉去代码就可以进行继续编写了，是不是很方便**</li>
</ul>
<hr>
<p>【<strong>小贴士</strong>】常用hexo插件</p>
<ul>
<li>1.permalink_pinyin,将文章标题中的汉字转为拼音，有利于SEO<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>2.hexo-generator-cname,避免每次提交之后都要重新配置博客域名的工作<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置保存CNAME的插件</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-cname</span></span><br></pre></td></tr></table></figure></li>
<li>3.提交博客之前最好可以预览一遍，一般出现样式不正确之后，记得使用hexo clean命令哦</li>
</ul>
<hr>
<p>最后附上一个我的博客的基本配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">南国薏米</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">南国不须收薏苡,百年终竟是芭蕉。</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">human</span> <span class="string">being,who</span> <span class="string">loves</span> <span class="string">football</span> <span class="string">and</span> <span class="string">music.</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">南国薏米</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Chillo</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://zzlve.win</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/eelve/eelve.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置保存CNAME的插件</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-cname</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么找回遗失的Github的Contribution</title>
    <url>/posts/a3bae550.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在日常工作中，一般都会用到版本管理工具git，往往项目组要求的提交信息和Github的提交信息是不一致的，有的时候就可能会出现不可避免的犯错，导致Github的Contribution丢失，进而就在Github中丢失了打卡记录。好在Github提供了解决方法，下面就把官网的方案搬过来。</p>
<hr>
<p>首先是官网的原网站：<br><a href="https://help.github.com/en/github/using-git/changing-author-info">Changing author info</a> </p>
<p>To change the name and/or email address recorded in existing commits, you must rewrite the entire history of your Git repository.</p>
<hr>
<p>下面是中文翻译</p>
<p>1.打开终端（Mac 或 Linux 用户）或命令行（Windows 用户）。</p>
<p>2.创建一个你的 repo 的全新裸 clone （repo.git 替换为你的项目，下同） </p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git clone --bare &lt;https://github.com/user/repo.git&gt; cd repo.git</span><br></pre></td></tr></table></figure>
<p>3.复制粘贴脚本，并根据你的信息修改以下变量：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">OLD_EMAIL</span></span><br><span class="line"><span class="string">CORRECT_NAME</span></span><br><span class="line"><span class="string">CORRECT_EMAIL</span></span><br></pre></td></tr></table></figure>
<p>脚本：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter &#x27;</span><br><span class="line"></span><br><span class="line">OLD_EMAIL=&quot;your-old-email@example.com&quot;</span><br><span class="line">CORRECT_NAME=&quot;Your Correct Name&quot;</span><br><span class="line">CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span><br><span class="line">then</span><br><span class="line">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span><br><span class="line">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span><br><span class="line">then</span><br><span class="line">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span><br><span class="line">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span><br><span class="line">fi</span><br><span class="line">&#x27; --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure>
<p>4.按 Enter 执行脚本。</p>
<p>5.查看新 Git 历史有没有错误。</p>
<p>6.把正确历史 push 到 Github：（push 有困难时记得修改 DNS 或者搭梯子） </p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git push --force --tags origin &#x27;refs/heads/*&#x27;</span><br></pre></td></tr></table></figure>
<p>7.清除临时 clone。<br> <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">rm -rf repo.git</span><br></pre></td></tr></table></figure></p>
<hr>
<p>【<strong>后面的话</strong>】正确合理的设置全局用户名和邮箱，同时针对有特殊要求的项目就可以单独设置。</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git config user.name  &quot;name&quot;</span><br><span class="line">git config --global user.name &quot;globalname&quot;</span><br><span class="line">git config user.email  &quot;email&quot;</span><br><span class="line">git config --global user.email  &quot;globalemail&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同时该操作谨慎在与他人的合作项目中使用，改变作者信息 为改变已经存在的 commit 的用户名和/或邮箱地址，你必须重写你 Git repo 的整个历史。</p>
<pre><code>警告：这种行为对你的 repo 的历史具有破坏性。如果你的 repo 是与他人协同工作的，重写已发布的历史是一种不好的习惯。仅限紧急情况执行该操作。 使用脚本改变你 repo 的 Git 历史 我们写了一段能把 commit 作者旧的邮箱地址修改为正确用户名和邮箱的脚本。

注意：执行这段脚本会重写 repo 所有协作者的历史。完成以下操作后，任何 fork 或 clone 的人必须获取重写后的历史并把所有本地修改 rebase 入重写后的历史中。
</code></pre>
<p>意思就是需要重新拉去代码才能继续进行开发了</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析限流算法</title>
    <url>/posts/2c72dfa6.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】</p>
<h1 id="壹、"><a href="#壹、" class="headerlink" title="壹、"></a>壹、</h1><h1 id="贰、"><a href="#贰、" class="headerlink" title="贰、"></a>贰、</h1><hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>清明祭</title>
    <url>/posts/8b4fe012.html</url>
    <content><![CDATA[<p><img src="https://image.eelve.com/eblog/20200404.jpg" alt="清明祭"></p>
<blockquote>
<p>今日，全国哀悼。此刻，一起缅怀，为逝去的同胞！</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> *&#123;</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); <span class="comment">/* webkit */</span></span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); <span class="comment">/*firefox*/</span></span><br><span class="line">    <span class="attribute">-ms-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); <span class="comment">/*ie9*/</span></span><br><span class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); <span class="comment">/*opera*/</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>); </span><br><span class="line">    <span class="attribute">filter</span>:gray; <span class="comment">/*ie9- */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>南国薏米全站参与默哀!
</code></pre>
]]></content>
      <categories>
        <category>lifeme</category>
      </categories>
      <tags>
        <tag>lifeme</tag>
      </tags>
  </entry>
  <entry>
    <title>用命令将本地jar包导入到本地maven仓库</title>
    <url>/posts/87dccde5.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】在日常开发过程中，我们总是不可避免的需要依赖某些不在中央仓库，同时也不在本地仓库中的jar包，这是我们就需要使用命令行将需要导入本地仓库中的jar包导入本地仓库，使得项目依赖本地仓库中的代码。</p>
<hr>
<p>例如我们需要将下面pom文件中的jar包引入本地仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eelve<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>todo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>导入命令</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=D:\link\lib\todo-1.0.jar  -DgroupId=com.eelve -DartifactId=todo -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure>
<hr>
<p>命令详解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dfile：jar包所在本地的具体路径</span><br><span class="line">-DgroupId：项目组织唯一的标识符，实际对应JAVA的包的结构</span><br><span class="line">-DartifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称</span><br><span class="line">-Dversion：版本号</span><br><span class="line">-Dpackaging：打包的类型</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>结果示例</p>
<p><img src="https://image.eelve.com/eblog/%E5%AF%BC%E5%85%A5jar%E5%8C%85%E7%BB%93%E6%9E%9C-859bee2db9f14a2a8079b449d38e061c.png" alt="导入jar包结果"></p>
<hr>
<p>【小贴士】maven的仓库分类</p>
<p>在maven中，仓库可以分为：本地仓库、远程仓库。<br>远程仓库可以分为：中央仓库、私服仓库。<br>中央仓库是maven官方指定的仓库，可以理解为“寻找的最后一站”。<br>私服仓库可以是自己建的，也可以是其它主体建的（比如aliyun的maven仓库，jboss的maven仓库等）。<br>私服可以分为：全局应用的私服仓库、应用到项目自身的私服仓库。</p>
<p>maven寻找得顺序大致可以理解为：<br>1，在本地仓库中寻找，如果没有则进入下一步。<br>2，在全局应用的私服仓库中寻找，如果没有则进入下一步。<br>3，在项目自身的私服仓库中寻找，如果没有则进入下一步。<br>4，在中央仓库中寻找，如果没有则终止寻找。</p>
<p>补充：<br>1，如果在找寻的过程中，如果发现该仓库有镜像设置，则用镜像的地址代替。<br>2，如果仓库的id设置成“central”，则该配置会覆盖maven默认的中央仓库配置。</p>
<p>以上，通过实践得来的，可能不全面，仅当参考</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>用命令将本地jar包导入到本地maven仓库本地版</title>
    <url>/posts/87dccde5.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】在日常开发过程中，我们总是不可避免的需要依赖某些不在中央仓库，同时也不在本地仓库中的jar包，这是我们就需要使用命令行将需要导入本地仓库中的jar包导入本地仓库，使得项目依赖本地仓库中的代码。</p>
<hr>
<p>例如我们需要将下面pom文件中的jar包引入本地仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eelve<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>todo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>导入命令</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=D:\link\lib\todo-1.0.jar  -DgroupId=com.eelve -DartifactId=todo -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure>
<hr>
<p>命令详解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dfile：jar包所在本地的具体路径</span><br><span class="line">-DgroupId：项目组织唯一的标识符，实际对应JAVA的包的结构</span><br><span class="line">-DartifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称</span><br><span class="line">-Dversion：版本号</span><br><span class="line">-Dpackaging：打包的类型</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>结果示例</p>
<p><img src="https://eelve.com/upload/2019/6/%E5%AF%BC%E5%85%A5jar%E5%8C%85%E7%BB%93%E6%9E%9C-859bee2db9f14a2a8079b449d38e061c.png" alt="导入jar包结果"></p>
<hr>
<p>【小贴士】maven的仓库分类</p>
<p>在maven中，仓库可以分为：本地仓库、远程仓库。<br>远程仓库可以分为：中央仓库、私服仓库。<br>中央仓库是maven官方指定的仓库，可以理解为“寻找的最后一站”。<br>私服仓库可以是自己建的，也可以是其它主体建的（比如aliyun的maven仓库，jboss的maven仓库等）。<br>私服可以分为：全局应用的私服仓库、应用到项目自身的私服仓库。</p>
<p>maven寻找得顺序大致可以理解为：<br>1，在本地仓库中寻找，如果没有则进入下一步。<br>2，在全局应用的私服仓库中寻找，如果没有则进入下一步。<br>3，在项目自身的私服仓库中寻找，如果没有则进入下一步。<br>4，在中央仓库中寻找，如果没有则终止寻找。</p>
<p>补充：<br>1，如果在找寻的过程中，如果发现该仓库有镜像设置，则用镜像的地址代替。<br>2，如果仓库的id设置成“central”，则该配置会覆盖maven默认的中央仓库配置。</p>
<p>以上，通过实践得来的，可能不全面，仅当参考</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>站点迁移指北</title>
    <url>/posts/99c3e47d.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】由于服务器快到期了，就重新另购了一台服务器。这边就来记录一下迁移的过程和日常数据备份等等。</p>
<h1 id="壹、站点概览"><a href="#壹、站点概览" class="headerlink" title="壹、站点概览"></a>壹、站点概览</h1><p>我的站点使用<code>halo</code>搭建的，主要涉及到的中间件有：<code>Nginx</code>、<code>Mysql</code>等；日常运行产生的数据有站点运行数据和资源数据，所以站点迁移也会从这些方面着手。</p>
<h1 id="贰、中间件迁移"><a href="#贰、中间件迁移" class="headerlink" title="贰、中间件迁移"></a>贰、中间件迁移</h1><h2 id="2-1、Nginx"><a href="#2-1、Nginx" class="headerlink" title="2.1、Nginx"></a>2.1、Nginx</h2><p>其实<code>Nginx</code>的迁移很简单，只需要在新的服务器中安装即可，然后迁移<code>nginx.conf</code>配置文件。我的站点还用到<code>https</code>，所有在安装的时候要注意安装相应的模块以及证书的迁移。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --add-module=../ngx_cache_purge-1.3/  --with-http_stub_status_module --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module</span><br></pre></td></tr></table></figure>
<h2 id="2-2、Mysql"><a href="#2-2、Mysql" class="headerlink" title="2.2、Mysql"></a>2.2、Mysql</h2><p>在新的服务器安装<code>Mysql</code>服务，然后导入sql文件即可：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u$db_user <span class="operator">-</span>p$db_password $db_name <span class="operator">|</span> gzip <span class="operator">&gt;</span> <span class="operator">/</span>home<span class="operator">/</span>firbackup<span class="operator">/</span>halodb.sql.gz</span><br></pre></td></tr></table></figure>
<h1 id="叁、资源数据"><a href="#叁、资源数据" class="headerlink" title="叁、资源数据"></a>叁、资源数据</h1><p>对于资源数据，主要是<code>halo</code>产生的主题以及上传的文章的图片等等。就直接采用压缩打包，然后发送到新服务器再解压即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar czvf /home/firbackup/halo.tar.gz  /root/.halo</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果在同一个内网，记得使用内网ip，速度会更快哦</span></span><br><span class="line">scp halo.tar.gz  root@ip.ip.ip.ip:/root/</span><br></pre></td></tr></table></figure>
<p>然后再解压到<code>/root/.halo</code> 文件夹即可</p>
<h1 id="肆、重新启动"><a href="#肆、重新启动" class="headerlink" title="肆、重新启动"></a>肆、重新启动</h1><p>配置域名解析和相应的安全策略以及安装<code>JDK</code>之后，你就可以重新启动<code>halo</code>服务就好，到这里站点迁移工作就完成了。</p>
<hr>
<h1 id="【后面的话】"><a href="#【后面的话】" class="headerlink" title="【后面的话】"></a>【<strong>后面的话</strong>】</h1><p>日常备份也就是应用的配置文件以及应用产生的必要数据的备份。我这边的方案是定时打包压缩之后发送到邮箱中。下面给出具体脚本：</p>
<h2 id="安装配置mailx"><a href="#安装配置mailx" class="headerlink" title="安装配置mailx"></a>安装配置<code>mailx</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install mailx</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/mail.rc</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加如下配置</span></span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore</span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/root/.certs/   <span class="comment">#使用命令find / -name &quot;cert*.db&quot; 查找位置（根据自身系统而定）</span></span><br><span class="line"><span class="comment">#weikeyi 发送email的设置</span></span><br><span class="line"><span class="built_in">set</span> from=youremail@163.com  <span class="comment">#163邮箱账号</span></span><br><span class="line"><span class="built_in">set</span> smtp=smtps://smtp.163.com:465   <span class="comment">###smtp服务商#端口465#smtps协议</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=youremail@163.com  <span class="comment">#与上邮箱相同</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=yourpasswd   <span class="comment">#自己的授权码#非邮箱密码</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login</span><br></pre></td></tr></table></figure>
<p>如果在测试执行脚本，发现发送报错的话，那就是证书有问题，只需要在上面提到的<code>/root/.certs/</code>文件夹中放置<code>163邮箱</code>的证书即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.11:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 236028/17228757</span><br><span class="line">. . . message not sent.</span><br><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.16:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 6966/507305</span><br><span class="line">. . . message not sent.</span><br><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.11:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 324/22426</span><br><span class="line">. . . message not sent.</span><br><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.14:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 48/2440</span><br><span class="line">. . . message not sent.</span><br><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.17:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 342/10021</span><br><span class="line">. . . message not sent.</span><br></pre></td></tr></table></figure>

<h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#firbackup 文件和 and database</span></span><br><span class="line"><span class="comment">###################删除halo备份#################</span></span><br><span class="line">rm -fr /home/firbackup/halo_$(date -d <span class="string">&#x27;7 days ago&#x27;</span> +%Y%m%d).tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">###################备份halo#################</span></span><br><span class="line">tar czvf /home/firbackup/halo_$(date +%Y%m%d).tar.gz  /root/.halo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;halo备份的下载地址：http://eelve.com/bp/&#x27;</span>halo_$(date +%Y%m%d).tar.gz &gt;&gt; /home/firbackup/info_$(date +%Y%m%d).txt</span><br><span class="line"></span><br><span class="line"><span class="comment">###################删除备份数据库####################</span></span><br><span class="line">rm -fr /home/firbackup/halodb_$(date -d <span class="string">&#x27;7 days ago&#x27;</span> +%Y%m%d).sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">###################备份halodb数据库####################</span></span><br><span class="line">db_user=<span class="string">&quot;root&quot;</span>       <span class="comment">#输入你的数据库用户名 </span></span><br><span class="line">db_password=<span class="string">&quot;root&quot;</span> <span class="comment">#输入你的数据库密码</span></span><br><span class="line">db_name=<span class="string">&quot;halodb&quot;</span>       <span class="comment">#输入你要备份的数据库名   </span></span><br><span class="line">mysqldump -u<span class="variable">$db_user</span> -p<span class="variable">$db_password</span> <span class="variable">$db_name</span> | gzip &gt; /home/firbackup/halodb_$(date +%Y%m%d).sql.gz</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;halo数据库备份的下载地址：http://eelve.com/bp/&#x27;</span>halodb_$(date +%Y%m%d).sql.gz &gt;&gt; /home/firbackup/info_$(date +%Y%m%d).txt </span><br><span class="line"></span><br><span class="line"><span class="comment">###################准备开始发邮件###############</span></span><br><span class="line"><span class="built_in">cd</span> /home/firbackup/</span><br><span class="line"></span><br><span class="line"><span class="comment">###################邮件发halo数据库备份###############</span></span><br><span class="line">mailx -v -s <span class="string">&quot;请注意查收&quot;</span>$(date +%Y%m%d)<span class="string">&quot;halo数据库的相关备份&quot;</span> -a halodb_$(date +%Y%m%d).sql.gz  i@eelve.com&lt;halodb_$(date +%Y%m%d).sql.gz</span><br></pre></td></tr></table></figure>
<h2 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@fir /home]<span class="comment">#crontab -e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##每天定时01:00:00 执行脚本 /home/firbackup.sh</span></span><br><span class="line">0 1 * * * sh /home/firbackup.sh</span><br><span class="line"><span class="comment">##每天凌晨2点重启springboot应用</span></span><br><span class="line">0 2 * * * sh /home/auto_restart_springboots.sh</span><br></pre></td></tr></table></figure>
<p>到这里你只需要去邮箱中下载备份的数据就好了。另外邮箱发送附件是有大小限制的，每个邮箱的具体情况不一。另外对于文章中的图片数据可以上传到<code>又拍云</code>等云存储中即可。最后一句话<code>道路千万条，数据备份第一条</code>。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>lifeme</category>
      </categories>
      <tags>
        <tag>lifeme</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Filebeat初体验</title>
    <url>/posts/1d8b943d.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】<a href="https://eelve.com/posts/d1a5ff40.html">前文</a>介绍了Elastic Stack的Beats家族，今天我们就来体验其中的专门用于采集文件的<a href="https://www.elastic.co/cn/beats/filebeat">Filebeat</a>，走起。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br><span class="line"><span class="attr">Kibana:</span> <span class="string">kibana-7.6.0</span></span><br><span class="line"><span class="string">Filebeat：filebeat-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、Filebeat介绍"><a href="#贰、Filebeat介绍" class="headerlink" title="贰、Filebeat介绍"></a>贰、Filebeat介绍</h1><p>Filebeat是一种轻量型日志采集器，具有以下特点</p>
<ul>
<li>汇总、“tail -f”和搜索：启动 Filebeat 后，打开 Logs UI，直接在 Kibana 中观看对您的文件进行 tail 操作的过程。通过搜索栏按照服务、应用程序、主机、数据中心或者其他条件进行筛选，以跟踪您的全部汇总日志中的异常行为。</li>
</ul>
<p><img src="https://image.eelve.com/eblog/animated-gif-logs-ui-optimized-7bf3c88845c84ee3a0564f7a608726b5.gif" alt="animated-gif-logs-ui-optimized"></p>
<ul>
<li><p>性能稳健，不错过任何检测信号：无论在任何环境中，随时都潜伏着应用程序中断的风险。Filebeat 能够读取并转发日志行，如果出现中断，还会在一切恢复正常后，从中断前停止的位置继续开始。</p>
</li>
<li><p>Filebeat 让简单的事情简单化：Filebeat 内置有多种模块（Apache、Cisco ASA、Microsoft Azure、NGINX、MySQL 等等），可针对常见格式的日志大大简化收集、解析和可视化过程，只需一条命令即可。之所以能实现这一点，是因为它将自动默认路径（因操作系统而异）与 Elasticsearch 采集节点管道的定义和 Kibana 仪表板组合在一起。不仅如此，数个 Filebeat 模块还包括预配置的 Machine Learning 任务。 </p>
<ul>
<li>系统</li>
</ul>
<p><img src="https://image.eelve.com/eblog/filebeat-modules-system-1fcfe648ed244a3eb6981805e48eb805.jpg" alt="filebeat-modules-system"></p>
<ul>
<li>NGINX</li>
</ul>
<p><img src="https://image.eelve.com/eblog/filebeat-modules-nginx-60aafcc8bf6e416e8489e30b85e84446.jpg" alt="filebeat-modules-nginx"></p>
<ul>
<li>MySQL</li>
</ul>
<p><img src="https://image.eelve.com/eblog/filebeat-modules-mysql-532077e16cc3495291fbe4c7b15e7f36.jpg" alt="filebeat-modules-mysql"></p>
<ul>
<li>Auditd</li>
</ul>
<p><img src="https://image.eelve.com/eblog/filebeat-modules-auditd-593f8272484b4aa4ac01bc3fcd596d43.jpg" alt="filebeat-modules-auditd"></p>
</li>
</ul>
<ul>
<li><p>容器就绪和云端就绪：正在对所有内容进行容器化，或者正在云端环境中运行？通过 Elastic Stack，可以轻松地监测容器和云服务。在 Kubernetes、Docker 或云端部署中部署 Filebeat，即可获得所有的日志流：信息十分完整，包括日志流的 pod、容器、节点、VM、主机以及自动关联时用到的其他元数据。此外，Beats Autodiscover 功能可检测到新容器，并使用恰当的 Filebeat 模块对这些容器进行自适应监测。 </p>
</li>
<li><p>它不会导致您的管道过载：当将数据发送到 Logstash 或 Elasticsearch 时，Filebeat 使用背压敏感协议，以应对更多的数据量。如果 Logstash 正在忙于处理数据，则会告诉 Filebeat 减慢读取速度。一旦拥堵得到解决，Filebeat 就会恢复到原来的步伐并继续传输数据。 </p>
</li>
</ul>
<p><img src="https://image.eelve.com/eblog/filebeat-diagram-71397eba004043f3a0593620b0139364.svg" alt="filebeat-diagram"></p>
<ul>
<li><p>输送至 Elasticsearch 或 Logstash。在 Kibana 中实现可视化。</p>
<p>Filebeat 是 Elastic Stack 的一部分，因此能够与 Logstash、Elasticsearch 和 Kibana 无缝协作。无论您要使用 Logstash 转换或充实日志和文件，还是在 Elasticsearch 中随意处理一些数据分析，亦或在 Kibana 中构建和分享仪表板，Filebeat 都能轻松地将您的数据发送至最关键的地方。</p>
</li>
</ul>
<h1 id="叁-Filebeat安装"><a href="#叁-Filebeat安装" class="headerlink" title="叁 Filebeat安装"></a>叁 Filebeat安装</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p><a href="https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.6.0-linux-x86_64.tar.gz">filebeat-7.6.0-linux-x86_64</a></p>
<h2 id="3-2-解压filebeat-7-6-0-linux-x86-64"><a href="#3-2-解压filebeat-7-6-0-linux-x86-64" class="headerlink" title="3.2 解压filebeat-7.6.0-linux-x86_64"></a>3.2 解压filebeat-7.6.0-linux-x86_64</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf filebeat-7.6.0-linux-x86_64.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="3-3-filebeat配置"><a href="#3-3-filebeat配置" class="headerlink" title="3.3 filebeat配置"></a>3.3 filebeat配置</h2><p>我们可以针对不同的采集项自定义配置，同时方便测试和展示。</p>
<h2 id="3-4-采集控制台日志"><a href="#3-4-采集控制台日志" class="headerlink" title="3.4 采集控制台日志"></a>3.4 采集控制台日志</h2><ul>
<li>新建std.yml配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: stdin</span><br><span class="line">  enabled: true</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.console:</span><br><span class="line">  pretty: true</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">./filebeat  -e -c std.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2020-03-07T08:40:10.807Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;7.6.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;agent&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;4f346e18-c77b-4a8c-ae9a-f97b2007be60&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;7.6.0&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;ephemeral_id&quot;: &quot;2b5dd30b-1a9a-454a-a9f1-0a428fd6c6da&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;192.168.237.11&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;ecs&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;1.4.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;message&quot;: &quot;hello&quot;,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;offset&quot;: 0,</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;stdin&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;192.168.237.11&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-采集nginx日志"><a href="#3-5-采集nginx日志" class="headerlink" title="3.5 采集nginx日志"></a>3.5 采集nginx日志</h2><ul>
<li><p>启动nginx</p>
<p>这里如果没有安装的话，可以自行安装配置，然后启动nginx</p>
</li>
<li><p>新建nginx.yml配置</p>
</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /usr/local/nginx/logs/*.log</span><br><span class="line">  tags: [&quot;nginx&quot;]</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://192.168.237.11:9200&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>启动Elasticsearch</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./elasticsearch</span><br></pre></td></tr></table></figure>
<ul>
<li>启动Filebeat</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ ./filebeat  -e -c nginx.yml</span><br><span class="line"></span><br><span class="line">2020-03-07T17:11:05.821+0800	INFO	instance/beat.go:298	Setup Beat: filebeat; Version: 7.6.0</span><br><span class="line">2020-03-07T17:11:05.821+0800	INFO	[index-management]	idxmgmt/std.go:182	Set output.elasticsearch.index to &#x27;filebeat-7.6.0&#x27; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:05.821+0800	INFO	elasticsearch/client.go:174	Elasticsearch url: http://192.168.237.11:9200</span><br><span class="line">2020-03-07T17:11:05.821+0800	INFO	[publisher]	pipeline/module.go:110	Beat name: 192.168.237.11</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	[monitoring]	log/log.go:118	Starting metrics logging every 30s</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	instance/beat.go:439	filebeat start running.</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	registrar/registrar.go:145	Loading registrar data from /usr/elastic/filebeat/data/registry/filebeat/data.json</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	registrar/registrar.go:152	States Loaded from registrar: 3</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	crawler/crawler.go:72	Loading Inputs: 1</span><br><span class="line">2020-03-07T17:11:05.823+0800	INFO	log/input.go:152	Configured paths: [/usr/local/nginx/logs/*.log]</span><br><span class="line">2020-03-07T17:11:05.823+0800	INFO	input/input.go:114	Starting input of type: log; ID: 11194696681404026286 </span><br><span class="line">2020-03-07T17:11:05.823+0800	INFO	crawler/crawler.go:106	Loading and starting Inputs completed. Enabled inputs: 1</span><br><span class="line">2020-03-07T17:11:15.826+0800	INFO	log/harvester.go:297	Harvester started for file: /usr/local/nginx/logs/access.log</span><br><span class="line">2020-03-07T17:11:16.828+0800	INFO	pipeline/output.go:95	Connecting to backoff(elasticsearch(http://192.168.237.11:9200))</span><br><span class="line">2020-03-07T17:11:16.831+0800	INFO	elasticsearch/client.go:757	Attempting to connect to Elasticsearch version 7.6.0</span><br><span class="line">2020-03-07T17:11:16.859+0800	INFO	[license]	licenser/es_callback.go:50	Elasticsearch license: Basic</span><br><span class="line">2020-03-07T17:11:16.891+0800	INFO	[index-management]	idxmgmt/std.go:258	Auto ILM enable success.</span><br><span class="line">2020-03-07T17:11:16.892+0800	INFO	[index-management.ilm]	ilm/std.go:139	do not generate ilm policy: exists=true, overwrite=false</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:271	ILM policy successfully loaded.</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:410	Set setup.template.name to &#x27;&#123;filebeat-7.6.0 &#123;now/d&#125;-000001&#125;&#x27; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:415	Set setup.template.pattern to &#x27;filebeat-7.6.0-*&#x27; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:449	Set settings.index.lifecycle.rollover_alias in template to &#123;filebeat-7.6.0 &#123;now/d&#125;-000001&#125; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:453	Set settings.index.lifecycle.name in template to &#123;filebeat &#123;&quot;policy&quot;:&#123;&quot;phases&quot;:&#123;&quot;hot&quot;:&#123;&quot;actions&quot;:&#123;&quot;rollover&quot;:&#123;&quot;max_age&quot;:&quot;30d&quot;,&quot;max_size&quot;:&quot;50gb&quot;&#125;&#125;&#125;&#125;&#125;&#125;&#125; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:16.895+0800	INFO	template/load.go:89	Template filebeat-7.6.0 already exists and will not be overwritten.</span><br><span class="line">2020-03-07T17:11:16.895+0800	INFO	[index-management]	idxmgmt/std.go:295	Loaded index template.</span><br><span class="line">2020-03-07T17:11:17.097+0800	INFO	[index-management]	idxmgmt/std.go:306	Write alias successfully generated.</span><br><span class="line">2020-03-07T17:11:17.097+0800	INFO	pipeline/output.go:105	Connection to backoff(elasticsearch(http://192.168.237.11:9200)) established</span><br></pre></td></tr></table></figure>
<ul>
<li>刷新页面观察结果</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2020030701-f6f0c410456c47e7872c7719e1fe4205.png" alt="2020030701"><br><img src="https://image.eelve.com/eblog/2020030702-c17fe51d42ca47a3b4c452fa14131e92.png" alt="2020030702"></p>
<p>我们可以看到采集已经成功，并且我们配置的tags也已经成功了</p>
<h2 id="3-6-使用nginx-module采集nginx日志"><a href="#3-6-使用nginx-module采集nginx日志" class="headerlink" title="3.6 使用nginx module采集nginx日志"></a>3.6 使用nginx module采集nginx日志</h2><ul>
<li>开启filebeat的nginx module</li>
</ul>
<p>前面要想实现日志数据的读取以及处理都是自己手动配置的，其实，在Filebeat中，有大量的Module，可以简化我们的配置，直接就可以使用，如下：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ ./filebeat modules list</span><br><span class="line">Enabled:</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">activemq</span><br><span class="line">apache</span><br><span class="line">auditd</span><br><span class="line">aws</span><br><span class="line">azure</span><br><span class="line">cef</span><br><span class="line">cisco</span><br><span class="line">coredns</span><br><span class="line">elasticsearch</span><br><span class="line">envoyproxy</span><br><span class="line">googlecloud</span><br><span class="line">haproxy</span><br><span class="line">ibmmq</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">iptables</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">misp</span><br><span class="line">mongodb</span><br><span class="line">mssql</span><br><span class="line">mysql</span><br><span class="line">nats</span><br><span class="line">netflow</span><br><span class="line">osquery</span><br><span class="line">panw</span><br><span class="line">postgresql</span><br><span class="line">rabbitmq</span><br><span class="line">redis</span><br><span class="line">santa</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">traefik</span><br><span class="line">zeek</span><br></pre></td></tr></table></figure>
<p>可以看到我这里的nginx modules已经开启了，但是默认是没有开启的，如果需要启用需要进行enable操作：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">/filebeat modules enable nginx #启动</span><br><span class="line">./filebeat modules disable nginx #禁用</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>nginx module 配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ cd modules.d</span><br><span class="line">[iio@192 modules.d]$ vi nginx.yml </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Module: nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Docs: https://www.elastic.co/guide/en/beats/filebeat/7.6/filebeat-module-nginx.html</span></span><br><span class="line"></span><br><span class="line">- module: nginx</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Access logs</span></span><br><span class="line">  access:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/access.log*&quot;]</span><br><span class="line">    # Set custom paths for the log files. If left empty,</span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    #var.paths:</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Error logs</span></span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/error.log*&quot;]</span><br><span class="line"></span><br><span class="line">    # Set custom paths for the log files. If left empty,</span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    #var.paths:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置filebeat</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ vi nginxmodule.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line"><span class="meta">#</span><span class="bash">- <span class="built_in">type</span>: <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  enabled: <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  paths:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    - /usr/<span class="built_in">local</span>/nginx/logs/*.<span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  tags: [<span class="string">&quot;nginx&quot;</span>]</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://192.168.237.11:9200&quot;]</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ ./filebeat  -e -c nginxmodule.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>查看结果</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2020030703-14356801335d4ea8a4256bce80a9bf5f.png" alt="2020030703"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;msg&quot;: &quot;2020-02-29 02:30:26,634 [myid:] - WARN  [NIOServerCxn.Factory:0.0.0.0\&#x2F;0.0.0.0:2181:NIOServerCnxn@376] - Unable to read additional data from client sessionid 0x0, likely client has closed socket&quot;,</span><br><span class="line">	&quot;rawmsg&quot;: &quot;2020-02-29 02:30:26,634 [myid:] - WARN  [NIOServerCxn.Factory:0.0.0.0\&#x2F;0.0.0.0:2181:NIOServerCnxn@376] - Unable to read additional data from client sessionid 0x0, likely client has closed socket&quot;,</span><br><span class="line">	&quot;timereported&quot;: &quot;2020-02-29T10:30:26.635186+08:00&quot;,</span><br><span class="line">	&quot;hostname&quot;: &quot;izbp1a4b02uc2nj550yzs1z&quot;,</span><br><span class="line">	&quot;syslogtag&quot;: &quot;journal:&quot;,</span><br><span class="line">	&quot;inputname&quot;: &quot;imjournal&quot;,</span><br><span class="line">	&quot;fromhost&quot;: &quot;izbp1a4b02uc2nj550yzs1z&quot;,</span><br><span class="line">	&quot;fromhost-ip&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">	&quot;pri&quot;: &quot;14&quot;,</span><br><span class="line">	&quot;syslogfacility&quot;: &quot;1&quot;,</span><br><span class="line">	&quot;syslogseverity&quot;: &quot;6&quot;,</span><br><span class="line">	&quot;timegenerated&quot;: &quot;2020-02-29T10:30:26.635186+08:00&quot;,</span><br><span class="line">	&quot;programname&quot;: &quot;journal&quot;,</span><br><span class="line">	&quot;protocol-version&quot;: &quot;0&quot;,</span><br><span class="line">	&quot;structured-data&quot;: &quot;-&quot;,</span><br><span class="line">	&quot;app-name&quot;: &quot;journal&quot;,</span><br><span class="line">	&quot;procid&quot;: &quot;-&quot;,</span><br><span class="line">	&quot;msgid&quot;: &quot;-&quot;,</span><br><span class="line">	&quot;uuid&quot;: null,</span><br><span class="line">	&quot;$!&quot;: &#123;</span><br><span class="line">		&quot;_UID&quot;: &quot;0&quot;,</span><br><span class="line">		&quot;_GID&quot;: &quot;0&quot;,</span><br><span class="line">		&quot;_CAP_EFFECTIVE&quot;: &quot;1fffffffff&quot;,</span><br><span class="line">		&quot;_BOOT_ID&quot;: &quot;1c6d86e336cc4dc7b733ea3c53351d65&quot;,</span><br><span class="line">		&quot;_MACHINE_ID&quot;: &quot;f0f31005fb5a436d88e3c6cbf54e25aa&quot;,</span><br><span class="line">		&quot;_HOSTNAME&quot;: &quot;izbp1a4b02uc2nj550yzs1z&quot;,</span><br><span class="line">		&quot;_SYSTEMD_SLICE&quot;: &quot;system.slice&quot;,</span><br><span class="line">		&quot;PRIORITY&quot;: &quot;6&quot;,</span><br><span class="line">		&quot;_TRANSPORT&quot;: &quot;journal&quot;,</span><br><span class="line">		&quot;CONTAINER_ID_FULL&quot;: &quot;bdc76f9b56dbeb3f5005ca110d72945c6b949178b6948345febf5bc657433703&quot;,</span><br><span class="line">		&quot;CONTAINER_NAME&quot;: &quot;zookeeper&quot;,</span><br><span class="line">		&quot;CONTAINER_TAG&quot;: &quot;bdc76f9b56db&quot;,</span><br><span class="line">		&quot;CONTAINER_ID&quot;: &quot;bdc76f9b56db&quot;,</span><br><span class="line">		&quot;_PID&quot;: &quot;16046&quot;,</span><br><span class="line">		&quot;_COMM&quot;: &quot;dockerd-current&quot;,</span><br><span class="line">		&quot;_EXE&quot;: &quot;\&#x2F;usr\&#x2F;bin\&#x2F;dockerd-current&quot;,</span><br><span class="line">		&quot;_CMDLINE&quot;: &quot;\&#x2F;usr\&#x2F;bin\&#x2F;dockerd-current --add-runtime docker-runc&#x3D;\&#x2F;usr\&#x2F;libexec\&#x2F;docker\&#x2F;docker-runc-current --default-runtime&#x3D;docker-runc --exec-opt native.cgroupdriver&#x3D;systemd --userland-proxy-path&#x3D;\&#x2F;usr\&#x2F;libexec\&#x2F;docker\&#x2F;docker-proxy-current --init-path&#x3D;\&#x2F;usr\&#x2F;libexec\&#x2F;docker\&#x2F;docker-init-current --seccomp-profile&#x3D;\&#x2F;etc\&#x2F;docker\&#x2F;seccomp.json --selinux-enabled --log-driver&#x3D;journald --signature-verification&#x3D;false --storage-driver overlay2&quot;,</span><br><span class="line">		&quot;_SYSTEMD_CGROUP&quot;: &quot;\&#x2F;system.slice\&#x2F;docker.service&quot;,</span><br><span class="line">		&quot;_SYSTEMD_UNIT&quot;: &quot;docker.service&quot;,</span><br><span class="line">		&quot;MESSAGE&quot;: &quot;2020-02-29 02:30:26,634 [myid:] - WARN  [NIOServerCxn.Factory:0.0.0.0\&#x2F;0.0.0.0:2181:NIOServerCnxn@376] - Unable to read additional data from client sessionid 0x0, likely client has closed socket&quot;,</span><br><span class="line">		&quot;_SOURCE_REALTIME_TIMESTAMP&quot;: &quot;1582943426634852&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; &#123;</span><br><span class="line">	&quot;_index&quot;: &quot;filebeat-7.6.0-2020.03.07-000001&quot;,</span><br><span class="line">	&quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">	&quot;_id&quot;: &quot;hBtStHAB2wqxgggKYbTw&quot;,</span><br><span class="line">	&quot;_version&quot;: 1,</span><br><span class="line">	&quot;_score&quot;: 1,</span><br><span class="line">	&quot;_source&quot;: &#123;</span><br><span class="line">		&quot;agent&quot;: &#123;</span><br><span class="line">			&quot;hostname&quot;: &quot;192.168.237.11&quot;,</span><br><span class="line">			&quot;id&quot;: &quot;4f346e18-c77b-4a8c-ae9a-f97b2007be60&quot;,</span><br><span class="line">			&quot;ephemeral_id&quot;: &quot;b9759c98-cfbe-4240-8c7d-1e64c1caeec3&quot;,</span><br><span class="line">			&quot;type&quot;: &quot;filebeat&quot;,</span><br><span class="line">			&quot;version&quot;: &quot;7.6.0&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;nginx&quot;: &#123;</span><br><span class="line">			&quot;access&quot;: &#123;</span><br><span class="line">				&quot;remote_ip_list&quot;: [</span><br><span class="line">					&quot;192.168.237.1&quot;</span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;log&quot;: &#123;</span><br><span class="line">			&quot;file&quot;: &#123;</span><br><span class="line">				&quot;path&quot;: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;offset&quot;: 83567</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;source&quot;: &#123;</span><br><span class="line">			&quot;address&quot;: &quot;192.168.237.1&quot;,</span><br><span class="line">			&quot;ip&quot;: &quot;192.168.237.1&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;fileset&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;access&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;url&quot;: &#123;</span><br><span class="line">			&quot;original&quot;: &quot;&#x2F;&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;input&quot;: &#123;</span><br><span class="line">			&quot;type&quot;: &quot;log&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;@timestamp&quot;: &quot;2020-03-07T09:27:40.000Z&quot;,</span><br><span class="line">		&quot;ecs&quot;: &#123;</span><br><span class="line">			&quot;version&quot;: &quot;1.4.0&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;service&quot;: &#123;</span><br><span class="line">			&quot;type&quot;: &quot;nginx&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;host&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;192.168.237.11&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;http&quot;: &#123;</span><br><span class="line">			&quot;request&quot;: &#123;</span><br><span class="line">				&quot;referrer&quot;: &quot;-&quot;,</span><br><span class="line">				&quot;method&quot;: &quot;GET&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;response&quot;: &#123;</span><br><span class="line">				&quot;status_code&quot;: 304,</span><br><span class="line">				&quot;body&quot;: &#123;</span><br><span class="line">					&quot;bytes&quot;: 0</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;version&quot;: &quot;1.1&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;event&quot;: &#123;</span><br><span class="line">			&quot;timezone&quot;: &quot;+08:00&quot;,</span><br><span class="line">			&quot;created&quot;: &quot;2020-03-07T09:27:41.512Z&quot;,</span><br><span class="line">			&quot;module&quot;: &quot;nginx&quot;,</span><br><span class="line">			&quot;dataset&quot;: &quot;nginx.access&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;user&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;-&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;user_agent&quot;: &#123;</span><br><span class="line">			&quot;original&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.132 Safari&#x2F;537.36&quot;,</span><br><span class="line">			&quot;os&quot;: &#123;</span><br><span class="line">				&quot;name&quot;: &quot;Windows&quot;,</span><br><span class="line">				&quot;version&quot;: &quot;10&quot;,</span><br><span class="line">				&quot;full&quot;: &quot;Windows 10&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;name&quot;: &quot;Chrome&quot;,</span><br><span class="line">			&quot;device&quot;: &#123;</span><br><span class="line">				&quot;name&quot;: &quot;Other&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;version&quot;: &quot;80.0.3987.132&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们开用使用filebeat提供的modules采集nginx日志也成功,而且可以看到展示的信息也更加完善了。可以看到filebeat提供的各种modules就是帮我们做了一些解析工作，其他modules的用法类似。</p>
<h2 id="3-7-使用Kibana展示"><a href="#3-7-使用Kibana展示" class="headerlink" title="3.7 使用Kibana展示"></a>3.7 使用Kibana展示</h2><ul>
<li>修改filebeat配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ vi iio.yml </span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line"><span class="meta">#</span><span class="bash">- <span class="built_in">type</span>: <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  enabled: <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  paths:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    - /usr/<span class="built_in">local</span>/nginx/logs/*.<span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  tags: [<span class="string">&quot;nginx&quot;</span>]</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://192.168.237.11:9200&quot;]</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: false</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;192.168.237.11:5601&quot;</span><br><span class="line">~   </span><br></pre></td></tr></table></figure>
<ul>
<li>启动Kibana</li>
</ul>
<p>下面的安装仪表板依赖Kibana，也就是Kibana必须启动才能安装仪表盘</p>
<ul>
<li>安装仪表盘</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装仪表盘到Kibana</span><br><span class="line">.&#x2F;metricbeat setup --dashboards</span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2020030704-84aabcd7f21a4af0ab1ccb694e2f5f47.png" alt="2020030704"></p>
<ul>
<li>启动Filebeat</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">./filebeat  -e -c iio.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>观察结果</li>
</ul>
<p><img src="https://image.eelve.com/eblog/2020030705-77c1f59279aa40d4b8319560da4a6ae5.png" alt="2020030705"><br><img src="https://image.eelve.com/eblog/2020030706-9f858efbcaba4dd898b07e54c2f42a0d.png" alt="2020030706"></p>
<p>可以看到Kibana内置的nginx的仪表盘的展示情况，展示相当仿佛，并且还可以随着时间变化而刷新</p>
<h1 id="肆、Filebeat工作原理"><a href="#肆、Filebeat工作原理" class="headerlink" title="肆、Filebeat工作原理"></a>肆、Filebeat工作原理</h1><p>Filebeat由两个主要组件组成：prospector 和 harvester。</p>
<ul>
<li><p>harvester：</p>
<ul>
<li>负责读取单个文件的内容。</li>
<li>如果文件在读取时被删除或重命名，Filebeat将继续读取文件。</li>
</ul>
</li>
<li><p>prospector：</p>
<ul>
<li>prospector 负责管理harvester并找到所有要读取的文件来源。</li>
<li>如果输入类型为日志，则查找器将查找路径匹配的所有文件，并为每个文件启动一个harvester。</li>
<li>Filebeat目前支持两种prospector类型：log和stdin。</li>
</ul>
</li>
<li><p>Filebeat如何保持文件的状态</p>
<ul>
<li>Filebeat 保存每个文件的状态并经常将状态刷新到磁盘上的注册文件中。</li>
<li>该状态用于记住harvester正在读取的最后偏移量，并确保发送所有日志行。</li>
<li>如果输出（例如Elasticsearch或Logstash）无法访问，Filebeat会跟踪最后发送的行，并在输出再次可用时继续读取文件。</li>
<li>在Filebeat运行时，每个prospector内存中也会保存的文件状态信息，当重新启动Filebeat时，将使用注册</li>
<li>文件的数据来重建文件状态，Filebeat将每个harvester在从保存的最后偏移量继续读取。</li>
<li>文件状态记录在data/registry文件中。</li>
</ul>
<p>```shell script<br>启动命令<br>./filebeat -e -c itcast.yml<br>./filebeat -e -c itcast.yml -d “publish”<br>#参数说明</p>
</li>
<li><p>e: 输出到标准输出,默认输出到syslog和logs下</p>
</li>
<li><p>c: 指定配置文件</p>
</li>
<li><p>d: 输出debug信息</p>
</li>
</ul>
<p>#测试： ./filebeat -e -c iio.yml -d “publish”</p>
<pre><code>
---

【**后面的话**】在本文中我们全面的体验了一下filebeat，还和Kibana结合应用了，我们可以看到filebeat和elk三大剑客整合的非常好，特别是Kibana提供了丰富的仪表盘，大大的方便了我们展示。后面还有再结合一下Logstash，使用以下过滤功能。

---

![薏米笔记](https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png)
</code></pre>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Beats</tag>
        <tag>FileBeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Kibana初体验</title>
    <url>/posts/b84d7094.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前面已经安装好了Elasticsearch和Logstash，今天就来<a href="https://www.elastic.co/cn/kibana">Kibana</a>进行一下初步体验。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br><span class="line"><span class="attr">Kibana:</span> <span class="string">kibana-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、Kibana介绍"><a href="#贰、Kibana介绍" class="headerlink" title="贰、Kibana介绍"></a>贰、Kibana介绍</h1><p><img src="https://image.eelve.com/eblog/illustrated-screenshot-hero-kibana-ab9ac4d9e6e748fda40fbdff14591bc6.png" alt="illustrated-screenshot-hero-kibana"></p>
<pre><code>Kibana是了解 Elastic Stack 的窗口。

通过 Kibana，您可以对自己的 Elasticsearch 进行可视化，还可以在 Elastic Stack 中进行导航，这样您便可以进行各种操作了，从跟踪查询负载，到理解请求如何流经您的整个应用，都能轻松完成。 
</code></pre>
<p><strong>可视化和分析：</strong> Kibana 让您能够自由地选择如何呈现自己的数据，一张图片胜过千万行日志，可以用下面几个特点来阐述：</p>
<p><img src="https://image.eelve.com/eblog/animated-gif-lens-drag-and-drop-150ecdc9e8314ff798ae5958edac5963.gif" alt="animated-gif-lens-drag-and-drop"></p>
<ul>
<li><p><strong>基本内容：</strong> Kibana 核心产品搭载了一批经典功能：柱状图、线状图、饼图、旭日图，等等。当然啦，您还可以搜索自己的所有文档。            </p>
<p><img src="https://image.eelve.com/eblog/kibana-basics-with-vega-87818e2dc2df4800bd116de2eb8ecf39.jpg" alt="kibana-basics-with-vega"></p>
</li>
<li><p><strong>位置分析：</strong> 借助 Elastic Maps，探索位置数据，还可以获得创意并对定制图层和矢量形状进行可视化。            </p>
</li>
</ul>
<p><img src="https://image.eelve.com/eblog/geo-101256c64dc24b04abede3b0088ef4b8.jpg" alt="geo"></p>
<ul>
<li><strong>时间序列：</strong> 借助精选的时序数据 UI，对您 Elasticsearch 中的数据执行高级时间序列分析。您可以利用功能强大、简单易学的表达式来描述查询、转换和可视化。</li>
</ul>
<p><img src="https://image.eelve.com/eblog/kibana-timeseries-9cdce1ca946f44da9279e8c7577709e0.jpg" alt="kibana-timeseries"></p>
<ul>
<li><strong>Machine Learning：</strong> 借助非监督型 Machine Learning 功能来检测隐藏在您 Elasticsearch 数据中的异常情况并探索那些对它们有显著影响的属性。 </li>
</ul>
<p><img src="https://image.eelve.com/eblog/kibana-machine-learning-5148691b6084492fb47558ebbee177e1.jpg" alt="kibana-machine-learning"></p>
<ul>
<li><strong>图表和网络：</strong> 凭借搜索引擎的相关性功能，结合 Graph 关联分析，揭示您 Elasticsearch 数据中极其常见的关系。 </li>
</ul>
<p><img src="https://image.eelve.com/eblog/kibana-graph-e0e161ba7f3a4d6bb3c0640701e49a30.jpg" alt="kibana-graph"></p>
<h1 id="叁、Kibana安装"><a href="#叁、Kibana安装" class="headerlink" title="叁、Kibana安装"></a>叁、Kibana安装</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p><a href="https://artifacts.elastic.co/downloads/kibana/kibana-7.6.0-linux-x86_64.tar.gz">kibana-7.6.0-linux-x86_64.tar.gz</a></p>
<hr>
<h2 id="3-2-解压kibana-7-6-0-linux-x86-64-tar-gz"><a href="#3-2-解压kibana-7-6-0-linux-x86-64-tar-gz" class="headerlink" title="3.2 解压kibana-7.6.0-linux-x86_64.tar.gz"></a>3.2 解压kibana-7.6.0-linux-x86_64.tar.gz</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf kibana-7.6.0-linux-x86_64.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="3-3-kibana配置说明"><a href="#3-3-kibana配置说明" class="headerlink" title="3.3 kibana配置说明"></a>3.3 kibana配置说明</h2><p>默认配置配置不需要改，下面给出一个最小的配置</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">server.port: 5601 #浏览器访问端口</span><br><span class="line">server.host: &quot;192.168.237.11&quot;  #对外的服务地址</span><br><span class="line">elasticsearch.hosts: [&quot;http://192.168.237.11:9200&quot;] #这里为你的elasticsearch集群的地址</span><br></pre></td></tr></table></figure>
<h1 id="肆、Kibana简单使用"><a href="#肆、Kibana简单使用" class="headerlink" title="肆、Kibana简单使用"></a>肆、Kibana简单使用</h1><h2 id="4-1-启动Elasticsearch"><a href="#4-1-启动Elasticsearch" class="headerlink" title="4.1 启动Elasticsearch"></a>4.1 启动Elasticsearch</h2><p>首先我门要启动Elasticsearch，不然Kibana没有数据来源。同时检查是否启动成功，如下图</p>
<p><img src="https://image.eelve.com/eblog/2020030301-00f0ff22c74c4275be3690daa471cfa2.jpg" alt="2020030301"></p>
<h2 id="4-2-启动Kibana"><a href="#4-2-启动Kibana" class="headerlink" title="4.2 启动Kibana"></a>4.2 启动Kibana</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./kibana</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后观察日志</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">log   [13:27:27.338] [info][plugins-service] Plugin &quot;case&quot; is disabled.</span><br><span class="line">log   [13:27:33.648] [info][plugins-system] Setting up [37] plugins: [licensing,taskManager,siem,code,infra,encryptedSavedObjects,usageCollection,metrics,canvas,timelion,features,security,apm_oss,translations,reporting,uiActions,data,navigation,newsfeed,share,status_page,home,spaces,cloud,apm,graph,bfetch,kibana_legacy,management,dev_tools,eui_utils,inspector,expressions,visualizations,embeddable,advancedUiActions,dashboard_embeddable_container]</span><br><span class="line">log   [13:27:33.650] [info][licensing][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.652] [info][plugins][taskManager] Setting up plugin</span><br><span class="line">log   [13:27:33.667] [info][plugins][siem] Setting up plugin</span><br><span class="line">log   [13:27:33.667] [info][code][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.668] [info][infra][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.670] [info][encryptedSavedObjects][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.671] [warning][config][encryptedSavedObjects][plugins] Generating a random key for xpack.encryptedSavedObjects.encryptionKey. To be able to decrypt encrypted saved objects attributes after restart, please set xpack.encryptedSavedObjects.encryptionKey in kibana.yml</span><br><span class="line">log   [13:27:33.677] [info][plugins][usageCollection] Setting up plugin</span><br><span class="line">log   [13:27:33.679] [info][metrics][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.680] [info][canvas][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.687] [info][plugins][timelion] Setting up plugin</span><br><span class="line">log   [13:27:33.689] [info][features][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.690] [info][plugins][security] Setting up plugin</span><br><span class="line">log   [13:27:33.691] [warning][config][plugins][security] Generating a random key for xpack.security.encryptionKey. To prevent sessions from being invalidated on restart, please set xpack.security.encryptionKey in kibana.yml</span><br><span class="line">log   [13:27:33.691] [warning][config][plugins][security] Session cookies will be transmitted over insecure connections. This is not recommended.</span><br><span class="line">log   [13:27:33.714] [info][apm_oss][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.715] [info][plugins][translations] Setting up plugin</span><br><span class="line">log   [13:27:33.715] [info][data][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.722] [info][plugins][share] Setting up plugin</span><br><span class="line">log   [13:27:33.724] [info][home][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.730] [info][plugins][spaces] Setting up plugin</span><br><span class="line">log   [13:27:33.736] [info][cloud][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.738] [info][apm][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.915] [info][graph][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.921] [info][bfetch][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.933] [info][savedobjects-service] Waiting until all Elasticsearch nodes are compatible with Kibana before starting saved objects migrations...</span><br><span class="line">log   [13:27:33.933] [info][savedobjects-service] Starting saved objects migrations</span><br><span class="line">log   [13:27:34.115] [info][plugins-system] Starting [22] plugins: [licensing,taskManager,siem,code,infra,encryptedSavedObjects,usageCollection,metrics,canvas,timelion,features,security,apm_oss,translations,data,share,home,spaces,cloud,apm,graph,bfetch]</span><br><span class="line">log   [13:27:40.328] [info][status][plugin:kibana@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.346] [info][status][plugin:elasticsearch@7.6.0] Status changed from uninitialized to yellow - Waiting for Elasticsearch</span><br><span class="line">log   [13:27:40.348] [info][status][plugin:elasticsearch@7.6.0] Status changed from yellow to green - Ready</span><br><span class="line">log   [13:27:40.358] [info][status][plugin:xpack_main@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.392] [info][status][plugin:graph@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.426] [info][kibana-monitoring][monitoring] Starting monitoring stats collection</span><br><span class="line">log   [13:27:40.430] [info][status][plugin:monitoring@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.471] [info][status][plugin:spaces@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.507] [info][status][plugin:security@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.543] [info][status][plugin:searchprofiler@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.557] [info][status][plugin:ml@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.807] [info][status][plugin:tilemap@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.812] [info][status][plugin:watcher@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.836] [info][status][plugin:grokdebugger@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.856] [info][status][plugin:dashboard_mode@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.863] [info][status][plugin:logstash@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.891] [info][status][plugin:beats_management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.958] [info][status][plugin:apm_oss@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.000] [info][status][plugin:apm@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.071] [info][status][plugin:maps@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.083] [info][status][plugin:interpreter@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.122] [info][status][plugin:canvas@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.130] [info][status][plugin:license_management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.141] [info][status][plugin:index_management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.228] [info][status][plugin:console@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.238] [info][status][plugin:console_extensions@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.245] [info][status][plugin:index_lifecycle_management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.286] [info][status][plugin:kuery_autocomplete@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.304] [info][status][plugin:metrics@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.425] [info][status][plugin:infra@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.437] [info][plugins][taskManager][taskManager] TaskManager is identified by the Kibana UUID: ce42b997-a913-4d58-be46-bb1937feedd6</span><br><span class="line">log   [13:27:41.441] [info][status][plugin:task_manager@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.448] [info][status][plugin:rollup@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.547] [info][status][plugin:transform@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.555] [info][status][plugin:encryptedSavedObjects@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.605] [info][status][plugin:actions@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.677] [info][status][plugin:alerting@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.853] [info][status][plugin:siem@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.868] [info][status][plugin:remote_clusters@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.876] [info][status][plugin:cross_cluster_replication@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.937] [info][status][plugin:upgrade_assistant@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.994] [info][status][plugin:uptime@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.006] [info][status][plugin:oss_telemetry@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.022] [info][status][plugin:file_upload@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.032] [info][status][plugin:data@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.067] [info][status][plugin:lens@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.136] [info][status][plugin:snapshot_restore@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.151] [info][status][plugin:input_control_vis@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.164] [info][status][plugin:navigation@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.169] [info][status][plugin:management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.174] [info][status][plugin:kibana_react@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.178] [info][status][plugin:region_map@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.217] [info][status][plugin:telemetry@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.226] [info][status][plugin:metric_vis@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.230] [info][status][plugin:markdown_vis@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.399] [info][status][plugin:timelion@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.403] [info][status][plugin:ui_metric@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.406] [info][status][plugin:tagcloud@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.410] [info][status][plugin:table_vis@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.414] [info][status][plugin:vega@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.421] [warning][browser-driver][reporting] Enabling the Chromium sandbox provides an additional layer of protection.</span><br><span class="line">log   [13:27:44.878] [warning][reporting] Generating a random key for xpack.reporting.encryptionKey. To prevent pending reports from failing on restart, please set xpack.reporting.encryptionKey in kibana.yml</span><br><span class="line">log   [13:27:44.888] [info][status][plugin:reporting@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:44.970] [info][listening] Server running at http://192.168.237.11:5601</span><br><span class="line">log   [13:27:45.502] [info][server][Kibana][http] http server running at http://192.168.237.11:5601</span><br><span class="line">log   [13:27:45.549] [error][reporting] The Reporting plugin encountered issues launching Chromium in a self-test. You may have trouble generating reports.</span><br><span class="line">log   [13:27:45.549] [error][reporting] ErrorEvent &#123;</span><br><span class="line">target:</span><br><span class="line"> WebSocket &#123;</span><br><span class="line">   _events:</span><br><span class="line">    [Object: null prototype] &#123; open: [Function], error: [Function] &#125;,</span><br><span class="line">   _eventsCount: 2,</span><br><span class="line">   _maxListeners: undefined,</span><br><span class="line">   readyState: 3,</span><br><span class="line">   protocol: &#x27;&#x27;,</span><br><span class="line">   _binaryType: &#x27;nodebuffer&#x27;,</span><br><span class="line">   _closeFrameReceived: false,</span><br><span class="line">   _closeFrameSent: false,</span><br><span class="line">   _closeMessage: &#x27;&#x27;,</span><br><span class="line">   _closeTimer: null,</span><br><span class="line">   _closeCode: 1006,</span><br><span class="line">   _extensions: &#123;&#125;,</span><br><span class="line">   _receiver: null,</span><br><span class="line">   _sender: null,</span><br><span class="line">   _socket: null,</span><br><span class="line">   _isServer: false,</span><br><span class="line">   _redirects: 0,</span><br><span class="line">   url:</span><br><span class="line">    &#x27;ws://127.0.0.1:44598/devtools/browser/cde91cb8-faad-4730-9d12-57c1e8ffd49a&#x27;,</span><br><span class="line">   _req: null &#125;,</span><br><span class="line">type: &#x27;error&#x27;,</span><br><span class="line">message: &#x27;connect ECONNREFUSED 127.0.0.1:44598&#x27;,</span><br><span class="line">error:</span><br><span class="line"> &#123; Error: connect ECONNREFUSED 127.0.0.1:44598</span><br><span class="line">     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)</span><br><span class="line">   errno: &#x27;ECONNREFUSED&#x27;,</span><br><span class="line">   code: &#x27;ECONNREFUSED&#x27;,</span><br><span class="line">   syscall: &#x27;connect&#x27;,</span><br><span class="line">   address: &#x27;127.0.0.1&#x27;,</span><br><span class="line">   port: 44598 &#125; &#125;</span><br><span class="line">log   [13:27:45.557] [warning][reporting] See Chromium&#x27;s log output at &quot;/usr/elastic/kibana/data/headless_shell-linux/chrome_debug.log&quot;</span><br><span class="line">log   [13:27:45.559] [warning][reporting] Reporting plugin self-check generated a warning: Error: Could not close browser client handle!</span><br></pre></td></tr></table></figure>
<h2 id="4-3-浏览器访问"><a href="#4-3-浏览器访问" class="headerlink" title="4.3 浏览器访问"></a>4.3 浏览器访问</h2><p><img src="https://image.eelve.com/eblog/2020030302-e7c518603e69473a8438fb32a9454154.png" alt="2020030302"></p>
<p>下面我们继续操作，利用搭建Elasticsearch的时候添加的数据做一个可视化图表出来</p>
<p><img src="https://image.eelve.com/eblog/2020030306-5f167cf3142041ad944de9b7b0ff0eb9.png" alt="2020030306"></p>
<p><img src="https://image.eelve.com/eblog/2020030303-9787af1aceb148ef8b2f6a49015630c4.png" alt="2020030303"><br><img src="https://image.eelve.com/eblog/2020030304-a74acb31fabc4f4da44e96e0c7a28610.png" alt="2020030304"><br><img src="https://image.eelve.com/eblog/2020030305-c4f00a780a704435b28eb34f360857da.png" alt="2020030305"><br><img src="https://image.eelve.com/eblog/2020030308-53cd70f082074829afb4ee887948b24a.png" alt="2020030308"><br><img src="https://image.eelve.com/eblog/2020030311-d8de4d9839d34d38b731ba0ce0be2336.png" alt="2020030311"></p>
<p>我们可以看到已经利用数据做出了一个柱饼图了，下面就再美化以下，得到最终结果</p>
<p><img src="https://image.eelve.com/eblog/2020030312-452f0ac1954844cab0ea2955bd43dfa2.png" alt="2020030312"></p>
<p>另外我们还可以保存分享</p>
<p><img src="https://image.eelve.com/eblog/2020030313-425f770de5064b06b8951748d6a0d01b.png" alt="2020030313"></p>
<p>然后我们还可以使用一下Kibana的开发工具，给<strong>eelve</strong>新加一条数据</p>
<p><img src="https://image.eelve.com/eblog/2020030314-1689d96967794fc38f042ea3807dfc1d.png" alt="2020030314"><br><img src="https://image.eelve.com/eblog/2020030315-68061267b1ac4b13a7844b873aa06c6b.png" alt="2020030315"></p>
<p>然后再刷新图表，可以看到数据会产生相应的变化</p>
<p><img src="https://image.eelve.com/eblog/2020030316-bb66b6f0ba19419abc0ea3b674703f1b.png" alt="2020030316"></p>
<p>也就是说如果数据是实时变化的话，这边的图表也会跟着变化。</p>
<h1 id="伍、Kibana特性"><a href="#伍、Kibana特性" class="headerlink" title="伍、Kibana特性"></a>伍、Kibana特性</h1><ul>
<li><p>强大的定制功能：根据业务通过Kibana中的Canvas，发挥无限创意自由定制</p>
<ul>
<li><p>日志分析</p>
<p><img src="https://image.eelve.com/eblog/screenshot-canvas-log-analysis-e24abcc3311841c886dbc36c8ca8dc05.png" alt="screenshot-canvas-log-analysis"></p>
</li>
<li><p>基础设施监测</p>
<p><img src="https://image.eelve.com/eblog/screenshot-canvas-infrastructure-706070724cb94eabbe6c37f1c82ce66d.png" alt="screenshot-canvas-infrastructure"></p>
</li>
<li><p>APM</p>
<p><img src="https://image.eelve.com/eblog/screenshot-canvas-apm-d007b95db41646a8832f1b1e35734c14.png" alt="screenshot-canvas-apm"></p>
</li>
<li><p>安全运营</p>
<p><img src="https://image.eelve.com/eblog/screenshot-canvas-security-operations-dd4a909ca4164efa93a30fc9e4c7b7e3.png" alt="screenshot-canvas-security-operations"></p>
</li>
<li><p>业务分析</p>
<p><img src="https://image.eelve.com/eblog/screenshot-canvas-business-analytics-76b7f80430664be09ca4a2798ffb7faa.png" alt="screenshot-canvas-business-analytics"></p>
</li>
</ul>
</li>
<li><p>把制作好的图表分享，让每个人都感受到 Kibana 的便利：只需选择适合您的分享选项，即可轻松地把 Kibana 可视化分享给您选择的任何人：您的团队成员、您的老板、老板的老板、您的客户、合规经理或承包商。嵌入仪表板，分享链接，或者导出为 PDF、PNG 或 CSV 文件并作为附件发送给别人。</p>
</li>
</ul>
<p><img src="https://image.eelve.com/eblog/reporting_no_zoom-optimized-1144e12a2f5e4e308fb9aee150ea7629.gif" alt="reporting_no_zoom-optimized"></p>
<ul>
<li>良好的控制访问权限：通过 Kibana Spaces 整理您的仪表板和可视化。通过基于角色的访问控制，邀请用户访问某些空间（但不允许访问其他空间），让他们能够查看特定内容并使用特定功能。</li>
</ul>
<p><img src="https://image.eelve.com/eblog/SlqFLG8AMNZiQXp.webp.gif" alt="security-login.gif"></p>
<ul>
<li><p>管理：用于数据采集等操作的堆栈管理，有了 Kibana，命令行不再是管理安全设置、监测堆栈、采集和汇总数据或配置其他 Elastic Stack 功能的唯一途径。与此同时，得益于我们出色的 API，用户可以通过可视化 UI 轻松地管理 Elastic Stack 并确保其安全性，这种方式更加直观，也能让更多的人上手使用。</p>
<ul>
<li><p>添加数据</p>
<p><img src="https://image.eelve.com/eblog/kibana-homepage-ca50d6a5d73b4e5e981724528a492eca.jpg" alt="kibana-homepage"></p>
</li>
<li><p>确保访问的安全性</p>
<p><img src="https://image.eelve.com/eblog/kibana-management-security-2be33e4e888845ea87d6537b2eeaeb7f.jpg" alt="kibana-management-security"></p>
</li>
<li><p>管理管道</p>
<p><img src="https://image.eelve.com/eblog/kibana-management-logstash-f9dbc5faf2ed484f9643ead95ef57e02.jpg" alt="kibana-management-logstash"></p>
</li>
<li><p>汇总</p>
<p><img src="https://image.eelve.com/eblog/screenshot-rollups-management-ui-ec0be7dea0374a21a95bd18a048c094f.jpg" alt="screenshot-rollups-management-ui"></p>
</li>
<li><p>开发工具</p>
<p><img src="https://image.eelve.com/eblog/5.5-console-80pct-generic-rgb-360a6e4bbf484353b27151e27de93b2e.jpg" alt="5.5-console-80pct-generic-rgb"></p>
</li>
</ul>
</li>
<li><p>可直接应用于用例</p>
</li>
</ul>
<p>有时您只想对某个文件进行 tail 操作。您可能希望跟踪自己网站的运行状态。或者您可能希望查看分布式痕迹。通过 Kibana 内置应用，例如 Logs、Infrastructure、APM、Uptime 以及其他应用，无需离开 Kibana，便能轻松完成这一切。    </p>
<p><img src="https://image.eelve.com/eblog/image4-2-d9d1a61d020f4af7b934c3e6fa424208.png" alt="image4-2"></p>
<hr>
<p>【<strong>后面的话</strong>】利用Kibana我们可以做出炫酷的符合业务且满足客户可视化展示。并且Kibana本身都提供相当多数量的各种图标模板，通过各种图标的组合可以轻松的开发一个属于我们自己的大屏。另外我们需要注意的是，我们应该根据我们的数据的特点选择合适的图表进行展示，这样可以是我们的图表显得更美观。今天只是体验了Kibana的部分功能，后续的其他功能，将配合Beats进行体验。</p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>Elastic Stack</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Filebeat初体验本地版</title>
    <url>/posts/fc6e2627.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】<a href="https://eelve.com/posts/d1a5ff40.html">前文</a>介绍了Elastic Stack的Beats家族，今天我们就来体验其中的专门用于采集文件的<a href="https://www.elastic.co/cn/beats/filebeat">Filebeat</a>，走起。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br><span class="line"><span class="attr">Kibana:</span> <span class="string">kibana-7.6.0</span></span><br><span class="line"><span class="string">Filebeat：filebeat-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、Filebeat介绍"><a href="#贰、Filebeat介绍" class="headerlink" title="贰、Filebeat介绍"></a>贰、Filebeat介绍</h1><p>Filebeat是一种轻量型日志采集器，具有以下特点</p>
<ul>
<li>汇总、“tail -f”和搜索：启动 Filebeat 后，打开 Logs UI，直接在 Kibana 中观看对您的文件进行 tail 操作的过程。通过搜索栏按照服务、应用程序、主机、数据中心或者其他条件进行筛选，以跟踪您的全部汇总日志中的异常行为。</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/animated-gif-logs-ui-optimized-7bf3c88845c84ee3a0564f7a608726b5.gif" alt="animated-gif-logs-ui-optimized"></p>
<ul>
<li><p>性能稳健，不错过任何检测信号：无论在任何环境中，随时都潜伏着应用程序中断的风险。Filebeat 能够读取并转发日志行，如果出现中断，还会在一切恢复正常后，从中断前停止的位置继续开始。</p>
</li>
<li><p>Filebeat 让简单的事情简单化：Filebeat 内置有多种模块（Apache、Cisco ASA、Microsoft Azure、NGINX、MySQL 等等），可针对常见格式的日志大大简化收集、解析和可视化过程，只需一条命令即可。之所以能实现这一点，是因为它将自动默认路径（因操作系统而异）与 Elasticsearch 采集节点管道的定义和 Kibana 仪表板组合在一起。不仅如此，数个 Filebeat 模块还包括预配置的 Machine Learning 任务。 </p>
<ul>
<li>系统</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/filebeat-modules-system-1fcfe648ed244a3eb6981805e48eb805.jpg" alt="filebeat-modules-system"></p>
<ul>
<li>NGINX</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/filebeat-modules-nginx-60aafcc8bf6e416e8489e30b85e84446.jpg" alt="filebeat-modules-nginx"></p>
<ul>
<li>MySQL</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/filebeat-modules-mysql-532077e16cc3495291fbe4c7b15e7f36.jpg" alt="filebeat-modules-mysql"></p>
<ul>
<li>Auditd</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/filebeat-modules-auditd-593f8272484b4aa4ac01bc3fcd596d43.jpg" alt="filebeat-modules-auditd"></p>
</li>
</ul>
<ul>
<li><p>容器就绪和云端就绪：正在对所有内容进行容器化，或者正在云端环境中运行？通过 Elastic Stack，可以轻松地监测容器和云服务。在 Kubernetes、Docker 或云端部署中部署 Filebeat，即可获得所有的日志流：信息十分完整，包括日志流的 pod、容器、节点、VM、主机以及自动关联时用到的其他元数据。此外，Beats Autodiscover 功能可检测到新容器，并使用恰当的 Filebeat 模块对这些容器进行自适应监测。 </p>
</li>
<li><p>它不会导致您的管道过载：当将数据发送到 Logstash 或 Elasticsearch 时，Filebeat 使用背压敏感协议，以应对更多的数据量。如果 Logstash 正在忙于处理数据，则会告诉 Filebeat 减慢读取速度。一旦拥堵得到解决，Filebeat 就会恢复到原来的步伐并继续传输数据。 </p>
</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/filebeat-diagram-71397eba004043f3a0593620b0139364.svg" alt="filebeat-diagram"></p>
<ul>
<li><p>输送至 Elasticsearch 或 Logstash。在 Kibana 中实现可视化。</p>
<p>Filebeat 是 Elastic Stack 的一部分，因此能够与 Logstash、Elasticsearch 和 Kibana 无缝协作。无论您要使用 Logstash 转换或充实日志和文件，还是在 Elasticsearch 中随意处理一些数据分析，亦或在 Kibana 中构建和分享仪表板，Filebeat 都能轻松地将您的数据发送至最关键的地方。</p>
</li>
</ul>
<h1 id="叁-Filebeat安装"><a href="#叁-Filebeat安装" class="headerlink" title="叁 Filebeat安装"></a>叁 Filebeat安装</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p><a href="https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.6.0-linux-x86_64.tar.gz">filebeat-7.6.0-linux-x86_64</a></p>
<h2 id="3-2-解压filebeat-7-6-0-linux-x86-64"><a href="#3-2-解压filebeat-7-6-0-linux-x86-64" class="headerlink" title="3.2 解压filebeat-7.6.0-linux-x86_64"></a>3.2 解压filebeat-7.6.0-linux-x86_64</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf filebeat-7.6.0-linux-x86_64.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="3-3-filebeat配置"><a href="#3-3-filebeat配置" class="headerlink" title="3.3 filebeat配置"></a>3.3 filebeat配置</h2><p>我们可以针对不同的采集项自定义配置，同时方便测试和展示。</p>
<h2 id="3-4-采集控制台日志"><a href="#3-4-采集控制台日志" class="headerlink" title="3.4 采集控制台日志"></a>3.4 采集控制台日志</h2><ul>
<li>新建std.yml配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: stdin</span><br><span class="line">  enabled: true</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.console:</span><br><span class="line">  pretty: true</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">./filebeat  -e -c std.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2020-03-07T08:40:10.807Z&quot;,</span><br><span class="line">  &quot;@metadata&quot;: &#123;</span><br><span class="line">    &quot;beat&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;7.6.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;agent&quot;: &#123;</span><br><span class="line">    &quot;id&quot;: &quot;4f346e18-c77b-4a8c-ae9a-f97b2007be60&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;7.6.0&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;filebeat&quot;,</span><br><span class="line">    &quot;ephemeral_id&quot;: &quot;2b5dd30b-1a9a-454a-a9f1-0a428fd6c6da&quot;,</span><br><span class="line">    &quot;hostname&quot;: &quot;192.168.237.11&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;ecs&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;1.4.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;message&quot;: &quot;hello&quot;,</span><br><span class="line">  &quot;log&quot;: &#123;</span><br><span class="line">    &quot;offset&quot;: 0,</span><br><span class="line">    &quot;file&quot;: &#123;</span><br><span class="line">      &quot;path&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;stdin&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;host&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;192.168.237.11&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-采集nginx日志"><a href="#3-5-采集nginx日志" class="headerlink" title="3.5 采集nginx日志"></a>3.5 采集nginx日志</h2><ul>
<li><p>启动nginx</p>
<p>这里如果没有安装的话，可以自行安装配置，然后启动nginx</p>
</li>
<li><p>新建nginx.yml配置</p>
</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /usr/local/nginx/logs/*.log</span><br><span class="line">  tags: [&quot;nginx&quot;]</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://192.168.237.11:9200&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>启动Elasticsearch</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./elasticsearch</span><br></pre></td></tr></table></figure>
<ul>
<li>启动Filebeat</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ ./filebeat  -e -c nginx.yml</span><br><span class="line"></span><br><span class="line">2020-03-07T17:11:05.821+0800	INFO	instance/beat.go:298	Setup Beat: filebeat; Version: 7.6.0</span><br><span class="line">2020-03-07T17:11:05.821+0800	INFO	[index-management]	idxmgmt/std.go:182	Set output.elasticsearch.index to &#x27;filebeat-7.6.0&#x27; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:05.821+0800	INFO	elasticsearch/client.go:174	Elasticsearch url: http://192.168.237.11:9200</span><br><span class="line">2020-03-07T17:11:05.821+0800	INFO	[publisher]	pipeline/module.go:110	Beat name: 192.168.237.11</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	[monitoring]	log/log.go:118	Starting metrics logging every 30s</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	instance/beat.go:439	filebeat start running.</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	registrar/registrar.go:145	Loading registrar data from /usr/elastic/filebeat/data/registry/filebeat/data.json</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	registrar/registrar.go:152	States Loaded from registrar: 3</span><br><span class="line">2020-03-07T17:11:05.822+0800	INFO	crawler/crawler.go:72	Loading Inputs: 1</span><br><span class="line">2020-03-07T17:11:05.823+0800	INFO	log/input.go:152	Configured paths: [/usr/local/nginx/logs/*.log]</span><br><span class="line">2020-03-07T17:11:05.823+0800	INFO	input/input.go:114	Starting input of type: log; ID: 11194696681404026286 </span><br><span class="line">2020-03-07T17:11:05.823+0800	INFO	crawler/crawler.go:106	Loading and starting Inputs completed. Enabled inputs: 1</span><br><span class="line">2020-03-07T17:11:15.826+0800	INFO	log/harvester.go:297	Harvester started for file: /usr/local/nginx/logs/access.log</span><br><span class="line">2020-03-07T17:11:16.828+0800	INFO	pipeline/output.go:95	Connecting to backoff(elasticsearch(http://192.168.237.11:9200))</span><br><span class="line">2020-03-07T17:11:16.831+0800	INFO	elasticsearch/client.go:757	Attempting to connect to Elasticsearch version 7.6.0</span><br><span class="line">2020-03-07T17:11:16.859+0800	INFO	[license]	licenser/es_callback.go:50	Elasticsearch license: Basic</span><br><span class="line">2020-03-07T17:11:16.891+0800	INFO	[index-management]	idxmgmt/std.go:258	Auto ILM enable success.</span><br><span class="line">2020-03-07T17:11:16.892+0800	INFO	[index-management.ilm]	ilm/std.go:139	do not generate ilm policy: exists=true, overwrite=false</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:271	ILM policy successfully loaded.</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:410	Set setup.template.name to &#x27;&#123;filebeat-7.6.0 &#123;now/d&#125;-000001&#125;&#x27; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:415	Set setup.template.pattern to &#x27;filebeat-7.6.0-*&#x27; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:449	Set settings.index.lifecycle.rollover_alias in template to &#123;filebeat-7.6.0 &#123;now/d&#125;-000001&#125; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:16.893+0800	INFO	[index-management]	idxmgmt/std.go:453	Set settings.index.lifecycle.name in template to &#123;filebeat &#123;&quot;policy&quot;:&#123;&quot;phases&quot;:&#123;&quot;hot&quot;:&#123;&quot;actions&quot;:&#123;&quot;rollover&quot;:&#123;&quot;max_age&quot;:&quot;30d&quot;,&quot;max_size&quot;:&quot;50gb&quot;&#125;&#125;&#125;&#125;&#125;&#125;&#125; as ILM is enabled.</span><br><span class="line">2020-03-07T17:11:16.895+0800	INFO	template/load.go:89	Template filebeat-7.6.0 already exists and will not be overwritten.</span><br><span class="line">2020-03-07T17:11:16.895+0800	INFO	[index-management]	idxmgmt/std.go:295	Loaded index template.</span><br><span class="line">2020-03-07T17:11:17.097+0800	INFO	[index-management]	idxmgmt/std.go:306	Write alias successfully generated.</span><br><span class="line">2020-03-07T17:11:17.097+0800	INFO	pipeline/output.go:105	Connection to backoff(elasticsearch(http://192.168.237.11:9200)) established</span><br></pre></td></tr></table></figure>
<ul>
<li>刷新页面观察结果</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/2020030701-f6f0c410456c47e7872c7719e1fe4205.png" alt="2020030701"><br><img src="https://eelve.com/upload/2020/3/2020030702-c17fe51d42ca47a3b4c452fa14131e92.png" alt="2020030702"></p>
<p>我们可以看到采集已经成功，并且我们配置的tags也已经成功了</p>
<h2 id="3-6-使用nginx-module采集nginx日志"><a href="#3-6-使用nginx-module采集nginx日志" class="headerlink" title="3.6 使用nginx module采集nginx日志"></a>3.6 使用nginx module采集nginx日志</h2><ul>
<li>开启filebeat的nginx module</li>
</ul>
<p>前面要想实现日志数据的读取以及处理都是自己手动配置的，其实，在Filebeat中，有大量的Module，可以简化我们的配置，直接就可以使用，如下：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ ./filebeat modules list</span><br><span class="line">Enabled:</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">activemq</span><br><span class="line">apache</span><br><span class="line">auditd</span><br><span class="line">aws</span><br><span class="line">azure</span><br><span class="line">cef</span><br><span class="line">cisco</span><br><span class="line">coredns</span><br><span class="line">elasticsearch</span><br><span class="line">envoyproxy</span><br><span class="line">googlecloud</span><br><span class="line">haproxy</span><br><span class="line">ibmmq</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">iptables</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">misp</span><br><span class="line">mongodb</span><br><span class="line">mssql</span><br><span class="line">mysql</span><br><span class="line">nats</span><br><span class="line">netflow</span><br><span class="line">osquery</span><br><span class="line">panw</span><br><span class="line">postgresql</span><br><span class="line">rabbitmq</span><br><span class="line">redis</span><br><span class="line">santa</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">traefik</span><br><span class="line">zeek</span><br></pre></td></tr></table></figure>
<p>可以看到我这里的nginx modules已经开启了，但是默认是没有开启的，如果需要启用需要进行enable操作：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">/filebeat modules enable nginx #启动</span><br><span class="line">./filebeat modules disable nginx #禁用</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>nginx module 配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ cd modules.d</span><br><span class="line">[iio@192 modules.d]$ vi nginx.yml </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Module: nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Docs: https://www.elastic.co/guide/en/beats/filebeat/7.6/filebeat-module-nginx.html</span></span><br><span class="line"></span><br><span class="line">- module: nginx</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Access logs</span></span><br><span class="line">  access:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/access.log*&quot;]</span><br><span class="line">    # Set custom paths for the log files. If left empty,</span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    #var.paths:</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Error logs</span></span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/error.log*&quot;]</span><br><span class="line"></span><br><span class="line">    # Set custom paths for the log files. If left empty,</span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    #var.paths:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置filebeat</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ vi nginxmodule.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line"><span class="meta">#</span><span class="bash">- <span class="built_in">type</span>: <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  enabled: <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  paths:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    - /usr/<span class="built_in">local</span>/nginx/logs/*.<span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  tags: [<span class="string">&quot;nginx&quot;</span>]</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://192.168.237.11:9200&quot;]</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ ./filebeat  -e -c nginxmodule.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>查看结果</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/2020030703-14356801335d4ea8a4256bce80a9bf5f.png" alt="2020030703"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;msg&quot;: &quot;2020-02-29 02:30:26,634 [myid:] - WARN  [NIOServerCxn.Factory:0.0.0.0\&#x2F;0.0.0.0:2181:NIOServerCnxn@376] - Unable to read additional data from client sessionid 0x0, likely client has closed socket&quot;,</span><br><span class="line">	&quot;rawmsg&quot;: &quot;2020-02-29 02:30:26,634 [myid:] - WARN  [NIOServerCxn.Factory:0.0.0.0\&#x2F;0.0.0.0:2181:NIOServerCnxn@376] - Unable to read additional data from client sessionid 0x0, likely client has closed socket&quot;,</span><br><span class="line">	&quot;timereported&quot;: &quot;2020-02-29T10:30:26.635186+08:00&quot;,</span><br><span class="line">	&quot;hostname&quot;: &quot;izbp1a4b02uc2nj550yzs1z&quot;,</span><br><span class="line">	&quot;syslogtag&quot;: &quot;journal:&quot;,</span><br><span class="line">	&quot;inputname&quot;: &quot;imjournal&quot;,</span><br><span class="line">	&quot;fromhost&quot;: &quot;izbp1a4b02uc2nj550yzs1z&quot;,</span><br><span class="line">	&quot;fromhost-ip&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">	&quot;pri&quot;: &quot;14&quot;,</span><br><span class="line">	&quot;syslogfacility&quot;: &quot;1&quot;,</span><br><span class="line">	&quot;syslogseverity&quot;: &quot;6&quot;,</span><br><span class="line">	&quot;timegenerated&quot;: &quot;2020-02-29T10:30:26.635186+08:00&quot;,</span><br><span class="line">	&quot;programname&quot;: &quot;journal&quot;,</span><br><span class="line">	&quot;protocol-version&quot;: &quot;0&quot;,</span><br><span class="line">	&quot;structured-data&quot;: &quot;-&quot;,</span><br><span class="line">	&quot;app-name&quot;: &quot;journal&quot;,</span><br><span class="line">	&quot;procid&quot;: &quot;-&quot;,</span><br><span class="line">	&quot;msgid&quot;: &quot;-&quot;,</span><br><span class="line">	&quot;uuid&quot;: null,</span><br><span class="line">	&quot;$!&quot;: &#123;</span><br><span class="line">		&quot;_UID&quot;: &quot;0&quot;,</span><br><span class="line">		&quot;_GID&quot;: &quot;0&quot;,</span><br><span class="line">		&quot;_CAP_EFFECTIVE&quot;: &quot;1fffffffff&quot;,</span><br><span class="line">		&quot;_BOOT_ID&quot;: &quot;1c6d86e336cc4dc7b733ea3c53351d65&quot;,</span><br><span class="line">		&quot;_MACHINE_ID&quot;: &quot;f0f31005fb5a436d88e3c6cbf54e25aa&quot;,</span><br><span class="line">		&quot;_HOSTNAME&quot;: &quot;izbp1a4b02uc2nj550yzs1z&quot;,</span><br><span class="line">		&quot;_SYSTEMD_SLICE&quot;: &quot;system.slice&quot;,</span><br><span class="line">		&quot;PRIORITY&quot;: &quot;6&quot;,</span><br><span class="line">		&quot;_TRANSPORT&quot;: &quot;journal&quot;,</span><br><span class="line">		&quot;CONTAINER_ID_FULL&quot;: &quot;bdc76f9b56dbeb3f5005ca110d72945c6b949178b6948345febf5bc657433703&quot;,</span><br><span class="line">		&quot;CONTAINER_NAME&quot;: &quot;zookeeper&quot;,</span><br><span class="line">		&quot;CONTAINER_TAG&quot;: &quot;bdc76f9b56db&quot;,</span><br><span class="line">		&quot;CONTAINER_ID&quot;: &quot;bdc76f9b56db&quot;,</span><br><span class="line">		&quot;_PID&quot;: &quot;16046&quot;,</span><br><span class="line">		&quot;_COMM&quot;: &quot;dockerd-current&quot;,</span><br><span class="line">		&quot;_EXE&quot;: &quot;\&#x2F;usr\&#x2F;bin\&#x2F;dockerd-current&quot;,</span><br><span class="line">		&quot;_CMDLINE&quot;: &quot;\&#x2F;usr\&#x2F;bin\&#x2F;dockerd-current --add-runtime docker-runc&#x3D;\&#x2F;usr\&#x2F;libexec\&#x2F;docker\&#x2F;docker-runc-current --default-runtime&#x3D;docker-runc --exec-opt native.cgroupdriver&#x3D;systemd --userland-proxy-path&#x3D;\&#x2F;usr\&#x2F;libexec\&#x2F;docker\&#x2F;docker-proxy-current --init-path&#x3D;\&#x2F;usr\&#x2F;libexec\&#x2F;docker\&#x2F;docker-init-current --seccomp-profile&#x3D;\&#x2F;etc\&#x2F;docker\&#x2F;seccomp.json --selinux-enabled --log-driver&#x3D;journald --signature-verification&#x3D;false --storage-driver overlay2&quot;,</span><br><span class="line">		&quot;_SYSTEMD_CGROUP&quot;: &quot;\&#x2F;system.slice\&#x2F;docker.service&quot;,</span><br><span class="line">		&quot;_SYSTEMD_UNIT&quot;: &quot;docker.service&quot;,</span><br><span class="line">		&quot;MESSAGE&quot;: &quot;2020-02-29 02:30:26,634 [myid:] - WARN  [NIOServerCxn.Factory:0.0.0.0\&#x2F;0.0.0.0:2181:NIOServerCnxn@376] - Unable to read additional data from client sessionid 0x0, likely client has closed socket&quot;,</span><br><span class="line">		&quot;_SOURCE_REALTIME_TIMESTAMP&quot;: &quot;1582943426634852&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; &#123;</span><br><span class="line">	&quot;_index&quot;: &quot;filebeat-7.6.0-2020.03.07-000001&quot;,</span><br><span class="line">	&quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">	&quot;_id&quot;: &quot;hBtStHAB2wqxgggKYbTw&quot;,</span><br><span class="line">	&quot;_version&quot;: 1,</span><br><span class="line">	&quot;_score&quot;: 1,</span><br><span class="line">	&quot;_source&quot;: &#123;</span><br><span class="line">		&quot;agent&quot;: &#123;</span><br><span class="line">			&quot;hostname&quot;: &quot;192.168.237.11&quot;,</span><br><span class="line">			&quot;id&quot;: &quot;4f346e18-c77b-4a8c-ae9a-f97b2007be60&quot;,</span><br><span class="line">			&quot;ephemeral_id&quot;: &quot;b9759c98-cfbe-4240-8c7d-1e64c1caeec3&quot;,</span><br><span class="line">			&quot;type&quot;: &quot;filebeat&quot;,</span><br><span class="line">			&quot;version&quot;: &quot;7.6.0&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;nginx&quot;: &#123;</span><br><span class="line">			&quot;access&quot;: &#123;</span><br><span class="line">				&quot;remote_ip_list&quot;: [</span><br><span class="line">					&quot;192.168.237.1&quot;</span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;log&quot;: &#123;</span><br><span class="line">			&quot;file&quot;: &#123;</span><br><span class="line">				&quot;path&quot;: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;offset&quot;: 83567</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;source&quot;: &#123;</span><br><span class="line">			&quot;address&quot;: &quot;192.168.237.1&quot;,</span><br><span class="line">			&quot;ip&quot;: &quot;192.168.237.1&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;fileset&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;access&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;url&quot;: &#123;</span><br><span class="line">			&quot;original&quot;: &quot;&#x2F;&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;input&quot;: &#123;</span><br><span class="line">			&quot;type&quot;: &quot;log&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;@timestamp&quot;: &quot;2020-03-07T09:27:40.000Z&quot;,</span><br><span class="line">		&quot;ecs&quot;: &#123;</span><br><span class="line">			&quot;version&quot;: &quot;1.4.0&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;service&quot;: &#123;</span><br><span class="line">			&quot;type&quot;: &quot;nginx&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;host&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;192.168.237.11&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;http&quot;: &#123;</span><br><span class="line">			&quot;request&quot;: &#123;</span><br><span class="line">				&quot;referrer&quot;: &quot;-&quot;,</span><br><span class="line">				&quot;method&quot;: &quot;GET&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;response&quot;: &#123;</span><br><span class="line">				&quot;status_code&quot;: 304,</span><br><span class="line">				&quot;body&quot;: &#123;</span><br><span class="line">					&quot;bytes&quot;: 0</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;version&quot;: &quot;1.1&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;event&quot;: &#123;</span><br><span class="line">			&quot;timezone&quot;: &quot;+08:00&quot;,</span><br><span class="line">			&quot;created&quot;: &quot;2020-03-07T09:27:41.512Z&quot;,</span><br><span class="line">			&quot;module&quot;: &quot;nginx&quot;,</span><br><span class="line">			&quot;dataset&quot;: &quot;nginx.access&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;user&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;-&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;user_agent&quot;: &#123;</span><br><span class="line">			&quot;original&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.132 Safari&#x2F;537.36&quot;,</span><br><span class="line">			&quot;os&quot;: &#123;</span><br><span class="line">				&quot;name&quot;: &quot;Windows&quot;,</span><br><span class="line">				&quot;version&quot;: &quot;10&quot;,</span><br><span class="line">				&quot;full&quot;: &quot;Windows 10&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;name&quot;: &quot;Chrome&quot;,</span><br><span class="line">			&quot;device&quot;: &#123;</span><br><span class="line">				&quot;name&quot;: &quot;Other&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;version&quot;: &quot;80.0.3987.132&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们开用使用filebeat提供的modules采集nginx日志也成功,而且可以看到展示的信息也更加完善了。可以看到filebeat提供的各种modules就是帮我们做了一些解析工作，其他modules的用法类似。</p>
<h2 id="3-7-使用Kibana展示"><a href="#3-7-使用Kibana展示" class="headerlink" title="3.7 使用Kibana展示"></a>3.7 使用Kibana展示</h2><ul>
<li>修改filebeat配置</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 filebeat]$ vi iio.yml </span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line"><span class="meta">#</span><span class="bash">- <span class="built_in">type</span>: <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  enabled: <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  paths:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    - /usr/<span class="built_in">local</span>/nginx/logs/*.<span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  tags: [<span class="string">&quot;nginx&quot;</span>]</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://192.168.237.11:9200&quot;]</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: false</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;192.168.237.11:5601&quot;</span><br><span class="line">~   </span><br></pre></td></tr></table></figure>
<ul>
<li>启动Kibana</li>
</ul>
<p>下面的安装仪表板依赖Kibana，也就是Kibana必须启动才能安装仪表盘</p>
<ul>
<li>安装仪表盘</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装仪表盘到Kibana</span><br><span class="line">.&#x2F;metricbeat setup --dashboards</span><br></pre></td></tr></table></figure>
<p><img src="https://eelve.com/upload/2020/3/2020030704-84aabcd7f21a4af0ab1ccb694e2f5f47.png" alt="2020030704"></p>
<ul>
<li>启动Filebeat</li>
</ul>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">./filebeat  -e -c iio.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>观察结果</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/2020030705-77c1f59279aa40d4b8319560da4a6ae5.png" alt="2020030705"><br><img src="https://eelve.com/upload/2020/3/2020030706-9f858efbcaba4dd898b07e54c2f42a0d.png" alt="2020030706"></p>
<p>可以看到Kibana内置的nginx的仪表盘的展示情况，展示相当仿佛，并且还可以随着时间变化而刷新</p>
<h1 id="肆、Filebeat工作原理"><a href="#肆、Filebeat工作原理" class="headerlink" title="肆、Filebeat工作原理"></a>肆、Filebeat工作原理</h1><p>Filebeat由两个主要组件组成：prospector 和 harvester。</p>
<ul>
<li><p>harvester：</p>
<ul>
<li>负责读取单个文件的内容。</li>
<li>如果文件在读取时被删除或重命名，Filebeat将继续读取文件。</li>
</ul>
</li>
<li><p>prospector：</p>
<ul>
<li>prospector 负责管理harvester并找到所有要读取的文件来源。</li>
<li>如果输入类型为日志，则查找器将查找路径匹配的所有文件，并为每个文件启动一个harvester。</li>
<li>Filebeat目前支持两种prospector类型：log和stdin。</li>
</ul>
</li>
<li><p>Filebeat如何保持文件的状态</p>
<ul>
<li>Filebeat 保存每个文件的状态并经常将状态刷新到磁盘上的注册文件中。</li>
<li>该状态用于记住harvester正在读取的最后偏移量，并确保发送所有日志行。</li>
<li>如果输出（例如Elasticsearch或Logstash）无法访问，Filebeat会跟踪最后发送的行，并在输出再次可用时继续读取文件。</li>
<li>在Filebeat运行时，每个prospector内存中也会保存的文件状态信息，当重新启动Filebeat时，将使用注册</li>
<li>文件的数据来重建文件状态，Filebeat将每个harvester在从保存的最后偏移量继续读取。</li>
<li>文件状态记录在data/registry文件中。</li>
</ul>
<p>```shell script<br>启动命令<br>./filebeat -e -c itcast.yml<br>./filebeat -e -c itcast.yml -d “publish”<br>#参数说明</p>
</li>
<li><p>e: 输出到标准输出,默认输出到syslog和logs下</p>
</li>
<li><p>c: 指定配置文件</p>
</li>
<li><p>d: 输出debug信息</p>
</li>
</ul>
<p>#测试： ./filebeat -e -c iio.yml -d “publish”</p>
<pre><code>
---

【**后面的话**】在本文中我们全面的体验了一下filebeat，还和Kibana结合应用了，我们可以看到filebeat和elk三大剑客整合的非常好，特别是Kibana提供了丰富的仪表盘，大大的方便了我们展示。后面还有再结合一下Logstash，使用以下过滤功能。

---

![薏米笔记](https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png)
</code></pre>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack实战之Kibana初体验本地版</title>
    <url>/posts/55ef13e7.html</url>
    <content><![CDATA[<hr>
<p>layout: elastic<br>title: Elastic Stack实战之Kibana初体验<br>date: 2020-03-03 19:49:22<br>tags: [ELK,Kibana]<br>categories: Elastic Stack</p>
<hr>
<p>【<strong>前面的话</strong>】在前面已经安装好了Elasticsearch和Logstash，今天就来<a href="https://www.elastic.co/cn/kibana">Kibana</a>进行一下初步体验。</p>
<hr>
<h1 id="壹、软件版本"><a href="#壹、软件版本" class="headerlink" title="壹、软件版本"></a>壹、软件版本</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Centos：CentOS-7-x86_64-Minimal-1908</span></span><br><span class="line"><span class="attr">VM:</span> <span class="number">15.5</span><span class="number">.0</span> <span class="string">build-14665864</span></span><br><span class="line"><span class="attr">Java:</span> <span class="number">1.8</span><span class="string">.0_211</span></span><br><span class="line"><span class="attr">Elasticsearch:</span> <span class="string">elasticsearch-7.6.0</span></span><br><span class="line"><span class="attr">Logstash:</span> <span class="string">logstash-7.6.0</span></span><br><span class="line"><span class="attr">Kibana:</span> <span class="string">kibana-7.6.0</span></span><br></pre></td></tr></table></figure>
<h1 id="贰、Kibana介绍"><a href="#贰、Kibana介绍" class="headerlink" title="贰、Kibana介绍"></a>贰、Kibana介绍</h1><p><img src="https://eelve.com/upload/2020/3/illustrated-screenshot-hero-kibana-ab9ac4d9e6e748fda40fbdff14591bc6.png" alt="illustrated-screenshot-hero-kibana"></p>
<pre><code>Kibana是了解 Elastic Stack 的窗口。

通过 Kibana，您可以对自己的 Elasticsearch 进行可视化，还可以在 Elastic Stack 中进行导航，这样您便可以进行各种操作了，从跟踪查询负载，到理解请求如何流经您的整个应用，都能轻松完成。 
</code></pre>
<p><strong>可视化和分析：</strong> Kibana 让您能够自由地选择如何呈现自己的数据，一张图片胜过千万行日志，可以用下面几个特点来阐述：</p>
<p><img src="https://eelve.com/upload/2020/3/animated-gif-lens-drag-and-drop-150ecdc9e8314ff798ae5958edac5963.gif" alt="animated-gif-lens-drag-and-drop"></p>
<ul>
<li><p><strong>基本内容：</strong> Kibana 核心产品搭载了一批经典功能：柱状图、线状图、饼图、旭日图，等等。当然啦，您还可以搜索自己的所有文档。            </p>
<p><img src="https://eelve.com/upload/2020/3/kibana-basics-with-vega-87818e2dc2df4800bd116de2eb8ecf39.jpg" alt="kibana-basics-with-vega"></p>
</li>
<li><p><strong>位置分析：</strong> 借助 Elastic Maps，探索位置数据，还可以获得创意并对定制图层和矢量形状进行可视化。            </p>
</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/geo-101256c64dc24b04abede3b0088ef4b8.jpg" alt="geo"></p>
<ul>
<li><strong>时间序列：</strong> 借助精选的时序数据 UI，对您 Elasticsearch 中的数据执行高级时间序列分析。您可以利用功能强大、简单易学的表达式来描述查询、转换和可视化。</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/kibana-timeseries-9cdce1ca946f44da9279e8c7577709e0.jpg" alt="kibana-timeseries"></p>
<ul>
<li><strong>Machine Learning：</strong> 借助非监督型 Machine Learning 功能来检测隐藏在您 Elasticsearch 数据中的异常情况并探索那些对它们有显著影响的属性。 </li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/kibana-machine-learning-5148691b6084492fb47558ebbee177e1.jpg" alt="kibana-machine-learning"></p>
<ul>
<li><strong>图表和网络：</strong> 凭借搜索引擎的相关性功能，结合 Graph 关联分析，揭示您 Elasticsearch 数据中极其常见的关系。 </li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/kibana-graph-e0e161ba7f3a4d6bb3c0640701e49a30.jpg" alt="kibana-graph"></p>
<h1 id="叁、Kibana安装"><a href="#叁、Kibana安装" class="headerlink" title="叁、Kibana安装"></a>叁、Kibana安装</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p><a href="https://artifacts.elastic.co/downloads/kibana/kibana-7.6.0-linux-x86_64.tar.gz">kibana-7.6.0-linux-x86_64.tar.gz</a></p>
<hr>
<h2 id="3-2-解压kibana-7-6-0-linux-x86-64-tar-gz"><a href="#3-2-解压kibana-7-6-0-linux-x86-64-tar-gz" class="headerlink" title="3.2 解压kibana-7.6.0-linux-x86_64.tar.gz"></a>3.2 解压kibana-7.6.0-linux-x86_64.tar.gz</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">tar -zvxf kibana-7.6.0-linux-x86_64.tar.gz -C /usr/elastic</span><br></pre></td></tr></table></figure>
<h2 id="3-3-kibana配置说明"><a href="#3-3-kibana配置说明" class="headerlink" title="3.3 kibana配置说明"></a>3.3 kibana配置说明</h2><p>默认配置配置不需要改，下面给出一个最小的配置</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">server.port: 5601 #浏览器访问端口</span><br><span class="line">server.host: &quot;192.168.237.11&quot;  #对外的服务地址</span><br><span class="line">elasticsearch.hosts: [&quot;http://192.168.237.11:9200&quot;] #这里为你的elasticsearch集群的地址</span><br></pre></td></tr></table></figure>
<h1 id="肆、Kibana简单使用"><a href="#肆、Kibana简单使用" class="headerlink" title="肆、Kibana简单使用"></a>肆、Kibana简单使用</h1><h2 id="4-1-启动Elasticsearch"><a href="#4-1-启动Elasticsearch" class="headerlink" title="4.1 启动Elasticsearch"></a>4.1 启动Elasticsearch</h2><p>首先我门要启动Elasticsearch，不然Kibana没有数据来源。同时检查是否启动成功，如下图</p>
<p><img src="https://eelve.com/upload/2020/3/2020030301-00f0ff22c74c4275be3690daa471cfa2.jpg" alt="2020030301"></p>
<h2 id="4-2-启动Kibana"><a href="#4-2-启动Kibana" class="headerlink" title="4.2 启动Kibana"></a>4.2 启动Kibana</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[iio@192 bin]$ ./kibana</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后观察日志</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">log   [13:27:27.338] [info][plugins-service] Plugin &quot;case&quot; is disabled.</span><br><span class="line">log   [13:27:33.648] [info][plugins-system] Setting up [37] plugins: [licensing,taskManager,siem,code,infra,encryptedSavedObjects,usageCollection,metrics,canvas,timelion,features,security,apm_oss,translations,reporting,uiActions,data,navigation,newsfeed,share,status_page,home,spaces,cloud,apm,graph,bfetch,kibana_legacy,management,dev_tools,eui_utils,inspector,expressions,visualizations,embeddable,advancedUiActions,dashboard_embeddable_container]</span><br><span class="line">log   [13:27:33.650] [info][licensing][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.652] [info][plugins][taskManager] Setting up plugin</span><br><span class="line">log   [13:27:33.667] [info][plugins][siem] Setting up plugin</span><br><span class="line">log   [13:27:33.667] [info][code][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.668] [info][infra][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.670] [info][encryptedSavedObjects][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.671] [warning][config][encryptedSavedObjects][plugins] Generating a random key for xpack.encryptedSavedObjects.encryptionKey. To be able to decrypt encrypted saved objects attributes after restart, please set xpack.encryptedSavedObjects.encryptionKey in kibana.yml</span><br><span class="line">log   [13:27:33.677] [info][plugins][usageCollection] Setting up plugin</span><br><span class="line">log   [13:27:33.679] [info][metrics][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.680] [info][canvas][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.687] [info][plugins][timelion] Setting up plugin</span><br><span class="line">log   [13:27:33.689] [info][features][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.690] [info][plugins][security] Setting up plugin</span><br><span class="line">log   [13:27:33.691] [warning][config][plugins][security] Generating a random key for xpack.security.encryptionKey. To prevent sessions from being invalidated on restart, please set xpack.security.encryptionKey in kibana.yml</span><br><span class="line">log   [13:27:33.691] [warning][config][plugins][security] Session cookies will be transmitted over insecure connections. This is not recommended.</span><br><span class="line">log   [13:27:33.714] [info][apm_oss][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.715] [info][plugins][translations] Setting up plugin</span><br><span class="line">log   [13:27:33.715] [info][data][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.722] [info][plugins][share] Setting up plugin</span><br><span class="line">log   [13:27:33.724] [info][home][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.730] [info][plugins][spaces] Setting up plugin</span><br><span class="line">log   [13:27:33.736] [info][cloud][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.738] [info][apm][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.915] [info][graph][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.921] [info][bfetch][plugins] Setting up plugin</span><br><span class="line">log   [13:27:33.933] [info][savedobjects-service] Waiting until all Elasticsearch nodes are compatible with Kibana before starting saved objects migrations...</span><br><span class="line">log   [13:27:33.933] [info][savedobjects-service] Starting saved objects migrations</span><br><span class="line">log   [13:27:34.115] [info][plugins-system] Starting [22] plugins: [licensing,taskManager,siem,code,infra,encryptedSavedObjects,usageCollection,metrics,canvas,timelion,features,security,apm_oss,translations,data,share,home,spaces,cloud,apm,graph,bfetch]</span><br><span class="line">log   [13:27:40.328] [info][status][plugin:kibana@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.346] [info][status][plugin:elasticsearch@7.6.0] Status changed from uninitialized to yellow - Waiting for Elasticsearch</span><br><span class="line">log   [13:27:40.348] [info][status][plugin:elasticsearch@7.6.0] Status changed from yellow to green - Ready</span><br><span class="line">log   [13:27:40.358] [info][status][plugin:xpack_main@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.392] [info][status][plugin:graph@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.426] [info][kibana-monitoring][monitoring] Starting monitoring stats collection</span><br><span class="line">log   [13:27:40.430] [info][status][plugin:monitoring@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.471] [info][status][plugin:spaces@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.507] [info][status][plugin:security@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.543] [info][status][plugin:searchprofiler@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.557] [info][status][plugin:ml@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.807] [info][status][plugin:tilemap@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.812] [info][status][plugin:watcher@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.836] [info][status][plugin:grokdebugger@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.856] [info][status][plugin:dashboard_mode@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.863] [info][status][plugin:logstash@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.891] [info][status][plugin:beats_management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:40.958] [info][status][plugin:apm_oss@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.000] [info][status][plugin:apm@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.071] [info][status][plugin:maps@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.083] [info][status][plugin:interpreter@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.122] [info][status][plugin:canvas@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.130] [info][status][plugin:license_management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.141] [info][status][plugin:index_management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.228] [info][status][plugin:console@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.238] [info][status][plugin:console_extensions@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.245] [info][status][plugin:index_lifecycle_management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.286] [info][status][plugin:kuery_autocomplete@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.304] [info][status][plugin:metrics@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.425] [info][status][plugin:infra@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.437] [info][plugins][taskManager][taskManager] TaskManager is identified by the Kibana UUID: ce42b997-a913-4d58-be46-bb1937feedd6</span><br><span class="line">log   [13:27:41.441] [info][status][plugin:task_manager@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.448] [info][status][plugin:rollup@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.547] [info][status][plugin:transform@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.555] [info][status][plugin:encryptedSavedObjects@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.605] [info][status][plugin:actions@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.677] [info][status][plugin:alerting@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.853] [info][status][plugin:siem@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.868] [info][status][plugin:remote_clusters@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.876] [info][status][plugin:cross_cluster_replication@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.937] [info][status][plugin:upgrade_assistant@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:41.994] [info][status][plugin:uptime@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.006] [info][status][plugin:oss_telemetry@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.022] [info][status][plugin:file_upload@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.032] [info][status][plugin:data@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.067] [info][status][plugin:lens@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.136] [info][status][plugin:snapshot_restore@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.151] [info][status][plugin:input_control_vis@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.164] [info][status][plugin:navigation@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.169] [info][status][plugin:management@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.174] [info][status][plugin:kibana_react@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.178] [info][status][plugin:region_map@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.217] [info][status][plugin:telemetry@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.226] [info][status][plugin:metric_vis@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.230] [info][status][plugin:markdown_vis@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.399] [info][status][plugin:timelion@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.403] [info][status][plugin:ui_metric@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.406] [info][status][plugin:tagcloud@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.410] [info][status][plugin:table_vis@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.414] [info][status][plugin:vega@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:42.421] [warning][browser-driver][reporting] Enabling the Chromium sandbox provides an additional layer of protection.</span><br><span class="line">log   [13:27:44.878] [warning][reporting] Generating a random key for xpack.reporting.encryptionKey. To prevent pending reports from failing on restart, please set xpack.reporting.encryptionKey in kibana.yml</span><br><span class="line">log   [13:27:44.888] [info][status][plugin:reporting@7.6.0] Status changed from uninitialized to green - Ready</span><br><span class="line">log   [13:27:44.970] [info][listening] Server running at http://192.168.237.11:5601</span><br><span class="line">log   [13:27:45.502] [info][server][Kibana][http] http server running at http://192.168.237.11:5601</span><br><span class="line">log   [13:27:45.549] [error][reporting] The Reporting plugin encountered issues launching Chromium in a self-test. You may have trouble generating reports.</span><br><span class="line">log   [13:27:45.549] [error][reporting] ErrorEvent &#123;</span><br><span class="line">target:</span><br><span class="line"> WebSocket &#123;</span><br><span class="line">   _events:</span><br><span class="line">    [Object: null prototype] &#123; open: [Function], error: [Function] &#125;,</span><br><span class="line">   _eventsCount: 2,</span><br><span class="line">   _maxListeners: undefined,</span><br><span class="line">   readyState: 3,</span><br><span class="line">   protocol: &#x27;&#x27;,</span><br><span class="line">   _binaryType: &#x27;nodebuffer&#x27;,</span><br><span class="line">   _closeFrameReceived: false,</span><br><span class="line">   _closeFrameSent: false,</span><br><span class="line">   _closeMessage: &#x27;&#x27;,</span><br><span class="line">   _closeTimer: null,</span><br><span class="line">   _closeCode: 1006,</span><br><span class="line">   _extensions: &#123;&#125;,</span><br><span class="line">   _receiver: null,</span><br><span class="line">   _sender: null,</span><br><span class="line">   _socket: null,</span><br><span class="line">   _isServer: false,</span><br><span class="line">   _redirects: 0,</span><br><span class="line">   url:</span><br><span class="line">    &#x27;ws://127.0.0.1:44598/devtools/browser/cde91cb8-faad-4730-9d12-57c1e8ffd49a&#x27;,</span><br><span class="line">   _req: null &#125;,</span><br><span class="line">type: &#x27;error&#x27;,</span><br><span class="line">message: &#x27;connect ECONNREFUSED 127.0.0.1:44598&#x27;,</span><br><span class="line">error:</span><br><span class="line"> &#123; Error: connect ECONNREFUSED 127.0.0.1:44598</span><br><span class="line">     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)</span><br><span class="line">   errno: &#x27;ECONNREFUSED&#x27;,</span><br><span class="line">   code: &#x27;ECONNREFUSED&#x27;,</span><br><span class="line">   syscall: &#x27;connect&#x27;,</span><br><span class="line">   address: &#x27;127.0.0.1&#x27;,</span><br><span class="line">   port: 44598 &#125; &#125;</span><br><span class="line">log   [13:27:45.557] [warning][reporting] See Chromium&#x27;s log output at &quot;/usr/elastic/kibana/data/headless_shell-linux/chrome_debug.log&quot;</span><br><span class="line">log   [13:27:45.559] [warning][reporting] Reporting plugin self-check generated a warning: Error: Could not close browser client handle!</span><br></pre></td></tr></table></figure>
<h2 id="4-3-浏览器访问"><a href="#4-3-浏览器访问" class="headerlink" title="4.3 浏览器访问"></a>4.3 浏览器访问</h2><p><img src="https://eelve.com/upload/2020/3/2020030302-e7c518603e69473a8438fb32a9454154.png" alt="2020030302"></p>
<p>下面我们继续操作，利用搭建Elasticsearch的时候添加的数据做一个可视化图表出来</p>
<p><img src="https://eelve.com/upload/2020/3/2020030306-5f167cf3142041ad944de9b7b0ff0eb9.png" alt="2020030306"><br><img src="https://eelve.com/upload/2020/3/2020030303-9787af1aceb148ef8b2f6a49015630c4.png" alt="2020030303"><br><img src="https://eelve.com/upload/2020/3/2020030304-a74acb31fabc4f4da44e96e0c7a28610.png" alt="2020030304"><br><img src="https://eelve.com/upload/2020/3/2020030305-c4f00a780a704435b28eb34f360857da.png" alt="2020030305"><br><img src="https://eelve.com/upload/2020/3/2020030308-53cd70f082074829afb4ee887948b24a.png" alt="2020030308"><br><img src="https://eelve.com/upload/2020/3/2020030311-d8de4d9839d34d38b731ba0ce0be2336.png" alt="2020030311"></p>
<p>我们可以看到已经利用数据做出了一个柱饼图了，下面就再美化以下，得到最终结果</p>
<p><img src="https://eelve.com/upload/2020/3/2020030312-452f0ac1954844cab0ea2955bd43dfa2.png" alt="2020030312"></p>
<p>另外我们还可以保存分享</p>
<p><img src="https://eelve.com/upload/2020/3/2020030313-425f770de5064b06b8951748d6a0d01b.png" alt="2020030313"></p>
<p>然后我们还可以使用一下Kibana的开发工具，给<strong>eelve</strong>新加一条数据</p>
<p><img src="https://eelve.com/upload/2020/3/2020030314-1689d96967794fc38f042ea3807dfc1d.png" alt="2020030314"><br><img src="https://eelve.com/upload/2020/3/2020030315-68061267b1ac4b13a7844b873aa06c6b.png" alt="2020030315"></p>
<p>然后再刷新图表，可以看到数据会产生相应的变化</p>
<p><img src="https://eelve.com/upload/2020/3/2020030316-bb66b6f0ba19419abc0ea3b674703f1b.png" alt="2020030316"></p>
<p>也就是说如果数据是实时变化的话，这边的图表也会跟着变化。</p>
<h1 id="伍、Kibana特性"><a href="#伍、Kibana特性" class="headerlink" title="伍、Kibana特性"></a>伍、Kibana特性</h1><ul>
<li><p>强大的定制功能：根据业务通过Kibana中的Canvas，发挥无限创意自由定制</p>
<ul>
<li><p>日志分析</p>
<p><img src="https://eelve.com/upload/2020/3/screenshot-canvas-log-analysis-e24abcc3311841c886dbc36c8ca8dc05.png" alt="screenshot-canvas-log-analysis"></p>
</li>
<li><p>基础设施监测</p>
<p><img src="https://eelve.com/upload/2020/3/screenshot-canvas-infrastructure-706070724cb94eabbe6c37f1c82ce66d.png" alt="screenshot-canvas-infrastructure"></p>
</li>
<li><p>APM</p>
<p><img src="https://eelve.com/upload/2020/3/screenshot-canvas-apm-d007b95db41646a8832f1b1e35734c14.png" alt="screenshot-canvas-apm"></p>
</li>
<li><p>安全运营</p>
<p><img src="https://eelve.com/upload/2020/3/screenshot-canvas-security-operations-dd4a909ca4164efa93a30fc9e4c7b7e3.png" alt="screenshot-canvas-security-operations"></p>
</li>
<li><p>业务分析</p>
<p><img src="https://eelve.com/upload/2020/3/screenshot-canvas-business-analytics-76b7f80430664be09ca4a2798ffb7faa.png" alt="screenshot-canvas-business-analytics"></p>
</li>
</ul>
</li>
<li><p>把制作好的图表分享，让每个人都感受到 Kibana 的便利：只需选择适合您的分享选项，即可轻松地把 Kibana 可视化分享给您选择的任何人：您的团队成员、您的老板、老板的老板、您的客户、合规经理或承包商。嵌入仪表板，分享链接，或者导出为 PDF、PNG 或 CSV 文件并作为附件发送给别人。</p>
</li>
</ul>
<p><img src="https://eelve.com/upload/2020/3/reporting_no_zoom-optimized-1144e12a2f5e4e308fb9aee150ea7629.gif" alt="reporting_no_zoom-optimized"></p>
<ul>
<li>良好的控制访问权限：通过 Kibana Spaces 整理您的仪表板和可视化。通过基于角色的访问控制，邀请用户访问某些空间（但不允许访问其他空间），让他们能够查看特定内容并使用特定功能。</li>
</ul>
<p><img src="https://i.loli.net/2020/03/03/SlqFLG8AMNZiQXp.gif" alt="security-login.gif"></p>
<ul>
<li><p>管理：用于数据采集等操作的堆栈管理，有了 Kibana，命令行不再是管理安全设置、监测堆栈、采集和汇总数据或配置其他 Elastic Stack 功能的唯一途径。与此同时，得益于我们出色的 API，用户可以通过可视化 UI 轻松地管理 Elastic Stack 并确保其安全性，这种方式更加直观，也能让更多的人上手使用。</p>
<ul>
<li><p>添加数据</p>
<p><img src="https://eelve.com/upload/2020/3/kibana-homepage-ca50d6a5d73b4e5e981724528a492eca.jpg" alt="kibana-homepage"></p>
</li>
<li><p>确保访问的安全性</p>
<p><img src="https://eelve.com/upload/2020/3/kibana-management-security-2be33e4e888845ea87d6537b2eeaeb7f.jpg" alt="kibana-management-security"></p>
</li>
<li><p>管理管道</p>
<p><img src="https://eelve.com/upload/2020/3/kibana-management-logstash-f9dbc5faf2ed484f9643ead95ef57e02.jpg" alt="kibana-management-logstash"></p>
</li>
<li><p>汇总</p>
<p><img src="https://eelve.com/upload/2020/3/screenshot-rollups-management-ui-ec0be7dea0374a21a95bd18a048c094f.jpg" alt="screenshot-rollups-management-ui"></p>
</li>
<li><p>开发工具</p>
<p><img src="https://eelve.com/upload/2020/3/5.5-console-80pct-generic-rgb-360a6e4bbf484353b27151e27de93b2e.jpg" alt="5.5-console-80pct-generic-rgb"></p>
</li>
</ul>
</li>
<li><p>可直接应用于用例</p>
</li>
</ul>
<p>有时您只想对某个文件进行 tail 操作。您可能希望跟踪自己网站的运行状态。或者您可能希望查看分布式痕迹。通过 Kibana 内置应用，例如 Logs、Infrastructure、APM、Uptime 以及其他应用，无需离开 Kibana，便能轻松完成这一切。    </p>
<p><img src="https://eelve.com/upload/2020/3/image4-2-d9d1a61d020f4af7b934c3e6fa424208.png" alt="image4-2"></p>
<hr>
<p>【<strong>后面的话</strong>】利用Kibana我们可以做出炫酷的符合业务且满足客户可视化展示。并且Kibana本身都提供相当多数量的各种图标模板，通过各种图标的组合可以轻松的开发一个属于我们自己的大屏。另外我们需要注意的是，我们应该根据我们的数据的特点选择合适的图表进行展示，这样可以是我们的图表显得更美观。今天只是体验了Kibana的部分功能，后续的其他功能，将配合Beats进行体验。</p>
<hr>
<p><img src="https://eelve.com/upload/2019/8/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 Stream实践</title>
    <url>/posts/61187cf0.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】Java中的Stream于1.8版本析出，平时项目中也有用到，今天就系统的来实践一下。下面借用重庆力帆队伍中我个人比较喜欢的球员来操作一波，队员的年龄为了便于展示某些api做了调整，请不要太认真哦。</p>
<hr>
<h1 id="壹-Stream理解"><a href="#壹-Stream理解" class="headerlink" title="壹. Stream理解"></a>壹. Stream理解</h1><p>在java中我们称Stream为『<strong>流</strong>』，我们经常会用流去对集合进行一些流水线的操作。stream就像工厂一样，只需要把集合、命令还有一些参数灌输到流水线中去，就可以加工成得出想要的结果。这样的流水线能大大简洁代码，减少操作。给我个人的感觉类似JavaScript中的链式函数。</p>
<h1 id="贰-Stream流程"><a href="#贰-Stream流程" class="headerlink" title="贰. Stream流程"></a>贰. Stream流程</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">原集合 —&gt; 流 —&gt; 各种操作(过滤、分组、统计) —&gt; 终端操作</span><br></pre></td></tr></table></figure>
<p>Stream流的操作流程一般都是这样的，先将集合转为流，然后经过各种操作，比如过滤、筛选、分组、计算。最后的终端操作，就是转化成我们想要的数据，这个数据的形式一般还是集合，有时也会按照需求输出count计数。下文会一一举例。</p>
<h1 id="叁-API实践"><a href="#叁-API实践" class="headerlink" title="叁. API实践"></a>叁. API实践</h1><p>首先，定义一个用户对象，包含姓名、年龄、id三个成员变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.training.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/6/28 15:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(exclude=&#123;&quot;id&quot;,&quot;name&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Link name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;, columnDefinition = &quot;varchar(255) not null&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(User o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age.compareTo(o.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在数据库中插入测试数据，见下图：</p>
<p><img src="https://image.eelve.com/eblog/streamDataSource-df15382b03b24526955b1b14636316dd.png" alt="streamDataSource"></p>
<h2 id="3-1过滤"><a href="#3-1过滤" class="headerlink" title="3.1过滤"></a>3.1过滤</h2><h3 id="1）filter-过滤-T-gt-boolean"><a href="#1）filter-过滤-T-gt-boolean" class="headerlink" title="1）filter 过滤(T-&gt; boolean)"></a>1）filter 过滤(T-&gt; boolean)</h3><p>假如我们要实现过滤出40岁以下的队员，我们可以这样来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().filter(user -&gt; user.getAge() &lt;= <span class="number">40</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>filter里面，-&gt;箭头后面跟着的是一个<strong>boolean</strong>值，可以写任何的过滤条件，就相当于sql中where后面的东西，换句话说，能用sql实现的功能这里都可以实现<br>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br><span class="line">User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2）distinct-去重"><a href="#2）distinct-去重" class="headerlink" title="2）distinct 去重"></a>2）distinct 去重</h3><p>其用法和sql中的使用类似，假如我们要实现过去除用重复年龄的队员，我们可以这样来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserDistinct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().distinct().collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br><span class="line">User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)</span><br></pre></td></tr></table></figure>
<h3 id="3）sorted排序"><a href="#3）sorted排序" class="headerlink" title="3）sorted排序"></a>3）sorted排序</h3><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(User o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> age.compareTo(o.getAge());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamSorted</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().sorted().collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>反之, 需要调用 sorted((T, T) -&gt; int) 实现 Comparator 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamSortedWithComparator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().sorted(Comparator.comparingInt(User::getAge)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br><span class="line">User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)</span><br></pre></td></tr></table></figure>
<h3 id="4）limit（）-返回前n个元素"><a href="#4）limit（）-返回前n个元素" class="headerlink" title="4）limit（） 返回前n个元素"></a>4）limit（） 返回前n个元素</h3><p>如果想知道队伍中年龄最小的就可以使用下面来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br></pre></td></tr></table></figure>
<h3 id="5）skip"><a href="#5）skip" class="headerlink" title="5）skip"></a>5）skip</h3><p>它的用法和limit正好相反，是去除前面几个元素。<br>假如我们要去除前面两个元素就可以使用下面的方法来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamSkip</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().skip(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br><span class="line">User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)</span><br></pre></td></tr></table></figure>
<h3 id="6）组合使用"><a href="#6）组合使用" class="headerlink" title="6）组合使用"></a>6）组合使用</h3><p>以上的过滤函数物品们可以组合来使用来实现我们具体的需求，示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamSortLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">       List&lt;User&gt; resultList = userList.stream().sorted().limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">       <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">           System.out.println(user.toString());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以得到先排序后限制的结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br></pre></td></tr></table></figure>
<h2 id="3-2-映射"><a href="#3-2-映射" class="headerlink" title="3.2 映射"></a>3.2 映射</h2><h3 id="1）map-T-gt-R"><a href="#1）map-T-gt-R" class="headerlink" title="1）map(T-&gt;R)"></a>1）map(T-&gt;R)</h3><p>map是将T类型的数据转为R类型的数据，比如我们想要设置一个新的list，存储用户所有的城市信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;Integer&gt; resultList = userList.stream().map(User::getAge).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(resultList.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这样我们可以得到所有年龄的样本，执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">43</span>]</span><br></pre></td></tr></table></figure>
<h3 id="2）flatMap-T-gt-Stream"><a href="#2）flatMap-T-gt-Stream" class="headerlink" title="2）flatMap(T -&gt; Stream)"></a>2）flatMap(T -&gt; Stream<R>)</h3><p>将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStreamMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; habitsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        habitsList.add(<span class="string">&quot;唱歌,听歌&quot;</span>);</span><br><span class="line">        habitsList.add(<span class="string">&quot;羽毛球,足球,登山&quot;</span>);</span><br><span class="line">        habitsList = habitsList.stream().map(s -&gt; s.split(<span class="string">&quot;,&quot;</span>)).flatMap(Arrays::stream).collect(Collectors.toList());</span><br><span class="line">        System.out.println(habitsList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[唱歌, 听歌, 羽毛球, 足球, 登山]</span><br></pre></td></tr></table></figure>
<p>这里原集合中的数据由逗号分割，使用split进行拆分后，得到的是Stream&lt;String[]&gt;，字符串数组组成的流，要使用flatMap的<strong>Arrays::stream</strong>，将Stream&lt;String[]&gt;转为Stream<String>,然后把流相连接，组成了完整的唱歌, 听歌, 羽毛球, 足球, 登山。</p>
<h2 id="3-3-查找"><a href="#3-3-查找" class="headerlink" title="3.3 查找"></a>3.3 查找</h2><h3 id="1）allMatch（T-gt-boolean）"><a href="#1）allMatch（T-gt-boolean）" class="headerlink" title="1）allMatch（T-&gt;boolean）"></a>1）allMatch（T-&gt;boolean）</h3><p>检测是否全部满足参数行为，假如我们要检测是不是所有队员都是U21的球员：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamAllMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        <span class="keyword">boolean</span> isNotU21 = userList.stream().allMatch(user -&gt; user.getAge() &gt;= <span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否都不是U21球员：&quot;</span> + isNotU21);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">是否都不是U21球员：<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<h3 id="2）anyMatch（T-gt-boolean）"><a href="#2）anyMatch（T-gt-boolean）" class="headerlink" title="2）anyMatch（T-&gt;boolean）"></a>2）anyMatch（T-&gt;boolean）</h3><p>检测是否有任意元素满足给定的条件，比如，想知道是否有26岁的球员：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamAnyMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        <span class="keyword">boolean</span> isAgeU26 = userList.stream().anyMatch(user -&gt; user.getAge() == <span class="number">26</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否有26岁的球员：&quot;</span> + isAgeU26);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">是否有<span class="number">26</span>岁的球员：<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<h3 id="3）noneMatch-T-gt-boolean"><a href="#3）noneMatch-T-gt-boolean" class="headerlink" title="3）noneMatch(T -&gt; boolean)"></a>3）noneMatch(T -&gt; boolean)</h3><p>流中是否有元素匹配给定的 T -&gt; boolean 条件。比如我们要检测是否含有U18的队员：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamNoneMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">       <span class="keyword">boolean</span> isNotU18 = userList.stream().noneMatch(user -&gt; user.getAge() &lt;= <span class="number">18</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;是否都不是U18球员：&quot;</span> + isNotU18);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">是否都不是U18球员：<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p>说明没有U18的队员。</p>
<h3 id="4）findFirst-找到第一个元素"><a href="#4）findFirst-找到第一个元素" class="headerlink" title="4）findFirst( ):找到第一个元素"></a>4）findFirst( ):找到第一个元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserFindFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Optional&lt;User&gt; firstUser = userList.stream().sorted().findFirst();</span><br><span class="line">        System.out.println(firstUser.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional[User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="5）findAny-找到任意一个元素"><a href="#5）findAny-找到任意一个元素" class="headerlink" title="5）findAny():找到任意一个元素"></a>5）findAny():找到任意一个元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserFindAny</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Optional&lt;User&gt; anytUser = userList.parallelStream().sorted().findAny();</span><br><span class="line">        System.out.println(anytUser.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional[User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="3-4-归纳计算"><a href="#3-4-归纳计算" class="headerlink" title="3.4 归纳计算"></a>3.4 归纳计算</h2><h3 id="1）求队员的总人数"><a href="#1）求队员的总人数" class="headerlink" title="1）求队员的总人数"></a>1）求队员的总人数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        <span class="keyword">long</span> totalAge = userList.stream().collect(Collectors.counting());</span><br><span class="line">        System.out.println(<span class="string">&quot;队员人数为：&quot;</span> + totalAge);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">队员人数为：<span class="number">6</span></span><br></pre></td></tr></table></figure>
<h3 id="2）得到某一属性的最大最小值"><a href="#2）得到某一属性的最大最小值" class="headerlink" title="2）得到某一属性的最大最小值"></a>2）得到某一属性的最大最小值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserMaxAndMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Optional&lt;User&gt; userMaxAge = userList.stream().collect(Collectors.maxBy(Comparator.comparing(User::getAge)));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄最大的队员为：&quot;</span> + userMaxAge.toString());</span><br><span class="line"></span><br><span class="line">        Optional&lt;User&gt; userMinAge = userList.stream().collect(Collectors.minBy(Comparator.comparing(User::getAge)));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄最小的队员为：&quot;</span> + userMinAge.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">年龄最大的队员为：Optional[User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)]</span><br><span class="line">年龄最小的队员为：Optional[User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="3）求年龄总和是多少"><a href="#3）求年龄总和是多少" class="headerlink" title="3）求年龄总和是多少"></a>3）求年龄总和是多少</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserSummingInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        <span class="keyword">int</span> totalAge = userList.stream().collect(Collectors.summingInt(User::getAge));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄总和为：&quot;</span> + totalAge);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">年龄总和为：<span class="number">175</span></span><br></pre></td></tr></table></figure>
<p>我们经常会用BigDecimal来记录金钱，假设想得到BigDecimal的总和：<br>// 获得列表对象金额， 使用reduce聚合函数,实现累加器<br>BigDecimal sum = myList.stream() .map(User::getMoney)<br>.reduce(BigDecimal.ZERO,BigDecimal::add);</p>
<h3 id="4）求年龄平均值"><a href="#4）求年龄平均值" class="headerlink" title="4）求年龄平均值"></a>4）求年龄平均值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserAveragingInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Double totalAge = userList.stream().collect(Collectors.averagingInt(User::getAge));</span><br><span class="line">        System.out.println(<span class="string">&quot;平均年龄为：&quot;</span> + totalAge);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">平均年龄为：<span class="number">29.166666666666668</span></span><br></pre></td></tr></table></figure>
<h3 id="5）一次性得到元素的个数、总和、最大值、最小值"><a href="#5）一次性得到元素的个数、总和、最大值、最小值" class="headerlink" title="5）一次性得到元素的个数、总和、最大值、最小值"></a>5）一次性得到元素的个数、总和、最大值、最小值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserSummarizingInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        IntSummaryStatistics  statistics  = userList.stream().collect(Collectors.summarizingInt(User::getAge));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄的统计结果为：&quot;</span> + statistics );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">年龄的统计结果为：IntSummaryStatistics&#123;count=<span class="number">6</span>, sum=<span class="number">175</span>, min=<span class="number">25</span>, average=<span class="number">29.166667</span>, max=<span class="number">43</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6）字符串拼接"><a href="#6）字符串拼接" class="headerlink" title="6）字符串拼接"></a>6）字符串拼接</h3><p>要将队员的姓名连成一个字符串并用逗号分割。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserJoining</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        String  name  = userList.stream().map(User::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;所有的队员名字：&quot;</span> + name );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">所有的队员名字：费尔南多,费尔南迪尼奥,卡尔德克,阿德里安,隋维杰,克鲁伊夫</span><br></pre></td></tr></table></figure>
<h2 id="3-5-分组"><a href="#3-5-分组" class="headerlink" title="3.5 分组"></a>3.5 分组</h2><p>在数据库操作中，我们经常通过GROUP BY关键字对查询到的数据进行分组，java8的流式处理也提供了分组的功能。使用Collectors.groupingBy来进行分组。</p>
<h3 id="1）可以根据队员的年龄进行分组"><a href="#1）可以根据队员的年龄进行分组" class="headerlink" title="1）可以根据队员的年龄进行分组"></a>1）可以根据队员的年龄进行分组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserGroupingBy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">       Map&lt;Integer, List&lt;User&gt;&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge));</span><br><span class="line">       <span class="keyword">for</span> (Map.Entry&lt;Integer,List&lt;User&gt;&gt; entry :ageMap.entrySet())&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">key= <span class="number">25</span> and value= [User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)]</span><br><span class="line">key= <span class="number">26</span> and value= [User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>), User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)]</span><br><span class="line">key= <span class="number">43</span> and value= [User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)]</span><br><span class="line">key= <span class="number">27</span> and value= [User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)]</span><br><span class="line">key= <span class="number">28</span> and value= [User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)]</span><br></pre></td></tr></table></figure>
<p>结果是一个map，key为不重复的年龄，value为属于该年龄的队员列表。已经实现了分组。另外我们还可以继续分组得到两次分组的结果。</p>
<h3 id="2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list"><a href="#2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list" class="headerlink" title="2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list"></a>2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list</h3><p>按年龄分组并统计人数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserGroupingByCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Map&lt;Integer,Long&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge,Collectors.counting()));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer,Long&gt; entry :ageMap.entrySet())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队员中&quot;</span> + entry.getKey() + <span class="string">&quot;岁的队员人数为：&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">队员中<span class="number">25</span>岁的队员人数为：<span class="number">1</span></span><br><span class="line">队员中<span class="number">26</span>岁的队员人数为：<span class="number">2</span></span><br><span class="line">队员中<span class="number">43</span>岁的队员人数为：<span class="number">1</span></span><br><span class="line">队员中<span class="number">27</span>岁的队员人数为：<span class="number">1</span></span><br><span class="line">队员中<span class="number">28</span>岁的队员人数为：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="3）partitioningBy-分区"><a href="#3）partitioningBy-分区" class="headerlink" title="3）partitioningBy 分区"></a>3）partitioningBy 分区</h3><p>分区与分组的区别在于，分区是按照 true 和 false 来分的，因此partitioningBy 接受的参数的 lambda 也是 T -&gt; boolean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserPartitioningBy</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Map&lt;Boolean,List&lt;User&gt;&gt; partitioningByMap  = userList.stream().collect(partitioningBy(user -&gt; user.getAge() &gt;= <span class="number">30</span>));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Boolean,List&lt;User&gt;&gt; entry :partitioningByMap.entrySet())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">key= <span class="keyword">false</span> and value= [User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>), User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>), User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>), User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>), User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)]</span><br><span class="line">key= <span class="keyword">true</span> and value= [User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)]</span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>写在后面的话</strong>】留下stream的类实现的方法和依赖图，前面的实践也只是挑选了几个比较常用的Api。</p>
<p><img src="https://image.eelve.com/eblog/stream-d2e3fe9045e945ce9411d8db6043b32c.png" alt="stream"></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 Stream实践</title>
    <url>/posts/61187cf0.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】Java中的Stream于1.8版本析出，平时项目中也有用到，今天就系统的来实践一下。下面借用重庆力帆队伍中我个人比较喜欢的球员来操作一波，队员的年龄为了便于展示某些api做了调整，请不要太认真哦。</p>
<hr>
<h1 id="壹-Stream理解"><a href="#壹-Stream理解" class="headerlink" title="壹. Stream理解"></a>壹. Stream理解</h1><p>在java中我们称Stream为『<strong>流</strong>』，我们经常会用流去对集合进行一些流水线的操作。stream就像工厂一样，只需要把集合、命令还有一些参数灌输到流水线中去，就可以加工成得出想要的结果。这样的流水线能大大简洁代码，减少操作。给我个人的感觉类似JavaScript中的链式函数。</p>
<h1 id="贰-Stream流程"><a href="#贰-Stream流程" class="headerlink" title="贰. Stream流程"></a>贰. Stream流程</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">原集合 —&gt; 流 —&gt; 各种操作(过滤、分组、统计) —&gt; 终端操作</span><br></pre></td></tr></table></figure>
<p>Stream流的操作流程一般都是这样的，先将集合转为流，然后经过各种操作，比如过滤、筛选、分组、计算。最后的终端操作，就是转化成我们想要的数据，这个数据的形式一般还是集合，有时也会按照需求输出count计数。下文会一一举例。</p>
<h1 id="叁-API实践"><a href="#叁-API实践" class="headerlink" title="叁. API实践"></a>叁. API实践</h1><p>首先，定义一个用户对象，包含姓名、年龄、id三个成员变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.training.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/6/28 15:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(exclude=&#123;&quot;id&quot;,&quot;name&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span>  <span class="title">Comparable</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Link name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;, columnDefinition = &quot;varchar(255) not null&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(User o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age.compareTo(o.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在数据库中插入测试数据，见下图：</p>
<p><img src="https://eelve.com/upload/2019/7/streamDataSource-df15382b03b24526955b1b14636316dd.png" alt="streamDataSource"></p>
<h2 id="3-1过滤"><a href="#3-1过滤" class="headerlink" title="3.1过滤"></a>3.1过滤</h2><h3 id="1）filter-过滤-T-gt-boolean"><a href="#1）filter-过滤-T-gt-boolean" class="headerlink" title="1）filter 过滤(T-&gt; boolean)"></a>1）filter 过滤(T-&gt; boolean)</h3><p>假如我们要实现过滤出40岁以下的队员，我们可以这样来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().filter(user -&gt; user.getAge() &lt;= <span class="number">40</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>filter里面，-&gt;箭头后面跟着的是一个<strong>boolean</strong>值，可以写任何的过滤条件，就相当于sql中where后面的东西，换句话说，能用sql实现的功能这里都可以实现<br>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br><span class="line">User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2）distinct-去重"><a href="#2）distinct-去重" class="headerlink" title="2）distinct 去重"></a>2）distinct 去重</h3><p>其用法和sql中的使用类似，假如我们要实现过去除用重复年龄的队员，我们可以这样来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserDistinct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().distinct().collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br><span class="line">User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)</span><br></pre></td></tr></table></figure>
<h3 id="3）sorted排序"><a href="#3）sorted排序" class="headerlink" title="3）sorted排序"></a>3）sorted排序</h3><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(User o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> age.compareTo(o.getAge());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamSorted</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().sorted().collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>反之, 需要调用 sorted((T, T) -&gt; int) 实现 Comparator 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamSortedWithComparator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().sorted(Comparator.comparingInt(User::getAge)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br><span class="line">User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)</span><br></pre></td></tr></table></figure>
<h3 id="4）limit（）-返回前n个元素"><a href="#4）limit（）-返回前n个元素" class="headerlink" title="4）limit（） 返回前n个元素"></a>4）limit（） 返回前n个元素</h3><p>如果想知道队伍中年龄最小的就可以使用下面来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br></pre></td></tr></table></figure>
<h3 id="5）skip"><a href="#5）skip" class="headerlink" title="5）skip"></a>5）skip</h3><p>它的用法和limit正好相反，是去除前面几个元素。<br>假如我们要去除前面两个元素就可以使用下面的方法来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamSkip</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;User&gt; resultList = userList.stream().skip(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br><span class="line">User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)</span><br></pre></td></tr></table></figure>
<h3 id="6）组合使用"><a href="#6）组合使用" class="headerlink" title="6）组合使用"></a>6）组合使用</h3><p>以上的过滤函数物品们可以组合来使用来实现我们具体的需求，示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamSortLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">       List&lt;User&gt; resultList = userList.stream().sorted().limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">       <span class="keyword">for</span> (User user :  resultList)&#123;</span><br><span class="line">           System.out.println(user.toString());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以得到先排序后限制的结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)</span><br><span class="line">User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)</span><br><span class="line">User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)</span><br><span class="line">User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)</span><br></pre></td></tr></table></figure>
<h2 id="3-2-映射"><a href="#3-2-映射" class="headerlink" title="3.2 映射"></a>3.2 映射</h2><h3 id="1）map-T-gt-R"><a href="#1）map-T-gt-R" class="headerlink" title="1）map(T-&gt;R)"></a>1）map(T-&gt;R)</h3><p>map是将T类型的数据转为R类型的数据，比如我们想要设置一个新的list，存储用户所有的城市信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        List&lt;Integer&gt; resultList = userList.stream().map(User::getAge).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(resultList.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这样我们可以得到所有年龄的样本，执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">43</span>]</span><br></pre></td></tr></table></figure>
<h3 id="2）flatMap-T-gt-Stream"><a href="#2）flatMap-T-gt-Stream" class="headerlink" title="2）flatMap(T -&gt; Stream)"></a>2）flatMap(T -&gt; Stream<R>)</h3><p>将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStreamMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; habitsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        habitsList.add(<span class="string">&quot;唱歌,听歌&quot;</span>);</span><br><span class="line">        habitsList.add(<span class="string">&quot;羽毛球,足球,登山&quot;</span>);</span><br><span class="line">        habitsList = habitsList.stream().map(s -&gt; s.split(<span class="string">&quot;,&quot;</span>)).flatMap(Arrays::stream).collect(Collectors.toList());</span><br><span class="line">        System.out.println(habitsList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[唱歌, 听歌, 羽毛球, 足球, 登山]</span><br></pre></td></tr></table></figure>
<p>这里原集合中的数据由逗号分割，使用split进行拆分后，得到的是Stream&lt;String[]&gt;，字符串数组组成的流，要使用flatMap的<strong>Arrays::stream</strong>，将Stream&lt;String[]&gt;转为Stream<String>,然后把流相连接，组成了完整的唱歌, 听歌, 羽毛球, 足球, 登山。</p>
<h2 id="3-3-查找"><a href="#3-3-查找" class="headerlink" title="3.3 查找"></a>3.3 查找</h2><h3 id="1）allMatch（T-gt-boolean）"><a href="#1）allMatch（T-gt-boolean）" class="headerlink" title="1）allMatch（T-&gt;boolean）"></a>1）allMatch（T-&gt;boolean）</h3><p>检测是否全部满足参数行为，假如我们要检测是不是所有队员都是U21的球员：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamAllMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        <span class="keyword">boolean</span> isNotU21 = userList.stream().allMatch(user -&gt; user.getAge() &gt;= <span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否都不是U21球员：&quot;</span> + isNotU21);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">是否都不是U21球员：<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<h3 id="2）anyMatch（T-gt-boolean）"><a href="#2）anyMatch（T-gt-boolean）" class="headerlink" title="2）anyMatch（T-&gt;boolean）"></a>2）anyMatch（T-&gt;boolean）</h3><p>检测是否有任意元素满足给定的条件，比如，想知道是否有26岁的球员：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamAnyMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        <span class="keyword">boolean</span> isAgeU26 = userList.stream().anyMatch(user -&gt; user.getAge() == <span class="number">26</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否有26岁的球员：&quot;</span> + isAgeU26);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">是否有<span class="number">26</span>岁的球员：<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<h3 id="3）noneMatch-T-gt-boolean"><a href="#3）noneMatch-T-gt-boolean" class="headerlink" title="3）noneMatch(T -&gt; boolean)"></a>3）noneMatch(T -&gt; boolean)</h3><p>流中是否有元素匹配给定的 T -&gt; boolean 条件。比如我们要检测是否含有U18的队员：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserStreamNoneMatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">       <span class="keyword">boolean</span> isNotU18 = userList.stream().noneMatch(user -&gt; user.getAge() &lt;= <span class="number">18</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;是否都不是U18球员：&quot;</span> + isNotU18);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">是否都不是U18球员：<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p>说明没有U18的队员。</p>
<h3 id="4）findFirst-找到第一个元素"><a href="#4）findFirst-找到第一个元素" class="headerlink" title="4）findFirst( ):找到第一个元素"></a>4）findFirst( ):找到第一个元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserFindFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Optional&lt;User&gt; firstUser = userList.stream().sorted().findFirst();</span><br><span class="line">        System.out.println(firstUser.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional[User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="5）findAny-找到任意一个元素"><a href="#5）findAny-找到任意一个元素" class="headerlink" title="5）findAny():找到任意一个元素"></a>5）findAny():找到任意一个元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserFindAny</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Optional&lt;User&gt; anytUser = userList.parallelStream().sorted().findAny();</span><br><span class="line">        System.out.println(anytUser.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional[User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="3-4-归纳计算"><a href="#3-4-归纳计算" class="headerlink" title="3.4 归纳计算"></a>3.4 归纳计算</h2><h3 id="1）求队员的总人数"><a href="#1）求队员的总人数" class="headerlink" title="1）求队员的总人数"></a>1）求队员的总人数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        <span class="keyword">long</span> totalAge = userList.stream().collect(Collectors.counting());</span><br><span class="line">        System.out.println(<span class="string">&quot;队员人数为：&quot;</span> + totalAge);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">队员人数为：<span class="number">6</span></span><br></pre></td></tr></table></figure>
<h3 id="2）得到某一属性的最大最小值"><a href="#2）得到某一属性的最大最小值" class="headerlink" title="2）得到某一属性的最大最小值"></a>2）得到某一属性的最大最小值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserMaxAndMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Optional&lt;User&gt; userMaxAge = userList.stream().collect(Collectors.maxBy(Comparator.comparing(User::getAge)));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄最大的队员为：&quot;</span> + userMaxAge.toString());</span><br><span class="line"></span><br><span class="line">        Optional&lt;User&gt; userMinAge = userList.stream().collect(Collectors.minBy(Comparator.comparing(User::getAge)));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄最小的队员为：&quot;</span> + userMinAge.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">年龄最大的队员为：Optional[User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)]</span><br><span class="line">年龄最小的队员为：Optional[User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="3）求年龄总和是多少"><a href="#3）求年龄总和是多少" class="headerlink" title="3）求年龄总和是多少"></a>3）求年龄总和是多少</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserSummingInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        <span class="keyword">int</span> totalAge = userList.stream().collect(Collectors.summingInt(User::getAge));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄总和为：&quot;</span> + totalAge);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">年龄总和为：<span class="number">175</span></span><br></pre></td></tr></table></figure>
<p>我们经常会用BigDecimal来记录金钱，假设想得到BigDecimal的总和：<br>// 获得列表对象金额， 使用reduce聚合函数,实现累加器<br>BigDecimal sum = myList.stream() .map(User::getMoney)<br>.reduce(BigDecimal.ZERO,BigDecimal::add);</p>
<h3 id="4）求年龄平均值"><a href="#4）求年龄平均值" class="headerlink" title="4）求年龄平均值"></a>4）求年龄平均值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserAveragingInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Double totalAge = userList.stream().collect(Collectors.averagingInt(User::getAge));</span><br><span class="line">        System.out.println(<span class="string">&quot;平均年龄为：&quot;</span> + totalAge);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">平均年龄为：<span class="number">29.166666666666668</span></span><br></pre></td></tr></table></figure>
<h3 id="5）一次性得到元素的个数、总和、最大值、最小值"><a href="#5）一次性得到元素的个数、总和、最大值、最小值" class="headerlink" title="5）一次性得到元素的个数、总和、最大值、最小值"></a>5）一次性得到元素的个数、总和、最大值、最小值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserSummarizingInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        IntSummaryStatistics  statistics  = userList.stream().collect(Collectors.summarizingInt(User::getAge));</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄的统计结果为：&quot;</span> + statistics );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">年龄的统计结果为：IntSummaryStatistics&#123;count=<span class="number">6</span>, sum=<span class="number">175</span>, min=<span class="number">25</span>, average=<span class="number">29.166667</span>, max=<span class="number">43</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6）字符串拼接"><a href="#6）字符串拼接" class="headerlink" title="6）字符串拼接"></a>6）字符串拼接</h3><p>要将队员的姓名连成一个字符串并用逗号分割。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserJoining</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        String  name  = userList.stream().map(User::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;所有的队员名字：&quot;</span> + name );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">所有的队员名字：费尔南多,费尔南迪尼奥,卡尔德克,阿德里安,隋维杰,克鲁伊夫</span><br></pre></td></tr></table></figure>
<h2 id="3-5-分组"><a href="#3-5-分组" class="headerlink" title="3.5 分组"></a>3.5 分组</h2><p>在数据库操作中，我们经常通过GROUP BY关键字对查询到的数据进行分组，java8的流式处理也提供了分组的功能。使用Collectors.groupingBy来进行分组。</p>
<h3 id="1）可以根据队员的年龄进行分组"><a href="#1）可以根据队员的年龄进行分组" class="headerlink" title="1）可以根据队员的年龄进行分组"></a>1）可以根据队员的年龄进行分组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserGroupingBy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">       Map&lt;Integer, List&lt;User&gt;&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge));</span><br><span class="line">       <span class="keyword">for</span> (Map.Entry&lt;Integer,List&lt;User&gt;&gt; entry :ageMap.entrySet())&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">key= <span class="number">25</span> and value= [User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>)]</span><br><span class="line">key= <span class="number">26</span> and value= [User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>), User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)]</span><br><span class="line">key= <span class="number">43</span> and value= [User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)]</span><br><span class="line">key= <span class="number">27</span> and value= [User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>)]</span><br><span class="line">key= <span class="number">28</span> and value= [User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>)]</span><br></pre></td></tr></table></figure>
<p>结果是一个map，key为不重复的年龄，value为属于该年龄的队员列表。已经实现了分组。另外我们还可以继续分组得到两次分组的结果。</p>
<h3 id="2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list"><a href="#2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list" class="headerlink" title="2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list"></a>2）如果仅仅想统计各年龄的队员个数是多少，并不需要对应的list</h3><p>按年龄分组并统计人数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserGroupingByCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Map&lt;Integer,Long&gt; ageMap  = userList.stream().collect(Collectors.groupingBy(User::getAge,Collectors.counting()));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer,Long&gt; entry :ageMap.entrySet())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队员中&quot;</span> + entry.getKey() + <span class="string">&quot;岁的队员人数为：&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">队员中<span class="number">25</span>岁的队员人数为：<span class="number">1</span></span><br><span class="line">队员中<span class="number">26</span>岁的队员人数为：<span class="number">2</span></span><br><span class="line">队员中<span class="number">43</span>岁的队员人数为：<span class="number">1</span></span><br><span class="line">队员中<span class="number">27</span>岁的队员人数为：<span class="number">1</span></span><br><span class="line">队员中<span class="number">28</span>岁的队员人数为：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="3）partitioningBy-分区"><a href="#3）partitioningBy-分区" class="headerlink" title="3）partitioningBy 分区"></a>3）partitioningBy 分区</h3><p>分区与分组的区别在于，分区是按照 true 和 false 来分的，因此partitioningBy 接受的参数的 lambda 也是 T -&gt; boolean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserPartitioningBy</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getALL();</span><br><span class="line">        Map&lt;Boolean,List&lt;User&gt;&gt; partitioningByMap  = userList.stream().collect(partitioningBy(user -&gt; user.getAge() &gt;= <span class="number">30</span>));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Boolean,List&lt;User&gt;&gt; entry :partitioningByMap.entrySet())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">key= <span class="keyword">false</span> and value= [User(id=<span class="number">1</span>, name=费尔南多, age=<span class="number">25</span>), User(id=<span class="number">2</span>, name=费尔南迪尼奥, age=<span class="number">26</span>), User(id=<span class="number">3</span>, name=卡尔德克, age=<span class="number">27</span>), User(id=<span class="number">4</span>, name=阿德里安, age=<span class="number">28</span>), User(id=<span class="number">5</span>, name=隋维杰, age=<span class="number">26</span>)]</span><br><span class="line">key= <span class="keyword">true</span> and value= [User(id=<span class="number">6</span>, name=克鲁伊夫, age=<span class="number">43</span>)]</span><br></pre></td></tr></table></figure>
<hr>
<p>【<strong>写在后面的话</strong>】留下stream的类实现的方法和依赖图，前面的实践也只是挑选了几个比较常用的Api。</p>
<p><img src="https://eelve.com/upload/2019/7/stream-d2e3fe9045e945ce9411d8db6043b32c.png" alt="stream"></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel入门指北</title>
    <url>/posts/d2ca763d.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/posts/56832225.html">浅析Spring Boot单体应用熔断技术</a> 中对比了一下几种常见的接口熔断的技术。这里就具体使用 <code>Sentinel</code> 来记录以下。</p>
<hr>
<h1 id="壹、sentinel介绍"><a href="#壹、sentinel介绍" class="headerlink" title="壹、sentinel介绍"></a>壹、sentinel介绍</h1><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。<code>Sentinel</code> 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。</p>
<h2 id="Sentinel的基本概念基本概念包括"><a href="#Sentinel的基本概念基本概念包括" class="headerlink" title="Sentinel的基本概念基本概念包括:"></a>Sentinel的基本概念基本概念包括:</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>资源是 <code>Sentinel</code> 的关键概念。它可以是 <code>Java</code> 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。只要通过 <code>Sentinel API</code> 定义的代码，就是资源，能够被 <code>Sentinel</code> 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>
<h2 id="Sentinel的主要功能"><a href="#Sentinel的主要功能" class="headerlink" title="Sentinel的主要功能"></a>Sentinel的主要功能</h2><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p>
<p><img src="https://image.eelve.com/eblog/sentinel-flow-overview-ca2015f6c76449e2ac74f5a377e0573d.jpg" alt="流控效果"></p>
<p>流量控制有以下几个角度:</p>
<ul>
<li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li>
<li>运行指标，例如 <code>QPS</code>、线程池、系统负载等；</li>
<li>控制的效果，例如直接限流、冷启动、排队等。</li>
</ul>
<p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p>
<h3 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h3><p>除了流量控制以外，降低调用链路中的不稳定资源也是 <code>Sentinel</code> 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。当调用链路中某个资源出现不稳定，例如，表现为 <code>timeout</code>，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p>
<p>降级有以下几个角度:</p>
<ul>
<li>通过并发线程数进行限制</li>
</ul>
<p>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p>
<ul>
<li>通过响应时间对资源进行降级</li>
</ul>
<p>除了对并发线程数进行控制以外，<code>Sentinel</code> 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p>
<h3 id="系统负载保护"><a href="#系统负载保护" class="headerlink" title="系统负载保护"></a>系统负载保护</h3><p>Sentinel同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p>
<p>针对这个情况，<code>Sentinel</code> 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p>
<h2 id="主要工作机制"><a href="#主要工作机制" class="headerlink" title="主要工作机制"></a>主要工作机制</h2><ul>
<li>对主流框架提供适配或者显示的 <code>API</code>，来定义需要保护的资源，并提供设施对资源进行实时统计和调用链路分析。</li>
<li>根据预设的规则，结合对资源的实时统计信息，对流量进行控制。同时，<code>Sentinel</code> 提供开放的接口，方便您定义及改变规则。</li>
<li><code>Sentinel</code> 提供实时的监控系统，方便您快速了解目前系统的状态。</li>
</ul>
<h1 id="贰、基础使用"><a href="#贰、基础使用" class="headerlink" title="贰、基础使用"></a>贰、基础使用</h1><h2 id="2-1、-通过抛出异常的方式"><a href="#2-1、-通过抛出异常的方式" class="headerlink" title="2.1、 通过抛出异常的方式"></a>2.1、 通过抛出异常的方式</h2><p><code>SphU</code>包含了<code>try-catch</code>风格的<code>API</code>。用这种方式，当资源发生了限流之后会抛出<code>BlockException</code>。这个时候可以捕捉异常，进行限流之后的逻辑处理。示例代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span></span><br><span class="line"><span class="keyword">try</span> (Entry entry = SphU.entry(<span class="string">&quot;resourceName&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 被保护的业务逻辑</span></span><br><span class="line">  <span class="comment">// do something here...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">  <span class="comment">// 资源访问阻止，被限流或被降级</span></span><br><span class="line">  <span class="comment">// 在此处进行相应的处理操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>SphU.entry(xxx)</code>需要与<code>entry.exit()</code>方法成对出现，匹配调用，否则会导致调用链记录异常，抛出<code>ErrorEntryFreeException</code>异常。</p>
</blockquote>
<h2 id="2-2、通过返回布尔值方式"><a href="#2-2、通过返回布尔值方式" class="headerlink" title="2.2、通过返回布尔值方式"></a>2.2、通过返回布尔值方式</h2><p><code>SphO</code>提供 <code>if-else</code> 风格的 <code>API</code>。用这种方式，当资源发生了限流之后会返回 <code>false</code>，这个时候可以根据返回值，进行限流之后的逻辑处理。示例代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 资源名可使用任意有业务语义的字符串</span></span><br><span class="line"><span class="keyword">if</span> (SphO.entry(<span class="string">&quot;自定义资源名&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 务必保证finally会被执行</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 被保护的业务逻辑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    SphO.exit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 资源访问阻止，被限流或被降级</span></span><br><span class="line">  <span class="comment">// 进行相应的处理操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3、异步调用支持"><a href="#2-3、异步调用支持" class="headerlink" title="2.3、异步调用支持"></a>2.3、异步调用支持</h3><p><code>Sentinel</code> 支持异步调用链路的统计。在异步调用中，需要通过 <code>SphU.asyncEntry(xxx)</code> 方法定义资源，并通常需要在异步的回调函数中调用 <code>exit</code> 方法。以下是一个简单的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步调用.</span></span><br><span class="line">    doAsync(userId, result -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 在此处处理异步调用的结果.</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在回调结束后 exit.</span></span><br><span class="line">            entry.exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">    <span class="comment">// Request blocked.</span></span><br><span class="line">    <span class="comment">// Handle the exception (e.g. retry or fallback).</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SphU.asyncEntry(xxx)</code> 不会影响当前（调用线程）的 <code>Context</code>，因此以下两个 <code>entry</code> 在调用链上是平级关系（处于同一层），而不是嵌套关系：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用链类似于：</span></span><br><span class="line"><span class="comment">// -parent</span></span><br><span class="line"><span class="comment">// ---asyncResource</span></span><br><span class="line"><span class="comment">// ---syncResource</span></span><br><span class="line">asyncEntry = SphU.asyncEntry(asyncResource);</span><br><span class="line">entry = SphU.entry(normalResource);</span><br></pre></td></tr></table></figure>
<p>若在异步回调中需要嵌套其它的资源调用（无论是 <code>entry</code> 还是 <code>asyncEntry</code>），只需要借助<code>Sentinel</code>提供的上下文切换功能，在对应的地方通过 <code>ContextUtil.runOnContext(context, f)</code> 进行 <code>Context</code> 变换，将对应资源调用处的 <code>Context</code> 切换为生成的异步 <code>Context</code>，即可维持正确的调用链路关系。示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">    Entry entry = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        entry = SphU.entry(<span class="string">&quot;handleResultForAsync&quot;</span>);</span><br><span class="line">        <span class="comment">// Handle your result here.</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">        <span class="comment">// Blocked for the result handler.</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            entry.exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Asynchronous invocation.</span></span><br><span class="line">        doAsync(userId, result -&gt; &#123;</span><br><span class="line">            <span class="comment">// 在异步回调中进行上下文变换，通过 AsyncEntry 的 getAsyncContext 方法获取异步 Context</span></span><br><span class="line">            ContextUtil.runOnContext(entry.getAsyncContext(), () -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 此处嵌套正常的资源调用.</span></span><br><span class="line">                    handleResult(result);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    entry.exit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">        <span class="comment">// Request blocked.</span></span><br><span class="line">        <span class="comment">// Handle the exception (e.g. retry or fallback).</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时的调用链就类似于：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-parent</span><br><span class="line">---asyncInvocation</span><br><span class="line">-----handleResultForAsync</span><br></pre></td></tr></table></figure>
<h1 id="叁、注解使用"><a href="#叁、注解使用" class="headerlink" title="叁、注解使用"></a>叁、注解使用</h1><p><code>Sentinel</code> 提供了 <code>@SentinelResource</code> 注解用于定义资源，并提供了 <code>AspectJ</code> 的扩展用于自动定义资源、处理 <code>BlockException</code> 等。使用 <code>Sentinel Annotation AspectJ Extension</code> 的时候需要引入以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：注解方式埋点不支持 private 方法。</p>
</blockquote>
<p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 <code>fallback</code> 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p>
<ul>
<li><code>value</code>：资源名称，必需项（不能为空）</li>
<li><code>entryType</code>：<code>entry</code> 类型，可选项（默认为 <code>EntryType.OUT</code>）</li>
<li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。<code>blockHandler</code> 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。<code>blockHandler</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>
<li><code>fallback</code>：<code>fallback</code> 函数名称，可选项，用于在抛出异常的时候提供 <code>fallback</code> 处理逻辑。  <code>fallback</code> 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。<code>fallback</code> 函数签名和位置要求：<ul>
<li>返回值类型必须与原函数返回值类型一致；</li>
<li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>
<li><code>fallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>
</ul>
</li>
<li><code>defaultFallback</code>（since 1.6.0）：默认的 <code>fallback</code> 函数名称，可选项，通常用于通用的 <code>fallback</code> 逻辑（即可以用于很多服务或方法）。默认 <code>fallback</code> 函数可以针对所以类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 <code>fallback</code> 和 <code>defaultFallback</code>，则只有 <code>fallback</code> 会生效。<code>defaultFallback</code> 函数签名要求：<ul>
<li>返回值类型必须与原函数返回值类型一致；</li>
<li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>
<li><code>defaultFallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li>
</ul>
</li>
<li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 <code>fallback</code> 逻辑中，而是会原样抛出。</li>
</ul>
<blockquote>
<p>注：1.6.0 之前的版本 <code>fallback</code> 函数只针对降级异常（<code>DegradeException</code>）进行处理，不能针对业务异常进行处理。</p>
</blockquote>
<p>特别地，若 <code>blockHandler</code> 和 <code>fallback</code> 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> 直接抛出。</p>
<h1 id="肆、规则的种类"><a href="#肆、规则的种类" class="headerlink" title="肆、规则的种类"></a>肆、规则的种类</h1><p><code>Sentinel</code> 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效。同时 <code>Sentinel</code> 也提供相关 <code>API</code>，供您来定制自己的规则策略。</p>
<p><code>Sentinel</code> 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。</p>
<h2 id="4-1、流量控制规则-FlowRule"><a href="#4-1、流量控制规则-FlowRule" class="headerlink" title="4.1、流量控制规则 (FlowRule)"></a>4.1、流量控制规则 (FlowRule)</h2><ul>
<li>重要属性</li>
</ul>
<table>
<thead>
<tr>
<th>Field</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名，资源名是限流规则的作用对象</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>限流阈值</td>
<td></td>
</tr>
<tr>
<td>grade</td>
<td>限流阈值类型，QPS 或线程数模式</td>
<td>QPS 模式</td>
</tr>
<tr>
<td>limitApp</td>
<td>流控针对的调用来源</td>
<td>default，代表不区分调用来源</td>
</tr>
<tr>
<td>strategy</td>
<td>调用关系限流策略：直接、链路、关联</td>
<td>根据资源本身（直接）</td>
</tr>
<tr>
<td>controlBehavior</td>
<td>流控效果（直接拒绝 / 排队等待 / 慢启动模式），不支持按调用关系限流</td>
<td>直接拒绝</td>
</tr>
</tbody></table>
<blockquote>
<p>同一个资源可以同时有多个限流规则。</p>
</blockquote>
<ul>
<li>通过代码定义流量控制规则</li>
</ul>
<p>理解上面规则的定义之后，我们可以通过调用 <code>FlowRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFlowQpsRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;FlowRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    FlowRule rule1 = <span class="keyword">new</span> FlowRule();</span><br><span class="line">    rule1.setResource(resource);</span><br><span class="line">    <span class="comment">// Set max qps to 20</span></span><br><span class="line">    rule1.setCount(<span class="number">20</span>);</span><br><span class="line">    rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">    rule1.setLimitApp(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">    rules.add(rule1);</span><br><span class="line">    FlowRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2、熔断降级规则-DegradeRule"><a href="#4-2、熔断降级规则-DegradeRule" class="headerlink" title="4.2、熔断降级规则 (DegradeRule)"></a>4.2、熔断降级规则 (DegradeRule)</h2><ul>
<li>熔断降级规则包含下面几个重要的属性：</li>
</ul>
<table>
<thead>
<tr>
<th>Field</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名，即规则的作用对象</td>
<td></td>
</tr>
<tr>
<td>grade</td>
<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>
<td>慢调用比例</td>
</tr>
<tr>
<td>count</td>
<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>
<td></td>
</tr>
<tr>
<td>timeWindow</td>
<td>熔断时长，单位为 s</td>
<td></td>
</tr>
<tr>
<td>minRequestAmount</td>
<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>
<td>5</td>
</tr>
<tr>
<td>statIntervalMs</td>
<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>
<td>1000 ms</td>
</tr>
<tr>
<td>slowRatioThreshold</td>
<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>同一个资源可以同时有多个降级规则</p>
</blockquote>
<ul>
<li>通过代码定义流量控制规则</li>
</ul>
<p>理解上面规则的定义之后，我们可以通过调用 <code>DegradeRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initDegradeRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;DegradeRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    DegradeRule rule = <span class="keyword">new</span> DegradeRule(resource);</span><br><span class="line">        .setGrade(CircuitBreakerStrategy.ERROR_RATIO.getType());</span><br><span class="line">        .setCount(<span class="number">0.7</span>); <span class="comment">// Threshold is 70% error ratio</span></span><br><span class="line">        .setMinRequestAmount(<span class="number">100</span>)</span><br><span class="line">        .setStatIntervalMs(<span class="number">30000</span>) <span class="comment">// 30s</span></span><br><span class="line">        .setTimeWindow(<span class="number">10</span>);</span><br><span class="line">    rules.add(rule);</span><br><span class="line">    DegradeRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-3、系统保护规则-SystemRule"><a href="#4-3、系统保护规则-SystemRule" class="headerlink" title="4.3、系统保护规则 (SystemRule)"></a>4.3、系统保护规则 (SystemRule)</h2><p><code>Sentinel</code> 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 <code>Load</code>、<code>CPU</code> 使用率、<code>总体平均 RT</code>、<code>入口 QPS</code> 和<code>并发线程数</code>等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<ul>
<li>系统规则包含下面几个重要的属性</li>
</ul>
<table>
<thead>
<tr>
<th>Field</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>highestSystemLoad</td>
<td>load1 触发值，用于触发自适应控制阶段</td>
<td>-1 (不生效)</td>
</tr>
<tr>
<td>avgRt</td>
<td>所有入口流量的平均响应时间</td>
<td>-1 (不生效)</td>
</tr>
<tr>
<td>maxThread</td>
<td>入口流量的最大并发数</td>
<td>-1 (不生效)</td>
</tr>
<tr>
<td>qps</td>
<td>所有入口资源的 QPS</td>
<td>-1 (不生效)</td>
</tr>
<tr>
<td>highestCpuUsage</td>
<td>当前系统的 CPU 使用率（0.0-1.0）</td>
<td>-1 (不生效)</td>
</tr>
</tbody></table>
<ul>
<li>通过代码定义流量控制规则</li>
</ul>
<p>理解上面规则的定义之后，我们可以通过调用 <code>SystemRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSystemProtectionRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;SystemRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  SystemRule rule = <span class="keyword">new</span> SystemRule();</span><br><span class="line">  rule.setHighestSystemLoad(<span class="number">10</span>);</span><br><span class="line">  rules.add(rule);</span><br><span class="line">  SystemRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-4、访问控制规则-AuthorityRule"><a href="#4-4、访问控制规则-AuthorityRule" class="headerlink" title="4.4、访问控制规则 (AuthorityRule)"></a>4.4、访问控制规则 (AuthorityRule)</h2><p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 <code>Sentinel</code> 的访问控制（黑白名单）的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p>
<p>授权规则，即黑白名单规则（AuthorityRule）非常简单，主要有以下配置项：</p>
<ul>
<li><code>resource</code>：资源名，即限流规则的作用对象</li>
<li><code>limitApp</code>：对应的黑名单/白名单，不同 <code>origin</code> 用 , 分隔，如 <code>appA</code>,<code>appB</code></li>
<li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li>
</ul>
<hr>
<p>【<strong>后面的话</strong>】在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p>
<p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>FlowRule</code> 和 <code>Degrade</code>的校验方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Check whether provided flow rule is valid.</span><br><span class="line"> *</span><br><span class="line"> * @param rule flow rule to check</span><br><span class="line"> * @return true if valid, otherwise false</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isValidRule(FlowRule rule) &#123;</span><br><span class="line">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource()) &amp;&amp; rule.getCount() &gt;&#x3D; 0</span><br><span class="line">        &amp;&amp; rule.getGrade() &gt;&#x3D; 0 &amp;&amp; rule.getStrategy() &gt;&#x3D; 0 &amp;&amp; rule.getControlBehavior() &gt;&#x3D; 0;</span><br><span class="line">    if (!baseValid) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; Check strategy and control (shaping) behavior.</span><br><span class="line">    return checkClusterField(rule) &amp;&amp; checkStrategyField(rule) &amp;&amp; checkControlBehaviorField(rule);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkClusterField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    if (!rule.isClusterMode()) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    ClusterFlowConfig clusterConfig &#x3D; rule.getClusterConfig();</span><br><span class="line">    if (clusterConfig &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!validClusterRuleId(clusterConfig.getFlowId())) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!isWindowConfigValid(clusterConfig.getSampleCount(), clusterConfig.getWindowIntervalMs())) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (clusterConfig.getStrategy()) &#123;</span><br><span class="line">        case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:</span><br><span class="line">            return true;</span><br><span class="line">        default:</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isWindowConfigValid(int sampleCount, int windowIntervalMs) &#123;</span><br><span class="line">    return sampleCount &gt; 0 &amp;&amp; windowIntervalMs &gt; 0 &amp;&amp; windowIntervalMs % sampleCount &#x3D;&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkStrategyField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    if (rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_RELATE || rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_CHAIN) &#123;</span><br><span class="line">        return StringUtil.isNotBlank(rule.getRefResource());</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkControlBehaviorField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    switch (rule.getControlBehavior()) &#123;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP:</span><br><span class="line">            return rule.getWarmUpPeriodSec() &gt; 0;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER:</span><br><span class="line">            return rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER:</span><br><span class="line">            return rule.getWarmUpPeriodSec() &gt; 0 &amp;&amp; rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class="line">        default:</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidRule</span><span class="params">(DegradeRule rule)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> baseValid = rule != <span class="keyword">null</span> &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class="line">        &amp;&amp; rule.getCount() &gt;= <span class="number">0</span> &amp;&amp; rule.getTimeWindow() &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!baseValid) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rule.getMinRequestAmount() &lt;= <span class="number">0</span> || rule.getStatIntervalMs() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (rule.getGrade()) &#123;</span><br><span class="line">        <span class="keyword">case</span> RuleConstant.DEGRADE_GRADE_RT:</span><br><span class="line">            <span class="keyword">return</span> rule.getSlowRatioThreshold() &gt;= <span class="number">0</span> &amp;&amp; rule.getSlowRatioThreshold() &lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class="line">            <span class="keyword">return</span> rule.getCount() &lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后是我自己实现的 <a href="https://github.com/eelve/awesomesentinel/tree/basic-sentinel">demo</a> 。</p>
</blockquote>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel进阶之流量控制</title>
    <url>/posts/2c2378a.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/posts/950c5430.html">Sentinel进阶之基本原理</a> 中简单介绍了一下<code>Sentinel</code>的基本原理，今天就来具体说一下<code>Sentinel</code>的流量控制。</p>
<hr>
<p>壹、概述</p>
<p><code>FlowSlot</code> 会根据预设的规则，结合前面 <code>NodeSelectorSlot</code>、<code>ClusterNodeBuilderSlot</code>、<code>StatistcSlot</code> 统计出来的实时信息进行流量控制。</p>
<p>限流的直接表现是在执行 <code>Entry nodeA = SphU.entry(资源名字)</code> 的时候抛出 <code>FlowException</code> 异常。<code>FlowException</code> 是 <code>BlockException</code> 的子类，您可以捕捉 <code>BlockException</code> 来自定义被限流之后的处理逻辑。</p>
<p>同一个资源可以对应多条限流规则。<code>FlowSlot</code> 会对该资源的所有限流规则依次遍历，直到有规则触发限流或者所有规则遍历完毕。</p>
<p>一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：</p>
<ul>
<li><code>resource</code>：资源名，即限流规则的作用对象 </li>
<li><code>count</code>: 限流阈值</li>
<li><code>grade</code>: 限流阈值类型，QPS 或线程数</li>
<li><code>strategy</code>: 根据调用关系选择策略</li>
</ul>
<p>贰、基于QPS/并发数的流量控制</p>
<p>流量控制主要有两种统计类型，一种是统计<code>线程数</code>，另外一种则是统计 <code>QPS</code>。类型由 <code>FlowRule.grade</code> 字段来定义。其中，<code>0</code> 代表根据并发数量来限流，<code>1</code> 代表根据 QPS 来进行流量控制。其中<code>线程数</code>、<code>QPS</code> 值，都是由 <code>StatisticSlot</code> 实时统计获取的。</p>
<p>可以通过下面的命令查看实时统计信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8719&#x2F;cnode?id&#x3D;resourceName</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>8719</code>端口可以通过配置文件修改</p>
</blockquote>
<p>输出内容格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">idx id   thread  pass  blocked   success  total Rt   1m-pass   1m-block   1m-all   exeption</span><br><span class="line">2   abc647 0     46     0           46     46   1       2763      0         2763     0</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>thread： 代表当前处理该资源的线程数；</li>
<li>pass： 代表一秒内到来到的请求；</li>
<li>blocked： 代表一秒内被流量控制的请求数量；</li>
<li>success： 代表一秒内成功处理完的请求；</li>
<li>total： 代表到一秒内到来的请求以及被阻止的请求总和；</li>
<li>RT： 代表一秒内该资源的平均响应时间；</li>
<li>1m-pass： 则是一分钟内到来的请求；</li>
<li>1m-block： 则是一分钟内被阻止的请求；</li>
<li>1m-all： 则是一分钟内到来的请求和被阻止的请求的总和；</li>
<li>exception： 则是一秒内业务本身异常的总和。</li>
</ul>
<h2 id="2-1、并发线程数流量控制"><a href="#2-1、并发线程数流量控制" class="headerlink" title="2.1、并发线程数流量控制"></a>2.1、并发线程数流量控制</h2><p>线程数限流用于保护业务线程数不被耗尽。例如，当应用所依赖的下游应用由于某种原因导致服务不稳定、响应延迟增加，对于调用者来说，意味着吞吐量下降和更多的线程数占用，极端情况下甚至导致线程池耗尽。为应对高线程占用的情况，业内有使用隔离的方案，比如通过不同业务逻辑使用不同线程池来隔离业务自身之间的资源争抢（线程池隔离），或者使用信号量来控制同时请求的个数（信号量隔离）。这种隔离方案虽然能够控制线程数量，但无法控制请求排队时间。当请求过多时排队也是无益的，直接拒绝能够迅速降低系统压力。Sentinel线程数限流不负责创建和管理线程池，而是简单统计当前请求上下文的线程个数，如果超出阈值，新的请求会被立即拒绝。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowThreadDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger pass = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger block = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger total = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger activeThread = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threadCount = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> seconds = <span class="number">60</span> + <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> methodBRunningTime = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">&quot;MethodA will call methodB. After running for a while, methodB becomes fast, &quot;</span></span><br><span class="line">                + <span class="string">&quot;which make methodA also become fast &quot;</span>);</span><br><span class="line">        tick();</span><br><span class="line">        initFlowRule();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            Thread entryThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        Entry methodA = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            TimeUnit.MILLISECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                            methodA = SphU.entry(<span class="string">&quot;methodA&quot;</span>);</span><br><span class="line">                            activeThread.incrementAndGet();</span><br><span class="line">                            Entry methodB = SphU.entry(<span class="string">&quot;methodB&quot;</span>);</span><br><span class="line">                            TimeUnit.MILLISECONDS.sleep(methodBRunningTime);</span><br><span class="line">                            methodB.exit();</span><br><span class="line">                            pass.addAndGet(<span class="number">1</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (BlockException e1) &#123;</span><br><span class="line">                            block.incrementAndGet();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                            <span class="comment">// biz exception</span></span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            total.incrementAndGet();</span><br><span class="line">                            <span class="keyword">if</span> (methodA != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                methodA.exit();</span><br><span class="line">                                activeThread.decrementAndGet();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            entryThread.setName(<span class="string">&quot;working thread&quot;</span>);</span><br><span class="line">            entryThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFlowRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;FlowRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;FlowRule&gt;();</span><br><span class="line">        FlowRule rule1 = <span class="keyword">new</span> FlowRule();</span><br><span class="line">        rule1.setResource(<span class="string">&quot;methodA&quot;</span>);</span><br><span class="line">        <span class="comment">// set limit concurrent thread for &#x27;methodA&#x27; to 20</span></span><br><span class="line">        rule1.setCount(<span class="number">20</span>);</span><br><span class="line">        rule1.setGrade(RuleConstant.FLOW_GRADE_THREAD);</span><br><span class="line">        rule1.setLimitApp(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">        rules.add(rule1);</span><br><span class="line">        FlowRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread timer = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TimerTask());</span><br><span class="line">        timer.setName(<span class="string">&quot;sentinel-timer-task&quot;</span>);</span><br><span class="line">        timer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;begin to statistic!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> oldTotal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> oldPass = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> oldBlock = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> globalTotal = total.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondTotal = globalTotal - oldTotal;</span><br><span class="line">                oldTotal = globalTotal;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> globalPass = pass.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondPass = globalPass - oldPass;</span><br><span class="line">                oldPass = globalPass;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> globalBlock = block.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondBlock = globalBlock - oldBlock;</span><br><span class="line">                oldBlock = globalBlock;</span><br><span class="line"></span><br><span class="line">                System.out.println(seconds + <span class="string">&quot; total qps is: &quot;</span> + oneSecondTotal);</span><br><span class="line">                System.out.println(TimeUtil.currentTimeMillis() + <span class="string">&quot;, total:&quot;</span> + oneSecondTotal</span><br><span class="line">                    + <span class="string">&quot;, pass:&quot;</span> + oneSecondPass</span><br><span class="line">                    + <span class="string">&quot;, block:&quot;</span> + oneSecondBlock</span><br><span class="line">                    + <span class="string">&quot; activeThread:&quot;</span> + activeThread.get());</span><br><span class="line">                <span class="keyword">if</span> (seconds-- &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    stop = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (seconds == <span class="number">40</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;method B is running much faster; more requests are allowed to pass&quot;</span>);</span><br><span class="line">                    methodBRunningTime = <span class="number">20</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> cost = System.currentTimeMillis() - start;</span><br><span class="line">            System.out.println(<span class="string">&quot;time cost: &quot;</span> + cost + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;total:&quot;</span> + total.get() + <span class="string">&quot;, pass:&quot;</span> + pass.get()</span><br><span class="line">                + <span class="string">&quot;, block:&quot;</span> + block.get());</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2、QPS流量控制"><a href="#2-2、QPS流量控制" class="headerlink" title="2.2、QPS流量控制"></a>2.2、QPS流量控制</h2><p>当 <code>QPS</code> 超过某个阈值的时候，则采取措施进行流量控制。流量控制的手段包括下面 3 种，对应 <code>FlowRule</code> 中的 <code>controlBehavior</code> 字段：</p>
<ul>
<li><p>1、直接拒绝（<code>RuleConstant.CONTROL_BEHAVIOR_DEFAULT</code>）方式。该方式是默认的流量控制方式，当<code>QPS</code>超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出<code>FlowException</code>。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。</p>
</li>
<li><p>2、冷启动（<code>RuleConstant.CONTROL_BEHAVIOR_WARM_UP</code>）方式。该方式主要用于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况。</p>
<p>  通常冷启动的过程系统允许通过的 QPS 曲线如下图所示：<br>  <img src="https://image.eelve.com/eblog/warmup.gif" alt="冷启动"></p>
</li>
<li><p>3、匀速器（<code>RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER</code>）方式。这种方式严格控制了请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p>
<p>  <img src="https://image.eelve.com/eblog/queue.gif" alt="排队"></p>
<p>  这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p>
</li>
</ul>
<p>叁、基于调用关系的流量控制</p>
<p>调用关系包括调用方、被调用方；方法又可能会调用其它方法，形成一个调用链路的层次关系。<code>Sentinel</code> 通过 <code>NodeSelectorSlot</code> 建立不同资源间的调用的关系，并且通过 <code>ClusterNodeBuilderSlot</code> 记录每个资源的实时统计信息。</p>
<p>有了调用链路的统计信息，我们可以衍生出多种流量控制手段。</p>
<h2 id="3-1-根据调用方限流"><a href="#3-1-根据调用方限流" class="headerlink" title="3.1 根据调用方限流"></a>3.1 根据调用方限流</h2><p><code>ContextUtil.enter(resourceName, origin)</code> 方法中的 <code>origin</code> 参数标明了调用方身份。这些信息会在 <code>ClusterBuilderSlot</code> 中被统计。可通过以下命令来展示不同的调用方对同一个资源的调用数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8719&#x2F;origin?id&#x3D;nodeA</span><br></pre></td></tr></table></figure>
<p>调用数据示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id: nodeA</span><br><span class="line">idx origin  threadNum passedQps blockedQps totalQps aRt   1m-passed 1m-blocked 1m-total </span><br><span class="line">1   caller1 0         0         0          0        0     0         0          0</span><br><span class="line">2   caller2 0         0         0          0        0     0         0          0</span><br></pre></td></tr></table></figure>
<p>上面这个命令展示了资源名为 <code>nodeA</code> 的资源被两个不同的调用方调用的统计。</p>
<p>限流规则中的 <code>limitApp</code> 字段用于根据调用方进行流量控制。该字段的值有以下三种选项，分别对应不同的场景：</p>
<ul>
<li><code>default</code>：表示不区分调用者，来自任何调用者的请求都将进行限流统计。如果这个资源名的调用总和超过了这条规则定义的阈值，则触发限流。</li>
<li><code>&#123;some_origin_name&#125;</code>：表示针对特定的调用者，只有来自这个调用者的请求才会进行流量控制。例如 <code>NodeA</code> 配置了一条针对调用者<code>caller1</code>的规则，那么当且仅当来自 <code>caller1</code> 对 <code>NodeA</code> 的请求才会触发流量控制。</li>
<li><code>other</code>：表示针对除 <code>&#123;some_origin_name&#125;</code> 以外的其余调用方的流量进行流量控制。例如，资源<code>NodeA</code>配置了一条针对调用者 <code>caller1</code> 的限流规则，同时又配置了一条调用者为 <code>other</code> 的规则，那么任意来自非 <code>caller1</code> 对 <code>NodeA</code> 的调用，都不能超过 <code>other</code> 这条规则定义的阈值。</li>
</ul>
<blockquote>
<p>同一个资源名可以配置多条规则，规则的生效顺序为：{some_origin_name} &gt; other &gt; default</p>
</blockquote>
<h2 id="3-2-根据调用链路入口限流：链路限流"><a href="#3-2-根据调用链路入口限流：链路限流" class="headerlink" title="3.2 根据调用链路入口限流：链路限流"></a>3.2 根据调用链路入口限流：链路限流</h2><p><code>NodeSelectorSlot</code> 中记录了资源之间的调用链路，这些资源通过调用关系，相互之间构成一棵调用树。这棵树的根节点是一个名字为 <code>machine-root</code> 的虚拟节点，调用链的入口都是这个虚节点的子节点。</p>
<p>一棵典型的调用树如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          machine-root</span><br><span class="line">              &#x2F;       \</span><br><span class="line">             &#x2F;         \</span><br><span class="line">       Entrance1     Entrance2</span><br><span class="line">          &#x2F;             \</span><br><span class="line">         &#x2F;               \</span><br><span class="line">DefaultNode(nodeA)   DefaultNode(nodeA)</span><br></pre></td></tr></table></figure>
<p>上图中来自入口 <code>Entrance1</code> 和 <code>Entrance2</code> 的请求都调用到了资源 <code>NodeA</code>，<code>Sentinel</code> 允许只根据某个入口的统计信息对资源限流。比如我们可以设置 <code>FlowRule.strategy</code> 为 <code>RuleConstant.CHAIN</code>，同时设置 <code>FlowRule.ref_identity</code> 为 <code>Entrance1</code> 来表示只有从入口 <code>Entrance1</code> 的调用才会记录到 <code>NodeA</code> 的限流统计当中，而对来自 <code>Entrance2</code> 的调用漠不关心。</p>
<p>调用链的入口是通过 <code>API</code> 方法 <code>ContextUtil.enter(name)</code> 定义的。</p>
<h2 id="3-3-具有关系的资源流量控制：关联流量控制"><a href="#3-3-具有关系的资源流量控制：关联流量控制" class="headerlink" title="3.3 具有关系的资源流量控制：关联流量控制"></a>3.3 具有关系的资源流量控制：关联流量控制</h2><p>当两个资源之间具有资源争抢或者依赖关系的时候，这两个资源便具有了关联。比如对数据库同一个字段的读操作和写操作存在争抢，读的速度过高会影响写得速度，写的速度过高会影响读的速度。如果放任读写操作争抢资源，则争抢本身带来的开销会降低整体的吞吐量。可使用关联限流来避免具有关联关系的资源之间过度的争抢，举例来说，<code>read_db</code> 和 <code>write_db</code> 这两个资源分别代表数据库读写，我们可以给 <code>read_db</code> 设置限流规则来达到写优先的目的：设置 <code>FlowRule.strategy</code> 为 <code>RuleConstant.RELATE</code> 同时设置 <code>FlowRule.ref_identity</code> 为 <code>write_db</code>。这样当写库操作过于频繁时，读数据的请求会被限流。</p>
<hr>
<p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p>
<p>另外在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p>
<p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>FlowRule</code> 的校验方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Check whether provided flow rule is valid.</span><br><span class="line"> *</span><br><span class="line"> * @param rule flow rule to check</span><br><span class="line"> * @return true if valid, otherwise false</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isValidRule(FlowRule rule) &#123;</span><br><span class="line">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource()) &amp;&amp; rule.getCount() &gt;&#x3D; 0</span><br><span class="line">        &amp;&amp; rule.getGrade() &gt;&#x3D; 0 &amp;&amp; rule.getStrategy() &gt;&#x3D; 0 &amp;&amp; rule.getControlBehavior() &gt;&#x3D; 0;</span><br><span class="line">    if (!baseValid) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; Check strategy and control (shaping) behavior.</span><br><span class="line">    return checkClusterField(rule) &amp;&amp; checkStrategyField(rule) &amp;&amp; checkControlBehaviorField(rule);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkClusterField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    if (!rule.isClusterMode()) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    ClusterFlowConfig clusterConfig &#x3D; rule.getClusterConfig();</span><br><span class="line">    if (clusterConfig &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!validClusterRuleId(clusterConfig.getFlowId())) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!isWindowConfigValid(clusterConfig.getSampleCount(), clusterConfig.getWindowIntervalMs())) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (clusterConfig.getStrategy()) &#123;</span><br><span class="line">        case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:</span><br><span class="line">            return true;</span><br><span class="line">        default:</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isWindowConfigValid(int sampleCount, int windowIntervalMs) &#123;</span><br><span class="line">    return sampleCount &gt; 0 &amp;&amp; windowIntervalMs &gt; 0 &amp;&amp; windowIntervalMs % sampleCount &#x3D;&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkStrategyField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    if (rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_RELATE || rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_CHAIN) &#123;</span><br><span class="line">        return StringUtil.isNotBlank(rule.getRefResource());</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkControlBehaviorField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    switch (rule.getControlBehavior()) &#123;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP:</span><br><span class="line">            return rule.getWarmUpPeriodSec() &gt; 0;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER:</span><br><span class="line">            return rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER:</span><br><span class="line">            return rule.getWarmUpPeriodSec() &gt; 0 &amp;&amp; rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class="line">        default:</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot单体应用集成Sentinel熔断能力</title>
    <url>/posts/1523c2c1.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/posts/d2ca763d.html">Sentinel入门指北</a> 中对<code>Sentinel</code>有了简单的了解之后，下面就<code>Spring Boot</code>单体应用集成<code>Sentinel</code>做一下简单的讨论。实际上官方已经提供了 <a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">Spring Cloud Alibaba Sentinel</a> ，然后在配合 <code>控制台</code> 就可以方便使用熔断能力。但是存在部分不想引入<code>控制台</code>的场景，此文就由此而来。</p>
<hr>
<h1 id="壹、总体设计"><a href="#壹、总体设计" class="headerlink" title="壹、总体设计"></a>壹、总体设计</h1><p><code>Sentinel</code>在官方提供了<code>API</code>用于动态修改熔断的规则，针对每种规则都有独有的<code>loadRules</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load &#123;<span class="doctag">@link</span> FlowRule&#125;s, former rules will be replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rules new rules to load.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadRules</span><span class="params">(List&lt;FlowRule&gt; rules)</span> </span>&#123;</span><br><span class="line">    currentProperty.updateValue(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load &#123;<span class="doctag">@link</span> DegradeRule&#125;s, former rules will be replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rules new rules to load.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadRules</span><span class="params">(List&lt;DegradeRule&gt; rules)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        currentProperty.updateValue(rules);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        RecordLog.error(<span class="string">&quot;[DegradeRuleManager] Unexpected error when loading degrade rules&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Sentiunel</code>还有一个缺点，就是熔断规则只缓存在内存中，当应用重启之后，规则就消失了。所以解决方法就是可以考虑讲规则持久化，官方也有相应的实现的方案：<a href="https://sentinelguard.io/zh-cn/docs/dynamic-rule-configuration.html">动态规则扩展</a> 。我这里实现的方案则是将规则存在数据库中，并提供API方式修改规则。 </p>
<h1 id="贰、实现细节"><a href="#贰、实现细节" class="headerlink" title="贰、实现细节"></a>贰、实现细节</h1><h2 id="2-1、pom依赖"><a href="#2-1、pom依赖" class="headerlink" title="2.1、pom依赖"></a>2.1、pom依赖</h2><blockquote>
<p><code>sentinel-annotation-aspectj</code> 提供注解支持功能，并且其中包含了 <code>sentinel-core</code> 所以就不需要单独再引入了。 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2、实体类"><a href="#2-2、实体类" class="headerlink" title="2.2、实体类"></a>2.2、实体类</h2><blockquote>
<p>包括流控规则和降级规则的实体类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaozhilue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;flow_rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowRuleEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name=&quot;app&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String app;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Resource name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;resource&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String resource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Application name that will be limited by origin.</span></span><br><span class="line"><span class="comment">     * The default c is &#123;<span class="doctag">@code</span> default&#125;, which means allowing all origin apps.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * For authority rules, multiple origin name can be separated with comma (&#x27;,&#x27;).</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;limit_app&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String limitApp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The threshold type of flow control (0: thread count, 1: QPS).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;grade&quot;,columnDefinition=&quot;INT default 1&quot;,nullable = false)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer grade = RuleConstant.FLOW_GRADE_QPS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flow control threshold count.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;count&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Double count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flow control strategy based on invocation chain.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_DIRECT&#125; for direct flow control (by origin);</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_RELATE&#125; for relevant flow control (with relevant resource);</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_CHAIN&#125; for chain flow control (by entrance resource).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;strategy&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer strategy = RuleConstant.STRATEGY_DIRECT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reference resource in flow control with relevant resource or context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;ref_resource&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String refResource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Rate limiter control behavior.</span></span><br><span class="line"><span class="comment">     * 0. default(reject directly), 1. warm up, 2. rate limiter, 3. warm up + rate limiter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;control_behavior&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer controlBehavior = RuleConstant.CONTROL_BEHAVIOR_DEFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;warm_up_period_sec&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer warmUpPeriodSec = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Max queueing time in rate limiter behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;max_queueing_time_ms&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxQueueingTimeMs = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;cluster_mode&quot;,columnDefinition=&quot;BOOLEAN default false&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean clusterMode = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlowRule <span class="title">toRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlowRule flowRule = <span class="keyword">new</span> FlowRule();</span><br><span class="line">        flowRule.setCount(<span class="keyword">this</span>.count);</span><br><span class="line">        flowRule.setGrade(<span class="keyword">this</span>.grade);</span><br><span class="line">        flowRule.setResource(<span class="keyword">this</span>.resource);</span><br><span class="line">        flowRule.setLimitApp(<span class="keyword">this</span>.limitApp);</span><br><span class="line">        flowRule.setRefResource(<span class="keyword">this</span>.refResource);</span><br><span class="line">        flowRule.setStrategy(<span class="keyword">this</span>.strategy);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.controlBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">            flowRule.setControlBehavior(controlBehavior);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.warmUpPeriodSec != <span class="keyword">null</span>) &#123;</span><br><span class="line">            flowRule.setWarmUpPeriodSec(warmUpPeriodSec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.maxQueueingTimeMs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            flowRule.setMaxQueueingTimeMs(maxQueueingTimeMs);</span><br><span class="line">        &#125;</span><br><span class="line">        flowRule.setClusterMode(clusterMode);</span><br><span class="line">        <span class="keyword">return</span> flowRule;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaozhilue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;degrade_rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DegradeRuleEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name=&quot;app&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String app;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Resource name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;resource&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String resource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Application name that will be limited by origin.</span></span><br><span class="line"><span class="comment">     * The default limitApp is &#123;<span class="doctag">@code</span> default&#125;, which means allowing all origin apps.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * For authority rules, multiple origin name can be separated with comma (&#x27;,&#x27;).</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;limit_app&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String limitApp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Circuit breaking strategy (0: average RT, 1: exception ratio, 2: exception count).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;grade&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer grade = RuleConstant.DEGRADE_GRADE_RT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Threshold count.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;count&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Double count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Recovery timeout (in seconds) when circuit breaker opens. After the timeout, the circuit breaker will</span></span><br><span class="line"><span class="comment">     * transform to half-open state for trying a few requests.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;timeWindow&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer timeWindow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Minimum number of requests (in an active statistic time span) that can trigger circuit breaking.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.7.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;min_request_amount&quot;,columnDefinition=&quot;INT default 5&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minRequestAmount = RuleConstant.DEGRADE_DEFAULT_MIN_REQUEST_AMOUNT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The threshold of slow request ratio in RT mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;slow_ratio_threshold&quot;,columnDefinition=&quot;DOUBLE default 1000&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Double slowRatioThreshold = <span class="number">1.0d</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;stat_interval_ms&quot;,columnDefinition=&quot;INT default 1000&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer statIntervalMs = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DegradeRule <span class="title">toRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DegradeRule rule = <span class="keyword">new</span> DegradeRule();</span><br><span class="line">        rule.setResource(resource);</span><br><span class="line">        rule.setLimitApp(limitApp);</span><br><span class="line">        rule.setCount(count);</span><br><span class="line">        rule.setTimeWindow(timeWindow);</span><br><span class="line">        rule.setGrade(grade);</span><br><span class="line">        <span class="keyword">if</span> (minRequestAmount != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rule.setMinRequestAmount(minRequestAmount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (slowRatioThreshold != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rule.setSlowRatioThreshold(slowRatioThreshold);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statIntervalMs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rule.setStatIntervalMs(statIntervalMs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rule;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3、核心规则变更"><a href="#2-3、核心规则变更" class="headerlink" title="2.3、核心规则变更"></a>2.3、核心规则变更</h2><blockquote>
<p>主要是提供规则更新的工具类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RulesEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flow(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">    Degrade(<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">    System(<span class="number">3</span>),</span><br><span class="line"></span><br><span class="line">    Authority(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    RulesEnum(<span class="keyword">int</span> code) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.AbstractRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.java.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaozhilue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshRulesUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends AbstractRule&gt; <span class="function"><span class="keyword">void</span> <span class="title">refreshRule</span><span class="params">(List&lt;T&gt; ruleList, RulesEnum rulesEnum)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;操作类型:&quot;</span>+rulesEnum.getCode() + <span class="string">&quot;,ruleList:&quot;</span> + ruleList.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (rulesEnum)&#123;</span><br><span class="line">            <span class="keyword">case</span> Flow:</span><br><span class="line">                FlowRuleManager.loadRules((List&lt;FlowRule&gt;) ruleList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Degrade:</span><br><span class="line">                DegradeRuleManager.loadRules((List&lt;DegradeRule&gt;)ruleList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> System:</span><br><span class="line">                SystemRuleManager.loadRules((List&lt;SystemRule&gt;)ruleList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Authority:</span><br><span class="line">                AuthorityRuleManager.loadRules((List&lt;AuthorityRule&gt;)ruleList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                log.info(<span class="string">&quot;无效操作&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-4、规则更新接口"><a href="#2-4、规则更新接口" class="headerlink" title="2.4、规则更新接口"></a>2.4、规则更新接口</h2><blockquote>
<p>主要是提供接口给前端用于规则更新，并且包括更新内存中的熔断规则。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.entity.FlowRuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.service.iml.FlowRuleServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.util.RefreshRulesUtil;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/eelve/flow-rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowRuleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FlowRuleServiceImpl flowRuleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">allRules</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(flowRuleService.allRules());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">addRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestBody</span> FlowRuleEntity flowRuleEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        flowRuleService.addRule(flowRuleEntity);</span><br><span class="line">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(flowRuleEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">updateRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestBody</span> FlowRuleEntity flowRuleEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        flowRuleService.addRule(flowRuleEntity);</span><br><span class="line">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(flowRuleEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/rules/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">deleteRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@PathVariable(name = &quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        flowRuleService.deleteRuleById(id);</span><br><span class="line">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.entity.DegradeRuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.service.iml.DegradeRuleServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.util.RefreshRulesUtil;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> DegradeRuleController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/29 20:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/eelve/degrade-rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DegradeRuleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DegradeRuleServiceImpl degradeRuleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">allRules</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(degradeRuleService.allRules());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">addRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestBody</span> DegradeRuleEntity degradeRuleEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        degradeRuleService.addRule(degradeRuleEntity);</span><br><span class="line">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(degradeRuleEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">updateRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestBody</span> DegradeRuleEntity degradeRuleEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        degradeRuleService.addRule(degradeRuleEntity);</span><br><span class="line">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(degradeRuleEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/rules/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">deleteRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@PathVariable(name = &quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        degradeRuleService.deleteRuleById(id);</span><br><span class="line">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-5、规则初始化"><a href="#2-5、规则初始化" class="headerlink" title="2.5、规则初始化"></a>2.5、规则初始化</h2><blockquote>
<p>规则初始化可以使用 <code>Sentinel</code> 提供的 <code>SPI</code> 机制，实现 <code>com.alibaba.csp.sentinel.init#InitFunc</code> 接口，在接口被第一次调用时初始化，不过需要单独引入 <code>sentinel-datasource-extension</code> 。当然我们也可以直接 <code>Spring</code> 提供的 <code>CommandLineRunner</code> 或 <code>ApplicationRunner</code> 在项目启动是从数据库中加载规则。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreakerStrategy;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRuleManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaozhilue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleInitFunc</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initFlowQpsRule();</span><br><span class="line"></span><br><span class="line">        initDegradeRule();</span><br><span class="line"></span><br><span class="line">        initSystemProtectionRule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化流量规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFlowQpsRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;FlowRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        FlowRule rule1 = <span class="keyword">new</span> FlowRule();</span><br><span class="line">        rule1.setResource(<span class="string">&quot;allInfos&quot;</span>);</span><br><span class="line">        <span class="comment">// Set max qps to 2</span></span><br><span class="line">        rule1.setCount(<span class="number">2</span>);</span><br><span class="line">        rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">        rule1.setLimitApp(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        rules.add(rule1);</span><br><span class="line">        FlowRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化熔断规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initDegradeRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;DegradeRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        DegradeRule rule = <span class="keyword">new</span> DegradeRule(<span class="string">&quot;allInfos&quot;</span>)</span><br><span class="line">        .setGrade(CircuitBreakerStrategy.ERROR_RATIO.getType())</span><br><span class="line">        .setCount(<span class="number">0.7</span>) <span class="comment">// Threshold is 70% error ratio</span></span><br><span class="line">        .setMinRequestAmount(<span class="number">100</span>)</span><br><span class="line">                .setStatIntervalMs(<span class="number">30000</span>) <span class="comment">// 30s</span></span><br><span class="line">                .setTimeWindow(<span class="number">10</span>);</span><br><span class="line">        rules.add(rule);</span><br><span class="line">        DegradeRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化系统保护跪着</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSystemProtectionRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SystemRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        SystemRule rule = <span class="keyword">new</span> SystemRule();</span><br><span class="line">        rule.setHighestSystemLoad(<span class="number">10</span>);</span><br><span class="line">        rules.add(rule);</span><br><span class="line">        SystemRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>至此简单的 <code>Spring Boot</code> 单体应用接入 <code>Sentinel</code> 的熔断能力的后端开发就完成了。然后前端再开发相应的页面，就可以给用户真正的使用了。</p>
</blockquote>
<hr>
<p>【<strong>后面的话</strong>】以上的接口有一点缺陷就是需要用户填写具体的熔断资源名称，但是用户实际上是有可能填写错误，从而导致熔断规则不生效。为此这里给出的解决方案是，在应用启动过程中扫描所有添加 <code>@SentinelResource</code> 注解的资源，然后再开放接口提供给前端，然后用户再填写熔断资源名称的时候就可以通过下拉来选择具体的资源名称了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SentinelResourcetHolder</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 扫描资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/30 9:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelResourcetHolder</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; SENTINEL_RESOURCE = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getSentinelResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SENTINEL_RESOURCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inintSentinelResourcetHolder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; objectMap =  applicationContext.getBeansWithAnnotation(Controller.class);</span><br><span class="line">        objectMap.entrySet().forEach(o -&gt; &#123;</span><br><span class="line">            Method[] methods = o.getValue().getClass().getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                SentinelResource sentinelResource = AnnotationUtils.findAnnotation(method, SentinelResource.class);</span><br><span class="line">                <span class="keyword">if</span> (!Objects.isNull(sentinelResource))&#123;</span><br><span class="line">                    SENTINEL_RESOURCE.add(sentinelResource.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SentinelResourcetHolder.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.config.SentinelResourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.config.SentinelResourcetHolder;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SentinelResourceControl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/31 12:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/eelve/sentinel/resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelResourceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">getAllSentinelResourceV2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(SentinelResourcetHolder.getSentinelResource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>只有Controller层和Service层的直接第一层方法才能通过注解触发，如果是方法再调用普通方法需要勇SphO或者SphU原生写法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">extractedSphO</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SphO.entry(<span class="string">&quot;extractedSphO&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//需要保护的逻辑</span></span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//需要和SphO.entry成对出现</span></span><br><span class="line">                SphO.exit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//熔断之后执行的方法</span></span><br><span class="line">            log.info(<span class="string">&quot;something bad with blockException&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">extractedSphU</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Entry entry = SphU.entry(<span class="string">&quot;extractedSphU&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//需要保护的逻辑</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">            <span class="comment">//熔断之后执行的方法</span></span><br><span class="line">            log.info(<span class="string">&quot;something bad with blockException&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>sentinel</category>
      </categories>
      <tags>
        <tag>sentinel</tag>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置web访问H2</title>
    <url>/posts/a7d97376.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】最近开始搭建博客，在本地调试的时候使用的数据库是h2，但是调试的时候需要查看数据库，本文也由此而来。</p>
<hr>
<p>下面是我用到的方法：</p>
<ol>
<li>使用IDEA的Database连接工具，具体操作方法就是按照要求配置连接url，用户名和密码即可。具体操作见下图：<br><img src="https://image.eelve.com/eblog/h2databasecollection-bffb24f29c9947b8871454427c88a9a3.png" alt="h2ideadatabase配置"><br>查询结果：<br><img src="https://image.eelve.com/eblog/h2databaseselect-5f10495470e446f98af7b8aff0228ef2.png" alt="h2ideadatabase查询结果"><br>但是但是这个时候启动<strong>项目会报错</strong>：<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">org.h2.jdbc.JdbcSQLException: Database may be already in use: null. Possible solutions: close all other connection(s); use the server mode [90020-197]</span><br><span class="line">	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.message.DbException.get(DbException.java:168) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.db.MVTableEngine$Store.convertIllegalStateException(MVTableEngine.java:188) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:168) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:100) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Database.getPageStore(Database.java:2538) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Database.open(Database.java:709) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Database.openDatabase(Database.java:286) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Database.&lt;init&gt;(Database.java:280) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.openSession(Engine.java:66) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.openSession(Engine.java:179) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:157) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.createSession(Engine.java:140) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.createSession(Engine.java:28) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:351) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:124) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:103) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.Driver.connect(Driver.java:69) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136) ~[HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369) ~[HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198) ~[HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467) [HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541) [HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:115) [HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.2.0.jar:na]</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:113) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5.CGLIB$jpaVendorAdapter$6(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5$$FastClassBySpringCGLIB$$824457c4.invoke(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) [spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) [spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5.jpaVendorAdapter(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]</span><br><span class="line">	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:367) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:662) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:479) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:312) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:131) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1665) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1417) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:218) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1325) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1171) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:235) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:226) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:101) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:88) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:261) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:234) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory$Initializer.onStartup(UndertowServletWebServerFactory.java:616) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:203) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:185) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:42) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:250) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.createDeploymentManager(UndertowServletWebServerFactory.java:284) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.getWebServer(UndertowServletWebServerFactory.java:208) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:181) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:154) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at run.halo.app.Application.main(Application.java:31) ~[classes/:na]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]</span><br><span class="line">	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">Caused by: java.lang.IllegalStateException: The file is locked: nio:C:/Users/Chirius/.halo/db/halo.mv.db [1.4.197/7]</span><br><span class="line">	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:870) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.FileStore.open(FileStore.java:173) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.MVStore.&lt;init&gt;(MVStore.java:350) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2934) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:155) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	... 152 common frames omitted</span><br></pre></td></tr></table></figure>
所以笔主在这里不推荐这种方法，因为会占用h2数据库连接，用了这种数据库连接就不能启动项目，反之亦然。</li>
</ol>
<hr>
<ol start="2">
<li>使用H2 Console进行查看，由于项目是SpringBoot的，所以在这里只需要修改相应配置即可，由<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h2:</span><br><span class="line">    console:</span><br><span class="line">      settings:</span><br><span class="line">        web-allow-others: false</span><br><span class="line">      path: &#x2F;h2-console</span><br><span class="line">      enabled: false</span><br></pre></td></tr></table></figure>
改为<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h2:</span><br><span class="line">    console:</span><br><span class="line">      settings:</span><br><span class="line">        web-allow-others: false</span><br><span class="line">      path: &#x2F;h2-console</span><br><span class="line">      enabled: false</span><br></pre></td></tr></table></figure>
即可，启动项目，然后在项目访问路径后面加上配置的path**/h2-console**就可以查看具体结果了：<br><img src="https://image.eelve.com/eblog/12344-e3c905ae1b794528af9706227afa9b38.png" alt="通过H2 Console查看的结果"></li>
</ol>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>h2</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置web访问H2本地版</title>
    <url>/posts/26a75f08.html</url>
    <content><![CDATA[<p>【<strong>前情提要</strong>】最近开始搭建博客，在本地调试的时候使用的数据库是h2，但是调试的时候需要查看数据库，本文也由此而来。</p>
<hr>
<p>下面是我用到的方法：</p>
<ol>
<li>使用IDEA的Database连接工具，具体操作方法就是按照要求配置连接url，用户名和密码即可。具体操作见下图：<br><img src="https://eelve.com/upload/2019/6/h2databasecollection-bffb24f29c9947b8871454427c88a9a3.png" alt="h2ideadatabase配置"><br>查询结果：<br><img src="https://eelve.com/upload/2019/6/h2databaseselect-5f10495470e446f98af7b8aff0228ef2.png" alt="h2ideadatabase查询结果"><br>但是但是这个时候启动<strong>项目会报错</strong>：<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">org.h2.jdbc.JdbcSQLException: Database may be already in use: null. Possible solutions: close all other connection(s); use the server mode [90020-197]</span><br><span class="line">	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.message.DbException.get(DbException.java:168) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.db.MVTableEngine$Store.convertIllegalStateException(MVTableEngine.java:188) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:168) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:100) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Database.getPageStore(Database.java:2538) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Database.open(Database.java:709) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Database.openDatabase(Database.java:286) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Database.&lt;init&gt;(Database.java:280) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.openSession(Engine.java:66) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.openSession(Engine.java:179) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:157) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.createSession(Engine.java:140) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.Engine.createSession(Engine.java:28) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:351) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:124) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:103) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.Driver.connect(Driver.java:69) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136) ~[HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369) ~[HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198) ~[HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467) [HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541) [HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:115) [HikariCP-3.2.0.jar:na]</span><br><span class="line">	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.2.0.jar:na]</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356) [spring-jdbc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:113) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5.CGLIB$jpaVendorAdapter$6(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5$$FastClassBySpringCGLIB$$824457c4.invoke(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) [spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) [spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4bb137a5.jpaVendorAdapter(&lt;generated&gt;) [spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]</span><br><span class="line">	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:367) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:662) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:479) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:312) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:131) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1665) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1417) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:218) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1325) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1171) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1247) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1167) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) [spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:235) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:226) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:101) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:88) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:261) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:234) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory$Initializer.onStartup(UndertowServletWebServerFactory.java:616) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:203) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:185) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:42) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:250) ~[undertow-servlet-2.0.17.Final.jar:2.0.17.Final]</span><br><span class="line">	at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.createDeploymentManager(UndertowServletWebServerFactory.java:284) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.getWebServer(UndertowServletWebServerFactory.java:208) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:181) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:154) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at run.halo.app.Application.main(Application.java:31) ~[classes/:na]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]</span><br><span class="line">	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">Caused by: java.lang.IllegalStateException: The file is locked: nio:C:/Users/Chirius/.halo/db/halo.mv.db [1.4.197/7]</span><br><span class="line">	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:870) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.FileStore.open(FileStore.java:173) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.MVStore.&lt;init&gt;(MVStore.java:350) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2934) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:155) ~[h2-1.4.197.jar:1.4.197]</span><br><span class="line">	... 152 common frames omitted</span><br></pre></td></tr></table></figure>
所以笔主在这里不推荐这种方法，因为会占用h2数据库连接，用了这种数据库连接就不能启动项目，反之亦然。</li>
</ol>
<hr>
<ol start="2">
<li>使用H2 Console进行查看，由于项目是SpringBoot的，所以在这里只需要修改相应配置即可，由<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h2:</span><br><span class="line">    console:</span><br><span class="line">      settings:</span><br><span class="line">        web-allow-others: false</span><br><span class="line">      path: &#x2F;h2-console</span><br><span class="line">      enabled: false</span><br></pre></td></tr></table></figure>
改为<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h2:</span><br><span class="line">    console:</span><br><span class="line">      settings:</span><br><span class="line">        web-allow-others: false</span><br><span class="line">      path: &#x2F;h2-console</span><br><span class="line">      enabled: false</span><br></pre></td></tr></table></figure>
即可，启动项目，然后在项目访问路径后面加上配置的path**/h2-console**就可以查看具体结果了：<br><img src="https://eelve.com/upload/2019/6/12344-e3c905ae1b794528af9706227afa9b38.png" alt="通过H2 Console查看的结果"></li>
</ol>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Config</title>
    <url>/posts/f1275148.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】本文的某些知识依赖我的<a href="https://eelve.com/tags/springcloud#blog">微服务系列文章</a>，如果没有看过可以先移步去看一下。在前面的应用当中，我们所有的配置都是写在<strong>yaml</strong>配置文件当中的，这样就会造成几个问题：安全、统一管理等等。而SpringCloud也是考虑到这一点，给出的方案就是<strong>Spring Cloud Config</strong>。</p>
<hr>
<h1 id="壹、Config的简介"><a href="#壹、Config的简介" class="headerlink" title="壹、Config的简介"></a>壹、Config的简介</h1><p>Spring Cloud Config是Spring Cloud团队创建的一个全新项目，用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为服务端与客户端两个部分。其中服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密/解密信息等访问接口；而客户端则是微服务架构中的各个微服务应用或基础设施，它们通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。Spring Cloud Config实现了对服务端和客户端中环境变量和属性配置的抽象映射，所以它除了适用于Spring构建的应用程序之外，也可以在任何其他语言运行的应用程序中使用。由于Spring Cloud Config实现的配置中心默认采用Git来存储配置信息，所以使用Spring Cloud Config构建的配置服务器，天然就支持对微服务应用配置信息的版本管理，并且可以通过Git客户端工具来方便的管理和访问配置内容。当然它也提供了对其他存储方式的支持，比如：SVN仓库、本地化文件系统。</p>
<h1 id="贰、准备工作"><a href="#贰、准备工作" class="headerlink" title="贰、准备工作"></a>贰、准备工作</h1><ul>
<li>首先在工程下面新建<strong>lovin-config-repo</strong>，作为存放配置文件的地方，并且添加dev，test，pro的相关配置文件，最后在配置文件中添加<strong>token</strong>的配置，具体见下图</li>
</ul>
<p><img src="https://i.loli.net/2019/08/30/hfKen9RXmUdGoAO.png" alt="新建配置中心"><br><img src="https://i.loli.net/2019/08/30/wxIMYhPXiuHgOyq.png" alt="添加token配置"></p>
<ul>
<li>新建一个config的服务端子工程<strong>lovin-config-server</strong>，用于后面的操作。下面是主要的pom依赖:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-config-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;lovinconfigserver&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;配置服务端&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.6&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里为了安全，我这里还是添加<strong>spring-boot-starter-security</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8886</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovinconfigserver</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/lovinstudio/lovincloud</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">lovin-config-repo</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注册到的eureka服务地址</span></span><br></pre></td></tr></table></figure>
<ul>
<li>上面的配置文件是用git作为配置文件管理中心，还有svn和本地文件系统两种，我这里也在下面简单罗列以下：</li>
</ul>
<h2 id="git版本配置"><a href="#git版本配置" class="headerlink" title="git版本配置"></a>git版本配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server:</span></span><br><span class="line">          <span class="attr">git:</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">https://github.com/lovinstudio/lovincloud</span></span><br><span class="line">            <span class="attr">search-paths:</span> <span class="string">lovin-config-repo</span></span><br><span class="line">            <span class="attr">username:</span> <span class="comment">#如果是私人仓库，还需要配置用户名，公共仓库可以省略</span></span><br><span class="line">            <span class="attr">password:</span> <span class="comment">#如果是私人仓库，还需要配置密码，公共仓库可以省略</span></span><br><span class="line">        <span class="attr">label:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h2 id="svn版本配置"><a href="#svn版本配置" class="headerlink" title="svn版本配置"></a>svn版本配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">svn:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://192.168.0.6/svn/repo/config-repo</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">        <span class="attr">default-label:</span> <span class="string">trunk</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">subversion</span>  <span class="comment">#这里需要显式声明为subversion</span></span><br></pre></td></tr></table></figure>
<p>同时还需要引入相应的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--SVN--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.tmatesoft.svnkit&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;svnkit&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="本地版本配置"><a href="#本地版本配置" class="headerlink" title="本地版本配置"></a>本地版本配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">native:</span></span><br><span class="line">          <span class="attr">searchLocations:</span> <span class="string">file:D:\\config</span>  <span class="comment">#classpath:/config</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">native</span>  <span class="comment">#native</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置<strong>spring-boot-starter-security</strong>，这里为了方便我这里放开所有请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebSecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/18 13:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>在主类上添加**@EnableConfigServer**，当然也需要注册到注册中心：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinEurekaClientApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 16:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinConfigServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="叁、启动测试"><a href="#叁、启动测试" class="headerlink" title="叁、启动测试"></a>叁、启动测试</h1><ul>
<li>依次启动eureka的服务端和新建的lovin-config-server</li>
</ul>
<ul>
<li>访问地址：<a href="http://chirius:8886/lovin-config/dev%E3%80%82">http://chirius:8886/lovin-config/dev。</a></li>
<li>结果原始数据：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;lovin-config&quot;,&quot;profiles&quot;:[&quot;dev&quot;],&quot;label&quot;:null,&quot;version&quot;:&quot;f0aeca26887490e3bcb8be317d4dfb378313a76f&quot;,&quot;state&quot;:null,&quot;propertySources&quot;:[&#123;&quot;name&quot;:&quot;https:&#x2F;&#x2F;github.com&#x2F;lovinstudio&#x2F;lovincloud&#x2F;lovin-config-repo&#x2F;lovin-config-dev.properties&quot;,&quot;source&quot;:&#123;&quot;lovin.token&quot;:&quot;lovin&quot;&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<p>这时我们通过浏览器、POSTMAN或CURL等工具直接来访问到我们的配置内容了。访问配置信息的URL与配置文件的映射关系如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#123;application&#125;&#x2F;&#123;profile&#125;[&#x2F;&#123;label&#125;]</span><br><span class="line">&#x2F;&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">&#x2F;&#123;label&#125;&#x2F;&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">&#x2F;&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">&#x2F;&#123;label&#125;&#x2F;&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure>
<p>上面的url会映射{application}-{profile}.properties对应的配置文件，其中{label}对应Git上不同的分支，默认为master。我们可以尝试构造不同的url来访问不同的配置内容，比如，要访问master分支，config-client应用的dev环境，就可以访问这个url：<a href="http://chirius:8806/lovin-config/dev%EF%BC%8C%E5%B9%B6%E8%8E%B7%E5%BE%97%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%EF%BC%9A">http://chirius:8806/lovin-config/dev，并获得如下返回：</a><br><img src="https://i.loli.net/2019/08/30/OvLtJy6R71fuzP2.png" alt="成功访问配置"><br><strong>这里有一点疑问，我通过<a href="http://localhost:8886/lovin-config/dev/%E5%8E%BB%E8%AE%BF%E9%97%AE%E6%98%AF%E4%B8%80%E7%9B%B4%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9C%A8%E6%8D%A2%E6%88%90%E5%85%B6%E4%BB%96github%E4%B8%8A%E9%9D%A2%E5%88%AB%E4%BA%BA%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BB%93%E5%BA%93%E5%8F%88%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E7%9A%84">http://localhost:8886/lovin-config/dev/去访问是一直不成功的，但是在换成其他github上面别人的配置仓库又是可以直接访问的</a></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-08-19 12:55:54.686  INFO 9256 --- [nio-8886-exec-4] o.s.c.c.s.e.NativeEnvironmentRepository  : Adding property source: file:&#x2F;C:&#x2F;Users&#x2F;Chirius&#x2F;AppData&#x2F;Local&#x2F;Temp&#x2F;config-repo-8280352825025657146&#x2F;lovin-config-repo&#x2F;lovin-config-dev.properties</span><br><span class="line">2019-08-19 12:55:57.560  INFO 9256 --- [nio-8886-exec-2] o.s.cloud.commons.util.InetUtils         : Cannot determine local hostname</span><br><span class="line">2019-08-19 12:55:57.576  INFO 9256 --- [nio-8886-exec-2] o.s.c.c.s.e.NativeEnvironmentRepository  : Adding property source: file:&#x2F;C:&#x2F;Users&#x2F;Chirius&#x2F;AppData&#x2F;Local&#x2F;Temp&#x2F;config-repo-8280352825025657146&#x2F;lovin-config-repo&#x2F;lovin-config-dev.properties</span><br><span class="line">2019-08-19 12:56:00.544  INFO 9256 --- [nio-8886-exec-1] o.s.cloud.commons.util.InetUtils         : Cannot determine local hostname</span><br><span class="line">2019-08-19 12:56:00.559  INFO 9256 --- [nio-8886-exec-1] o.s.c.c.s.e.NativeEnvironmentRepository  : Adding property source: file:&#x2F;C:&#x2F;Users&#x2F;Chirius&#x2F;AppData&#x2F;Local&#x2F;Temp&#x2F;config-repo-8280352825025657146&#x2F;lovin-config-repo&#x2F;lovin-config-dev.properties</span><br><span class="line">2019-08-19 12:56:07.136  INFO 9256 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration</span><br><span class="line">2019-08-19 13:01:07.140  INFO 9256 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration</span><br><span class="line">2019-08-19 13:06:07.142  INFO 9256 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration</span><br></pre></td></tr></table></figure>
<p>ps：通过日志我们可以看到配置文件是被保存在我们本地的，当然我们也就可以通过配置，修改保存的路径，具体配置为：<strong>basedir</strong></p>
<h1 id="肆、新建配置客户端"><a href="#肆、新建配置客户端" class="headerlink" title="肆、新建配置客户端"></a>肆、新建配置客户端</h1><p>新建一个config的服务端子工程<strong>lovin-config-client</strong>，用于后面的操作。下面是主要的pom依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;lovincloud&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.eelve.lovincloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;lovin-config-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;name&gt;lovinconfigclient&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;description&gt;配置消费端&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.6&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<p>ps：在这里为了监控配置变化我们需要添加<strong>spring-boot-starter-actuator</strong>的依赖</p>
<ul>
<li>这里为了安全，我这里还是添加<strong>spring-boot-starter-security</strong>的配置</li>
</ul>
<p>1、 新建<strong>bootstrap.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin-config</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8886/</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://lovin:lovin@localhost:8881/eureka/</span>   <span class="comment"># 注意在高可用的时候需要见注册中心配置移到该文件中，在application.yml中见会读取不到配置</span></span><br></pre></td></tr></table></figure>
<p>2、 添加<strong>application.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8807</span>   <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lovinconfigclient</span>     <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lovin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;REGISTRY_SERVER_PASSWORD:lovin&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置<strong>spring-boot-starter-security</strong>，这里为了方便我这里放开所有请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebSecurityConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/20 16:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>我们需要注册到注册中心：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LovinEurekaClientApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/15 16:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LovinConfigClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LovinConfigClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加<strong>ConfigController</strong>用来测试获取配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.lovin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ConfigController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TDO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/20 17:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;lovin.token&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/token&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>PS：其中RefreshScope注解是为了刷新配置来添加的，这样让配置仓库中的配置发生改变的时候，我们可以通过访问/refresh请求来刷新配置（由spring-boot-starter-actuator提供的监控功能）</strong></p>
<h2 id="通过客户端去访问获取配置数据"><a href="#通过客户端去访问获取配置数据" class="headerlink" title="通过客户端去访问获取配置数据"></a>通过客户端去访问获取配置数据</h2><ul>
<li><p>访问<strong><a href="http://localhost:8807/token">http://localhost:8807/token</a></strong>，见下图<br><img src="https://i.loli.net/2019/08/30/ZeETqvfHroSUFgl.png" alt="客户端访问配置"></p>
</li>
<li><p>修改配置，然后再次访问，我们可以看到配置是没有变更的<br><img src="https://i.loli.net/2019/08/30/TmY45SxAP7uGChs.png" alt="修改配置"><br><img src="https://i.loli.net/2019/08/30/ZeETqvfHroSUFgl.png" alt="客户端再次访问配置"></p>
</li>
<li><p>刷新配置再次访问<br><img src="https://i.loli.net/2019/08/30/ZLC9537rvYTS6QD.png" alt="获取最新的配置"></p>
</li>
</ul>
<p><strong>可以看到这是我们已经获取到了最新的配置，当时这样就存在一个问题，每一个配置客户端都需要刷新配置，会非常麻烦，也很容易出错。解决方案由webhook来刷新配置，但是这个不是最好的解决办法。但是我们可以通过消息总线来解决，这里见会在下一篇文章中详细讲解，在这里就不作赘述了。</strong></p>
<hr>
<ul>
<li><a href="https://github.com/lovinstudio/lovincloud">最后的最后是本博客的源码,欢迎关注这一套SpringCloud的实践</a></li>
</ul>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析Spring Boot单体应用熔断技术</title>
    <url>/posts/56832225.html</url>
    <content><![CDATA[<p>【<strong>前面的话</strong>】最近在看服务熔断的相关技术，下面就来总结一下。</p>
<h1 id="壹、入围方案"><a href="#壹、入围方案" class="headerlink" title="壹、入围方案"></a>壹、入围方案</h1><ul>
<li>Sentinel<ul>
<li><a href="https://github.com/alibaba/Sentinel">github地址</a></li>
<li><a href="https://sentinelguard.io/zh-cn/docs/introduction.html">https://sentinelguard.io/zh-cn/docs/introduction.html</a></li>
<li>阿里出品，Spring Cloud Alibaba限流组件，目前持续更新中</li>
<li>自带Dashboard，可以查看接口Qps等，并且可以动态修改各种规则</li>
<li>流量控制，直接限流、冷启动、排队</li>
<li>熔断降级，限制并发限制数和相应时间</li>
<li>系统负载保护，提供系统级别防护，限制总体CPU等</li>
<li>主要核心：资源，规则（流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。），和指标</li>
<li>文档非常清晰和详细，中文</li>
<li>支持动态规则（推模式和拉模式）</li>
</ul>
</li>
<li>Hystrix<ul>
<li><a href="https://github.com/Netflix/Hystrix">github地址</a></li>
<li><a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></li>
<li>Netflix出品，Spring Cloud Netflix限流组件，已经停止新特性开发，只进行bug修复，最近更新为2018年，功能稳定</li>
<li>有简单的dashboard页面</li>
<li>以隔离和熔断为主的容错机制，超时或被熔断的调用将会快速失败，并可以提供 fallback 机制的初代熔断框架，异常统计基于滑动窗口</li>
</ul>
</li>
<li>resilience4j<ul>
<li><a href="https://github.com/resilience4j/resilience4j">github地址</a></li>
<li><a href="https://resilience4j.readme.io/docs">https://resilience4j.readme.io/docs</a></li>
<li>是一款轻量、简单，并且文档非常清晰、丰富的熔断工具。是Hystrix替代品，实现思路和Hystrix一致，目前持续更新中</li>
<li>需要自己对micrometer、prometheus以及Dropwizard metrics进行整合</li>
<li>CircuitBreaker 熔断</li>
<li>Bulkhead 隔离</li>
<li>RateLimiter QPS限制</li>
<li>Retry 重试</li>
<li>TimeLimiter 超时限制</li>
<li>Cache 缓存</li>
</ul>
</li>
<li>自己实现(基于Guava)<ul>
<li>基于Guava的令牌桶，可以轻松实现对QPS进行限流</li>
</ul>
</li>
</ul>
<h1 id="贰、技术对比"><a href="#贰、技术对比" class="headerlink" title="贰、技术对比"></a>贰、技术对比</h1><table>
<thead>
<tr>
<th></th>
<th><strong>Sentinel</strong></th>
<th><strong>Hystrix</strong></th>
<th><strong>resilience4j</strong></th>
<th>使用Guava实现</th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离（并发线程数限流）</td>
<td>线程池隔离/信号量隔离</td>
<td>信号量隔离</td>
<td></td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于响应时间、异常比率、异常数</td>
<td>基于异常比率</td>
<td>基于异常比率、响应时间</td>
<td></td>
</tr>
<tr>
<td>实时统计实现</td>
<td>滑动窗口（LeapArray）</td>
<td>滑动窗口（基于 RxJava）</td>
<td>Ring Bit Buffer</td>
<td>令牌桶</td>
</tr>
<tr>
<td>动态规则配置</td>
<td>支持多种数据源</td>
<td>支持多种数据源</td>
<td>有限支持</td>
<td></td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
<td>接口的形式</td>
<td></td>
</tr>
<tr>
<td>基于注解的支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>单机限流</td>
<td>基于 QPS，支持基于调用关系的限流</td>
<td>有限的支持</td>
<td>Rate Limiter</td>
<td>基于 QPS</td>
</tr>
<tr>
<td>集群流控</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>流量整形</td>
<td>支持预热模式与匀速排队控制效果</td>
<td>不支持</td>
<td>简单的 Rate Limiter 模式</td>
<td></td>
</tr>
<tr>
<td>系统自适应保护</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>热点识别/防护</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>Service Mesh 支持</td>
<td>支持 Envoy/Istio</td>
<td>不支持</td>
<td>不支持</td>
<td></td>
</tr>
<tr>
<td>控制台</td>
<td>提供开箱即用的控制台，可配置规则、实时监控、机器发现等</td>
<td>简单的监控查看</td>
<td>不提供控制台，可对接其它监控系统</td>
<td></td>
</tr>
<tr>
<td>是否支持默认规则</td>
<td>不支持，需要针对每个接口配置规则</td>
<td>支持</td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td>是否支持过滤异常</td>
<td>注解单个接口支持</td>
<td>注解和全局默认配置</td>
<td>注解和全局默认配置</td>
<td></td>
</tr>
</tbody></table>
<h1 id="叁、应用改造"><a href="#叁、应用改造" class="headerlink" title="叁、应用改造"></a>叁、应用改造</h1><h2 id="3-1、sentinel"><a href="#3-1、sentinel" class="headerlink" title="3.1、sentinel"></a>3.1、sentinel</h2><h3 id="3-1-1、引入依赖"><a href="#3-1-1、引入依赖" class="headerlink" title="3.1.1、引入依赖"></a>3.1.1、引入依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-2、改造接口或者service层"><a href="#3-1-2、改造接口或者service层" class="headerlink" title="3.1.2、改造接口或者service层"></a>3.1.2、改造接口或者service层</h3><blockquote>
<p>@SentinelResource(value = “allInfos”,fallback = “errorReturn”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SentinelResource &#123;</span><br><span class="line">    <span class="comment">//资源名称</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//流量方向</span></span><br><span class="line">    <span class="function">EntryType <span class="title">entryType</span><span class="params">()</span> <span class="keyword">default</span> EntryType.OUT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源类型</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">resourceType</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常处理方法</span></span><br><span class="line">    <span class="function">String <span class="title">blockHandler</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常处理类</span></span><br><span class="line">    Class&lt;?&gt;[] blockHandlerClass() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//熔断方法</span></span><br><span class="line">    <span class="function">String <span class="title">fallback</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认熔断方法</span></span><br><span class="line">    <span class="function">String <span class="title">defaultFallback</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//熔断类</span></span><br><span class="line">    Class&lt;?&gt;[] fallbackClass() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计异常</span></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] exceptionsToTrace() <span class="keyword">default</span> &#123;Throwable.class&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//忽略异常</span></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] exceptionsToIgnore() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;allInfos&quot;,fallback = &quot;errorReturn&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">allInfos</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;num % 2 == 0&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad with 2&quot;</span>, <span class="number">400</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ProgramException e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-3、针对接口配置熔断方法或者限流方法"><a href="#3-1-3、针对接口配置熔断方法或者限流方法" class="headerlink" title="3.1.3、针对接口配置熔断方法或者限流方法"></a>3.1.3、针对接口配置熔断方法或者限流方法</h3><blockquote>
<p>默认过滤拦截所有Controller接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流，参数需要和方法保持一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BlockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">errorReturn</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span> <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error 限流&quot;</span> + num );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断，参数需要和方法保持一直，并且需要添加BlockException异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BlockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">errorReturn</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num,BlockException b)</span> <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error 熔断&quot;</span> + num );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意也可以不配置限流或者熔断方法。通过全局异常去捕获<strong>UndeclaredThrowableException</strong>或者<strong>BlockException</strong>避免大量的开发量</p>
</blockquote>
<h3 id="3-1-4、接入dashboard"><a href="#3-1-4、接入dashboard" class="headerlink" title="3.1.4、接入dashboard"></a>3.1.4、接入dashboard</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure>
<p><img src="https://image.eelve.com/eblog/2021012001.png" alt="sentinel"></p>
<h3 id="3-1-5、规则持久化和动态更新"><a href="#3-1-5、规则持久化和动态更新" class="headerlink" title="3.1.5、规则持久化和动态更新"></a>3.1.5、规则持久化和动态更新</h3><blockquote>
<p>接入配置中心如：zookeeper等等，并对规则采用推模式</p>
</blockquote>
<h2 id="3-2、hystrix"><a href="#3-2、hystrix" class="headerlink" title="3.2、hystrix"></a>3.2、hystrix</h2><h3 id="3-2-1、引入依赖"><a href="#3-2-1、引入依赖" class="headerlink" title="3.2.1、引入依赖"></a>3.2.1、引入依赖</h3> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-2、改造接口"><a href="#3-2-2、改造接口" class="headerlink" title="3.2.2、改造接口"></a>3.2.2、改造接口</h3><blockquote>
<p>@HystrixCommand(fallbackMethod = “timeOutError”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HystrixCommand &#123;</span><br><span class="line">    <span class="function">String <span class="title">groupKey</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">commandKey</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">threadPoolKey</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">fallbackMethod</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    HystrixProperty[] commandProperties() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    HystrixProperty[] threadPoolProperties() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] ignoreExceptions() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">ObservableExecutionMode <span class="title">observableExecutionMode</span><span class="params">()</span> <span class="keyword">default</span> ObservableExecutionMode.EAGER</span>;</span><br><span class="line"></span><br><span class="line">    HystrixException[] raiseHystrixExceptions() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">defaultFallback</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">allInfos</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 3 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad whitch 3&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ProgramException | InterruptedException exception) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-3、针对接口配置熔断方法"><a href="#3-2-3、针对接口配置熔断方法" class="headerlink" title="3.2.3、针对接口配置熔断方法"></a>3.2.3、针对接口配置熔断方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该方法是熔断回调方法，参数需要和接口保持一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">fallbackMethod</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span> </span>&#123;</span><br><span class="line">    response.setStatus(<span class="number">500</span>);</span><br><span class="line">    log.info(<span class="string">&quot;发生了熔断！！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;熔断&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-4、配置默认策略"><a href="#3-2-4、配置默认策略" class="headerlink" title="3.2.4、配置默认策略"></a>3.2.4、配置默认策略</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          strategy: THREAD</span><br><span class="line">          thread:</span><br><span class="line">            # 线程超时15秒,调用Fallback方法</span><br><span class="line">            timeoutInMilliseconds: 15000</span><br><span class="line">      metrics:</span><br><span class="line">        rollingStats:</span><br><span class="line">          timeInMilliseconds: 15000</span><br><span class="line">      circuitBreaker:</span><br><span class="line">        # 10秒内出现3个以上请求(已临近阀值),并且出错率在50%以上,开启断路器.断开服务,调用Fallback方法</span><br><span class="line">        requestVolumeThreshold: 3</span><br><span class="line">        sleepWindowInMilliseconds: 10000</span><br></pre></td></tr></table></figure>
<h3 id="3-2-5、接入监控"><a href="#3-2-5、接入监控" class="headerlink" title="3.2.5、接入监控"></a>3.2.5、接入监控</h3><p><img src="https://image.eelve.com/eblog/2021012002.png" alt="hystrix"></p>
<p><img src="https://image.eelve.com/eblog/2021012003.png" alt="hystrix示意图"></p>
<blockquote>
<p>曲线：用来记录2分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。</p>
</blockquote>
<blockquote>
<p><strong>集群监控需要用到注册中心</strong></p>
</blockquote>
<h2 id="3-3、resilience4j"><a href="#3-3、resilience4j" class="headerlink" title="3.3、resilience4j"></a>3.3、resilience4j</h2><h3 id="3-3-1、引入依赖"><a href="#3-3-1、引入依赖" class="headerlink" title="3.3.1、引入依赖"></a>3.3.1、引入依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;resilience4j-spring-boot2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;resilience4j-bulkhead&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;resilience4j-ratelimiter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;resilience4j-timelimiter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以按需要引入：bulkhead，ratelimiter，timelimiter等</p>
</blockquote>
<h3 id="3-3-2、改造接口"><a href="#3-3-2、改造接口" class="headerlink" title="3.3.2、改造接口"></a>3.3.2、改造接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">//@TimeLimiter(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class="line"><span class="meta">@CircuitBreaker(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class="line"><span class="meta">@Bulkhead(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">allInfos</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;param-----&gt;&quot;</span> + num);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//Thread.sleep(num);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 2 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad with 2&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 3 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad whitch 3&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 5 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ProgramException(<span class="string">&quot;something bad whitch 5&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 7 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BufferUnderflowException e) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-3、针对接口配置熔断方法"><a href="#3-3-3、针对接口配置熔断方法" class="headerlink" title="3.3.3、针对接口配置熔断方法"></a>3.3.3、针对接口配置熔断方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要参数一致，并且加上相应异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">fallbackMethod</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num, BulkheadFullException exception)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error 熔断&quot;</span> + num );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-4、配置规则"><a href="#3-3-4、配置规则" class="headerlink" title="3.3.4、配置规则"></a>3.3.4、配置规则</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resilience4j.circuitbreaker:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">registerHealthIndicator:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slidingWindowSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">registerHealthIndicator:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slidingWindowSize:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">slidingWindowType:</span> <span class="string">TIME_BASED</span></span><br><span class="line">            <span class="attr">minimumNumberOfCalls:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">waitDurationInOpenState:</span> <span class="string">50s</span></span><br><span class="line">            <span class="attr">failureRateThreshold:</span> <span class="number">50</span></span><br><span class="line">            <span class="attr">eventConsumerBufferSize:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">recordFailurePredicate:</span> <span class="string">io.github.robwin.exception.RecordFailurePredicate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.retry:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">maxRetryAttempts:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">waitDuration:</span> <span class="string">10s</span></span><br><span class="line">            <span class="attr">enableExponentialBackoff:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">exponentialBackoffMultiplier:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">retryExceptions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">org.springframework.web.client.HttpServerErrorException</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">java.io.IOException</span></span><br><span class="line">            <span class="attr">ignoreExceptions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">io.github.robwin.exception.BusinessException</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">maxRetryAttempts:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">waitDuration:</span> <span class="string">10s</span></span><br><span class="line">            <span class="attr">retryExceptions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">org.springframework.web.client.HttpServerErrorException</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">java.io.IOException</span></span><br><span class="line">            <span class="attr">ignoreExceptions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">io.github.robwin.exception.BusinessException</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.bulkhead:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">maxConcurrentCalls:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">maxWaitDuration:</span> <span class="string">10ms</span></span><br><span class="line">            <span class="attr">maxConcurrentCalls:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.thread-pool-bulkhead:</span></span><br><span class="line">  <span class="attr">instances:</span></span><br><span class="line">    <span class="attr">backendC:</span></span><br><span class="line">      <span class="attr">maxThreadPoolSize:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">coreThreadPoolSize:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">queueCapacity:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.ratelimiter:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">limitForPeriod:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">limitRefreshPeriod:</span> <span class="string">1s</span></span><br><span class="line">            <span class="attr">timeoutDuration:</span> <span class="number">0</span></span><br><span class="line">            <span class="attr">registerHealthIndicator:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">eventConsumerBufferSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">limitForPeriod:</span> <span class="number">6</span></span><br><span class="line">            <span class="attr">limitRefreshPeriod:</span> <span class="string">500ms</span></span><br><span class="line">            <span class="attr">timeoutDuration:</span> <span class="string">3s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.timelimiter:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">timeoutDuration:</span> <span class="string">2s</span></span><br><span class="line">            <span class="attr">cancelRunningFuture:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">timeoutDuration:</span> <span class="string">1s</span></span><br><span class="line">            <span class="attr">cancelRunningFuture:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置的规则可以被代码覆盖</p>
</blockquote>
<h3 id="3-3-5、配置监控"><a href="#3-3-5、配置监控" class="headerlink" title="3.3.5、配置监控"></a>3.3.5、配置监控</h3><blockquote>
<p>如grafana等</p>
</blockquote>
<h1 id="肆、关注点"><a href="#肆、关注点" class="headerlink" title="肆、关注点"></a>肆、关注点</h1><ul>
<li>是否需要过滤部分异常</li>
<li>是否需要全局默认规则</li>
<li>可能需要引入其他中间件</li>
<li>k8s流量控制</li>
<li>规则存储和动态修改</li>
<li>接入改造代价</li>
</ul>
<h1 id="【后面的话】"><a href="#【后面的话】" class="headerlink" title="【后面的话】"></a>【<strong>后面的话</strong>】</h1><p>个人建议的话，比较推荐sentinel，它提供了很多接口便于开发者自己拓展，同时我觉得他的规则动态更新也比较方便。最后是相关示例代码:<a href="https://github.com/eelve/limiting">单体应用示例代码</a></p>
<hr>
<p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
</search>
