<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南国薏米</title>
  
  <subtitle>南国不须收薏苡,百年终竟是芭蕉。</subtitle>
  <link href="https://eelve.com/atom.xml" rel="self"/>
  
  <link href="https://eelve.com/"/>
  <updated>2021-10-03T04:35:43.971Z</updated>
  <id>https://eelve.com/</id>
  
  <author>
    <name>Chillo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sentinel进阶之来源访问控制</title>
    <link href="https://eelve.com/posts/3e0a90e5.html"/>
    <id>https://eelve.com/posts/3e0a90e5.html</id>
    <published>2021-10-03T04:08:36.000Z</published>
    <updated>2021-10-03T04:35:43.971Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前面几篇文章中简单介绍了一下<code>Sentinel</code>的功能都是针对所有的请求资源，今天就来继续说一下<code>Sentinel</code>的来源访问控制。</p><hr><h1 id="壹、概述"><a href="#壹、概述" class="headerlink" title="壹、概述"></a>壹、概述</h1><p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 <code>Sentinel</code> 的黑白名单控制的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p><blockquote><p>调用方信息通过 <code>ContextUtil.enter(resourceName, origin)</code> 方法中的 <code>origin</code> 参数传入。</p></blockquote><h1 id="贰、规则配置"><a href="#贰、规则配置" class="headerlink" title="贰、规则配置"></a>贰、规则配置</h1><p>黑白名单规则（<code>AuthorityRule</code>）非常简单，主要有以下配置项：</p><ul><li><code>resource</code>：资源名，即限流规则的作用对象</li><li><code>limitApp</code>：对应的黑名单/白名单，不同 <code>origin</code> 用 , 分隔，如 <code>appA</code>,<code>appB</code></li><li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li></ul><h1 id="叁、示例"><a href="#叁、示例" class="headerlink" title="叁、示例"></a>叁、示例</h1><p>比如我们希望控制对资源 <code>test</code> 的访问设置白名单，只有来源为 <code>appA</code> 和 <code>appB</code> 的请求才可通过，则可以配置如下白名单规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorityDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESOURCE_NAME = <span class="string">&quot;testABC&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========Testing for black list========&quot;</span>);</span><br><span class="line">        initBlackRules();</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appB&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appC&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========Testing for white list========&quot;</span>);</span><br><span class="line">        initWhiteRules();</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appB&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appC&quot;</span>);</span><br><span class="line">        testFor(RESOURCE_NAME, <span class="string">&quot;appE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFor</span><span class="params">(<span class="comment">/*@NonNull*/</span> String resource, <span class="comment">/*@NonNull*/</span> String origin)</span> </span>&#123;</span><br><span class="line">        ContextUtil.enter(resource, origin);</span><br><span class="line">        Entry entry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            entry = SphU.entry(resource);</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;Passed for resource %s, origin is %s&quot;</span>, resource, origin));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">            System.err.println(String.format(<span class="string">&quot;Blocked for resource %s, origin is %s&quot;</span>, resource, origin));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                entry.exit();</span><br><span class="line">            &#125;</span><br><span class="line">            ContextUtil.exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initWhiteRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorityRule rule = <span class="keyword">new</span> AuthorityRule();</span><br><span class="line">        rule.setResource(RESOURCE_NAME);</span><br><span class="line">        rule.setStrategy(RuleConstant.AUTHORITY_WHITE);</span><br><span class="line">        rule.setLimitApp(<span class="string">&quot;appA,appE&quot;</span>);</span><br><span class="line">        AuthorityRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initBlackRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorityRule rule = <span class="keyword">new</span> AuthorityRule();</span><br><span class="line">        rule.setResource(RESOURCE_NAME);</span><br><span class="line">        rule.setStrategy(RuleConstant.AUTHORITY_BLACK);</span><br><span class="line">        rule.setLimitApp(<span class="string">&quot;appA,appB&quot;</span>);</span><br><span class="line">        AuthorityRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="肆、SpringBoot中的使用"><a href="#肆、SpringBoot中的使用" class="headerlink" title="肆、SpringBoot中的使用"></a>肆、SpringBoot中的使用</h1><h2 id="4-1、限制来源token"><a href="#4-1、限制来源token" class="headerlink" title="4.1、限制来源token"></a>4.1、限制来源token</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelRequestParserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestOriginParser <span class="title">requestOriginParser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (httpServletRequest -&gt; httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-1、限制来源请求地址"><a href="#4-1、限制来源请求地址" class="headerlink" title="4.1、限制来源请求地址"></a>4.1、限制来源请求地址</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelRequestParserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestOriginParser <span class="title">requestOriginParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (httpServletRequest -&gt; httpServletRequest.getRemoteAddr());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践自定义调用链的源码</a> 。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在前面几篇文章中简单介绍了一下Sentinel的功能都是针对所有的请求资源，今天就来继续说一下Sentinel的来源访问控制。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel进阶之热点参数限流</title>
    <link href="https://eelve.com/posts/9115052e.html"/>
    <id>https://eelve.com/posts/9115052e.html</id>
    <published>2021-08-30T14:04:09.000Z</published>
    <updated>2021-08-30T14:23:28.942Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前面几篇文章中简单介绍了一下<code>Sentinel</code>的功能都是针对接口的，今天就来继续说一下Sentinel的热点参数限流。</p><hr><h1 id="壹、概览"><a href="#壹、概览" class="headerlink" title="壹、概览"></a>壹、概览</h1><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 <code>Top K</code> 数据，并对其访问进行限制。比如：</p><ul><li>商品 <code>ID</code> 为参数，统计一段时间内最常购买的商品 <code>ID</code> 并进行限制</li><li>用户 <code>ID</code> 为参数，针对一段时间内频繁访问的用户 <code>ID</code> 进行限制</li></ul><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p><img src="https://image.eelve.com/eblog/2021083001.png" alt="sentinel-hot-param-overview"></p><p><code>Sentinel</code> 利用 <code>LRU</code> 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。</p><h1 id="贰、基本使用"><a href="#贰、基本使用" class="headerlink" title="贰、基本使用"></a>贰、基本使用</h1><p>要使用热点参数限流功能，需要引入以下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-parameter-flow-control&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;x.y.z&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>然后为对应的资源配置热点参数限流规则，并在 <code>entry</code> 的时候传入相应的参数，即可使热点参数限流生效。</p><blockquote><p>注：若自行扩展并注册了自己实现的 <code>SlotChainBuilder</code>，并希望使用热点参数限流功能，则可以在 <code>chain</code> 里面合适的地方插入 <code>ParamFlowSlot</code>。</p></blockquote><p>那么如何传入对应的参数以便 <code>Sentinel</code> 统计呢？我们可以通过 <code>SphU</code> 类里面几个 <code>entry</code> 重载方法来传入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Entry <span class="title">entry</span><span class="params">(String name, EntryType type, <span class="keyword">int</span> count, Object... args)</span> <span class="keyword">throws</span> BlockException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Entry <span class="title">entry</span><span class="params">(Method method, EntryType type, <span class="keyword">int</span> count, Object... args)</span> <span class="keyword">throws</span> BlockException</span></span><br></pre></td></tr></table></figure><p>其中最后的一串 <code>args</code> 就是要传入的参数，有多个就按照次序依次传入。比如要传入两个参数 <code>paramA</code> 和 <code>paramB</code>，则可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// paramA in index 0, paramB in index 1.</span></span><br><span class="line"><span class="comment">// 若需要配置例外项或者使用集群维度流控，则传入的参数只支持基本类型。</span></span><br><span class="line">SphU.entry(resourceName, EntryType.IN, <span class="number">1</span>, paramA, paramB);</span><br></pre></td></tr></table></figure><p><code>注意</code>：若 <code>entry</code> 的时候传入了热点参数，那么 <code>exit</code> 的时候也一定要带上对应的参数（<code>exit(count, args)</code>），否则可能会有统计错误。正确的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    entry = SphU.entry(resourceName, EntryType.IN, <span class="number">1</span>, paramA, paramB);</span><br><span class="line">    <span class="comment">// Your logic here.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">    <span class="comment">// Handle request rejection.</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        entry.exit(<span class="number">1</span>, paramA, paramB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 <code>@SentinelResource</code> 注解方式定义的资源，若注解作用的方法上有参数，<code>Sentinel</code> 会将它们作为参数传入 <code>SphU.entry(res, args)</code>。比如以下的方法里面 <code>uid</code> 和 <code>type</code> 会分别作为第一个和第二个参数传入 <code>Sentinel API</code>，从而可以用于热点规则判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;myMethod&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">doSomething</span><span class="params">(String uid, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// some logic here...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="叁、热点参数规则"><a href="#叁、热点参数规则" class="headerlink" title="叁、热点参数规则"></a>叁、热点参数规则</h1><p>热点参数规则（<code>ParamFlowRule</code>）类似于流量控制规则（<code>FlowRule</code>）：</p><table><thead><tr><th>属性</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名，必填</td><td></td></tr><tr><td>count</td><td>限流阈值，必填</td><td></td></tr><tr><td>grade</td><td>限流模式</td><td>QPS 模式</td></tr><tr><td>durationInSec</td><td>统计窗口时间长度（单位为秒），1.6.0 版本开始支持</td><td>1s</td></tr><tr><td>controlBehavior</td><td>流控效果（支持快速失败和匀速排队模式），1.6.0 版本开始支持</td><td>快速失败</td></tr><tr><td>maxQueueingTimeMs</td><td>最大排队等待时长（仅在匀速排队模式生效），1.6.0 版本开始支持</td><td>0ms</td></tr><tr><td>paramIdx</td><td>热点参数的索引，必填，对应 SphU.entry(xxx, args) 中的参数索引位置</td><td></td></tr><tr><td>paramFlowItemList</td><td>参数例外项，可以针对指定的参数值单独设置限流阈值，不受前面 count 阈值的限制。仅支持基本类型和字符串类型</td><td></td></tr><tr><td>clusterMode</td><td>是否是集群参数流控规则</td><td>false</td></tr><tr><td>clusterConfig</td><td>集群流控相关配置</td><td></td></tr></tbody></table><p>我们可以通过 <code>ParamFlowRuleManager</code> 的 <code>loadRules</code> 方法更新热点参数规则，下面是一个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ParamFlowRule rule = <span class="keyword">new</span> ParamFlowRule(resourceName)</span><br><span class="line">    .setParamIdx(<span class="number">0</span>)</span><br><span class="line">    .setCount(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 针对 int 类型的参数 PARAM_B，单独设置限流 QPS 阈值为 10，而不是全局的阈值 5.</span></span><br><span class="line">ParamFlowItem item = <span class="keyword">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))</span><br><span class="line">    .setClassType(<span class="keyword">int</span>.class.getName())</span><br><span class="line">    .setCount(<span class="number">10</span>);</span><br><span class="line">rule.setParamFlowItemList(Collections.singletonList(item));</span><br><span class="line"></span><br><span class="line">ParamFlowRuleManager.loadRules(Collections.singletonList(rule));</span><br></pre></td></tr></table></figure><h1 id="肆、示例"><a href="#肆、示例" class="headerlink" title="肆、示例"></a>肆、示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamFlowQpsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_A = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_B = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_C = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PARAM_D = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Here we prepare different parameters to validate flow control by parameters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] PARAMS = <span class="keyword">new</span> Integer[] &#123;PARAM_A, PARAM_B, PARAM_C, PARAM_D&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESOURCE_KEY = <span class="string">&quot;resA&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initParamFlowRules();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line">        ParamFlowQpsRunner&lt;Integer&gt; runner = <span class="keyword">new</span> ParamFlowQpsRunner&lt;&gt;(PARAMS, RESOURCE_KEY, threadCount, <span class="number">120</span>);</span><br><span class="line">        runner.tick();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        runner.simulateTraffic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initParamFlowRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// QPS mode, threshold is 5 for every frequent &quot;hot spot&quot; parameter in index 0 (the first arg).</span></span><br><span class="line">        ParamFlowRule rule = <span class="keyword">new</span> ParamFlowRule(RESOURCE_KEY)</span><br><span class="line">            .setParamIdx(<span class="number">0</span>)</span><br><span class="line">            .setGrade(RuleConstant.FLOW_GRADE_QPS)</span><br><span class="line">            <span class="comment">//.setDurationInSec(3)</span></span><br><span class="line">            <span class="comment">//.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER)</span></span><br><span class="line">            <span class="comment">//.setMaxQueueingTimeMs(600)</span></span><br><span class="line">            .setCount(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can set threshold count for specific parameter value individually.</span></span><br><span class="line">        <span class="comment">// Here we add an exception item. That means: QPS threshold of entries with parameter `PARAM_B` (type: int)</span></span><br><span class="line">        <span class="comment">// in index 0 will be 10, rather than the global threshold (5).</span></span><br><span class="line">        ParamFlowItem item = <span class="keyword">new</span> ParamFlowItem().setObject(String.valueOf(PARAM_B))</span><br><span class="line">            .setClassType(<span class="keyword">int</span>.class.getName())</span><br><span class="line">            .setCount(<span class="number">10</span>);</span><br><span class="line">        rule.setParamFlowItemList(Collections.singletonList(item));</span><br><span class="line">        ParamFlowRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在前面几篇文章中简单介绍了一下Sentinel的功能都是针对接口的，今天就来继续说一下Sentinel的热点参数限流。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel进阶之集群流量控制</title>
    <link href="https://eelve.com/posts/318cbe59.html"/>
    <id>https://eelve.com/posts/318cbe59.html</id>
    <published>2021-07-10T01:04:09.000Z</published>
    <updated>2021-07-19T02:33:46.616Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前面几篇文章中简单介绍了一下<code>Sentinel</code>的功能都是针对单机的，今天就来继续说一下Sentinel的集群流量控制。</p><hr><h1 id="壹、集群流控介绍"><a href="#壹、集群流控介绍" class="headerlink" title="壹、集群流控介绍"></a>壹、集群流控介绍</h1><h2 id="1-1、介绍"><a href="#1-1、介绍" class="headerlink" title="1.1、介绍"></a>1.1、介绍</h2><p>为什么要使用集群流控呢？假设我们希望给某个用户限制调用某个 API 的总 QPS 为 50，但机器数可能很多（比如有 100 台）。这时候我们很自然地就想到，找一个 server 来专门来统计总的调用量，其它的实例都与这台 server 通信来判断是否可以调用。这就是最基础的集群流控的方式。</p><p>另外集群流控还可以解决流量不均匀导致总体限流效果不佳的问题。假设集群中有 10 台机器，我们给每台机器设置单机限流阈值为 10 QPS，理想情况下整个集群的限流阈值就为 100 QPS。不过实际情况下流量到每台机器可能会不均匀，会导致总量没有到的情况下某些机器就开始限流。因此仅靠单机维度去限制的话会无法精确地限制总体流量。而集群流控可以精确地控制整个集群的调用总量，结合单机限流兜底，可以更好地发挥流量控制的效果。</p><p>集群流控中共有两种身份：</p><ul><li>Token Client：集群流控客户端，用于向所属 Token Server 通信请求 token。集群限流服务端会返回给客户端结果，决定是否限流。</li><li>Token Server：即集群流控服务端，处理来自 Token Client 的请求，根据配置的集群规则判断是否应该发放 token（是否允许通过）。</li></ul><p><img src="https://image.eelve.com/eblog/2021071001.png" alt="结构示意图"></p><h2 id="1-2、模块结构"><a href="#1-2、模块结构" class="headerlink" title="1.2、模块结构"></a>1.2、模块结构</h2><p>Sentinel 1.4.0 开始引入了集群流控模块，主要包含以下几部分：</p><ul><li><code>sentinel-cluster-common-default</code>: 公共模块，包含公共接口和实体</li><li><code>sentinel-cluster-client-default</code>: 默认集群流控 client 模块，使用 Netty 进行通信，提供接口方便序列化协议扩展</li><li><code>sentinel-cluster-server-default</code>: 默认集群流控 server 模块，使用 Netty 进行通信，提供接口方便序列化协议扩展；同时提供扩展接口对接规则判断的具体实现（TokenService），默认实现是复用 sentinel-core 的相关逻辑</li></ul><blockquote><p>注意：集群流控模块要求 JDK 版本最低为 1.7。</p></blockquote><h1 id="贰、集群流控规则"><a href="#贰、集群流控规则" class="headerlink" title="贰、集群流控规则"></a>贰、集群流控规则</h1><p><code>FlowRule</code>添加了两个字段用于集群限流相关配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> clusterMode; <span class="comment">// 标识是否为集群限流配置</span></span><br><span class="line"><span class="keyword">private</span> ClusterFlowConfig clusterConfig; <span class="comment">// 集群限流相关配置项</span></span><br></pre></td></tr></table></figure><p>其中用一个专门的 <code>ClusterFlowConfig</code> 代表集群限流相关配置项，以与现有规则配置项分开：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局唯一的规则 ID，由集群限流管控端分配.</span></span><br><span class="line"><span class="keyword">private</span> Long flowId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阈值模式，默认（0）为单机均摊，1 为全局阈值.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> thresholdType = ClusterRuleConstant.FLOW_THRESHOLD_AVG_LOCAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> strategy = ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 client 连接失败或通信失败时，是否退化到本地的限流模式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> fallbackToLocalWhenFail = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><ul><li><code>flowId</code> 代表全局唯一的规则 <code>ID</code>，<code>Sentinel</code> 集群限流服务端通过此 <code>ID</code> 来区分各个规则，因此务必保持全局唯一。一般 <code>flowId</code> 由统一的管控端进行分配，或写入至 <code>DB</code> 时生成。</li><li><code>thresholdType</code> 代表集群限流阈值模式。其中单机均摊模式下配置的阈值等同于单机能够承受的限额，<code>token server</code> 会根据客户端对应的 <code>namespace</code>（默认为 <code>project.name</code> 定义的应用名）下的连接数来计算总的阈值（比如独立模式下有 3 个 client 连接到了 token server，然后配的单机均摊阈值为 10，则计算出的集群总量就为 30）；而全局模式下配置的阈值等同于整个集群的总阈值。</li></ul><p><code>ParamFlowRule</code> 热点参数限流相关的集群配置与 <code>FlowRule</code> 相似。</p><h1 id="叁、集群流控配置"><a href="#叁、集群流控配置" class="headerlink" title="叁、集群流控配置"></a>叁、集群流控配置</h1><h2 id="3-1、配置方式"><a href="#3-1、配置方式" class="headerlink" title="3.1、配置方式"></a>3.1、配置方式</h2><blockquote><p>在集群流控的场景下，推荐使用动态规则源来动态地管理规则。</p></blockquote><p>对于客户端，按照原有的方式来向 FlowRuleManager 和 ParamFlowRuleManager 注册动态规则源，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleDataSource = <span class="keyword">new</span> NacosDataSource&lt;&gt;(remoteAddress, groupId, dataId, parser);</span><br><span class="line">FlowRuleManager.register2Property(flowRuleDataSource.getProperty());</span><br></pre></td></tr></table></figure><p>对于集群流控 <code>token server</code>，由于集群限流服务端有作用域（namespace）的概念，因此我们需要注册一个自动根据 <code>namespace</code> 生成动态规则源的 <code>PropertySupplier</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Supplier 类型：接受 namespace，返回生成的动态规则源，类型为 SentinelProperty&lt;List&lt;FlowRule&gt;&gt;</span></span><br><span class="line"><span class="comment">// ClusterFlowRuleManager 针对集群限流规则，ClusterParamFlowRuleManager 针对集群热点规则，配置方式类似</span></span><br><span class="line">ClusterFlowRuleManager.setPropertySupplier(namespace -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SomeDataSource(namespace).getProperty();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后每当集群限流服务端 <code>namespace set</code> 产生变更时，<code>Sentinel</code> 会自动针对新加入的 <code>namespace</code> 生成动态规则源并进行自动监听，并删除旧的不需要的规则源。</p><h2 id="3-2、集群限流服务端"><a href="#3-2、集群限流服务端" class="headerlink" title="3.2、集群限流服务端"></a>3.2、集群限流服务端</h2><p>要想使用集群限流服务端，必须引入集群限流 server 相关依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-cluster-server-default&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3、启动方式"><a href="#3-3、启动方式" class="headerlink" title="3.3、启动方式"></a>3.3、启动方式</h2><p><code>Sentinel</code> 集群限流服务端有两种启动方式：</p><ul><li>独立模式（Alone），即作为独立的 <code>token server</code> 进程启动，独立部署，隔离性好，但是需要额外的部署操作。独立模式适合作为 <code>Global Rate Limiter</code> 给集群提供流控服务。</li></ul><p><img src="https://image.eelve.com/eblog/2021071002.png" alt="独立模式"></p><ul><li>嵌入模式（Embedded），即作为内置的 <code>token server</code> 与服务在同一进程中启动。在此模式下，集群中各个实例都是对等的，<code>token server</code> 和 <code>client</code> 可以随时进行转变，因此无需单独部署，灵活性比较好。但是隔离性不佳，需要限制 <code>token server</code> 的总 <code>QPS</code>，防止影响应用本身。嵌入模式适合某个应用集群内部的流控。</li></ul><p><img src="https://image.eelve.com/eblog/2021071003.png" alt="嵌入模式"></p><p>我们可以使用 <code>API</code> 将在 <code>embedded</code> 模式下转换集群流控身份：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;&lt;ip&gt;:&lt;port&gt;&#x2F;setClusterMode?mode&#x3D;&lt;xxx&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>mode</code> 为 <code>0</code> 代表 <code>client</code>，<code>1</code> 代表 <code>server</code>，<code>-1</code> 代表关闭。注意应用端需要引入集群限流客户端或服务端的相应依赖。</p><p>在独立模式下，我们可以直接创建对应的 <code>ClusterTokenServer</code> 实例并在 <code>main</code> 函数中通过 <code>start</code> 方法启动 <code>Token Server</code>。</p><h2 id="3-4、属性配置"><a href="#3-4、属性配置" class="headerlink" title="3.4、属性配置"></a>3.4、属性配置</h2><p>集群限流服务端注册动态配置源来动态地进行配置。配置类型有以下几种：</p><ul><li><code>namespace set</code>: 集群限流服务端服务的作用域（命名空间），可以设置为自己服务的应用名。集群限流 <code>client</code> 在连接到 <code>token server</code> 后会上报自己的命名空间（默认为 <code>project.name</code> 配置的应用名），<code>token server</code> 会根据上报的命名空间名称统计连接数。</li><li><code>transport config</code>: 集群限流服务端通信相关配置，如 <code>server port</code></li><li><code>flow config</code>: 集群限流服务端限流相关配置，如滑动窗口统计时长、格子数目、最大允许总 QPS等</li></ul><p>我们可以通过 <code>ClusterServerConfigManager</code> 的各个 <code>registerXxxProperty</code> 方法来注册相关的配置源。</p><p>从 <code>1.4.1</code> 版本开始，<code>Sentinel</code> 支持给 <code>token server</code> 配置最大允许的总 <code>QPS（maxAllowedQps）</code>，来对 <code>token server</code> 的资源使用进行限制，防止在嵌入模式下影响应用本身。</p><p>下图是Token Server 分配配置的示意图：</p><p><img src="https://image.eelve.com/eblog/2021071004.png" alt="Token Server分配配置"></p><h1 id="肆、扩展接口"><a href="#肆、扩展接口" class="headerlink" title="肆、扩展接口"></a>肆、扩展接口</h1><p><img src="https://image.eelve.com/eblog/2021071005.png" alt="整体扩展架构"></p><h2 id="4-1、通用扩展接口"><a href="#4-1、通用扩展接口" class="headerlink" title="4.1、通用扩展接口"></a>4.1、通用扩展接口</h2><p>以下通用接口位于 <code>sentinel-core</code> 中：</p><ul><li>TokenService: 集群限流功能接口，server / client 均可复用 </li><li>ClusterTokenClient: 集群限流功能客户端</li><li>ClusterTokenServer: 集群限流服务端接口</li><li>EmbeddedClusterTokenServer: 集群限流服务端接口（embedded 模式）</li></ul><p>以下通用接口位于 <code>sentinel-cluster-common-default</code>:</p><ul><li>EntityWriter</li><li>EntityDecoder</li></ul><h2 id="4-2、Client-扩展接口"><a href="#4-2、Client-扩展接口" class="headerlink" title="4.2、Client 扩展接口"></a>4.2、Client 扩展接口</h2><p>集群流控 <code>Client</code> 端通信相关扩展接口：</p><ul><li>ClusterTransportClient：集群限流通信客户端</li><li>RequestEntityWriter</li><li>ResponseEntityDecoder</li></ul><h2 id="4-3、Server-扩展接口"><a href="#4-3、Server-扩展接口" class="headerlink" title="4.3、Server 扩展接口"></a>4.3、Server 扩展接口</h2><p>集群流控 <code>Server</code> 端通信相关扩展接口：</p><ul><li>ResponseEntityWriter</li><li>RequestEntityDecoder</li></ul><p>集群流控 <code>Server</code> 端请求处理扩展接口：</p><ul><li>RequestProcessor: 请求处理接口 (request -&gt; response)</li></ul><hr><p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在前面几篇文章中简单介绍了一下Sentinel的功能都是针对单机的，今天就来继续说一下Sentinel的集群流量控制。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel进阶之系统自适应保护</title>
    <link href="https://eelve.com/posts/97e25d71.html"/>
    <id>https://eelve.com/posts/97e25d71.html</id>
    <published>2021-06-07T00:07:07.000Z</published>
    <updated>2021-06-07T00:30:39.658Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/archives/sentinel-circuit-breaking">Sentinel进阶之熔断降级</a> 中简单介绍了一下<code>Sentinel</code>的流量控制，今天就来继续说一下Sentinel的系统自适应保护。</p><hr><h1 id="壹、概述"><a href="#壹、概述" class="headerlink" title="壹、概述"></a>壹、概述</h1><p>Sentinel 系统自适应保护从整体维度对应用入口流量进行控制，结合应用的 Load、总体平均 RT、入口QPS 和线程数等几个维度的监控指标，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><h1 id="贰、背景"><a href="#贰、背景" class="headerlink" title="贰、背景"></a>贰、背景</h1><p>在开始之前，先回顾一下 <code>Sentinel</code> 做系统自适应保护的目的：</p><ul><li>保证系统不被拖垮</li><li>在系统稳定的前提下，保持系统的吞吐量</li></ul><p>长期以来，系统自适应保护的思路是根据硬指标，即系统的负载 (load1) 来做系统过载保护。当系统负载高于某个阈值，就禁止或者减少流量的进入；当load开始好转，则恢复流量的进入。这个思路给我们带来了不可避免的两个问题：</p><ul><li>load 是一个“果”，如果根据 load 的情况来调节流量的通过率，那么就始终有延迟性。也就意味着通过率的任何调整，都会过一段时间才能看到效果。当前通过率是使load恶化的一个动作，那么也至少要过 1 秒之后才能观测到；同理，如果当前通过率调整是让 <code>load</code> 好转的一个动作，也需要1秒之后才能继续调整，这样就浪费了系统的处理能力。所以我们看到的曲线，总是会有抖动。</li><li>恢复慢。想象一下这样的一个场景（真实），出现了这样一个问题，下游应用不可靠，导致应用RT很高，从而load到了一个很高的点。过了一段时间之后下游应用恢复了，应用RT也相应减少。这个时候，其实应该大幅度增大流量的通过率；但是由于这个时候 <code>load</code> 仍然很高，通过率的恢复仍然不高。</li></ul><p><code>TCP BBR</code> 的思想给了我们一个很大的启发。我们应该根据系统能够处理的请求，和允许进来的请求，来做平衡，而不是根据一个间接的指标（系统 load）来做限流。最终我们追求的目标是 <code>在系统不被拖垮的情况下，提高系统的吞吐率，而不是 load 一定要到低于某个阈值</code>。如果我们还是按照固有的思维，超过特定的 load 就禁止流量进入，系统 load 恢复就放开流量，这样做的结果是无论我们怎么调参数，调比例，都是按照果来调节因，都无法取得良好的效果。</p><p><code>Sentinel</code> 在系统自适应保护的做法是，用 load1 作为启动控制流量的值，而允许通过的流量由处理请求的能力，即请求的响应时间以及当前系统正在处理的请求速率来决定。</p><h1 id="叁、系统规则"><a href="#叁、系统规则" class="headerlink" title="叁、系统规则"></a>叁、系统规则</h1><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体Load、RT、入口QPS 和线程数四个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统保护规则是应用整体维度的，而不是资源维度的，并且<code>仅对入口流量生效</code>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p><p>系统规则支持以下的阈值类型：</p><ul><li><code>Load</code>（仅对 <code>Linux/Unix-like</code> 机器生效）：当系统 <code>load1</code> 超过阈值，且系统当前的并发线程数超过系统容量时才会触发系统保护。系统容量由系统的 <code>maxQps * minRt</code> 计算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li><code>CPU usage</code>（1.5.0+ 版本）：当系统 <code>CPU</code> 使用率超过阈值即触发系统保护（取值范围 <code>0.0-1.0</code>）。</li><li><code>RT</code>：当单台机器上所有入口流量的<code>平均RT</code> 达到阈值即触发系统保护，单位是毫秒。</li><li><code>线程数</code>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><code>入口 QPS</code>：当单台机器上所有入口流量的 <code>QPS</code> 达到阈值即触发系统保护。</li></ul><h1 id="肆、原理"><a href="#肆、原理" class="headerlink" title="肆、原理"></a>肆、原理</h1><p>先用经典图来镇楼:</p><p><img src="https://image.eelve.com/eblog/system-load.png" alt="系统load"></p><p>我们把系统处理请求的过程想象为一个水管，到来的请求是往这个水管灌水，当系统处理顺畅的时候，请求不需要排队，直接从水管中穿过，这个请求的RT是最短的；反之，当请求堆积的时候，那么处理请求的时间则会变为：排队时间 + 最短处理时间。</p><ul><li>推论一: 如果我们能够保证水管里的水量，能够让水顺畅的流动，则不会增加排队的请求；也就是说，这个时候的系统负载不会进一步恶化。</li></ul><p>我们用 T 来表示(水管内部的水量)，用RT来表示请求的处理时间，用P来表示进来的请求数，那么一个请求从进入水管道到从水管出来，这个水管会存在 <code>P * RT</code>　个请求。换一句话来说，当 <code>T ≈ QPS * Avg(RT)</code> 的时候，我们可以认为系统的处理能力和允许进入的请求个数达到了平衡，系统的负载不会进一步恶化。</p><p>接下来的问题是，水管的水位是可以达到了一个平衡点，但是这个平衡点只能保证水管的水位不再继续增高，但是还面临一个问题，就是在达到平衡点之前，这个水管里已经堆积了多少水。如果之前水管的水已经在一个量级了，那么这个时候系统允许通过的水量可能只能缓慢通过，RT会大，之前堆积在水管里的水会滞留；反之，如果之前的水管水位偏低，那么又会浪费了系统的处理能力。</p><ul><li>推论二:　当保持入口的流量是水管出来的流量的最大的值的时候，可以最大利用水管的处理能力。</li></ul><p>然而，和 TCP BBR 的不一样的地方在于，还需要用一个系统负载的值（load1）来激发这套机制启动。</p><blockquote><p>这种系统自适应算法对于低 load 的请求，它的效果是一个“兜底”的角色。<code>对于不是应用本身造成的 load 高的情况（如其它进程导致的不稳定的情况），效果不明显</code>。</p></blockquote><h1 id="伍、示例"><a href="#伍、示例" class="headerlink" title="伍、示例"></a>伍、示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemGuardDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger pass = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger block = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger total = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threadCount = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> seconds = <span class="number">60</span> + <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        tick();</span><br><span class="line">        initSystemRule();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            Thread entryThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        Entry entry = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            entry = SphU.entry(<span class="string">&quot;methodA&quot;</span>, EntryType.IN);</span><br><span class="line">                            pass.incrementAndGet();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                <span class="comment">// ignore</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (BlockException e1) &#123;</span><br><span class="line">                            block.incrementAndGet();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                <span class="comment">// ignore</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                            <span class="comment">// biz exception</span></span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            total.incrementAndGet();</span><br><span class="line">                            <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                entry.exit();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            entryThread.setName(<span class="string">&quot;working-thread&quot;</span>);</span><br><span class="line">            entryThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initSystemRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SystemRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;SystemRule&gt;();</span><br><span class="line">        SystemRule rule = <span class="keyword">new</span> SystemRule();</span><br><span class="line">        <span class="comment">// max load is 3</span></span><br><span class="line">        rule.setHighestSystemLoad(<span class="number">3.0</span>);</span><br><span class="line">        <span class="comment">// max cpu usage is 60%</span></span><br><span class="line">        rule.setHighestCpuUsage(<span class="number">0.6</span>);</span><br><span class="line">        <span class="comment">// max avg rt of all request is 10 ms</span></span><br><span class="line">        rule.setAvgRt(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// max total qps is 20</span></span><br><span class="line">        rule.setQps(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// max parallel working thread is 10</span></span><br><span class="line">        rule.setMaxThread(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        rules.add(rule);</span><br><span class="line">        SystemRuleManager.loadRules(Collections.singletonList(rule));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread timer = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TimerTask());</span><br><span class="line">        timer.setName(<span class="string">&quot;sentinel-timer-task&quot;</span>);</span><br><span class="line">        timer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;begin to statistic!!!&quot;</span>);</span><br><span class="line">            <span class="keyword">long</span> oldTotal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> oldPass = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> oldBlock = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> globalTotal = total.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondTotal = globalTotal - oldTotal;</span><br><span class="line">                oldTotal = globalTotal;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> globalPass = pass.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondPass = globalPass - oldPass;</span><br><span class="line">                oldPass = globalPass;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> globalBlock = block.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondBlock = globalBlock - oldBlock;</span><br><span class="line">                oldBlock = globalBlock;</span><br><span class="line"></span><br><span class="line">                System.out.println(seconds + <span class="string">&quot;, &quot;</span> + TimeUtil.currentTimeMillis() + <span class="string">&quot;, total:&quot;</span></span><br><span class="line">                    + oneSecondTotal + <span class="string">&quot;, pass:&quot;</span></span><br><span class="line">                    + oneSecondPass + <span class="string">&quot;, block:&quot;</span> + oneSecondBlock);</span><br><span class="line">                <span class="keyword">if</span> (seconds-- &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    stop = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在前文Sentinel进阶之熔断降级控制中简单介绍了一下Sentinel的熔断降级，今天就来继续说一下Sentinel的系统自适应保护。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel进阶之熔断降级</title>
    <link href="https://eelve.com/posts/b6bfdc75.html"/>
    <id>https://eelve.com/posts/b6bfdc75.html</id>
    <published>2021-06-06T11:03:25.000Z</published>
    <updated>2021-06-07T00:12:02.281Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/archives/sentinel-flow-control">Sentinel进阶之流量</a> 中简单介绍了一下<code>Sentinel</code>的流量控制，今天就来继续说一下Sentinel的熔断降级。</p><hr><h1 id="壹、概述"><a href="#壹、概述" class="headerlink" title="壹、概述"></a>壹、概述</h1><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p><p><img src="https://image.eelve.com/eblog/service-chain.png" alt="服务调用链"></p><p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<code>弱依赖服务调用</code>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p><blockquote><p>Sentinel 1.8.0 及以上版本对熔断降级特性进行了全新的改进升级，我们可以选择最新版本体验降级规则熔断。</p></blockquote><h1 id="贰、熔断策略"><a href="#贰、熔断策略" class="headerlink" title="贰、熔断策略"></a>贰、熔断策略</h1><p>Sentinel 提供以下几种熔断策略：</p><ul><li>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 <code>RT</code>（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求响应时间小于设置的慢调用 <code>RT</code> 则结束熔断，若大于设置的慢调用 <code>RT</code> 则会再次被熔断。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">public class SlowRatioCircuitBreakerDemo &#123;</span><br><span class="line"></span><br><span class="line">  private static final String KEY &#x3D; &quot;some_method&quot;;</span><br><span class="line"></span><br><span class="line">  private static volatile boolean stop &#x3D; false;</span><br><span class="line">  private static int seconds &#x3D; 120;</span><br><span class="line"></span><br><span class="line">  private static AtomicInteger total &#x3D; new AtomicInteger();</span><br><span class="line">  private static AtomicInteger pass &#x3D; new AtomicInteger();</span><br><span class="line">  private static AtomicInteger block &#x3D; new AtomicInteger();</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) throws Exception &#123;</span><br><span class="line">      initDegradeRule();</span><br><span class="line">      registerStateChangeObserver();</span><br><span class="line">      startTick();</span><br><span class="line"></span><br><span class="line">      int concurrency &#x3D; 8;</span><br><span class="line">      for (int i &#x3D; 0; i &lt; concurrency; i++) &#123;</span><br><span class="line">          Thread entryThread &#x3D; new Thread(() -&gt; &#123;</span><br><span class="line">              while (true) &#123;</span><br><span class="line">                  Entry entry &#x3D; null;</span><br><span class="line">                  try &#123;</span><br><span class="line">                      entry &#x3D; SphU.entry(KEY);</span><br><span class="line">                      pass.incrementAndGet();</span><br><span class="line">                      &#x2F;&#x2F; RT: [40ms, 60ms)</span><br><span class="line">                      sleep(ThreadLocalRandom.current().nextInt(40, 60));</span><br><span class="line">                  &#125; catch (BlockException e) &#123;</span><br><span class="line">                      block.incrementAndGet();</span><br><span class="line">                      sleep(ThreadLocalRandom.current().nextInt(5, 10));</span><br><span class="line">                  &#125; finally &#123;</span><br><span class="line">                      total.incrementAndGet();</span><br><span class="line">                      if (entry !&#x3D; null) &#123;</span><br><span class="line">                          entry.exit();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          entryThread.setName(&quot;sentinel-simulate-traffic-task-&quot; + i);</span><br><span class="line">          entryThread.start();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static void registerStateChangeObserver() &#123;</span><br><span class="line">      EventObserverRegistry.getInstance().addStateChangeObserver(&quot;logging&quot;,</span><br><span class="line">          (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class="line">              if (newState &#x3D;&#x3D; State.OPEN) &#123;</span><br><span class="line">                  System.err.println(String.format(&quot;%s -&gt; OPEN at %d, snapshotValue&#x3D;%.2f&quot;, prevState.name(),</span><br><span class="line">                      TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  System.err.println(String.format(&quot;%s -&gt; %s at %d&quot;, prevState.name(), newState.name(),</span><br><span class="line">                      TimeUtil.currentTimeMillis()));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static void initDegradeRule() &#123;</span><br><span class="line">      List&lt;DegradeRule&gt; rules &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">      DegradeRule rule &#x3D; new DegradeRule(KEY)</span><br><span class="line">          .setGrade(CircuitBreakerStrategy.SLOW_REQUEST_RATIO.getType())</span><br><span class="line">          &#x2F;&#x2F; Max allowed response time</span><br><span class="line">          .setCount(50)</span><br><span class="line">          &#x2F;&#x2F; Retry timeout (in second)</span><br><span class="line">          .setTimeWindow(10)</span><br><span class="line">          &#x2F;&#x2F; Circuit breaker opens when slow request ratio &gt; 60%</span><br><span class="line">          .setSlowRatioThreshold(0.6)</span><br><span class="line">          .setMinRequestAmount(100)</span><br><span class="line">          .setStatIntervalMs(20000);</span><br><span class="line">      rules.add(rule);</span><br><span class="line"></span><br><span class="line">      DegradeRuleManager.loadRules(rules);</span><br><span class="line">      System.out.println(&quot;Degrade rule loaded: &quot; + rules);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static void sleep(int timeMs) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          TimeUnit.MILLISECONDS.sleep(timeMs);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          &#x2F;&#x2F; ignore</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static void startTick() &#123;</span><br><span class="line">      Thread timer &#x3D; new Thread(new TimerTask());</span><br><span class="line">      timer.setName(&quot;sentinel-timer-tick-task&quot;);</span><br><span class="line">      timer.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static class TimerTask implements Runnable &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public void run() &#123;</span><br><span class="line">          long start &#x3D; System.currentTimeMillis();</span><br><span class="line">          System.out.println(&quot;Begin to run! Go go go!&quot;);</span><br><span class="line">          System.out.println(&quot;See corresponding metrics.log for accurate statistic data&quot;);</span><br><span class="line"></span><br><span class="line">          long oldTotal &#x3D; 0;</span><br><span class="line">          long oldPass &#x3D; 0;</span><br><span class="line">          long oldBlock &#x3D; 0;</span><br><span class="line"></span><br><span class="line">          while (!stop) &#123;</span><br><span class="line">              sleep(1000);</span><br><span class="line"></span><br><span class="line">              long globalTotal &#x3D; total.get();</span><br><span class="line">              long oneSecondTotal &#x3D; globalTotal - oldTotal;</span><br><span class="line">              oldTotal &#x3D; globalTotal;</span><br><span class="line"></span><br><span class="line">              long globalPass &#x3D; pass.get();</span><br><span class="line">              long oneSecondPass &#x3D; globalPass - oldPass;</span><br><span class="line">              oldPass &#x3D; globalPass;</span><br><span class="line"></span><br><span class="line">              long globalBlock &#x3D; block.get();</span><br><span class="line">              long oneSecondBlock &#x3D; globalBlock - oldBlock;</span><br><span class="line">              oldBlock &#x3D; globalBlock;</span><br><span class="line"></span><br><span class="line">              System.out.println(TimeUtil.currentTimeMillis() + &quot;, total:&quot; + oneSecondTotal</span><br><span class="line">                  + &quot;, pass:&quot; + oneSecondPass + &quot;, block:&quot; + oneSecondBlock);</span><br><span class="line"></span><br><span class="line">              if (seconds-- &lt;&#x3D; 0) &#123;</span><br><span class="line">                  stop &#x3D; true;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          long cost &#x3D; System.currentTimeMillis() - start;</span><br><span class="line">          System.out.println(&quot;time cost: &quot; + cost + &quot; ms&quot;);</span><br><span class="line">          System.out.println(&quot;total: &quot; + total.get() + &quot;, pass:&quot; + pass.get()</span><br><span class="line">              + &quot;, block:&quot; + block.get());</span><br><span class="line">          System.exit(0);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 <code>0% - 100%</code>。</li><li>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN 状态</code>），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li></ul><p>注意异常降级仅针对业务异常，对 <code>Sentinel</code> 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  entry = SphU.entry(resource);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write your biz code here.</span></span><br><span class="line">  <span class="comment">// &lt;&lt;BIZ CODE&gt;&gt;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!BlockException.isBlockException(t)) &#123;</span><br><span class="line">    Tracer.trace(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">    entry.exit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>开源整合模块，如 <code>Sentinel Dubbo Adapter</code>, <code>Sentinel Web Servlet Filter</code> 或 <code>@SentinelResource</code> 注解会自动统计业务异常，无需手动调用。但是如果你的程序发生异常的异常被处理过，或者异常时并不会抛出异常，则需要你自己手动调用 <code>Tracer.trace(ex)</code> 来记录业务异常。否则你的<code>异常比例</code>和<code>异常数</code>将不会生效。</p></blockquote><h1 id="叁、熔断降级规则说明"><a href="#叁、熔断降级规则说明" class="headerlink" title="叁、熔断降级规则说明"></a>叁、熔断降级规则说明</h1><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名，即规则的作用对象</td><td></td></tr><tr><td>grade</td><td>熔断策略，支持慢调用比例/异常比例/异常数策略</td><td>慢调用比例</td></tr><tr><td>count</td><td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td><td></td></tr><tr><td>timeWindow</td><td>熔断时长，单位为 s</td><td></td></tr><tr><td>minRequestAmount</td><td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td><td>5</td></tr><tr><td>statIntervalMs</td><td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td><td>1000 ms</td></tr><tr><td>slowRatioThreshold</td><td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td><td></td></tr></tbody></table><h1 id="肆、熔断器事件监听"><a href="#肆、熔断器事件监听" class="headerlink" title="肆、熔断器事件监听"></a>肆、熔断器事件监听</h1><p><code>Sentinel</code> 支持注册自定义的事件监听器监听熔断器状态变换事件（state change event）。示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">EventObserverRegistry.getInstance().addStateChangeObserver(<span class="string">&quot;logging&quot;</span>,</span><br><span class="line">    (prevState, newState, rule, snapshotValue) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (newState == State.OPEN) &#123;</span><br><span class="line">            <span class="comment">// 变换至 OPEN state 时会携带触发时的值</span></span><br><span class="line">            System.err.println(String.format(<span class="string">&quot;%s -&gt; OPEN at %d, snapshotValue=%.2f&quot;</span>, prevState.name(),</span><br><span class="line">                TimeUtil.currentTimeMillis(), snapshotValue));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(String.format(<span class="string">&quot;%s -&gt; %s at %d&quot;</span>, prevState.name(), newState.name(),</span><br><span class="line">                TimeUtil.currentTimeMillis()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><hr><p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p><p>另外在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p><p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>DegradeRule</code> 的校验方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static boolean isValidRule(DegradeRule rule) &#123;</span><br><span class="line">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class="line">        &amp;&amp; rule.getCount() &gt;&#x3D; 0 &amp;&amp; rule.getTimeWindow() &gt; 0;</span><br><span class="line">    if (!baseValid) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (rule.getMinRequestAmount() &lt;&#x3D; 0 || rule.getStatIntervalMs() &lt;&#x3D; 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (rule.getGrade()) &#123;</span><br><span class="line">        case RuleConstant.DEGRADE_GRADE_RT:</span><br><span class="line">            return rule.getSlowRatioThreshold() &gt;&#x3D; 0 &amp;&amp; rule.getSlowRatioThreshold() &lt;&#x3D; 1;</span><br><span class="line">        case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class="line">            return rule.getCount() &lt;&#x3D; 1;</span><br><span class="line">        case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class="line">            return true;</span><br><span class="line">        default:</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在前文Sentinel进阶之流量控制中简单介绍了一下Sentinel的流量控制，今天就来继续说一下Sentinel的熔断降级。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel进阶之流量控制</title>
    <link href="https://eelve.com/posts/2c2378a.html"/>
    <id>https://eelve.com/posts/2c2378a.html</id>
    <published>2021-06-06T04:50:28.000Z</published>
    <updated>2021-06-06T11:36:01.884Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/archives/sentinel-implementation">Sentinel进阶之基本原理</a> 中简单介绍了一下<code>Sentinel</code>的基本原理，今天就来具体说一下<code>Sentinel</code>的流量控制。</p><hr><p>壹、概述</p><p><code>FlowSlot</code> 会根据预设的规则，结合前面 <code>NodeSelectorSlot</code>、<code>ClusterNodeBuilderSlot</code>、<code>StatistcSlot</code> 统计出来的实时信息进行流量控制。</p><p>限流的直接表现是在执行 <code>Entry nodeA = SphU.entry(资源名字)</code> 的时候抛出 <code>FlowException</code> 异常。<code>FlowException</code> 是 <code>BlockException</code> 的子类，您可以捕捉 <code>BlockException</code> 来自定义被限流之后的处理逻辑。</p><p>同一个资源可以对应多条限流规则。<code>FlowSlot</code> 会对该资源的所有限流规则依次遍历，直到有规则触发限流或者所有规则遍历完毕。</p><p>一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：</p><ul><li><code>resource</code>：资源名，即限流规则的作用对象 </li><li><code>count</code>: 限流阈值</li><li><code>grade</code>: 限流阈值类型，QPS 或线程数</li><li><code>strategy</code>: 根据调用关系选择策略</li></ul><p>贰、基于QPS/并发数的流量控制</p><p>流量控制主要有两种统计类型，一种是统计<code>线程数</code>，另外一种则是统计 <code>QPS</code>。类型由 <code>FlowRule.grade</code> 字段来定义。其中，<code>0</code> 代表根据并发数量来限流，<code>1</code> 代表根据 QPS 来进行流量控制。其中<code>线程数</code>、<code>QPS</code> 值，都是由 <code>StatisticSlot</code> 实时统计获取的。</p><p>可以通过下面的命令查看实时统计信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8719&#x2F;cnode?id&#x3D;resourceName</span><br></pre></td></tr></table></figure><blockquote><p><code>8719</code>端口可以通过配置文件修改</p></blockquote><p>输出内容格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idx id   thread  pass  blocked   success  total Rt   1m-pass   1m-block   1m-all   exeption</span><br><span class="line">2   abc647 0     46     0           46     46   1       2763      0         2763     0</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>thread： 代表当前处理该资源的线程数；</li><li>pass： 代表一秒内到来到的请求；</li><li>blocked： 代表一秒内被流量控制的请求数量；</li><li>success： 代表一秒内成功处理完的请求；</li><li>total： 代表到一秒内到来的请求以及被阻止的请求总和；</li><li>RT： 代表一秒内该资源的平均响应时间；</li><li>1m-pass： 则是一分钟内到来的请求；</li><li>1m-block： 则是一分钟内被阻止的请求；</li><li>1m-all： 则是一分钟内到来的请求和被阻止的请求的总和；</li><li>exception： 则是一秒内业务本身异常的总和。</li></ul><h2 id="2-1、并发线程数流量控制"><a href="#2-1、并发线程数流量控制" class="headerlink" title="2.1、并发线程数流量控制"></a>2.1、并发线程数流量控制</h2><p>线程数限流用于保护业务线程数不被耗尽。例如，当应用所依赖的下游应用由于某种原因导致服务不稳定、响应延迟增加，对于调用者来说，意味着吞吐量下降和更多的线程数占用，极端情况下甚至导致线程池耗尽。为应对高线程占用的情况，业内有使用隔离的方案，比如通过不同业务逻辑使用不同线程池来隔离业务自身之间的资源争抢（线程池隔离），或者使用信号量来控制同时请求的个数（信号量隔离）。这种隔离方案虽然能够控制线程数量，但无法控制请求排队时间。当请求过多时排队也是无益的，直接拒绝能够迅速降低系统压力。Sentinel线程数限流不负责创建和管理线程池，而是简单统计当前请求上下文的线程个数，如果超出阈值，新的请求会被立即拒绝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowThreadDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger pass = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger block = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger total = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger activeThread = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threadCount = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> seconds = <span class="number">60</span> + <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> methodBRunningTime = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">&quot;MethodA will call methodB. After running for a while, methodB becomes fast, &quot;</span></span><br><span class="line">                + <span class="string">&quot;which make methodA also become fast &quot;</span>);</span><br><span class="line">        tick();</span><br><span class="line">        initFlowRule();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            Thread entryThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        Entry methodA = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            TimeUnit.MILLISECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                            methodA = SphU.entry(<span class="string">&quot;methodA&quot;</span>);</span><br><span class="line">                            activeThread.incrementAndGet();</span><br><span class="line">                            Entry methodB = SphU.entry(<span class="string">&quot;methodB&quot;</span>);</span><br><span class="line">                            TimeUnit.MILLISECONDS.sleep(methodBRunningTime);</span><br><span class="line">                            methodB.exit();</span><br><span class="line">                            pass.addAndGet(<span class="number">1</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (BlockException e1) &#123;</span><br><span class="line">                            block.incrementAndGet();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                            <span class="comment">// biz exception</span></span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            total.incrementAndGet();</span><br><span class="line">                            <span class="keyword">if</span> (methodA != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                methodA.exit();</span><br><span class="line">                                activeThread.decrementAndGet();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            entryThread.setName(<span class="string">&quot;working thread&quot;</span>);</span><br><span class="line">            entryThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFlowRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;FlowRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;FlowRule&gt;();</span><br><span class="line">        FlowRule rule1 = <span class="keyword">new</span> FlowRule();</span><br><span class="line">        rule1.setResource(<span class="string">&quot;methodA&quot;</span>);</span><br><span class="line">        <span class="comment">// set limit concurrent thread for &#x27;methodA&#x27; to 20</span></span><br><span class="line">        rule1.setCount(<span class="number">20</span>);</span><br><span class="line">        rule1.setGrade(RuleConstant.FLOW_GRADE_THREAD);</span><br><span class="line">        rule1.setLimitApp(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">        rules.add(rule1);</span><br><span class="line">        FlowRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread timer = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TimerTask());</span><br><span class="line">        timer.setName(<span class="string">&quot;sentinel-timer-task&quot;</span>);</span><br><span class="line">        timer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;begin to statistic!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> oldTotal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> oldPass = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> oldBlock = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> globalTotal = total.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondTotal = globalTotal - oldTotal;</span><br><span class="line">                oldTotal = globalTotal;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> globalPass = pass.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondPass = globalPass - oldPass;</span><br><span class="line">                oldPass = globalPass;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">long</span> globalBlock = block.get();</span><br><span class="line">                <span class="keyword">long</span> oneSecondBlock = globalBlock - oldBlock;</span><br><span class="line">                oldBlock = globalBlock;</span><br><span class="line"></span><br><span class="line">                System.out.println(seconds + <span class="string">&quot; total qps is: &quot;</span> + oneSecondTotal);</span><br><span class="line">                System.out.println(TimeUtil.currentTimeMillis() + <span class="string">&quot;, total:&quot;</span> + oneSecondTotal</span><br><span class="line">                    + <span class="string">&quot;, pass:&quot;</span> + oneSecondPass</span><br><span class="line">                    + <span class="string">&quot;, block:&quot;</span> + oneSecondBlock</span><br><span class="line">                    + <span class="string">&quot; activeThread:&quot;</span> + activeThread.get());</span><br><span class="line">                <span class="keyword">if</span> (seconds-- &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    stop = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (seconds == <span class="number">40</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;method B is running much faster; more requests are allowed to pass&quot;</span>);</span><br><span class="line">                    methodBRunningTime = <span class="number">20</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> cost = System.currentTimeMillis() - start;</span><br><span class="line">            System.out.println(<span class="string">&quot;time cost: &quot;</span> + cost + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;total:&quot;</span> + total.get() + <span class="string">&quot;, pass:&quot;</span> + pass.get()</span><br><span class="line">                + <span class="string">&quot;, block:&quot;</span> + block.get());</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、QPS流量控制"><a href="#2-2、QPS流量控制" class="headerlink" title="2.2、QPS流量控制"></a>2.2、QPS流量控制</h2><p>当 <code>QPS</code> 超过某个阈值的时候，则采取措施进行流量控制。流量控制的手段包括下面 3 种，对应 <code>FlowRule</code> 中的 <code>controlBehavior</code> 字段：</p><ul><li><p>1、直接拒绝（<code>RuleConstant.CONTROL_BEHAVIOR_DEFAULT</code>）方式。该方式是默认的流量控制方式，当<code>QPS</code>超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出<code>FlowException</code>。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。</p></li><li><p>2、冷启动（<code>RuleConstant.CONTROL_BEHAVIOR_WARM_UP</code>）方式。该方式主要用于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况。</p><p>  通常冷启动的过程系统允许通过的 QPS 曲线如下图所示：<br>  <img src="https://image.eelve.com/eblog/warmup.gif" alt="冷启动"></p></li><li><p>3、匀速器（<code>RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER</code>）方式。这种方式严格控制了请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p><p>  <img src="https://image.eelve.com/eblog/queue.gif" alt="排队"></p><p>  这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p></li></ul><p>叁、基于调用关系的流量控制</p><p>调用关系包括调用方、被调用方；方法又可能会调用其它方法，形成一个调用链路的层次关系。<code>Sentinel</code> 通过 <code>NodeSelectorSlot</code> 建立不同资源间的调用的关系，并且通过 <code>ClusterNodeBuilderSlot</code> 记录每个资源的实时统计信息。</p><p>有了调用链路的统计信息，我们可以衍生出多种流量控制手段。</p><h2 id="3-1-根据调用方限流"><a href="#3-1-根据调用方限流" class="headerlink" title="3.1 根据调用方限流"></a>3.1 根据调用方限流</h2><p><code>ContextUtil.enter(resourceName, origin)</code> 方法中的 <code>origin</code> 参数标明了调用方身份。这些信息会在 <code>ClusterBuilderSlot</code> 中被统计。可通过以下命令来展示不同的调用方对同一个资源的调用数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;localhost:8719&#x2F;origin?id&#x3D;nodeA</span><br></pre></td></tr></table></figure><p>调用数据示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id: nodeA</span><br><span class="line">idx origin  threadNum passedQps blockedQps totalQps aRt   1m-passed 1m-blocked 1m-total </span><br><span class="line">1   caller1 0         0         0          0        0     0         0          0</span><br><span class="line">2   caller2 0         0         0          0        0     0         0          0</span><br></pre></td></tr></table></figure><p>上面这个命令展示了资源名为 <code>nodeA</code> 的资源被两个不同的调用方调用的统计。</p><p>限流规则中的 <code>limitApp</code> 字段用于根据调用方进行流量控制。该字段的值有以下三种选项，分别对应不同的场景：</p><ul><li><code>default</code>：表示不区分调用者，来自任何调用者的请求都将进行限流统计。如果这个资源名的调用总和超过了这条规则定义的阈值，则触发限流。</li><li><code>&#123;some_origin_name&#125;</code>：表示针对特定的调用者，只有来自这个调用者的请求才会进行流量控制。例如 <code>NodeA</code> 配置了一条针对调用者<code>caller1</code>的规则，那么当且仅当来自 <code>caller1</code> 对 <code>NodeA</code> 的请求才会触发流量控制。</li><li><code>other</code>：表示针对除 <code>&#123;some_origin_name&#125;</code> 以外的其余调用方的流量进行流量控制。例如，资源<code>NodeA</code>配置了一条针对调用者 <code>caller1</code> 的限流规则，同时又配置了一条调用者为 <code>other</code> 的规则，那么任意来自非 <code>caller1</code> 对 <code>NodeA</code> 的调用，都不能超过 <code>other</code> 这条规则定义的阈值。</li></ul><blockquote><p>同一个资源名可以配置多条规则，规则的生效顺序为：{some_origin_name} &gt; other &gt; default</p></blockquote><h2 id="3-2-根据调用链路入口限流：链路限流"><a href="#3-2-根据调用链路入口限流：链路限流" class="headerlink" title="3.2 根据调用链路入口限流：链路限流"></a>3.2 根据调用链路入口限流：链路限流</h2><p><code>NodeSelectorSlot</code> 中记录了资源之间的调用链路，这些资源通过调用关系，相互之间构成一棵调用树。这棵树的根节点是一个名字为 <code>machine-root</code> 的虚拟节点，调用链的入口都是这个虚节点的子节点。</p><p>一棵典型的调用树如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">          machine-root</span><br><span class="line">              &#x2F;       \</span><br><span class="line">             &#x2F;         \</span><br><span class="line">       Entrance1     Entrance2</span><br><span class="line">          &#x2F;             \</span><br><span class="line">         &#x2F;               \</span><br><span class="line">DefaultNode(nodeA)   DefaultNode(nodeA)</span><br></pre></td></tr></table></figure><p>上图中来自入口 <code>Entrance1</code> 和 <code>Entrance2</code> 的请求都调用到了资源 <code>NodeA</code>，<code>Sentinel</code> 允许只根据某个入口的统计信息对资源限流。比如我们可以设置 <code>FlowRule.strategy</code> 为 <code>RuleConstant.CHAIN</code>，同时设置 <code>FlowRule.ref_identity</code> 为 <code>Entrance1</code> 来表示只有从入口 <code>Entrance1</code> 的调用才会记录到 <code>NodeA</code> 的限流统计当中，而对来自 <code>Entrance2</code> 的调用漠不关心。</p><p>调用链的入口是通过 <code>API</code> 方法 <code>ContextUtil.enter(name)</code> 定义的。</p><h2 id="3-3-具有关系的资源流量控制：关联流量控制"><a href="#3-3-具有关系的资源流量控制：关联流量控制" class="headerlink" title="3.3 具有关系的资源流量控制：关联流量控制"></a>3.3 具有关系的资源流量控制：关联流量控制</h2><p>当两个资源之间具有资源争抢或者依赖关系的时候，这两个资源便具有了关联。比如对数据库同一个字段的读操作和写操作存在争抢，读的速度过高会影响写得速度，写的速度过高会影响读的速度。如果放任读写操作争抢资源，则争抢本身带来的开销会降低整体的吞吐量。可使用关联限流来避免具有关联关系的资源之间过度的争抢，举例来说，<code>read_db</code> 和 <code>write_db</code> 这两个资源分别代表数据库读写，我们可以给 <code>read_db</code> 设置限流规则来达到写优先的目的：设置 <code>FlowRule.strategy</code> 为 <code>RuleConstant.RELATE</code> 同时设置 <code>FlowRule.ref_identity</code> 为 <code>write_db</code>。这样当写库操作过于频繁时，读数据的请求会被限流。</p><hr><p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践的源码</a> ,包括流量控制和初始规则加载等等。</p><p>另外在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p><p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>FlowRule</code> 的校验方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Check whether provided flow rule is valid.</span><br><span class="line"> *</span><br><span class="line"> * @param rule flow rule to check</span><br><span class="line"> * @return true if valid, otherwise false</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isValidRule(FlowRule rule) &#123;</span><br><span class="line">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource()) &amp;&amp; rule.getCount() &gt;&#x3D; 0</span><br><span class="line">        &amp;&amp; rule.getGrade() &gt;&#x3D; 0 &amp;&amp; rule.getStrategy() &gt;&#x3D; 0 &amp;&amp; rule.getControlBehavior() &gt;&#x3D; 0;</span><br><span class="line">    if (!baseValid) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; Check strategy and control (shaping) behavior.</span><br><span class="line">    return checkClusterField(rule) &amp;&amp; checkStrategyField(rule) &amp;&amp; checkControlBehaviorField(rule);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkClusterField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    if (!rule.isClusterMode()) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    ClusterFlowConfig clusterConfig &#x3D; rule.getClusterConfig();</span><br><span class="line">    if (clusterConfig &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!validClusterRuleId(clusterConfig.getFlowId())) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!isWindowConfigValid(clusterConfig.getSampleCount(), clusterConfig.getWindowIntervalMs())) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (clusterConfig.getStrategy()) &#123;</span><br><span class="line">        case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:</span><br><span class="line">            return true;</span><br><span class="line">        default:</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isWindowConfigValid(int sampleCount, int windowIntervalMs) &#123;</span><br><span class="line">    return sampleCount &gt; 0 &amp;&amp; windowIntervalMs &gt; 0 &amp;&amp; windowIntervalMs % sampleCount &#x3D;&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkStrategyField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    if (rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_RELATE || rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_CHAIN) &#123;</span><br><span class="line">        return StringUtil.isNotBlank(rule.getRefResource());</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkControlBehaviorField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    switch (rule.getControlBehavior()) &#123;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP:</span><br><span class="line">            return rule.getWarmUpPeriodSec() &gt; 0;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER:</span><br><span class="line">            return rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER:</span><br><span class="line">            return rule.getWarmUpPeriodSec() &gt; 0 &amp;&amp; rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class="line">        default:</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在前文Sentinel进阶之基本原理中简单介绍了一下Sentinel的基本原理，今天就来具体说一下Sentinel的流量控制。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel进阶之基本原理</title>
    <link href="https://eelve.com/posts/950c5430.html"/>
    <id>https://eelve.com/posts/950c5430.html</id>
    <published>2021-05-30T05:01:11.000Z</published>
    <updated>2021-06-06T05:29:58.762Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/archives/hellosentinel">Sentinel入门指北</a> 中简单介绍了一下<code>Sentinel</code>，今天就来具体说一下<code>Sentinel</code>的基本原理。</p><hr><h1 id="壹、概述"><a href="#壹、概述" class="headerlink" title="壹、概述"></a>壹、概述</h1><p>在 <code>Sentinel</code> 里面，所有的资源都对应一个资源名称以及一个 <code>Entry</code>。<code>Entry</code> 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 <code>API</code> 显式创建；每一个 <code>Entry</code> 创建的时候，同时也会创建一系列功能插槽（slot chain）。这些插槽有不同的职责，例如:</p><ul><li><code>NodeSelectorSlot</code> 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级； </li><li><code>ClusterBuilderSlot</code> 则用于存储资源的统计信息以及调用者信息，例如该资源的 <code>RT</code>, <code>QPS</code>, <code>thread count</code> 等等，这些信息将用作为多维度限流，降级的依据；</li><li><code>StatisticSlot</code> 则用于记录、统计不同纬度的 <code>runtime</code> 指标监控信息；</li><li><code>FlowSlot</code> 则用于根据预设的限流规则以及前面 <code>slot</code> 统计的状态，来进行流量控制；</li><li><code>AuthoritySlot</code> 则根据配置的黑白名单和调用来源信息，来做黑白名单控制；</li><li><code>DegradeSlot</code> 则通过统计信息以及预设的规则，来做熔断降级；</li><li><code>SystemSlot</code> 则通过系统的状态，例如 <code>load1</code> 等，来控制总的入口流量；</li></ul><p>总体的框架如下:</p><p><img src="https://image.eelve.com/eblog/2021053001.png" alt="总体框架图"></p><p><code>Sentinel</code> 将 <code>ProcessorSlot</code> 作为 <code>SPI</code> 接口进行扩展（1.7.2 版本以前 <code>SlotChainBuilder</code> 作为 <code>SPI</code>），使得 <code>Slot Chain</code> 具备了扩展的能力。您可以自行加入自定义的 <code>slot</code> 并编排 <code>slot</code> 间的顺序，从而可以给 <code>Sentinel</code> 添加自定义的功能。</p><p><img src="https://image.eelve.com/eblog/2021053002.png" alt="自定义处理流程"></p><p>下面介绍一下各个 <code>slot</code> 的功能。</p><h2 id="1-1、NodeSelectorSlot"><a href="#1-1、NodeSelectorSlot" class="headerlink" title="1.1、NodeSelectorSlot"></a>1.1、NodeSelectorSlot</h2><p>这个 <code>slot</code> 主要负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ContextUtil.enter(<span class="string">&quot;entrance1&quot;</span>, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">Entry nodeA = SphU.entry(<span class="string">&quot;nodeA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (nodeA != <span class="keyword">null</span>) &#123;</span><br><span class="line">   nodeA.exit();</span><br><span class="line">&#125;</span><br><span class="line">ContextUtil.exit();</span><br></pre></td></tr></table></figure><p>上述代码通过 <code>ContextUtil.enter()</code> 创建了一个名为 <code>entrance1</code> 的上下文，同时指定调用发起者为 <code>appA</code>；接着通过 <code>SphU.entry()</code>请求一个 <code>token</code>，如果该方法顺利执行没有抛 <code>BlockException</code>，表明 <code>token</code> 请求成功。</p><p>以上代码将在内存中生成以下结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> machine-root</span><br><span class="line">           &#x2F;     </span><br><span class="line">          &#x2F;</span><br><span class="line">   EntranceNode1</span><br><span class="line">        &#x2F;</span><br><span class="line">       &#x2F;   </span><br><span class="line">DefaultNode(nodeA)</span><br></pre></td></tr></table></figure><blockquote><p>注意：每个 <code>DefaultNode</code> 由资源 <code>ID</code> 和输入名称来标识。换句话说，一个资源 <code>ID</code> 可以有多个不同入口的 <code>DefaultNode</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ContextUtil.enter(<span class="string">&quot;entrance1&quot;</span>, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">Entry nodeA = SphU.entry(<span class="string">&quot;nodeA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (nodeA != <span class="keyword">null</span>) &#123;</span><br><span class="line">  nodeA.exit();</span><br><span class="line">&#125;</span><br><span class="line">ContextUtil.exit();</span><br><span class="line"></span><br><span class="line">ContextUtil.enter(<span class="string">&quot;entrance2&quot;</span>, <span class="string">&quot;appA&quot;</span>);</span><br><span class="line">nodeA = SphU.entry(<span class="string">&quot;nodeA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (nodeA != <span class="keyword">null</span>) &#123;</span><br><span class="line">  nodeA.exit();</span><br><span class="line">&#125;</span><br><span class="line">ContextUtil.exit();</span><br></pre></td></tr></table></figure><p>以上代码将在内存中生成以下结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">            machine-root</span><br><span class="line">            &#x2F;         \</span><br><span class="line">           &#x2F;           \</span><br><span class="line">   EntranceNode1   EntranceNode2</span><br><span class="line">         &#x2F;               \</span><br><span class="line">        &#x2F;                 \</span><br><span class="line">DefaultNode(nodeA)   DefaultNode(nodeA)</span><br></pre></td></tr></table></figure><p>上面的结构可以通过调用 <code>curl http://localhost:8719/tree?type=root</code> 来显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EntranceNode: machine-root(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line">-EntranceNode1: Entrance1(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line">--nodeA(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line">-EntranceNode2: Entrance1(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line">--nodeA(t:0 pq:1 bq:0 tq:1 rt:0 prq:1 1mp:0 1mb:0 1mt:0)</span><br><span class="line"></span><br><span class="line">t:threadNum  pq:passQps  bq:blockedQps  tq:totalQps  rt:averageRt  prq: passRequestQps 1mp:1m-passed 1mb:1m-blocked 1mt:1m-total</span><br></pre></td></tr></table></figure><h2 id="1-2、ClusterBuilderSlot"><a href="#1-2、ClusterBuilderSlot" class="headerlink" title="1.2、ClusterBuilderSlot"></a>1.2、ClusterBuilderSlot</h2><p>此插槽用于构建资源的 <code>ClusterNode</code> 以及调用来源节点。<code>ClusterNode</code> 保持资源运行统计信息（响应时间、QPS、block 数目、线程数、异常数等）以及原始调用者统计信息列表。来源调用者的名字由 <code>ContextUtil.enter(contextName，origin)</code> 中的 <code>origin</code> 标记。可通过如下命令查看某个资源不同调用者的访问情况：<code>curl http://localhost:8719/origin?id=caller</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id: nodeA</span><br><span class="line">idx origin  threadNum passedQps blockedQps totalQps aRt   1m-passed 1m-blocked 1m-total </span><br><span class="line">1   caller1 0         0         0          0        0     0         0          0        </span><br><span class="line">2   caller2 0         0         0          0        0     0         0          0      </span><br></pre></td></tr></table></figure><h2 id="1-3、StatisticSlot"><a href="#1-3、StatisticSlot" class="headerlink" title="1.3、StatisticSlot"></a>1.3、StatisticSlot</h2><p><code>StatisticSlot</code> 是 <code>Sentinel</code> 的核心功能插槽之一，用于统计实时的调用数据。</p><ul><li><code>clusterNode</code>：资源唯一标识的 <code>ClusterNode</code> 的 <code>runtime</code> 统计 </li><li><code>origin</code>：根据来自不同调用者的统计信息</li><li><code>defaultnode</code>: 根据上下文条目名称和资源 <code>ID</code> 的 <code>runtime</code> 统计</li><li>入口的统计</li></ul><p><code>Sentinel</code> 底层采用高性能的滑动窗口数据结构 <code>LeapArray</code> 来统计实时的秒级指标数据，可以很好地支撑写多于读的高并发场景。</p><p><img src="https://image.eelve.com/eblog/2021053003.png" alt="滑动窗口"></p><h2 id="1-4、FlowSlot"><a href="#1-4、FlowSlot" class="headerlink" title="1.4、FlowSlot"></a>1.4、FlowSlot</h2><p>这个 <code>slot</code> 主要根据预设的资源的统计信息，按照固定的次序，依次生效。如果一个资源对应两条或者多条流控规则，则会根据如下次序依次检验，直到全部通过或者有一个规则生效为止:</p><ul><li>指定应用生效的规则，即针对调用方限流的；</li><li>调用方为 other 的规则；</li><li>调用方为 default 的规则。</li></ul><h2 id="1-5、DegradeSlot"><a href="#1-5、DegradeSlot" class="headerlink" title="1.5、DegradeSlot"></a>1.5、DegradeSlot</h2><p>这个 <code>slot</code> 主要针对资源的平均响应时间（RT）以及异常比率，来决定资源是否在接下来的时间被自动熔断掉。</p><h2 id="1-6、SystemSlot"><a href="#1-6、SystemSlot" class="headerlink" title="1.6、SystemSlot"></a>1.6、SystemSlot</h2><p>这个 <code>slot</code> 会根据对于当前系统的整体情况，对入口资源的调用进行动态调配。其原理是让入口的流量和当前系统的预计容量达到一个动态平衡。</p><p>注意系统规则只对入口流量起作用（调用类型为 <code>EntryType.IN</code>），对出口流量无效。可通过 <code>SphU.entry(res, entryType)</code> 指定调用类型，如果不指定，默认是<code>EntryType.OUT</code>。</p><h1 id="贰、-核心类解析"><a href="#贰、-核心类解析" class="headerlink" title="贰、 核心类解析"></a>贰、 核心类解析</h1><h2 id="2-1、ProcessorSlotChain"><a href="#2-1、ProcessorSlotChain" class="headerlink" title="2.1、ProcessorSlotChain"></a>2.1、ProcessorSlotChain</h2><p><code>Sentinel</code> 的核心骨架，将不同的 <code>Slot</code> 按照顺序串在一起（责任链模式），从而将不同的功能（限流、降级、系统保护）组合在一起。<code>slot chain</code> 其实可以分为两部分：统计数据构建部分（statistic）和判断部分（rule checking）。核心结构：</p><p><img src="https://image.eelve.com/eblog/2021053001.png" alt="总体框架图"></p><p>目前的设计是 <code>one slot chain per resource</code>，因为某些 <code>slot</code> 是 <code>per resource</code> 的（比如 <code>NodeSelectorSlot</code>）。</p><h2 id="2-2、Context"><a href="#2-2、Context" class="headerlink" title="2.2、Context"></a>2.2、Context</h2><p><code>Context</code> 代表调用链路上下文，贯穿一次调用链路中的所有 <code>Entry</code>。<code>Context</code> 维持着入口节点（entranceNode）、本次调用链路的 <code>curNode</code>、调用来源（origin）等信息。<code>Context</code> 名称即为调用链路入口名称。</p><p><code>Context</code> 维持的方式：通过 <code>ThreadLocal</code> 传递，只有在入口 <code>enter</code> 的时候生效。由于 <code>Context</code> 是通过 <code>ThreadLocal</code> 传递的，因此对于异步调用链路，线程切换的时候会丢掉 <code>Context</code>，因此需要手动通过 <code>ContextUtil.runOnContext(context, f)</code> 来变换 <code>context</code>。</p><h2 id="2-3、Entry"><a href="#2-3、Entry" class="headerlink" title="2.3、Entry"></a>2.3、Entry</h2><p>每一次资源调用都会创建一个 <code>Entry</code>。<code>Entry</code> 包含了资源名、curNode（当前统计节点）、originNode（来源统计节点）等信息。</p><p><code>CtEntry</code> 为普通的 <code>Entry</code>，在调用 <code>SphU.entry(xxx)</code> 的时候创建。特性：<code>Linked entry within current context（内部维护着 parent 和 child）</code></p><p>需要注意的一点：<code>CtEntry</code> 构造函数中会做调用链的变换，即将当前 <code>Entry</code> 接到传入 <code>Context</code> 的调用链路上（setUpEntryFor）。</p><p>资源调用结束时需要 <code>entry.exit()</code>。<code>exit</code> 操作会过一遍 <code>slot chain exit</code>，恢复调用栈，<code>exit context</code> 然后清空 <code>entry</code> 中的 <code>context</code> 防止重复调用。</p><h2 id="2-4、Node"><a href="#2-4、Node" class="headerlink" title="2.4、Node"></a>2.4、Node</h2><p><code>Sentinel</code> 里面的各种种类的统计节点：</p><ul><li><code>StatisticNode</code>：最为基础的统计节点，包含秒级和分钟级两个滑动窗口结构。</li><li><code>DefaultNode</code>：链路节点，用于统计调用链路上某个资源的数据，维持树状结构。</li><li><code>ClusterNode</code>：簇点，用于统计每个资源全局的数据（不区分调用链路），以及存放该资源的按来源区分的调用数据（类型为 <code>StatisticNode</code>）。特别地，<code>Constants.ENTRY_NODE</code> 节点用于统计全局的入口资源数据。</li><li><code>EntranceNode</code>：入口节点，特殊的链路节点，对应某个 <code>Context</code> 入口的所有调用数据。<code>Constants.ROOT</code> 节点也是入口节点。</li></ul><p>构建的时机：</p><ul><li><code>EntranceNode</code>：在 <code>ContextUtil.enter(xxx)</code> 的时候就创建了，然后塞到 <code>Context</code> 里面。</li><li><code>NodeSelectorSlot</code>：根据 <code>context</code> 创建 <code>DefaultNode</code>，然后 <code>set curNode to context</code>。</li><li><code>ClusterBuilderSlot</code>：首先根据 <code>resourceName</code> 创建 <code>ClusterNode</code>，并且 <code>set clusterNode to defaultNode</code>；然后再根据 <code>origin</code> 创建来源节点（类型为 <code>StatisticNode</code>），并且 <code>set originNode to curEntry</code>。</li></ul><p>几种 <code>Node</code> 的维度（数目）：</p><ul><li><code>ClusterNode</code> 的维度是 <code>resource</code></li><li><code>DefaultNode</code> 的维度是 <code>resource * context</code>，存在每个 <code>NodeSelectorSlot</code> 的 <code>map</code> 里面</li><li><code>EntranceNode</code> 的维度是 <code>context</code>，存在 <code>ContextUtil</code> 类的 <code>contextNameNodeMap</code> 里面</li><li>来源节点（类型为 <code>StatisticNode</code>）的维度是 <code>resource * origin</code>，存在每个 <code>ClusterNode</code> 的 <code>originCountMap</code> 里面</li></ul><h2 id="2-5、StatisticSlot"><a href="#2-5、StatisticSlot" class="headerlink" title="2.5、StatisticSlot"></a>2.5、StatisticSlot</h2><p><code>StatisticSlot</code> 是 <code>Sentinel</code> 最为重要的类之一，用于根据规则判断结果进行相应的统计操作。</p><p><code>entry</code> 的时候：依次执行后面的判断 <code>slot</code>。每个 <code>slot</code> 触发流控的话会抛出异常（<code>BlockException</code> 的子类）。若有 BlockException 抛出，则记录 block 数据；若无异常抛出则算作可通过（pass），记录 pass 数据。</p><p><code>exit</code> 的时候：若无 <code>error（无论是业务异常还是流控异常）</code>，记录 <code>complete（success）</code>以及 <code>RT</code>，线程数<code>-1</code>。</p><p>记录数据的维度：线程数<code>+1</code>、记录当前 <code>DefaultNode</code> 数据、记录对应的 <code>originNode</code> 数据（若存在 <code>origin</code>）、累计 <code>IN</code> 统计数据（若流量类型为 <code>IN</code>）。</p><hr><p>【<strong>后面的话</strong>】<a href="https://github.com/eelve/awesomesentinel">最后是我自己实践自定义调用链的源码</a> 。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在前文Sentinel入门指北中简单介绍了一下Sentinel，今天就来具体说一下Sentinel的基本原理。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>浅析限流算法</title>
    <link href="https://eelve.com/posts/2c72dfa6.html"/>
    <id>https://eelve.com/posts/2c72dfa6.html</id>
    <published>2021-04-05T02:14:08.000Z</published>
    <updated>2021-04-19T06:44:39.252Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前情提要</strong>】</p><h1 id="壹、"><a href="#壹、" class="headerlink" title="壹、"></a>壹、</h1><h1 id="贰、"><a href="#贰、" class="headerlink" title="贰、"></a>贰、</h1><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【&lt;strong&gt;前情提要&lt;/strong&gt;】&lt;/p&gt;
&lt;h1 id=&quot;壹、&quot;&gt;&lt;a href=&quot;#壹、&quot; class=&quot;headerlink&quot; title=&quot;壹、&quot;&gt;&lt;/a&gt;壹、&lt;/h1&gt;&lt;h1 id=&quot;贰、&quot;&gt;&lt;a href=&quot;#贰、&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="hide" scheme="https://eelve.com/categories/hide/"/>
    
    
    <category term="hide" scheme="https://eelve.com/tags/hide/"/>
    
  </entry>
  
  <entry>
    <title>基于Redis实现简单的限流</title>
    <link href="https://eelve.com/posts/6da55b80.html"/>
    <id>https://eelve.com/posts/6da55b80.html</id>
    <published>2021-04-03T14:58:13.000Z</published>
    <updated>2021-04-19T06:44:39.244Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前情提要</strong>】前面说过目前几种比较常见的限流的中间件，Sentinel、Hystrix和resilience4j，也提到过自己实现限流功能，今天就基于Redis实现一哈限流功能。</p><h1 id="壹、Redis实现限流介绍"><a href="#壹、Redis实现限流介绍" class="headerlink" title="壹、Redis实现限流介绍"></a>壹、Redis实现限流介绍</h1><p>前面说过基于Guava的限流的解决方案，但是这个方案只适用于单体应用，所以这边我们就可用借助第三方中间件来实现，这里就使用Redis来实现，进一步实现集群限流的功能。主要参考Redis官方的伪代码：<a href="https://redis.io/commands/incr">https://redis.io/commands/incr</a></p><h1 id="贰、基于Redis的setnx的操作"><a href="#贰、基于Redis的setnx的操作" class="headerlink" title="贰、基于Redis的setnx的操作"></a>贰、基于Redis的setnx的操作</h1><p>我们在使用Redis的分布式锁的时候，大家都知道是依靠了setnx的指令，在CAS（Compare and swap）的操作的时候，同时给指定的key设置了过期实践（expire），我们在限流的主要目的就是为了在单位时间内，有且仅有N数量的请求能够访问我的代码程序。所以依靠setnx可以很轻松的做到这方面的功能。</p><p>比如我们需要在10秒内限定20个请求，那么我们在setnx的时候可以设置过期时间10，当请求的setnx数量达到20时候即达到了限流效果。代码比较简单就不做展示了。</p><p>当然这种做法的弊端是很多的，比如当统计1-10秒的时候，无法统计2-11秒之内，如果需要统计N秒内的M个请求，那么我们的Redis中需要保持N个key等等问题。</p><h1 id="叁、基于Redis的数据结构zset"><a href="#叁、基于Redis的数据结构zset" class="headerlink" title="叁、基于Redis的数据结构zset"></a>叁、基于Redis的数据结构zset</h1><p>其实限流涉及的最主要的就是滑动窗口，上面也提到1-10怎么变成2-11。其实也就是起始值和末端值都各+1即可。</p><p>而我们如果用Redis的list数据结构可以轻而易举的实现该功能，我们可以将请求打造成一个zset数组，当每一次请求进来的时候，value保持唯一，可以用UUID生成，而score可以用当前时间戳表示，因为score我们可以用来计算当前时间戳之内有多少的请求数量。而zset数据结构也提供了range方法让我们可以很轻易的获取到2个时间戳内有多少请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">limitFlow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Long currentTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">    System.out.println(currentTime);</span><br><span class="line">    <span class="keyword">if</span>(redisTemplate.hasKey(<span class="string">&quot;limit&quot;</span>)) &#123;</span><br><span class="line">        Integer count = redisTemplate.opsForZSet().rangeByScore(<span class="string">&quot;limit&quot;</span>, currentTime -  intervalTime, currentTime).size();        <span class="comment">// intervalTime是限流的时间 </span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="keyword">null</span> &amp;&amp; count &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.ok(<span class="string">&quot;每分钟最多只能访问5次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    redisTemplate.opsForZSet().add(<span class="string">&quot;limit&quot;</span>,UUID.randomUUID().toString(),currentTime);</span><br><span class="line">    <span class="keyword">return</span> Response.ok(<span class="string">&quot;访问成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码可以做到滑动窗口的效果，并且能保证每N秒内至多M个请求，缺点就是zset的数据结构会越来越大。实现方式相对也是比较简单的。</p><h1 id="肆、基于Redis的令牌桶算法"><a href="#肆、基于Redis的令牌桶算法" class="headerlink" title="肆、基于Redis的令牌桶算法"></a>肆、基于Redis的令牌桶算法</h1><p>令牌桶算法提及到输入速率和输出速率，当输出速率大于输入速率，那么就是超出流量限制了。也就是说我们每访问一次请求的时候，可以从Redis中获取一个令牌，如果拿到令牌了，那就说明没超出限制，而如果拿不到，则结果相反。</p><p>依靠上述的思想，我们可以结合Redis的List数据结构很轻易的做到这样的代码，只是简单实现依靠List的leftPop来获取令牌</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出令牌</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">limitFlow2</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">    Object result = redisTemplate.opsForList().leftPop(<span class="string">&quot;limit_list&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Response.ok(<span class="string">&quot;当前令牌桶中无令牌&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Response.ok(articleDescription2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再依靠Java的定时任务，定时往List中rightPush令牌，当然令牌也需要唯一性，所以我这里还是用UUID进行了生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 10S的速率往令牌桶中添加UUID，只为保证唯一性</span></span><br><span class="line"><span class="meta">@Scheduled(fixedDelay = 10_000,initialDelay = 0)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntervalTimeTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    redisTemplate.opsForList().rightPush(<span class="string">&quot;limit_list&quot;</span>,UUID.randomUUID().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">前面说过目前几种比较常见的限流的中间件，Sentinel、Hystrix和resilience4j，也提到过自己实现限流功能，今天就基于Redis实现一哈限流功能。</summary>
    
    
    
    <category term="limiting" scheme="https://eelve.com/categories/limiting/"/>
    
    
    <category term="limiting" scheme="https://eelve.com/tags/limiting/"/>
    
  </entry>
  
  <entry>
    <title>基于Guava实现限流</title>
    <link href="https://eelve.com/posts/17d40800.html"/>
    <id>https://eelve.com/posts/17d40800.html</id>
    <published>2021-04-03T14:06:18.000Z</published>
    <updated>2021-04-19T06:44:39.227Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前情提要</strong>】前面说过目前几种比较常见的限流的中间件，Sentinel、Hystrix和resilience4j，也提到过自己实现限流功能，今天就基于Guava实现一哈限流功能。</p><h1 id="壹、Guava介绍"><a href="#壹、Guava介绍" class="headerlink" title="壹、Guava介绍"></a>壹、Guava介绍</h1><p><a href="https://github.com/google/guava">Guava</a> 是一种基于开源的Java库，其中包含谷歌正在由他们很多项目使用的很多核心库。这个库是为了方便编码，并减少编码错误。这个库提供用于集合，缓存，支持原语，并发性，常见注解，字符串处理，I/O和验证的实用方法。</p><p><a href="https://github.com/google/guava">Guava</a> 的好处</p><ul><li>标准化 - Guava库是由谷歌托管。 </li><li>高效 - 可靠，快速和有效的扩展JAVA标准库</li><li>优化 -Guava库经过高度的优化。</li><li>函数式编程 -增加JAVA功能和处理能力。</li><li>实用程序 - 提供了经常需要在应用程序开发的许多实用程序类。</li><li>验证 -提供标准的故障安全验证机制。</li><li>最佳实践 - 强调最佳的做法。</li></ul><p>下面就使用<a href="https://github.com/google/guava">Guava</a> 中提供的并发相关的工具中的<code>RateLimiter</code>来实现一个限流的功能。</p><h1 id="贰、引入依赖"><a href="#贰、引入依赖" class="headerlink" title="贰、引入依赖"></a>贰、引入依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;30.0-jre&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="叁、拦截器方式实现"><a href="#叁、拦截器方式实现" class="headerlink" title="叁、拦截器方式实现"></a>叁、拦截器方式实现</h1><h2 id="3-1、-定义接口"><a href="#3-1、-定义接口" class="headerlink" title="3.1、 定义接口"></a>3.1、 定义接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">allInfos</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;param-----&gt;&quot;</span> + num);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(num*<span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 3 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad whitch 3&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 5 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ProgramException(<span class="string">&quot;something bad whitch 5&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 7 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ProgramException | InterruptedException exception) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2、-添加拦截器"><a href="#3-2、-添加拦截器" class="headerlink" title="3.2、 添加拦截器"></a>3.2、 添加拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.guava.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.guava.vo.JsonResult;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RateLimiterInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/11 12:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RateLimiter rateLimiter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过构造函数初始化限速器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RateLimiterInterceptor</span><span class="params">(RateLimiter rateLimiter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.rateLimiter = rateLimiter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.rateLimiter.tryAcquire()) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 成功获取到令牌</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取失败，直接响应“错误信息”</span></span><br><span class="line"><span class="comment">         * 也可以通过抛出异常，通过全全局异常处理器响应客户端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        response.setCharacterEncoding(StandardCharsets.UTF_8.name());</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        response.getWriter().write(JsonResult.error().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.guava.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.guava.aspect.RateLimiterInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebMvcConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/11 12:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * get接口，1秒钟生成1个令牌，也就是1秒中允许一个人访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> RateLimiterInterceptor(RateLimiter.create(<span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS)))</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/get&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的代码我们就可用对<code>/get</code>接口实现限流了，但是也有明显的缺点，就是规则被写死，所以下面我们通过注解方式实现。</p></blockquote><h1 id="肆、使用注解实现"><a href="#肆、使用注解实现" class="headerlink" title="肆、使用注解实现"></a>肆、使用注解实现</h1><h2 id="4-1、定义注解"><a href="#4-1、定义注解" class="headerlink" title="4.1、定义注解"></a>4.1、定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.guava.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/1112:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyRateLimiter &#123;</span><br><span class="line">    <span class="keyword">int</span> NOT_LIMITED = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 资源名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * qps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">qps</span><span class="params">()</span> <span class="keyword">default</span> NOT_LIMITED</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取令牌超时时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行超时时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">executeTimeout</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行超时时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">executeTimeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-2、添加通知"><a href="#4-2、添加通知" class="headerlink" title="4.2、添加通知"></a>4.2、添加通知</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.guava.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.guava.annotation.MyRateLimiter;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.guava.exception.BaseException;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> RateLimiterAspect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/11 12:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRateLimiterAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String, RateLimiter&gt; RATE_LIMITER_CACHE = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.eelve.limiting.guava.annotation.MyRateLimiter)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyRateLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;MyRateLimit()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pointcut</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object obj =<span class="keyword">null</span>;</span><br><span class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        <span class="comment">// 通过 AnnotationUtils.findAnnotation 获取 RateLimiter 注解</span></span><br><span class="line">        MyRateLimiter myRateLimiter = AnnotationUtils.findAnnotation(method, MyRateLimiter.class);</span><br><span class="line">        <span class="keyword">if</span> (myRateLimiter != <span class="keyword">null</span> &amp;&amp; myRateLimiter.qps() &gt; MyRateLimiter.NOT_LIMITED) &#123;</span><br><span class="line">            <span class="keyword">double</span> qps = myRateLimiter.qps();</span><br><span class="line">            String name = myRateLimiter.name();</span><br><span class="line">            <span class="keyword">int</span> executeTimeout = myRateLimiter.executeTimeout();</span><br><span class="line">            <span class="keyword">if</span>(Objects.isNull(name))&#123;</span><br><span class="line">                name = method.getName();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (RATE_LIMITER_CACHE.get(name) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 初始化 QPS</span></span><br><span class="line">                RATE_LIMITER_CACHE.put(name, RateLimiter.create(qps));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;【&#123;&#125;】的QPS设置为: &#123;&#125;&quot;</span>, method.getName(), RATE_LIMITER_CACHE.get(name).getRate());</span><br><span class="line">            Long start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 尝试获取令牌</span></span><br><span class="line">            <span class="keyword">if</span> (RATE_LIMITER_CACHE.get(method.getName()) != <span class="keyword">null</span> &amp;&amp; !RATE_LIMITER_CACHE.get(method.getName()).tryAcquire(myRateLimiter.timeout(), myRateLimiter.timeUnit())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;请求频繁，请稍后再试~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            obj = point.proceed();</span><br><span class="line"></span><br><span class="line">            Long end = System.currentTimeMillis();</span><br><span class="line">            Long executeTime = end - start;</span><br><span class="line">            <span class="keyword">if</span>((end - start) &gt;  executeTimeout)&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;请求超时，请稍后再试~&quot;</span> + (end - start));</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;请求超时，请稍后再试~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-3、使用"><a href="#4-3、使用" class="headerlink" title="4.3、使用"></a>4.3、使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启限流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MyRateLimiter(qps = 2.0, timeout = 1)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/rateLimiter&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">rateLimiter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;param-----&gt;&quot;</span> + num);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(num);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;【rateLimiter】被执行了。。。。。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> JsonResult.ok(<span class="string">&quot;你不能总是看到我，快速刷新我看一下！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的代码我们就实现了零活的通过注解的方式实现了限流功能，并且我们还可以在<code>Around</code>通知的时候灵活实现。包括过滤某些异常等等。</p></blockquote><hr><p>【<strong>后面的话</strong>】除了前面我们使用的<code>RateLimiter</code>之外，<code>Guava</code>还提供了专门针对超时的<code>SimpleTimeLimiter</code>组件，有兴趣的也可以尝试一下。另外以上的源码都可用在 <a href="https://github.com/eelve/limiting/tree/master/guava">limiting</a> 中找到。</p><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">前面说过目前几种比较常见的限流的中间件，Sentinel、Hystrix和resilience4j，也提到过自己实现限流功能，今天就基于Guava实现一哈限流功能。</summary>
    
    
    
    <category term="limiting" scheme="https://eelve.com/categories/limiting/"/>
    
    
    <category term="limiting" scheme="https://eelve.com/tags/limiting/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot单体应用集成Sentinel熔断能力</title>
    <link href="https://eelve.com/posts/1523c2c1.html"/>
    <id>https://eelve.com/posts/1523c2c1.html</id>
    <published>2021-02-13T03:52:54.000Z</published>
    <updated>2021-04-19T06:52:48.655Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/archives/hellosentinel">Sentinel入门指北</a> 中对<code>Sentinel</code>有了简单的了解之后，下面就<code>Spring Boot</code>单体应用集成<code>Sentinel</code>做一下简单的讨论。实际上官方已经提供了 <a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">Spring Cloud Alibaba Sentinel</a> ，然后在配合 <code>控制台</code> 就可以方便使用熔断能力。但是存在部分不想引入<code>控制台</code>的场景，此文就由此而来。</p><hr><h1 id="壹、总体设计"><a href="#壹、总体设计" class="headerlink" title="壹、总体设计"></a>壹、总体设计</h1><p><code>Sentinel</code>在官方提供了<code>API</code>用于动态修改熔断的规则，针对每种规则都有独有的<code>loadRules</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load &#123;<span class="doctag">@link</span> FlowRule&#125;s, former rules will be replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rules new rules to load.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadRules</span><span class="params">(List&lt;FlowRule&gt; rules)</span> </span>&#123;</span><br><span class="line">    currentProperty.updateValue(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load &#123;<span class="doctag">@link</span> DegradeRule&#125;s, former rules will be replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rules new rules to load.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadRules</span><span class="params">(List&lt;DegradeRule&gt; rules)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        currentProperty.updateValue(rules);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        RecordLog.error(<span class="string">&quot;[DegradeRuleManager] Unexpected error when loading degrade rules&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Sentiunel</code>还有一个缺点，就是熔断规则只缓存在内存中，当应用重启之后，规则就消失了。所以解决方法就是可以考虑讲规则持久化，官方也有相应的实现的方案：<a href="https://sentinelguard.io/zh-cn/docs/dynamic-rule-configuration.html">动态规则扩展</a> 。我这里实现的方案则是将规则存在数据库中，并提供API方式修改规则。 </p><h1 id="贰、实现细节"><a href="#贰、实现细节" class="headerlink" title="贰、实现细节"></a>贰、实现细节</h1><h2 id="2-1、pom依赖"><a href="#2-1、pom依赖" class="headerlink" title="2.1、pom依赖"></a>2.1、pom依赖</h2><blockquote><p><code>sentinel-annotation-aspectj</code> 提供注解支持功能，并且其中包含了 <code>sentinel-core</code> 所以就不需要单独再引入了。 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、实体类"><a href="#2-2、实体类" class="headerlink" title="2.2、实体类"></a>2.2、实体类</h2><blockquote><p>包括流控规则和降级规则的实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaozhilue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;flow_rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowRuleEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name=&quot;app&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String app;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Resource name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;resource&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String resource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Application name that will be limited by origin.</span></span><br><span class="line"><span class="comment">     * The default c is &#123;<span class="doctag">@code</span> default&#125;, which means allowing all origin apps.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * For authority rules, multiple origin name can be separated with comma (&#x27;,&#x27;).</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;limit_app&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String limitApp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The threshold type of flow control (0: thread count, 1: QPS).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;grade&quot;,columnDefinition=&quot;INT default 1&quot;,nullable = false)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer grade = RuleConstant.FLOW_GRADE_QPS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flow control threshold count.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;count&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Double count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flow control strategy based on invocation chain.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_DIRECT&#125; for direct flow control (by origin);</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_RELATE&#125; for relevant flow control (with relevant resource);</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_CHAIN&#125; for chain flow control (by entrance resource).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;strategy&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer strategy = RuleConstant.STRATEGY_DIRECT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reference resource in flow control with relevant resource or context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;ref_resource&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String refResource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Rate limiter control behavior.</span></span><br><span class="line"><span class="comment">     * 0. default(reject directly), 1. warm up, 2. rate limiter, 3. warm up + rate limiter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;control_behavior&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer controlBehavior = RuleConstant.CONTROL_BEHAVIOR_DEFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;warm_up_period_sec&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer warmUpPeriodSec = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Max queueing time in rate limiter behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;max_queueing_time_ms&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxQueueingTimeMs = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;cluster_mode&quot;,columnDefinition=&quot;BOOLEAN default false&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean clusterMode = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlowRule <span class="title">toRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlowRule flowRule = <span class="keyword">new</span> FlowRule();</span><br><span class="line">        flowRule.setCount(<span class="keyword">this</span>.count);</span><br><span class="line">        flowRule.setGrade(<span class="keyword">this</span>.grade);</span><br><span class="line">        flowRule.setResource(<span class="keyword">this</span>.resource);</span><br><span class="line">        flowRule.setLimitApp(<span class="keyword">this</span>.limitApp);</span><br><span class="line">        flowRule.setRefResource(<span class="keyword">this</span>.refResource);</span><br><span class="line">        flowRule.setStrategy(<span class="keyword">this</span>.strategy);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.controlBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">            flowRule.setControlBehavior(controlBehavior);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.warmUpPeriodSec != <span class="keyword">null</span>) &#123;</span><br><span class="line">            flowRule.setWarmUpPeriodSec(warmUpPeriodSec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.maxQueueingTimeMs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            flowRule.setMaxQueueingTimeMs(maxQueueingTimeMs);</span><br><span class="line">        &#125;</span><br><span class="line">        flowRule.setClusterMode(clusterMode);</span><br><span class="line">        <span class="keyword">return</span> flowRule;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaozhilue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;degrade_rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DegradeRuleEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name=&quot;app&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String app;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Resource name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;resource&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String resource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Application name that will be limited by origin.</span></span><br><span class="line"><span class="comment">     * The default limitApp is &#123;<span class="doctag">@code</span> default&#125;, which means allowing all origin apps.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * For authority rules, multiple origin name can be separated with comma (&#x27;,&#x27;).</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;limit_app&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String limitApp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Circuit breaking strategy (0: average RT, 1: exception ratio, 2: exception count).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;grade&quot;,columnDefinition=&quot;INT default 0&quot;,nullable = false)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer grade = RuleConstant.DEGRADE_GRADE_RT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Threshold count.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;count&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Double count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Recovery timeout (in seconds) when circuit breaker opens. After the timeout, the circuit breaker will</span></span><br><span class="line"><span class="comment">     * transform to half-open state for trying a few requests.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;timeWindow&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer timeWindow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Minimum number of requests (in an active statistic time span) that can trigger circuit breaking.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.7.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;min_request_amount&quot;,columnDefinition=&quot;INT default 5&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minRequestAmount = RuleConstant.DEGRADE_DEFAULT_MIN_REQUEST_AMOUNT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The threshold of slow request ratio in RT mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;slow_ratio_threshold&quot;,columnDefinition=&quot;DOUBLE default 1000&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Double slowRatioThreshold = <span class="number">1.0d</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;stat_interval_ms&quot;,columnDefinition=&quot;INT default 1000&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer statIntervalMs = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DegradeRule <span class="title">toRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DegradeRule rule = <span class="keyword">new</span> DegradeRule();</span><br><span class="line">        rule.setResource(resource);</span><br><span class="line">        rule.setLimitApp(limitApp);</span><br><span class="line">        rule.setCount(count);</span><br><span class="line">        rule.setTimeWindow(timeWindow);</span><br><span class="line">        rule.setGrade(grade);</span><br><span class="line">        <span class="keyword">if</span> (minRequestAmount != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rule.setMinRequestAmount(minRequestAmount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (slowRatioThreshold != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rule.setSlowRatioThreshold(slowRatioThreshold);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statIntervalMs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rule.setStatIntervalMs(statIntervalMs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rule;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、核心规则变更"><a href="#2-3、核心规则变更" class="headerlink" title="2.3、核心规则变更"></a>2.3、核心规则变更</h2><blockquote><p>主要是提供规则更新的工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RulesEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Flow(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">    Degrade(<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">    System(<span class="number">3</span>),</span><br><span class="line"></span><br><span class="line">    Authority(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    RulesEnum(<span class="keyword">int</span> code) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.AbstractRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.java.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaozhilue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshRulesUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends AbstractRule&gt; <span class="function"><span class="keyword">void</span> <span class="title">refreshRule</span><span class="params">(List&lt;T&gt; ruleList, RulesEnum rulesEnum)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;操作类型:&quot;</span>+rulesEnum.getCode() + <span class="string">&quot;,ruleList:&quot;</span> + ruleList.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (rulesEnum)&#123;</span><br><span class="line">            <span class="keyword">case</span> Flow:</span><br><span class="line">                FlowRuleManager.loadRules((List&lt;FlowRule&gt;) ruleList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Degrade:</span><br><span class="line">                DegradeRuleManager.loadRules((List&lt;DegradeRule&gt;)ruleList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> System:</span><br><span class="line">                SystemRuleManager.loadRules((List&lt;SystemRule&gt;)ruleList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Authority:</span><br><span class="line">                AuthorityRuleManager.loadRules((List&lt;AuthorityRule&gt;)ruleList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                log.info(<span class="string">&quot;无效操作&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4、规则更新接口"><a href="#2-4、规则更新接口" class="headerlink" title="2.4、规则更新接口"></a>2.4、规则更新接口</h2><blockquote><p>主要是提供接口给前端用于规则更新，并且包括更新内存中的熔断规则。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.entity.FlowRuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.service.iml.FlowRuleServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.util.RefreshRulesUtil;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/eelve/flow-rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowRuleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FlowRuleServiceImpl flowRuleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">allRules</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(flowRuleService.allRules());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">addRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestBody</span> FlowRuleEntity flowRuleEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        flowRuleService.addRule(flowRuleEntity);</span><br><span class="line">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(flowRuleEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">updateRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestBody</span> FlowRuleEntity flowRuleEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        flowRuleService.addRule(flowRuleEntity);</span><br><span class="line">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(flowRuleEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/rules/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">deleteRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@PathVariable(name = &quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        flowRuleService.deleteRuleById(id);</span><br><span class="line">        List&lt;FlowRule&gt; ruleList =  flowRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Flow);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.entity.DegradeRuleEntity;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.enums.RulesEnum;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.service.iml.DegradeRuleServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.util.RefreshRulesUtil;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> DegradeRuleController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/29 20:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/eelve/degrade-rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DegradeRuleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DegradeRuleServiceImpl degradeRuleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">allRules</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(degradeRuleService.allRules());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">addRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestBody</span> DegradeRuleEntity degradeRuleEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        degradeRuleService.addRule(degradeRuleEntity);</span><br><span class="line">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(degradeRuleEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/rules&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">updateRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestBody</span> DegradeRuleEntity degradeRuleEntity)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        degradeRuleService.addRule(degradeRuleEntity);</span><br><span class="line">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(degradeRuleEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/rules/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">deleteRule</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@PathVariable(name = &quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先添加，然后再查询出来批量更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        degradeRuleService.deleteRuleById(id);</span><br><span class="line">        List&lt;DegradeRule&gt; ruleList =  degradeRuleService.allRules().stream().map(x -&gt; x.toRule()).collect(Collectors.toList());</span><br><span class="line">        RefreshRulesUtil.refreshRule(ruleList, RulesEnum.Degrade);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-5、规则初始化"><a href="#2-5、规则初始化" class="headerlink" title="2.5、规则初始化"></a>2.5、规则初始化</h2><blockquote><p>规则初始化可以使用 <code>Sentinel</code> 提供的 <code>SPI</code> 机制，实现 <code>com.alibaba.csp.sentinel.init#InitFunc</code> 接口，在接口被第一次调用时初始化，不过需要单独引入 <code>sentinel-datasource-extension</code> 。当然我们也可以直接 <code>Spring</code> 提供的 <code>CommandLineRunner</code> 或 <code>ApplicationRunner</code> 在项目启动是从数据库中加载规则。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.RuleConstant;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreakerStrategy;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRuleManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaozhilue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleInitFunc</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initFlowQpsRule();</span><br><span class="line"></span><br><span class="line">        initDegradeRule();</span><br><span class="line"></span><br><span class="line">        initSystemProtectionRule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化流量规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFlowQpsRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;FlowRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        FlowRule rule1 = <span class="keyword">new</span> FlowRule();</span><br><span class="line">        rule1.setResource(<span class="string">&quot;allInfos&quot;</span>);</span><br><span class="line">        <span class="comment">// Set max qps to 2</span></span><br><span class="line">        rule1.setCount(<span class="number">2</span>);</span><br><span class="line">        rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">        rule1.setLimitApp(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        rules.add(rule1);</span><br><span class="line">        FlowRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化熔断规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initDegradeRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;DegradeRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        DegradeRule rule = <span class="keyword">new</span> DegradeRule(<span class="string">&quot;allInfos&quot;</span>)</span><br><span class="line">        .setGrade(CircuitBreakerStrategy.ERROR_RATIO.getType())</span><br><span class="line">        .setCount(<span class="number">0.7</span>) <span class="comment">// Threshold is 70% error ratio</span></span><br><span class="line">        .setMinRequestAmount(<span class="number">100</span>)</span><br><span class="line">                .setStatIntervalMs(<span class="number">30000</span>) <span class="comment">// 30s</span></span><br><span class="line">                .setTimeWindow(<span class="number">10</span>);</span><br><span class="line">        rules.add(rule);</span><br><span class="line">        DegradeRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化系统保护跪着</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSystemProtectionRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SystemRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        SystemRule rule = <span class="keyword">new</span> SystemRule();</span><br><span class="line">        rule.setHighestSystemLoad(<span class="number">10</span>);</span><br><span class="line">        rules.add(rule);</span><br><span class="line">        SystemRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此简单的 <code>Spring Boot</code> 单体应用接入 <code>Sentinel</code> 的熔断能力的后端开发就完成了。然后前端再开发相应的页面，就可以给用户真正的使用了。</p></blockquote><hr><p>【<strong>后面的话</strong>】以上的接口有一点缺陷就是需要用户填写具体的熔断资源名称，但是用户实际上是有可能填写错误，从而导致熔断规则不生效。为此这里给出的解决方案是，在应用启动过程中扫描所有添加 <code>@SentinelResource</code> 注解的资源，然后再开放接口提供给前端，然后用户再填写熔断资源名称的时候就可以通过下拉来选择具体的资源名称了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SentinelResourcetHolder</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 扫描资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/30 9:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelResourcetHolder</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; SENTINEL_RESOURCE = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getSentinelResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SENTINEL_RESOURCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inintSentinelResourcetHolder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; objectMap =  applicationContext.getBeansWithAnnotation(Controller.class);</span><br><span class="line">        objectMap.entrySet().forEach(o -&gt; &#123;</span><br><span class="line">            Method[] methods = o.getValue().getClass().getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                SentinelResource sentinelResource = AnnotationUtils.findAnnotation(method, SentinelResource.class);</span><br><span class="line">                <span class="keyword">if</span> (!Objects.isNull(sentinelResource))&#123;</span><br><span class="line">                    SENTINEL_RESOURCE.add(sentinelResource.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SentinelResourcetHolder.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.limiting.sentinel.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.config.SentinelResourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.config.SentinelResourcetHolder;</span><br><span class="line"><span class="keyword">import</span> com.eelve.limiting.sentinel.vo.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SentinelResourceControl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zhao.zhilue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/1/31 12:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/eelve/sentinel/resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelResourceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">getAllSentinelResourceV2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok().put(SentinelResourcetHolder.getSentinelResource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只有Controller层和Service层的直接第一层方法才能通过注解触发，如果是方法再调用普通方法需要勇SphO或者SphU原生写法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">extractedSphO</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SphO.entry(<span class="string">&quot;extractedSphO&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//需要保护的逻辑</span></span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//需要和SphO.entry成对出现</span></span><br><span class="line">                SphO.exit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//熔断之后执行的方法</span></span><br><span class="line">            log.info(<span class="string">&quot;something bad with blockException&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">extractedSphU</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Entry entry = SphU.entry(<span class="string">&quot;extractedSphU&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//需要保护的逻辑</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">            <span class="comment">//熔断之后执行的方法</span></span><br><span class="line">            log.info(<span class="string">&quot;something bad with blockException&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">前面对Sentinel的入门知识有了一定了解之后，这里就来介绍在生产中简单的应用。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
    <category term="java" scheme="https://eelve.com/tags/java/"/>
    
    <category term="springboot" scheme="https://eelve.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel入门指北</title>
    <link href="https://eelve.com/posts/d2ca763d.html"/>
    <id>https://eelve.com/posts/d2ca763d.html</id>
    <published>2021-02-01T12:30:57.000Z</published>
    <updated>2021-04-19T06:44:39.284Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】在前文 <a href="https://eelve.com/archives/springbootcircuitbreaker">浅析Spring Boot单体应用熔断技术</a> 中对比了一下几种常见的接口熔断的技术。这里就具体使用 <code>Sentinel</code> 来记录以下。</p><hr><h1 id="壹、sentinel介绍"><a href="#壹、sentinel介绍" class="headerlink" title="壹、sentinel介绍"></a>壹、sentinel介绍</h1><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。<code>Sentinel</code> 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。</p><h2 id="Sentinel的基本概念基本概念包括"><a href="#Sentinel的基本概念基本概念包括" class="headerlink" title="Sentinel的基本概念基本概念包括:"></a>Sentinel的基本概念基本概念包括:</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>资源是 <code>Sentinel</code> 的关键概念。它可以是 <code>Java</code> 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。只要通过 <code>Sentinel API</code> 定义的代码，就是资源，能够被 <code>Sentinel</code> 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p><h2 id="Sentinel的主要功能"><a href="#Sentinel的主要功能" class="headerlink" title="Sentinel的主要功能"></a>Sentinel的主要功能</h2><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p><p><img src="https://image.eelve.com/eblog/sentinel-flow-overview-ca2015f6c76449e2ac74f5a377e0573d.jpg" alt="流控效果"></p><p>流量控制有以下几个角度:</p><ul><li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li><li>运行指标，例如 <code>QPS</code>、线程池、系统负载等；</li><li>控制的效果，例如直接限流、冷启动、排队等。</li></ul><p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p><h3 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h3><p>除了流量控制以外，降低调用链路中的不稳定资源也是 <code>Sentinel</code> 的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。当调用链路中某个资源出现不稳定，例如，表现为 <code>timeout</code>，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p><p>降级有以下几个角度:</p><ul><li>通过并发线程数进行限制</li></ul><p>和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p><ul><li>通过响应时间对资源进行降级</li></ul><p>除了对并发线程数进行控制以外，<code>Sentinel</code> 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p><h3 id="系统负载保护"><a href="#系统负载保护" class="headerlink" title="系统负载保护"></a>系统负载保护</h3><p>Sentinel同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p><p>针对这个情况，<code>Sentinel</code> 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p><h2 id="主要工作机制"><a href="#主要工作机制" class="headerlink" title="主要工作机制"></a>主要工作机制</h2><ul><li>对主流框架提供适配或者显示的 <code>API</code>，来定义需要保护的资源，并提供设施对资源进行实时统计和调用链路分析。</li><li>根据预设的规则，结合对资源的实时统计信息，对流量进行控制。同时，<code>Sentinel</code> 提供开放的接口，方便您定义及改变规则。</li><li><code>Sentinel</code> 提供实时的监控系统，方便您快速了解目前系统的状态。</li></ul><h1 id="贰、基础使用"><a href="#贰、基础使用" class="headerlink" title="贰、基础使用"></a>贰、基础使用</h1><h2 id="2-1、-通过抛出异常的方式"><a href="#2-1、-通过抛出异常的方式" class="headerlink" title="2.1、 通过抛出异常的方式"></a>2.1、 通过抛出异常的方式</h2><p><code>SphU</code>包含了<code>try-catch</code>风格的<code>API</code>。用这种方式，当资源发生了限流之后会抛出<code>BlockException</code>。这个时候可以捕捉异常，进行限流之后的逻辑处理。示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span></span><br><span class="line"><span class="keyword">try</span> (Entry entry = SphU.entry(<span class="string">&quot;resourceName&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 被保护的业务逻辑</span></span><br><span class="line">  <span class="comment">// do something here...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">  <span class="comment">// 资源访问阻止，被限流或被降级</span></span><br><span class="line">  <span class="comment">// 在此处进行相应的处理操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>SphU.entry(xxx)</code>需要与<code>entry.exit()</code>方法成对出现，匹配调用，否则会导致调用链记录异常，抛出<code>ErrorEntryFreeException</code>异常。</p></blockquote><h2 id="2-2、通过返回布尔值方式"><a href="#2-2、通过返回布尔值方式" class="headerlink" title="2.2、通过返回布尔值方式"></a>2.2、通过返回布尔值方式</h2><p><code>SphO</code>提供 <code>if-else</code> 风格的 <code>API</code>。用这种方式，当资源发生了限流之后会返回 <code>false</code>，这个时候可以根据返回值，进行限流之后的逻辑处理。示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 资源名可使用任意有业务语义的字符串</span></span><br><span class="line"><span class="keyword">if</span> (SphO.entry(<span class="string">&quot;自定义资源名&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 务必保证finally会被执行</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 被保护的业务逻辑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    SphO.exit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 资源访问阻止，被限流或被降级</span></span><br><span class="line">  <span class="comment">// 进行相应的处理操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、异步调用支持"><a href="#2-3、异步调用支持" class="headerlink" title="2.3、异步调用支持"></a>2.3、异步调用支持</h3><p><code>Sentinel</code> 支持异步调用链路的统计。在异步调用中，需要通过 <code>SphU.asyncEntry(xxx)</code> 方法定义资源，并通常需要在异步的回调函数中调用 <code>exit</code> 方法。以下是一个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步调用.</span></span><br><span class="line">    doAsync(userId, result -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 在此处处理异步调用的结果.</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在回调结束后 exit.</span></span><br><span class="line">            entry.exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">    <span class="comment">// Request blocked.</span></span><br><span class="line">    <span class="comment">// Handle the exception (e.g. retry or fallback).</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SphU.asyncEntry(xxx)</code> 不会影响当前（调用线程）的 <code>Context</code>，因此以下两个 <code>entry</code> 在调用链上是平级关系（处于同一层），而不是嵌套关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用链类似于：</span></span><br><span class="line"><span class="comment">// -parent</span></span><br><span class="line"><span class="comment">// ---asyncResource</span></span><br><span class="line"><span class="comment">// ---syncResource</span></span><br><span class="line">asyncEntry = SphU.asyncEntry(asyncResource);</span><br><span class="line">entry = SphU.entry(normalResource);</span><br></pre></td></tr></table></figure><p>若在异步回调中需要嵌套其它的资源调用（无论是 <code>entry</code> 还是 <code>asyncEntry</code>），只需要借助<code>Sentinel</code>提供的上下文切换功能，在对应的地方通过 <code>ContextUtil.runOnContext(context, f)</code> 进行 <code>Context</code> 变换，将对应资源调用处的 <code>Context</code> 切换为生成的异步 <code>Context</code>，即可维持正确的调用链路关系。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">    Entry entry = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        entry = SphU.entry(<span class="string">&quot;handleResultForAsync&quot;</span>);</span><br><span class="line">        <span class="comment">// Handle your result here.</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">        <span class="comment">// Blocked for the result handler.</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            entry.exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        AsyncEntry entry = SphU.asyncEntry(resourceName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Asynchronous invocation.</span></span><br><span class="line">        doAsync(userId, result -&gt; &#123;</span><br><span class="line">            <span class="comment">// 在异步回调中进行上下文变换，通过 AsyncEntry 的 getAsyncContext 方法获取异步 Context</span></span><br><span class="line">            ContextUtil.runOnContext(entry.getAsyncContext(), () -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 此处嵌套正常的资源调用.</span></span><br><span class="line">                    handleResult(result);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    entry.exit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">        <span class="comment">// Request blocked.</span></span><br><span class="line">        <span class="comment">// Handle the exception (e.g. retry or fallback).</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的调用链就类似于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-parent</span><br><span class="line">---asyncInvocation</span><br><span class="line">-----handleResultForAsync</span><br></pre></td></tr></table></figure><h1 id="叁、注解使用"><a href="#叁、注解使用" class="headerlink" title="叁、注解使用"></a>叁、注解使用</h1><p><code>Sentinel</code> 提供了 <code>@SentinelResource</code> 注解用于定义资源，并提供了 <code>AspectJ</code> 的扩展用于自动定义资源、处理 <code>BlockException</code> 等。使用 <code>Sentinel Annotation AspectJ Extension</code> 的时候需要引入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-annotation-aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：注解方式埋点不支持 private 方法。</p></blockquote><p><code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 <code>fallback</code> 配置项。 <code>@SentinelResource</code> 注解包含以下属性：</p><ul><li><code>value</code>：资源名称，必需项（不能为空）</li><li><code>entryType</code>：<code>entry</code> 类型，可选项（默认为 <code>EntryType.OUT</code>）</li><li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code> 对应处理 <code>BlockException</code> 的函数名称，可选项。<code>blockHandler</code> 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。<code>blockHandler</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li><li><code>fallback</code>：<code>fallback</code> 函数名称，可选项，用于在抛出异常的时候提供 <code>fallback</code> 处理逻辑。  <code>fallback</code> 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。<code>fallback</code> 函数签名和位置要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li><code>fallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li></ul></li><li><code>defaultFallback</code>（since 1.6.0）：默认的 <code>fallback</code> 函数名称，可选项，通常用于通用的 <code>fallback</code> 逻辑（即可以用于很多服务或方法）。默认 <code>fallback</code> 函数可以针对所以类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 <code>fallback</code> 和 <code>defaultFallback</code>，则只有 <code>fallback</code> 会生效。<code>defaultFallback</code> 函数签名要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li><li><code>defaultFallback</code> 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li></ul></li><li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 <code>fallback</code> 逻辑中，而是会原样抛出。</li></ul><blockquote><p>注：1.6.0 之前的版本 <code>fallback</code> 函数只针对降级异常（<code>DegradeException</code>）进行处理，不能针对业务异常进行处理。</p></blockquote><p>特别地，若 <code>blockHandler</code> 和 <code>fallback</code> 都进行了配置，则被限流降级而抛出 <code>BlockException</code> 时只会进入 <code>blockHandler</code> 处理逻辑。若未配置 <code>blockHandler</code>、<code>fallback</code> 和 <code>defaultFallback</code>，则被限流降级时会将 <code>BlockException</code> 直接抛出。</p><h1 id="肆、规则的种类"><a href="#肆、规则的种类" class="headerlink" title="肆、规则的种类"></a>肆、规则的种类</h1><p><code>Sentinel</code> 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效。同时 <code>Sentinel</code> 也提供相关 <code>API</code>，供您来定制自己的规则策略。</p><p><code>Sentinel</code> 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。</p><h2 id="4-1、流量控制规则-FlowRule"><a href="#4-1、流量控制规则-FlowRule" class="headerlink" title="4.1、流量控制规则 (FlowRule)"></a>4.1、流量控制规则 (FlowRule)</h2><ul><li>重要属性</li></ul><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名，资源名是限流规则的作用对象</td><td></td></tr><tr><td>count</td><td>限流阈值</td><td></td></tr><tr><td>grade</td><td>限流阈值类型，QPS 或线程数模式</td><td>QPS 模式</td></tr><tr><td>limitApp</td><td>流控针对的调用来源</td><td>default，代表不区分调用来源</td></tr><tr><td>strategy</td><td>调用关系限流策略：直接、链路、关联</td><td>根据资源本身（直接）</td></tr><tr><td>controlBehavior</td><td>流控效果（直接拒绝 / 排队等待 / 慢启动模式），不支持按调用关系限流</td><td>直接拒绝</td></tr></tbody></table><blockquote><p>同一个资源可以同时有多个限流规则。</p></blockquote><ul><li>通过代码定义流量控制规则</li></ul><p>理解上面规则的定义之后，我们可以通过调用 <code>FlowRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initFlowQpsRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;FlowRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    FlowRule rule1 = <span class="keyword">new</span> FlowRule();</span><br><span class="line">    rule1.setResource(resource);</span><br><span class="line">    <span class="comment">// Set max qps to 20</span></span><br><span class="line">    rule1.setCount(<span class="number">20</span>);</span><br><span class="line">    rule1.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">    rule1.setLimitApp(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">    rules.add(rule1);</span><br><span class="line">    FlowRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2、熔断降级规则-DegradeRule"><a href="#4-2、熔断降级规则-DegradeRule" class="headerlink" title="4.2、熔断降级规则 (DegradeRule)"></a>4.2、熔断降级规则 (DegradeRule)</h2><ul><li>熔断降级规则包含下面几个重要的属性：</li></ul><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名，即规则的作用对象</td><td></td></tr><tr><td>grade</td><td>熔断策略，支持慢调用比例/异常比例/异常数策略</td><td>慢调用比例</td></tr><tr><td>count</td><td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td><td></td></tr><tr><td>timeWindow</td><td>熔断时长，单位为 s</td><td></td></tr><tr><td>minRequestAmount</td><td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td><td>5</td></tr><tr><td>statIntervalMs</td><td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td><td>1000 ms</td></tr><tr><td>slowRatioThreshold</td><td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td><td></td></tr></tbody></table><blockquote><p>同一个资源可以同时有多个降级规则</p></blockquote><ul><li>通过代码定义流量控制规则</li></ul><p>理解上面规则的定义之后，我们可以通过调用 <code>DegradeRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initDegradeRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;DegradeRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    DegradeRule rule = <span class="keyword">new</span> DegradeRule(resource);</span><br><span class="line">        .setGrade(CircuitBreakerStrategy.ERROR_RATIO.getType());</span><br><span class="line">        .setCount(<span class="number">0.7</span>); <span class="comment">// Threshold is 70% error ratio</span></span><br><span class="line">        .setMinRequestAmount(<span class="number">100</span>)</span><br><span class="line">        .setStatIntervalMs(<span class="number">30000</span>) <span class="comment">// 30s</span></span><br><span class="line">        .setTimeWindow(<span class="number">10</span>);</span><br><span class="line">    rules.add(rule);</span><br><span class="line">    DegradeRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、系统保护规则-SystemRule"><a href="#4-3、系统保护规则-SystemRule" class="headerlink" title="4.3、系统保护规则 (SystemRule)"></a>4.3、系统保护规则 (SystemRule)</h2><p><code>Sentinel</code> 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 <code>Load</code>、<code>CPU</code> 使用率、<code>总体平均 RT</code>、<code>入口 QPS</code> 和<code>并发线程数</code>等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><ul><li>系统规则包含下面几个重要的属性</li></ul><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>highestSystemLoad</td><td>load1 触发值，用于触发自适应控制阶段</td><td>-1 (不生效)</td></tr><tr><td>avgRt</td><td>所有入口流量的平均响应时间</td><td>-1 (不生效)</td></tr><tr><td>maxThread</td><td>入口流量的最大并发数</td><td>-1 (不生效)</td></tr><tr><td>qps</td><td>所有入口资源的 QPS</td><td>-1 (不生效)</td></tr><tr><td>highestCpuUsage</td><td>当前系统的 CPU 使用率（0.0-1.0）</td><td>-1 (不生效)</td></tr></tbody></table><ul><li>通过代码定义流量控制规则</li></ul><p>理解上面规则的定义之后，我们可以通过调用 <code>SystemRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSystemProtectionRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;SystemRule&gt; rules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  SystemRule rule = <span class="keyword">new</span> SystemRule();</span><br><span class="line">  rule.setHighestSystemLoad(<span class="number">10</span>);</span><br><span class="line">  rules.add(rule);</span><br><span class="line">  SystemRuleManager.loadRules(rules);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4、访问控制规则-AuthorityRule"><a href="#4-4、访问控制规则-AuthorityRule" class="headerlink" title="4.4、访问控制规则 (AuthorityRule)"></a>4.4、访问控制规则 (AuthorityRule)</h2><p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 <code>Sentinel</code> 的访问控制（黑白名单）的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p><p>授权规则，即黑白名单规则（AuthorityRule）非常简单，主要有以下配置项：</p><ul><li><code>resource</code>：资源名，即限流规则的作用对象</li><li><code>limitApp</code>：对应的黑名单/白名单，不同 <code>origin</code> 用 , 分隔，如 <code>appA</code>,<code>appB</code></li><li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li></ul><hr><p>【<strong>后面的话</strong>】在使用<code>API</code>去加载规则的时候，发现存在规则不生效的时候，通过调试发现：<code>Sentinel</code>在加载规则到内存中的时候会校验规则的合法性，如果规则不合法，该规则将不被加载。</p><p>具体可以查看<code>com.alibaba.csp.sentinel.property#configLoad</code>方法的实现类中参数校验方法，下面贴出<code>FlowRule</code> 和 <code>Degrade</code>的校验方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Check whether provided flow rule is valid.</span><br><span class="line"> *</span><br><span class="line"> * @param rule flow rule to check</span><br><span class="line"> * @return true if valid, otherwise false</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isValidRule(FlowRule rule) &#123;</span><br><span class="line">    boolean baseValid &#x3D; rule !&#x3D; null &amp;&amp; !StringUtil.isBlank(rule.getResource()) &amp;&amp; rule.getCount() &gt;&#x3D; 0</span><br><span class="line">        &amp;&amp; rule.getGrade() &gt;&#x3D; 0 &amp;&amp; rule.getStrategy() &gt;&#x3D; 0 &amp;&amp; rule.getControlBehavior() &gt;&#x3D; 0;</span><br><span class="line">    if (!baseValid) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; Check strategy and control (shaping) behavior.</span><br><span class="line">    return checkClusterField(rule) &amp;&amp; checkStrategyField(rule) &amp;&amp; checkControlBehaviorField(rule);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkClusterField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    if (!rule.isClusterMode()) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    ClusterFlowConfig clusterConfig &#x3D; rule.getClusterConfig();</span><br><span class="line">    if (clusterConfig &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!validClusterRuleId(clusterConfig.getFlowId())) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!isWindowConfigValid(clusterConfig.getSampleCount(), clusterConfig.getWindowIntervalMs())) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (clusterConfig.getStrategy()) &#123;</span><br><span class="line">        case ClusterRuleConstant.FLOW_CLUSTER_STRATEGY_NORMAL:</span><br><span class="line">            return true;</span><br><span class="line">        default:</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isWindowConfigValid(int sampleCount, int windowIntervalMs) &#123;</span><br><span class="line">    return sampleCount &gt; 0 &amp;&amp; windowIntervalMs &gt; 0 &amp;&amp; windowIntervalMs % sampleCount &#x3D;&#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkStrategyField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    if (rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_RELATE || rule.getStrategy() &#x3D;&#x3D; RuleConstant.STRATEGY_CHAIN) &#123;</span><br><span class="line">        return StringUtil.isNotBlank(rule.getRefResource());</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean checkControlBehaviorField(&#x2F;*@NonNull*&#x2F; FlowRule rule) &#123;</span><br><span class="line">    switch (rule.getControlBehavior()) &#123;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP:</span><br><span class="line">            return rule.getWarmUpPeriodSec() &gt; 0;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER:</span><br><span class="line">            return rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class="line">        case RuleConstant.CONTROL_BEHAVIOR_WARM_UP_RATE_LIMITER:</span><br><span class="line">            return rule.getWarmUpPeriodSec() &gt; 0 &amp;&amp; rule.getMaxQueueingTimeMs() &gt; 0;</span><br><span class="line">        default:</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidRule</span><span class="params">(DegradeRule rule)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> baseValid = rule != <span class="keyword">null</span> &amp;&amp; !StringUtil.isBlank(rule.getResource())</span><br><span class="line">        &amp;&amp; rule.getCount() &gt;= <span class="number">0</span> &amp;&amp; rule.getTimeWindow() &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!baseValid) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rule.getMinRequestAmount() &lt;= <span class="number">0</span> || rule.getStatIntervalMs() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (rule.getGrade()) &#123;</span><br><span class="line">        <span class="keyword">case</span> RuleConstant.DEGRADE_GRADE_RT:</span><br><span class="line">            <span class="keyword">return</span> rule.getSlowRatioThreshold() &gt;= <span class="number">0</span> &amp;&amp; rule.getSlowRatioThreshold() &lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:</span><br><span class="line">            <span class="keyword">return</span> rule.getCount() &lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>最后是我自己实现的 <a href="https://github.com/eelve/awesomesentinel/tree/basic-sentinel">demo</a> 。</p></blockquote><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在前文 浅析Spring Boot单体应用熔断技术 中对比了一下几种常见的接口熔断的技术。这里就具体使用 Sentinel 来记录以下。</summary>
    
    
    
    <category term="sentinel" scheme="https://eelve.com/categories/sentinel/"/>
    
    
    <category term="sentinel" scheme="https://eelve.com/tags/sentinel/"/>
    
    <category term="java" scheme="https://eelve.com/tags/java/"/>
    
    <category term="springboot" scheme="https://eelve.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>浅析Spring Boot单体应用熔断技术</title>
    <link href="https://eelve.com/posts/56832225.html"/>
    <id>https://eelve.com/posts/56832225.html</id>
    <published>2021-01-20T12:20:20.000Z</published>
    <updated>2021-04-19T06:44:39.305Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】最近在看服务熔断的相关技术，下面就来总结一下。</p><h1 id="壹、入围方案"><a href="#壹、入围方案" class="headerlink" title="壹、入围方案"></a>壹、入围方案</h1><ul><li>Sentinel<ul><li><a href="https://github.com/alibaba/Sentinel">github地址</a></li><li><a href="https://sentinelguard.io/zh-cn/docs/introduction.html">https://sentinelguard.io/zh-cn/docs/introduction.html</a></li><li>阿里出品，Spring Cloud Alibaba限流组件，目前持续更新中</li><li>自带Dashboard，可以查看接口Qps等，并且可以动态修改各种规则</li><li>流量控制，直接限流、冷启动、排队</li><li>熔断降级，限制并发限制数和相应时间</li><li>系统负载保护，提供系统级别防护，限制总体CPU等</li><li>主要核心：资源，规则（流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。），和指标</li><li>文档非常清晰和详细，中文</li><li>支持动态规则（推模式和拉模式）</li></ul></li><li>Hystrix<ul><li><a href="https://github.com/Netflix/Hystrix">github地址</a></li><li><a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></li><li>Netflix出品，Spring Cloud Netflix限流组件，已经停止新特性开发，只进行bug修复，最近更新为2018年，功能稳定</li><li>有简单的dashboard页面</li><li>以隔离和熔断为主的容错机制，超时或被熔断的调用将会快速失败，并可以提供 fallback 机制的初代熔断框架，异常统计基于滑动窗口</li></ul></li><li>resilience4j<ul><li><a href="https://github.com/resilience4j/resilience4j">github地址</a></li><li><a href="https://resilience4j.readme.io/docs">https://resilience4j.readme.io/docs</a></li><li>是一款轻量、简单，并且文档非常清晰、丰富的熔断工具。是Hystrix替代品，实现思路和Hystrix一致，目前持续更新中</li><li>需要自己对micrometer、prometheus以及Dropwizard metrics进行整合</li><li>CircuitBreaker 熔断</li><li>Bulkhead 隔离</li><li>RateLimiter QPS限制</li><li>Retry 重试</li><li>TimeLimiter 超时限制</li><li>Cache 缓存</li></ul></li><li>自己实现(基于Guava)<ul><li>基于Guava的令牌桶，可以轻松实现对QPS进行限流</li></ul></li></ul><h1 id="贰、技术对比"><a href="#贰、技术对比" class="headerlink" title="贰、技术对比"></a>贰、技术对比</h1><table><thead><tr><th></th><th><strong>Sentinel</strong></th><th><strong>Hystrix</strong></th><th><strong>resilience4j</strong></th><th>使用Guava实现</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发线程数限流）</td><td>线程池隔离/信号量隔离</td><td>信号量隔离</td><td></td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数</td><td>基于异常比率</td><td>基于异常比率、响应时间</td><td></td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td><td>令牌桶</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td><td></td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td><td></td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>单机限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td><td>基于 QPS</td></tr><tr><td>集群流控</td><td>支持</td><td>不支持</td><td>不支持</td><td></td></tr><tr><td>流量整形</td><td>支持预热模式与匀速排队控制效果</td><td>不支持</td><td>简单的 Rate Limiter 模式</td><td></td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td><td></td></tr><tr><td>热点识别/防护</td><td>支持</td><td>不支持</td><td>不支持</td><td></td></tr><tr><td>Service Mesh 支持</td><td>支持 Envoy/Istio</td><td>不支持</td><td>不支持</td><td></td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、实时监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td><td></td></tr><tr><td>是否支持默认规则</td><td>不支持，需要针对每个接口配置规则</td><td>支持</td><td>支持</td><td></td></tr><tr><td>是否支持过滤异常</td><td>注解单个接口支持</td><td>注解和全局默认配置</td><td>注解和全局默认配置</td><td></td></tr></tbody></table><h1 id="叁、应用改造"><a href="#叁、应用改造" class="headerlink" title="叁、应用改造"></a>叁、应用改造</h1><h2 id="3-1、sentinel"><a href="#3-1、sentinel" class="headerlink" title="3.1、sentinel"></a>3.1、sentinel</h2><h3 id="3-1-1、引入依赖"><a href="#3-1-1、引入依赖" class="headerlink" title="3.1.1、引入依赖"></a>3.1.1、引入依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="3-1-2、改造接口或者service层"><a href="#3-1-2、改造接口或者service层" class="headerlink" title="3.1.2、改造接口或者service层"></a>3.1.2、改造接口或者service层</h3><blockquote><p>@SentinelResource(value = “allInfos”,fallback = “errorReturn”)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SentinelResource &#123;</span><br><span class="line">    <span class="comment">//资源名称</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//流量方向</span></span><br><span class="line">    <span class="function">EntryType <span class="title">entryType</span><span class="params">()</span> <span class="keyword">default</span> EntryType.OUT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源类型</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">resourceType</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常处理方法</span></span><br><span class="line">    <span class="function">String <span class="title">blockHandler</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常处理类</span></span><br><span class="line">    Class&lt;?&gt;[] blockHandlerClass() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//熔断方法</span></span><br><span class="line">    <span class="function">String <span class="title">fallback</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认熔断方法</span></span><br><span class="line">    <span class="function">String <span class="title">defaultFallback</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//熔断类</span></span><br><span class="line">    Class&lt;?&gt;[] fallbackClass() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计异常</span></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] exceptionsToTrace() <span class="keyword">default</span> &#123;Throwable.class&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//忽略异常</span></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] exceptionsToIgnore() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;allInfos&quot;,fallback = &quot;errorReturn&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">allInfos</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;num % 2 == 0&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad with 2&quot;</span>, <span class="number">400</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ProgramException e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3、针对接口配置熔断方法或者限流方法"><a href="#3-1-3、针对接口配置熔断方法或者限流方法" class="headerlink" title="3.1.3、针对接口配置熔断方法或者限流方法"></a>3.1.3、针对接口配置熔断方法或者限流方法</h3><blockquote><p>默认过滤拦截所有Controller接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流，参数需要和方法保持一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BlockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">errorReturn</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span> <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error 限流&quot;</span> + num );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断，参数需要和方法保持一直，并且需要添加BlockException异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BlockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">errorReturn</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num,BlockException b)</span> <span class="keyword">throws</span> BlockException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error 熔断&quot;</span> + num );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意也可以不配置限流或者熔断方法。通过全局异常去捕获<strong>UndeclaredThrowableException</strong>或者<strong>BlockException</strong>避免大量的开发量</p></blockquote><h3 id="3-1-4、接入dashboard"><a href="#3-1-4、接入dashboard" class="headerlink" title="3.1.4、接入dashboard"></a>3.1.4、接入dashboard</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure><p><img src="https://image.eelve.com/eblog/2021012001.png" alt="sentinel"></p><h3 id="3-1-5、规则持久化和动态更新"><a href="#3-1-5、规则持久化和动态更新" class="headerlink" title="3.1.5、规则持久化和动态更新"></a>3.1.5、规则持久化和动态更新</h3><blockquote><p>接入配置中心如：zookeeper等等，并对规则采用推模式</p></blockquote><h2 id="3-2、hystrix"><a href="#3-2、hystrix" class="headerlink" title="3.2、hystrix"></a>3.2、hystrix</h2><h3 id="3-2-1、引入依赖"><a href="#3-2-1、引入依赖" class="headerlink" title="3.2.1、引入依赖"></a>3.2.1、引入依赖</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-2、改造接口"><a href="#3-2-2、改造接口" class="headerlink" title="3.2.2、改造接口"></a>3.2.2、改造接口</h3><blockquote><p>@HystrixCommand(fallbackMethod = “timeOutError”)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HystrixCommand &#123;</span><br><span class="line">    <span class="function">String <span class="title">groupKey</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">commandKey</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">threadPoolKey</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">fallbackMethod</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    HystrixProperty[] commandProperties() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    HystrixProperty[] threadPoolProperties() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] ignoreExceptions() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">ObservableExecutionMode <span class="title">observableExecutionMode</span><span class="params">()</span> <span class="keyword">default</span> ObservableExecutionMode.EAGER</span>;</span><br><span class="line"></span><br><span class="line">    HystrixException[] raiseHystrixExceptions() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">defaultFallback</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">allInfos</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 3 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad whitch 3&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ProgramException | InterruptedException exception) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3、针对接口配置熔断方法"><a href="#3-2-3、针对接口配置熔断方法" class="headerlink" title="3.2.3、针对接口配置熔断方法"></a>3.2.3、针对接口配置熔断方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该方法是熔断回调方法，参数需要和接口保持一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">fallbackMethod</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span> </span>&#123;</span><br><span class="line">    response.setStatus(<span class="number">500</span>);</span><br><span class="line">    log.info(<span class="string">&quot;发生了熔断！！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;熔断&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4、配置默认策略"><a href="#3-2-4、配置默认策略" class="headerlink" title="3.2.4、配置默认策略"></a>3.2.4、配置默认策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          strategy: THREAD</span><br><span class="line">          thread:</span><br><span class="line">            # 线程超时15秒,调用Fallback方法</span><br><span class="line">            timeoutInMilliseconds: 15000</span><br><span class="line">      metrics:</span><br><span class="line">        rollingStats:</span><br><span class="line">          timeInMilliseconds: 15000</span><br><span class="line">      circuitBreaker:</span><br><span class="line">        # 10秒内出现3个以上请求(已临近阀值),并且出错率在50%以上,开启断路器.断开服务,调用Fallback方法</span><br><span class="line">        requestVolumeThreshold: 3</span><br><span class="line">        sleepWindowInMilliseconds: 10000</span><br></pre></td></tr></table></figure><h3 id="3-2-5、接入监控"><a href="#3-2-5、接入监控" class="headerlink" title="3.2.5、接入监控"></a>3.2.5、接入监控</h3><p><img src="https://image.eelve.com/eblog/2021012002.png" alt="hystrix"></p><p><img src="https://image.eelve.com/eblog/2021012003.png" alt="hystrix示意图"></p><blockquote><p>曲线：用来记录2分钟内流量的相对变化，我们可以通过它来观察到流量的上升和下降趋势。</p></blockquote><blockquote><p><strong>集群监控需要用到注册中心</strong></p></blockquote><h2 id="3-3、resilience4j"><a href="#3-3、resilience4j" class="headerlink" title="3.3、resilience4j"></a>3.3、resilience4j</h2><h3 id="3-3-1、引入依赖"><a href="#3-3-1、引入依赖" class="headerlink" title="3.3.1、引入依赖"></a>3.3.1、引入依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;resilience4j-spring-boot2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;resilience4j-bulkhead&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;resilience4j-ratelimiter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.resilience4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;resilience4j-timelimiter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以按需要引入：bulkhead，ratelimiter，timelimiter等</p></blockquote><h3 id="3-3-2、改造接口"><a href="#3-3-2、改造接口" class="headerlink" title="3.3.2、改造接口"></a>3.3.2、改造接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">//@TimeLimiter(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class="line"><span class="meta">@CircuitBreaker(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class="line"><span class="meta">@Bulkhead(name = &quot;BulkheadA&quot;,fallbackMethod = &quot;fallbackMethod&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">allInfos</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;param-----&gt;&quot;</span> + num);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//Thread.sleep(num);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 2 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad with 2&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 3 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(<span class="string">&quot;something bad whitch 3&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 5 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ProgramException(<span class="string">&quot;something bad whitch 5&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;num % 7 == 0&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResult.ok();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BufferUnderflowException e) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3、针对接口配置熔断方法"><a href="#3-3-3、针对接口配置熔断方法" class="headerlink" title="3.3.3、针对接口配置熔断方法"></a>3.3.3、针对接口配置熔断方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要参数一致，并且加上相应异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">fallbackMethod</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@RequestParam</span> Integer num, BulkheadFullException exception)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;error 熔断&quot;</span> + num );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4、配置规则"><a href="#3-3-4、配置规则" class="headerlink" title="3.3.4、配置规则"></a>3.3.4、配置规则</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resilience4j.circuitbreaker:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">registerHealthIndicator:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slidingWindowSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">registerHealthIndicator:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slidingWindowSize:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">slidingWindowType:</span> <span class="string">TIME_BASED</span></span><br><span class="line">            <span class="attr">minimumNumberOfCalls:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">waitDurationInOpenState:</span> <span class="string">50s</span></span><br><span class="line">            <span class="attr">failureRateThreshold:</span> <span class="number">50</span></span><br><span class="line">            <span class="attr">eventConsumerBufferSize:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">recordFailurePredicate:</span> <span class="string">io.github.robwin.exception.RecordFailurePredicate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.retry:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">maxRetryAttempts:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">waitDuration:</span> <span class="string">10s</span></span><br><span class="line">            <span class="attr">enableExponentialBackoff:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">exponentialBackoffMultiplier:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">retryExceptions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">org.springframework.web.client.HttpServerErrorException</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">java.io.IOException</span></span><br><span class="line">            <span class="attr">ignoreExceptions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">io.github.robwin.exception.BusinessException</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">maxRetryAttempts:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">waitDuration:</span> <span class="string">10s</span></span><br><span class="line">            <span class="attr">retryExceptions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">org.springframework.web.client.HttpServerErrorException</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">java.io.IOException</span></span><br><span class="line">            <span class="attr">ignoreExceptions:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">io.github.robwin.exception.BusinessException</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.bulkhead:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">maxConcurrentCalls:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">maxWaitDuration:</span> <span class="string">10ms</span></span><br><span class="line">            <span class="attr">maxConcurrentCalls:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.thread-pool-bulkhead:</span></span><br><span class="line">  <span class="attr">instances:</span></span><br><span class="line">    <span class="attr">backendC:</span></span><br><span class="line">      <span class="attr">maxThreadPoolSize:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">coreThreadPoolSize:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">queueCapacity:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.ratelimiter:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">limitForPeriod:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">limitRefreshPeriod:</span> <span class="string">1s</span></span><br><span class="line">            <span class="attr">timeoutDuration:</span> <span class="number">0</span></span><br><span class="line">            <span class="attr">registerHealthIndicator:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">eventConsumerBufferSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">limitForPeriod:</span> <span class="number">6</span></span><br><span class="line">            <span class="attr">limitRefreshPeriod:</span> <span class="string">500ms</span></span><br><span class="line">            <span class="attr">timeoutDuration:</span> <span class="string">3s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resilience4j.timelimiter:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">        <span class="attr">backendA:</span></span><br><span class="line">            <span class="attr">timeoutDuration:</span> <span class="string">2s</span></span><br><span class="line">            <span class="attr">cancelRunningFuture:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">backendB:</span></span><br><span class="line">            <span class="attr">timeoutDuration:</span> <span class="string">1s</span></span><br><span class="line">            <span class="attr">cancelRunningFuture:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>配置的规则可以被代码覆盖</p></blockquote><h3 id="3-3-5、配置监控"><a href="#3-3-5、配置监控" class="headerlink" title="3.3.5、配置监控"></a>3.3.5、配置监控</h3><blockquote><p>如grafana等</p></blockquote><h1 id="肆、关注点"><a href="#肆、关注点" class="headerlink" title="肆、关注点"></a>肆、关注点</h1><ul><li>是否需要过滤部分异常</li><li>是否需要全局默认规则</li><li>可能需要引入其他中间件</li><li>k8s流量控制</li><li>规则存储和动态修改</li><li>接入改造代价</li></ul><h1 id="【后面的话】"><a href="#【后面的话】" class="headerlink" title="【后面的话】"></a>【<strong>后面的话</strong>】</h1><p>个人建议的话，比较推荐sentinel，它提供了很多接口便于开发者自己拓展，同时我觉得他的规则动态更新也比较方便。最后是相关示例代码:<a href="https://github.com/eelve/limiting">单体应用示例代码</a></p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">最近在看服务熔断的相关技术，下面就来总结一下。</summary>
    
    
    
    <category term="springboot" scheme="https://eelve.com/categories/springboot/"/>
    
    
    <category term="java" scheme="https://eelve.com/tags/java/"/>
    
    <category term="springboot" scheme="https://eelve.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>站点迁移指北</title>
    <link href="https://eelve.com/posts/99c3e47d.html"/>
    <id>https://eelve.com/posts/99c3e47d.html</id>
    <published>2020-11-07T13:53:22.000Z</published>
    <updated>2021-04-19T06:44:39.271Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】由于服务器快到期了，就重新另购了一台服务器。这边就来记录一下迁移的过程和日常数据备份等等。</p><h1 id="壹、站点概览"><a href="#壹、站点概览" class="headerlink" title="壹、站点概览"></a>壹、站点概览</h1><p>我的站点使用<code>halo</code>搭建的，主要涉及到的中间件有：<code>Nginx</code>、<code>Mysql</code>等；日常运行产生的数据有站点运行数据和资源数据，所以站点迁移也会从这些方面着手。</p><h1 id="贰、中间件迁移"><a href="#贰、中间件迁移" class="headerlink" title="贰、中间件迁移"></a>贰、中间件迁移</h1><h2 id="2-1、Nginx"><a href="#2-1、Nginx" class="headerlink" title="2.1、Nginx"></a>2.1、Nginx</h2><p>其实<code>Nginx</code>的迁移很简单，只需要在新的服务器中安装即可，然后迁移<code>nginx.conf</code>配置文件。我的站点还用到<code>https</code>，所有在安装的时候要注意安装相应的模块以及证书的迁移。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --add-module=../ngx_cache_purge-1.3/  --with-http_stub_status_module --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module</span><br></pre></td></tr></table></figure><h2 id="2-2、Mysql"><a href="#2-2、Mysql" class="headerlink" title="2.2、Mysql"></a>2.2、Mysql</h2><p>在新的服务器安装<code>Mysql</code>服务，然后导入sql文件即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u$db_user <span class="operator">-</span>p$db_password $db_name <span class="operator">|</span> gzip <span class="operator">&gt;</span> <span class="operator">/</span>home<span class="operator">/</span>firbackup<span class="operator">/</span>halodb.sql.gz</span><br></pre></td></tr></table></figure><h1 id="叁、资源数据"><a href="#叁、资源数据" class="headerlink" title="叁、资源数据"></a>叁、资源数据</h1><p>对于资源数据，主要是<code>halo</code>产生的主题以及上传的文章的图片等等。就直接采用压缩打包，然后发送到新服务器再解压即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czvf /home/firbackup/halo.tar.gz  /root/.halo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果在同一个内网，记得使用内网ip，速度会更快哦</span></span><br><span class="line">scp halo.tar.gz  root@ip.ip.ip.ip:/root/</span><br></pre></td></tr></table></figure><p>然后再解压到<code>/root/.halo</code> 文件夹即可</p><h1 id="肆、重新启动"><a href="#肆、重新启动" class="headerlink" title="肆、重新启动"></a>肆、重新启动</h1><p>配置域名解析和相应的安全策略以及安装<code>JDK</code>之后，你就可以重新启动<code>halo</code>服务就好，到这里站点迁移工作就完成了。</p><hr><h1 id="【后面的话】"><a href="#【后面的话】" class="headerlink" title="【后面的话】"></a>【<strong>后面的话</strong>】</h1><p>日常备份也就是应用的配置文件以及应用产生的必要数据的备份。我这边的方案是定时打包压缩之后发送到邮箱中。下面给出具体脚本：</p><h2 id="安装配置mailx"><a href="#安装配置mailx" class="headerlink" title="安装配置mailx"></a>安装配置<code>mailx</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mailx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mail.rc</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加如下配置</span></span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore</span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/root/.certs/   <span class="comment">#使用命令find / -name &quot;cert*.db&quot; 查找位置（根据自身系统而定）</span></span><br><span class="line"><span class="comment">#weikeyi 发送email的设置</span></span><br><span class="line"><span class="built_in">set</span> from=youremail@163.com  <span class="comment">#163邮箱账号</span></span><br><span class="line"><span class="built_in">set</span> smtp=smtps://smtp.163.com:465   <span class="comment">###smtp服务商#端口465#smtps协议</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=youremail@163.com  <span class="comment">#与上邮箱相同</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=yourpasswd   <span class="comment">#自己的授权码#非邮箱密码</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login</span><br></pre></td></tr></table></figure><p>如果在测试执行脚本，发现发送报错的话，那就是证书有问题，只需要在上面提到的<code>/root/.certs/</code>文件夹中放置<code>163邮箱</code>的证书即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.11:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 236028/17228757</span><br><span class="line">. . . message not sent.</span><br><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.16:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 6966/507305</span><br><span class="line">. . . message not sent.</span><br><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.11:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 324/22426</span><br><span class="line">. . . message not sent.</span><br><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.14:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 48/2440</span><br><span class="line">. . . message not sent.</span><br><span class="line">Resolving host smtp.163.com . . . <span class="keyword">done</span>.</span><br><span class="line">Connecting to 220.181.12.17:465 . . . connected.</span><br><span class="line">Error initializing NSS: Unknown error -8015.</span><br><span class="line"><span class="string">&quot;/root/dead.letter&quot;</span> 342/10021</span><br><span class="line">. . . message not sent.</span><br></pre></td></tr></table></figure><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#firbackup 文件和 and database</span></span><br><span class="line"><span class="comment">###################删除halo备份#################</span></span><br><span class="line">rm -fr /home/firbackup/halo_$(date -d <span class="string">&#x27;7 days ago&#x27;</span> +%Y%m%d).tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">###################备份halo#################</span></span><br><span class="line">tar czvf /home/firbackup/halo_$(date +%Y%m%d).tar.gz  /root/.halo</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;halo备份的下载地址：http://eelve.com/bp/&#x27;</span>halo_$(date +%Y%m%d).tar.gz &gt;&gt; /home/firbackup/info_$(date +%Y%m%d).txt</span><br><span class="line"></span><br><span class="line"><span class="comment">###################删除备份数据库####################</span></span><br><span class="line">rm -fr /home/firbackup/halodb_$(date -d <span class="string">&#x27;7 days ago&#x27;</span> +%Y%m%d).sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">###################备份halodb数据库####################</span></span><br><span class="line">db_user=<span class="string">&quot;root&quot;</span>       <span class="comment">#输入你的数据库用户名 </span></span><br><span class="line">db_password=<span class="string">&quot;root&quot;</span> <span class="comment">#输入你的数据库密码</span></span><br><span class="line">db_name=<span class="string">&quot;halodb&quot;</span>       <span class="comment">#输入你要备份的数据库名   </span></span><br><span class="line">mysqldump -u<span class="variable">$db_user</span> -p<span class="variable">$db_password</span> <span class="variable">$db_name</span> | gzip &gt; /home/firbackup/halodb_$(date +%Y%m%d).sql.gz</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;halo数据库备份的下载地址：http://eelve.com/bp/&#x27;</span>halodb_$(date +%Y%m%d).sql.gz &gt;&gt; /home/firbackup/info_$(date +%Y%m%d).txt </span><br><span class="line"></span><br><span class="line"><span class="comment">###################准备开始发邮件###############</span></span><br><span class="line"><span class="built_in">cd</span> /home/firbackup/</span><br><span class="line"></span><br><span class="line"><span class="comment">###################邮件发halo数据库备份###############</span></span><br><span class="line">mailx -v -s <span class="string">&quot;请注意查收&quot;</span>$(date +%Y%m%d)<span class="string">&quot;halo数据库的相关备份&quot;</span> -a halodb_$(date +%Y%m%d).sql.gz  i@eelve.com&lt;halodb_$(date +%Y%m%d).sql.gz</span><br></pre></td></tr></table></figure><h2 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@fir /home]<span class="comment">#crontab -e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##每天定时01:00:00 执行脚本 /home/firbackup.sh</span></span><br><span class="line">0 1 * * * sh /home/firbackup.sh</span><br><span class="line"><span class="comment">##每天凌晨2点重启springboot应用</span></span><br><span class="line">0 2 * * * sh /home/auto_restart_springboots.sh</span><br></pre></td></tr></table></figure><p>到这里你只需要去邮箱中下载备份的数据就好了。另外邮箱发送附件是有大小限制的，每个邮箱的具体情况不一。另外对于文章中的图片数据可以上传到<code>又拍云</code>等云存储中即可。最后一句话<code>道路千万条，数据备份第一条</code>。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">由于服务器快到期了，就重新另购了一台服务器。这边就来记录一下迁移的过程和日常数据备份等等。</summary>
    
    
    
    <category term="lifeme" scheme="https://eelve.com/categories/lifeme/"/>
    
    
    <category term="lifeme" scheme="https://eelve.com/tags/lifeme/"/>
    
  </entry>
  
  <entry>
    <title>九月面试总结</title>
    <link href="https://eelve.com/posts/3326b4d8.html"/>
    <id>https://eelve.com/posts/3326b4d8.html</id>
    <published>2020-09-30T14:04:57.000Z</published>
    <updated>2021-04-19T06:44:39.212Z</updated>
    
    <content type="html"><![CDATA[<hr><p>【<strong>前情提要</strong>】最近参加了几次面试，面试的感受是简历上写的东西一定是都烂熟于心，另外知识要成体系，引导面试官跟着你走，而不是被面试官牵着走。另外hr最常问的一个问题是：你为什么从上一份工作离职。下面简单记录一下我碰到的面试题。</p><hr><h1 id="Question-List"><a href="#Question-List" class="headerlink" title="Question List"></a>Question List</h1><ul><li>1.ArrayList和LinkedList区别</li><li>2.Object主要方法</li><li>3.实现线程的方法</li><li>4.线程池核心参数和模型</li><li>5.JUC</li><li>6.HashMap为啥不安全</li><li>7.CurrentHashMap怎么保证安全</li><li>8.为什么会有线程不安全问题，有那些保证线程同步的方法</li><li>9.说一说synchronized</li><li>10.说一说Java内存模型</li><li>11.volatile作用那些</li><li>12.@Autowired 和@Resource区别</li><li>13.springboot是怎么启动的</li><li>14.怎么解决循环依赖</li><li>15.什么是Aop，有那些方式实现</li><li>16.动态代理有那些，分别怎么实现</li><li>17.怎么自定义注解</li><li>18.什么是双亲委派</li><li>19.类加载机制</li><li>20.辣鸡回收算法，以及有那些回收器</li><li>21.B树和B+树，为啥MySQL用</li><li>22.怎么优化慢SQL</li><li>23.MySQL事物隔离级别，和MVVC怎么保障幻读和脏读</li><li>24.项目为什么用MQ，怎么解决使用MQ产生的问题</li><li>25.Redis持久化机制</li><li>26.redis淘汰策略</li><li>27.redis怎么保障双写一致</li><li>28.怎么保障分布式事物</li><li>29.为什么是三次握手四次挥手</li><li>30.Https是怎么保障安全的</li><li>31.还有些算法的</li><li>32.穿插项目问</li><li>33.String源码考察，intern方法</li><li>34.Object源码考察</li><li>35.Thread源码考察，线程顺序执行等等</li><li>36.ThreadLocal内存泄露问题考察</li><li>37.类初始化考察，new，克隆，反序列化</li><li>38.Spring MVC设计模式</li><li>39.JVM调优策略</li></ul><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">最近参加了几次面试，面试的感受是简历上写的东西一定是都烂熟于心，另外知识要成体系，引导面试官跟着你走，而不是被面试官牵着走。另外hr最常问的一个问题是：你为什么从上一份工作离职。下面简单记录一下我碰到的面试题。</summary>
    
    
    
    <category term="interview" scheme="https://eelve.com/categories/interview/"/>
    
    
    <category term="interview" scheme="https://eelve.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>WSL2中体验Redis的布隆过滤器</title>
    <link href="https://eelve.com/posts/95571c44.html"/>
    <id>https://eelve.com/posts/95571c44.html</id>
    <published>2020-08-15T03:39:40.000Z</published>
    <updated>2021-04-19T06:44:39.149Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】前面已经安装了<a href="https://eelve.com/archives/hellowsl2">WSL2</a> ，最近准备研究一下Redis的布隆过滤器，现在就先搭建一下环境。</p><hr><h1 id="壹、准备环境"><a href="#壹、准备环境" class="headerlink" title="壹、准备环境"></a>壹、准备环境</h1><ul><li>WSL：WSL2</li><li>Docker: Docker for Windows <code>Use the WSL 2 based engine</code></li></ul><h1 id="贰、安装过程"><a href="#贰、安装过程" class="headerlink" title="贰、安装过程"></a>贰、安装过程</h1><h2 id="2-1-前情资讯"><a href="#2-1-前情资讯" class="headerlink" title="2.1 前情资讯"></a>2.1 前情资讯</h2><p><code>Redis v4.0</code>之后有了 <code>Module（模块/插件）</code>功能，<code>Redis Modules</code>让 <code>Redis</code> 可以使用外部模块扩展其功能 。布隆过滤器就是其中的<code>Module</code>。详情可以查看<code>Redis</code>官方对 <code>Redis Modules</code>的介绍 ：<a href="https://redis.io/modules">https://redis.io/modules</a></p><p>另外，官网推荐了一个<code>RedisBloom</code>作为<code>Redis</code>布隆过滤器的<code>Module</code>,地址：<a href="https://github.com/RedisBloom/RedisBloom">https://github.com/RedisBloom/RedisBloom</a>. 其他还有：</p><ul><li>redis-lua-scaling-bloom-filter （lua 脚本实现）：<a href="https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter">https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter</a></li><li>pyreBloom（Python中的快速Redis 布隆过滤器） ：<a href="https://github.com/seomoz/pyreBloom">https://github.com/seomoz/pyreBloom</a></li><li>……</li></ul><p><code>RedisBloom</code>提供了多种语言的客户端支持，包括：<code>Python</code>、<code>Java</code>、<code>JavaScript</code> 和 <code>PHP</code>。</p><h2 id="2-2-Docker安装"><a href="#2-2-Docker安装" class="headerlink" title="2.2 Docker安装"></a>2.2 Docker安装</h2><p>如果我们需要体验<code>Redis</code>中的布隆过滤器非常简单，通过 Docker 就可以了！这里我们使用这个仓库下的镜像：<a href="https://hub.docker.com/r/redislabs/rebloom/">https://hub.docker.com/r/redislabs/rebloom/</a></p><p>下面是具体命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ docker run -p 9379:6379 --name redis-redisbloom redislabs/rebloom:latest</span><br><span class="line">1:C 15 Aug 2020 03:26:02.860 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">1:C 15 Aug 2020 03:26:02.860 <span class="comment"># Redis version=6.0.5, bits=64, commit=00000000, modified=0, pid=1, just started</span></span><br><span class="line">1:C 15 Aug 2020 03:26:02.860 <span class="comment"># Configuration loaded</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 * Running mode=standalone, port=6379.</span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 <span class="comment"># Server initialized</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.862 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></span><br><span class="line">1:M 15 Aug 2020 03:26:02.864 * Module <span class="string">&#x27;bf&#x27;</span> loaded from /usr/lib/redis/modules/redisbloom.so</span><br><span class="line">1:M 15 Aug 2020 03:26:02.864 * Ready to accept connections</span><br><span class="line">^C1:signal-handler (1597462093) Received SIGINT scheduling shutdown...</span><br><span class="line">1:M 15 Aug 2020 03:28:13.217 <span class="comment"># User requested shutdown...</span></span><br><span class="line">1:M 15 Aug 2020 03:28:13.217 <span class="comment"># Redis is now ready to exit, bye bye...</span></span><br></pre></td></tr></table></figure><p>根据提示修改内存参数等，注意使用root用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ <span class="built_in">cd</span> ~</span><br><span class="line">cc@Chirius:~$ su root</span><br><span class="line">Password:</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># vi /etc/sysctl.conf</span></span><br><span class="line">root@Chirius:/home/cc<span class="comment"># sysctl vm.overcommit_memory=1</span></span><br><span class="line">vm.overcommit_memory = 1</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class="line">root@Chirius:/home/cc<span class="comment"># ll /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class="line">-rw-r--r-- 1 root root 4096 Aug 15 11:30 /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># cat /sys/kernel/mm/transparent_hugepage/enabled</span></span><br><span class="line">always madvise [never]</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># ll /etc/rc.local</span></span><br><span class="line">ls: cannot access <span class="string">&#x27;/etc/rc.local&#x27;</span>: No such file or directory</span><br><span class="line">root@Chirius:/home/cc<span class="comment"># vi /etc/rc.local</span></span><br><span class="line">root@Chirius:/home/cc<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>然后再重启容器，就可以启动成功了，然后进行体验</p><h1 id="叁、布隆过滤器体验"><a href="#叁、布隆过滤器体验" class="headerlink" title="叁、布隆过滤器体验"></a>叁、布隆过滤器体验</h1><h2 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h2><blockquote><p>注意： key:布隆过滤器的名称，item : 添加的元素。</p></blockquote><ul><li><code>BF.ADD</code>：将元素添加到布隆过滤器中，如果该过滤器尚不存在，则创建该过滤器。格式：<code>BF.ADD &#123;key&#125; &#123;item&#125;</code>。</li><li><code>BF.MADD</code>: 将一个或多个元素添加到“布隆过滤器”中，并创建一个尚不存在的过滤器。该命令的操作方式BF.ADD与之相同，只不过它允许多个输入并返回多个值。格式：<code>BF.MADD &#123;key&#125; &#123;item&#125; [item ...]</code>。</li><li><code>**BF.EXISTS **</code>: 确定元素是否在布隆过滤器中存在。格式：<code>BF.EXISTS &#123;key&#125; &#123;item&#125;</code>。</li><li><code>BF.MEXISTS</code>： 确定一个或者多个元素是否在布隆过滤器中存在格式：<code>BF.MEXISTS &#123;key&#125; &#123;item&#125; [item ...]</code>。</li></ul><p>另外，<code>BF.RESERVE</code>命令需要单独介绍一下：</p><p>这个命令的格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BF.RESERVE &#123;key&#125; &#123;error_rate&#125; &#123;capacity&#125; [EXPANSION expansion] 。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面简单介绍一下每个参数的具体含义：</p><ul><li><code>key</code>：布隆过滤器的名称</li><li><code>error_rate</code>:误报的期望概率。这应该是介于0到1之间的十进制值。例如，对于期望的误报率0.1％（1000中为1），<code>error_rate</code>应该设置为0.001。该数字越接近零，则每个项目的内存消耗越大，并且每个操作的CPU使用率越高。</li><li><code>capacity</code>: 过滤器的容量。当实际存储的元素个数超过这个值之后，性能将开始下降。实际的降级将取决于超出限制的程度。随着过滤器元素数量呈指数增长，性能将线性下降。</li></ul><p>可选参数：</p><ul><li>expansion：如果创建了一个新的子过滤器，则其大小将是当前过滤器的大小乘以<code>expansion</code>。默认扩展值为2。这意味着每个后续子过滤器将是前一个子过滤器的两倍。</li></ul><h2 id="3-2-体验"><a href="#3-2-体验" class="headerlink" title="3.2 体验"></a>3.2 体验</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cc@Chirius:/mnt/c/Users/Chirius$ docker <span class="built_in">exec</span> -it redis-redisbloom bash</span><br><span class="line">root@9cc653f9411a:/data<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; BF.ADD mine zzl</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BF.ADD mine llo</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BF.ADD mine iio</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BF.EXISTS mine super</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BF.EXISTS mine iio</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BF.EXISTS mine zzl</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【<strong>后面的话</strong>】布隆过滤器主要用来解决<code>缓存穿透(大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层)</code>。一般MySQL 默认的最大连接数在 150 左右，这个可以通过<code>show variables like &#39;%max_connections%&#39;;</code>命令来查看。最大连接数一个还只是一个指标，cpu，内存，磁盘，网络等无力条件都是其运行指标，这些指标都会限制其并发能力！所以，一般<code>3000</code>个并发请求就能打死大部分数据库了。布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在与海量数据中。我们需要的就是判断<code>key</code>是否合法。具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，我会先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走具体的业务的流程。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">前面已经安装了WSL2 ，最近准备研究一下Redis的布隆过滤器，现在就先搭建一下环境。</summary>
    
    
    
    <category term="WSL" scheme="https://eelve.com/categories/WSL/"/>
    
    
    <category term="WSL，Redis" scheme="https://eelve.com/tags/WSL%EF%BC%8CRedis/"/>
    
  </entry>
  
  <entry>
    <title>WSL2初体验</title>
    <link href="https://eelve.com/posts/22fec071.html"/>
    <id>https://eelve.com/posts/22fec071.html</id>
    <published>2020-07-19T12:33:01.000Z</published>
    <updated>2021-04-19T06:44:39.155Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前面的话</strong>】前面已经对<a href="https://eelve.com/archives/hellowsl">WSL初体验</a> ，今天就将升级为WSL2，并且前面已经对<a href="https://eelve.com/archives/hellowsl">WSL初体验</a> ，今天就将升级为WSL2，并且在WSL2使用xrdp实现图形桌面。</p><hr><h1 id="壹、WSL升级为WSL2"><a href="#壹、WSL升级为WSL2" class="headerlink" title="壹、WSL升级为WSL2"></a>壹、WSL升级为WSL2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-version Ubuntu-18.04 2</span><br></pre></td></tr></table></figure><p>其中<code>Ubuntu-18.04</code>为你安装的WSL的发行版本，可以通过<code> wsl -l -v</code>来查看安装的WSL的发行版本详细信息。</p><p>另外我在升级的过程中遇到了<code>WSL 2 需要更新其内核组件</code>问题。解决方法也很简单，<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel">从微软下载WSL2 Linux内核的升级包</a>, 下载完成之后直接一路安装即可，之后WSL2就可以成功升级了。</p><p>最后如果想要将默认的WSL发行版设置成WSL2，可以使用下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><h1 id="贰、安装图形化桌面"><a href="#贰、安装图形化桌面" class="headerlink" title="贰、安装图形化桌面"></a>贰、安装图形化桌面</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>先更新,再安装<code>xfce4</code>和<code>xrdp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install -y xfce4 xrdp</span><br></pre></td></tr></table></figure><h2 id="2-2-修改xrdp默认端口"><a href="#2-2-修改xrdp默认端口" class="headerlink" title="2.2 修改xrdp默认端口"></a>2.2 修改xrdp默认端口</h2><p>由于<code>xrdp</code>安装好后默认配置使用的是和Windows远程桌面相同的<code>3389</code> 端口,为了防止和Windows系统远程桌面冲突,建议修改成其他的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/xrdp/xrdp.ini</span><br><span class="line"><span class="comment"># 修改下面这一行,将默认的3389改成其他端口即可</span></span><br><span class="line">port=13389</span><br></pre></td></tr></table></figure><h2 id="2-3-为当前用户指定登录session类型"><a href="#2-3-为当前用户指定登录session类型" class="headerlink" title="2.3 为当前用户指定登录session类型"></a>2.3 为当前用户指定登录session类型</h2><pre><code>注意这一步很重要,如果不设置的话会导致后面远程桌面连接上闪退</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.xsession</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入下面内容(就一行)</span></span><br><span class="line">xfce4-session</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.4 启动xrdp</span></span><br><span class="line"></span><br><span class="line">由于WSL2里面不能用`systemd`,所以需要手动启动</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ sudo /etc/init.d/xrdp start</span><br></pre></td></tr></table></figure><h1 id="叁、远程访问"><a href="#叁、远程访问" class="headerlink" title="叁、远程访问"></a>叁、远程访问</h1><p>在Windows系统中运行mstsc命令打开远程桌面连接,地址输入localhost:13389</p><pre><code>注意这里的端口号应当与上面修改配置中一致</code></pre><p><img src="https://image.eelve.com/eblog/2020071901-6f2b76d2c58f4213950f820ef05f85d8.png" alt="2020071901"><br><img src="https://image.eelve.com/eblog/2020071902-c42b474dc5374bda9f576619a491b1ed.png" alt="2020071902"></p><p>输入linux系统的用户名和密码，就可以登陆成功了</p><p><img src="https://image.eelve.com/eblog/2020071903-b7632286a2c648bdac1d0a92585612a3.png" alt="2020071903"></p><p>【<strong>后面的话</strong>】如果在日常使用中遇到WSL异常，一般为网络端口占用问题导致，一般可以通过重置网络修复，使用管理员身份运行cmd，重置端口，然后重启：<code>netsh winsock reset</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参考的对象类型不支持尝试的操作。</span><br><span class="line"></span><br><span class="line">[已退出进程，代码为 4294967295]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.19041.388]</span><br><span class="line">(c) 2020 Microsoft Corporation. 保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;netsh winsock reset</span><br><span class="line"></span><br><span class="line">成功地重置 Winsock 目录。</span><br><span class="line">你必须重新启动计算机才能完成重置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;</span><br></pre></td></tr></table></figure><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">前面已经对WSL初体验 ，今天就将升级为WSL2，并且前面已经对WSL有了初体验 ，今天就将升级为WSL2，并且在WSL2使用xrdp实现图形桌面。</summary>
    
    
    
    <category term="WSL" scheme="https://eelve.com/categories/WSL/"/>
    
    
    <category term="WSL，Windows" scheme="https://eelve.com/tags/WSL%EF%BC%8CWindows/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat中URI不支持特殊字符解决方案</title>
    <link href="https://eelve.com/posts/98316a6b.html"/>
    <id>https://eelve.com/posts/98316a6b.html</id>
    <published>2020-06-30T04:17:57.000Z</published>
    <updated>2021-04-19T06:44:39.140Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前情提要</strong>】最近开发过程中遇到一个<code>Tomcat</code>中<code>IllegalArgumentException</code>的报错，所以在这里记录一下。</p><h1 id="壹、错误现象"><a href="#壹、错误现象" class="headerlink" title="壹、错误现象"></a>壹、错误现象</h1><p>在用Get请求是当URL中包含特殊字符，比如：<code>&lt;</code>、<code>&gt;</code>、<code>(</code>、<code>)</code>、<code>&#123;</code>、<code>&#125;</code>、<code>|</code>等时，Tomcat会报出以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986</span><br><span class="line">    at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:476) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:687) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_161]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_161]</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748) [na:1.8.0_161]</span><br></pre></td></tr></table></figure><h1 id="贰、故障原因"><a href="#贰、故障原因" class="headerlink" title="贰、故障原因"></a>贰、故障原因</h1><p>因为Tomcat严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ])。传入的参数中有”{“不在RFC3986中的保留字段中，所以会报参数异常错。而且这个错误你在应用中处理不到，因为根本都还没有进入应用，在Tomcat中就已经报错了，而且就连你在Tomcat中配置错误页面也没有用。</p><h1 id="叁、解决方案"><a href="#叁、解决方案" class="headerlink" title="叁、解决方案"></a>叁、解决方案</h1><h2 id="3-1、定义requestTargetAllow属性"><a href="#3-1、定义requestTargetAllow属性" class="headerlink" title="3.1、定义requestTargetAllow属性"></a>3.1、定义requestTargetAllow属性</h2><p>Tomcat 7.0.76, 8.0.42, 8.5.12 这些版本之后可以定义requestTargetAllow 属性来允许禁止的字符。在tomcat的 catalina.properties文件中添加这一句：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">tomcat.util.http.parser.HttpParser.requestTargetAllow</span>=<span class="string">|&#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-2、修复server-xml配置文件"><a href="#3-2、修复server-xml配置文件" class="headerlink" title="3.2、修复server.xml配置文件"></a>3.2、修复server.xml配置文件</h2><p>如果某些版本的Tomcat已经参照<code>3.1</code>中的方法修改之后，还是不生效的话。从官网的文档中我们可以查看到如下提示：tomcat.util.http.parser.HttpParser. requestTargetAllow(This system property is deprecated. Use the relaxedPathChars and relaxedQueryChars attributes of the Connector instead)</p><p>所有我们在Tomcat配置文件中：$CATALINA_HOME/conf/server.xml添加<code>relaxedQueryChars</code>属性添加到Connector元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">relaxedQueryChars</span>=<span class="string">&quot;[]|&#123;&#125;^<span class="symbol">&amp;#x5c;</span><span class="symbol">&amp;#x60;</span><span class="symbol">&amp;quot;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;gt;</span>&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3、Springboot修改方法"><a href="#3-3、Springboot修改方法" class="headerlink" title="3.3、Springboot修改方法"></a>3.3、Springboot修改方法</h2><p>在SpringBootApplication的的main方法中增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;tomcat.util.http.parser.HttpParser.requestTargetAllow&quot;</span>,<span class="string">&quot;|&#123;&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>另外在Springboot 2.0 之后的版本，可以自定义<code>WebServerFactoryCustomizer</code>，添加特殊字符的支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2019/2/18 17:41.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ethan</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * java.lang.IllegalArgumentException:</span></span><br><span class="line"><span class="comment"> *  Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortalTomcatWebServerCustomizer</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">TomcatServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(TomcatServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">        factory.addConnectorCustomizers(connector -&gt; connector.setAttribute(<span class="string">&quot;relaxedQueryChars&quot;</span>, <span class="string">&quot;&#123;&#125;[]|&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">最近开发过程中遇到一个Tomcat中IllegalArgumentException的报错，所以在这里记录一下。</summary>
    
    
    
    <category term="java" scheme="https://eelve.com/categories/java/"/>
    
    
    <category term="java" scheme="https://eelve.com/tags/java/"/>
    
    <category term="springboot" scheme="https://eelve.com/tags/springboot/"/>
    
    <category term="tomcat" scheme="https://eelve.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>双仓库同步代码</title>
    <link href="https://eelve.com/posts/ce08b5ef.html"/>
    <id>https://eelve.com/posts/ce08b5ef.html</id>
    <published>2020-04-30T07:36:38.000Z</published>
    <updated>2021-04-19T06:44:39.223Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前情提要</strong>】在最近的工作中，涉及到把一份代码同时上传到两个git仓库，下面是简单的记录。</p><hr><h1 id="壹、准备工作"><a href="#壹、准备工作" class="headerlink" title="壹、准备工作"></a>壹、准备工作</h1><p>分别在Github和Gitee平台上配置SSH公钥，便于使用git协议拉取和提交推送代码的时候需要输入密码。 </p><h1 id="贰、拉取代码"><a href="#贰、拉取代码" class="headerlink" title="贰、拉取代码"></a>贰、拉取代码</h1><p>我这里以我的<a href="git@github.com:eelve/fly.git">git@github.com:eelve/fly.git</a>仓库为示例来说明。使用工具或者命令拉取<a href="git@github.com:eelve/fly.git">git@github.com:eelve/fly.git</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:eelve/fly.git</span><br></pre></td></tr></table></figure><h1 id="叁、修改配置文件"><a href="#叁、修改配置文件" class="headerlink" title="叁、修改配置文件"></a>叁、修改配置文件</h1><p>进入拉取的仓库文件夹下，找到<code>.git</code>的隐藏文件夹，打开<code>config</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = <span class="literal">false</span></span><br><span class="line">bare = <span class="literal">false</span></span><br><span class="line">logallrefupdates = <span class="literal">true</span></span><br><span class="line">symlinks = <span class="literal">false</span></span><br><span class="line">ignorecase = <span class="literal">true</span></span><br><span class="line">[submodule]</span><br><span class="line">active = .</span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">url = git@github.com:eelve/fly.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">&quot;master&quot;</span>]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改成如下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = <span class="literal">false</span></span><br><span class="line">bare = <span class="literal">false</span></span><br><span class="line">logallrefupdates = <span class="literal">true</span></span><br><span class="line">symlinks = <span class="literal">false</span></span><br><span class="line">ignorecase = <span class="literal">true</span></span><br><span class="line">[submodule]</span><br><span class="line">active = .</span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">url = git@github.com:eelve/fly.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">url = git@gitee.com:eelve/fly.git</span><br><span class="line">[branch <span class="string">&quot;master&quot;</span>]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br><span class="line">[remote <span class="string">&quot;gitee&quot;</span>]</span><br><span class="line">url = git@gitee.com:eelve/fly.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/github/*</span><br></pre></td></tr></table></figure><p>添加一个remote远程仓库，并添加远程仓库地址，修改的部分如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = git@gitee.com:eelve/fly.git</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote <span class="string">&quot;gitee&quot;</span>]</span><br><span class="line">url = git@gitee.com:eelve/fly.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/github/*</span><br></pre></td></tr></table></figure><h1 id="肆、推送测试"><a href="#肆、推送测试" class="headerlink" title="肆、推送测试"></a>肆、推送测试</h1><p>使用其他工具或者执行<code>git push</code>命令推送，我这里没有其他分支我这里就省略了分支名称等等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>然后查看gitee上面的仓库，可以看到，就已经成功推送上去了。</p><p><img src="https://image.eelve.com/eblog/202004301-c3fd0726d60e4564baf69f2f541e53e3.png" alt="202004301"><br><img src="https://image.eelve.com/eblog/202004302-b29f20125242462faf4dee47d0b7d8a0.png" alt="202004302"></p><hr><p>【<strong>后面的话</strong>】完成上述工作之后，就能够做到一次推送，两个仓库都有代码了。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">在最近的工作中，涉及到把一份代码同时上传到两个git仓库，下面是简单的记录。</summary>
    
    
    
    <category term="git" scheme="https://eelve.com/categories/git/"/>
    
    
    <category term="git" scheme="https://eelve.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot打可执行war包</title>
    <link href="https://eelve.com/posts/4f6f7726.html"/>
    <id>https://eelve.com/posts/4f6f7726.html</id>
    <published>2020-04-29T06:23:21.000Z</published>
    <updated>2021-04-19T06:44:39.199Z</updated>
    
    <content type="html"><![CDATA[<p>【<strong>前情提要</strong>】最近做了一个Springboot项目，但是最后需要打成WAR包在容器中部署，下面就简单记录一下。</p><hr><h1 id="壹、修改pom文件"><a href="#壹、修改pom文件" class="headerlink" title="壹、修改pom文件"></a>壹、修改pom文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.eelve<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-war<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌入式tomcat相关jar将被放入到WEB-INF\lib-provided下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="贰、修改启动类"><a href="#贰、修改启动类" class="headerlink" title="贰、修改启动类"></a>贰、修改启动类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eelve.springboot.war;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootWarApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> application.sources(SpringbootWarApplication.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringbootWarApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>【<strong>后面的话</strong>】使用maven打包(clean package)，生成的war包可以用于传统的部署方式（外部tomcat），也可以直接使用java -jar 的方式运行。</p><hr><p><img src="https://image.eelve.com/eblog/eblog-b269767ff45b4e01a1c380e38898c1c0.png" alt="薏米笔记"></p>]]></content>
    
    
    <summary type="html">最近做了一个Springboot项目，但是最后需要打成WAR包在容器中部署，下面就简单记录一下。</summary>
    
    
    
    <category term="springboot" scheme="https://eelve.com/categories/springboot/"/>
    
    
    <category term="java" scheme="https://eelve.com/tags/java/"/>
    
    <category term="springboot" scheme="https://eelve.com/tags/springboot/"/>
    
    <category term="jar" scheme="https://eelve.com/tags/jar/"/>
    
  </entry>
  
</feed>
